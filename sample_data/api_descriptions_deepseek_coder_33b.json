{"file": "cloned/gotemp/product/server/handler.go", "endpoints": {"api_summary": "This file defines several REST API endpoints for a product service. The endpoints allow for the creation, retrieval, update, and deletion of product data. The endpoints are accessible via HTTP methods such as GET, POST, and DELETE. The URL paths include '/product', '/product/<built-in function id>', and '/product/search'. The service is designed to interact with a product database and perform CRUD operations on the data.", "methods": ["GET", "POST", "DELETE"], "paths": ["/product", "/product/<built-in function id>", "/product/search"]}}
{"file": "cloned/gotemp/product/proto/product.pb.micro.go", "endpoints": {"api_summary": "This file defines a REST API for managing products. It provides endpoints for creating, reading, updating, and deleting products. It also includes hooks for validation and after functions. The API is used to manage products in a system.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/ProductSrv/GetProductById", "/ProductSrv/GetProducts", "/ProductSrv/CreateProduct", "/ProductSrv/UpdateProduct", "/ProductSrv/DeleteProduct", "/ProductSrv/BeforeCreateProduct", "/ProductSrv/BeforeUpdateProduct", "/ProductSrv/BeforeDeleteProduct", "/ProductSrv/AfterCreateProduct", "/ProductSrv/AfterUpdateProduct", "/ProductSrv/AfterDeleteProduct"]}}
{"file": "cloned/gotemp/user/server/userServer.go", "endpoints": {"api_summary": "This microservice is a user management system. It uses gRPC for communication and manages user data in a PostgreSQL database.", "methods": [], "paths": []}}
{"file": "cloned/gotemp/user/proto/user.pb.micro.go", "endpoints": {"api_summary": "This file defines a REST API for user management. It includes endpoints for creating, reading, updating, and deleting user data. It also includes endpoints for user authentication and token validation.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/UserSrv/GetUserById", "/UserSrv/GetUsers", "/UserSrv/GetUsersByEmail", "/UserSrv/CreateUser", "/UserSrv/UpdateUser", "/UserSrv/DeleteUser", "/UserSrv/BeforeCreateUser", "/UserSrv/BeforeUpdateUser", "/UserSrv/BeforeDeleteUser", "/UserSrv/AfterCreateUser", "/UserSrv/AfterUpdateUser", "/UserSrv/AfterDeleteUser", "/UserSrv/Auth", "/UserSrv/ValidateToken"]}}
{"file": "cloned/gotemp/promotion/server/handler.go", "endpoints": {"api_summary": "This file defines a REST API for managing promotions. It provides endpoints for creating, updating, deleting, and retrieving promotions. The API also includes endpoints for validating promotions before and after creation, update, and deletion.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/promotion", "/promotion/<built-in function id>", "/promotion/search"]}}
{"file": "cloned/gotemp/promotion/server/promotionServer.go", "endpoints": {"api_summary": "This Go program uses the Micro framework for service discovery and communication. It connects to a PostgreSQL database and uses a broker for inter-service communication.", "methods": [], "paths": []}}
{"file": "cloned/gotemp/promotion/proto/promotion.pb.micro.go", "endpoints": {"api_summary": "This file defines a REST API for managing promotions. It provides endpoints for creating, reading, updating, and deleting promotions. It also includes hooks for validation and after functions. The API is used to manage promotions in a system.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/promotion/GetPromotionById", "/promotion/GetPromotions", "/promotion/CreatePromotion", "/promotion/UpdatePromotion", "/promotion/DeletePromotion", "/promotion/BeforeCreatePromotion", "/promotion/BeforeUpdatePromotion", "/promotion/BeforeDeletePromotion", "/promotion/AfterCreatePromotion", "/promotion/AfterUpdatePromotion", "/promotion/AfterDeletePromotion"]}}
{"file": "cloned/gotemp/customer/proto/customer.pb.micro.go", "endpoints": {"api_summary": "This file defines a REST API for a customer service. It provides endpoints for creating, reading, updating, and deleting customer data. It also includes hooks for validation and after-function execution. The API is built using the microservices framework.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/CustomerSrv/GetCustomerById", "/CustomerSrv/GetCustomers", "/CustomerSrv/CreateCustomer", "/CustomerSrv/UpdateCustomer", "/CustomerSrv/DeleteCustomer", "/CustomerSrv/BeforeCreateCustomer", "/CustomerSrv/BeforeUpdateCustomer", "/CustomerSrv/BeforeDeleteCustomer", "/CustomerSrv/AfterCreateCustomer", "/CustomerSrv/AfterUpdateCustomer", "/CustomerSrv/AfterDeleteCustomer"]}}
{"file": "cloned/bugsnag-js/test/react-native/features/fixtures/scenario-launcher/android/src/newarch/java/com/bugsnag/reactnative/test/BugsnagTestInterfacePackage.java", "endpoints": {"api_summary": "This file defines a custom module for the React Native framework. It's not directly related to REST API endpoints.", "methods": [], "paths": []}}
{"file": "cloned/bugsnag-js/test/node/features/fixtures/restify/scenarios/app-disabled.js", "endpoints": {"api_summary": "This API provides several endpoints for testing error handling in a Node.js application. It includes synchronous and asynchronous errors, as well as errors that are thrown and rejected. It also includes endpoints for returning specific error types.", "methods": ["GET"], "paths": ["/", "/sync", "/async", "/next", "/rejection-sync", "/rejection-async", "/throw-non-error", "/not-found", "/internal", "/handled"]}}
{"file": "cloned/bugsnag-js/test/node/features/fixtures/restify/scenarios/app.js", "endpoints": {"api_summary": "This API provides several endpoints for testing error handling in a Node.js application using the Restify framework. It includes synchronous and asynchronous error throwing, rejection handling, and more.", "methods": ["GET", "POST"], "paths": ["/", "/sync/:message", "/async", "/next", "/rejection-sync", "/rejection-async", "/unhandled-rejection-async-callback", "/throw-non-error", "/not-found", "/internal", "/handled", "/bodytest"]}}
{"file": "cloned/bugsnag-js/test/node/features/fixtures/hono/scenarios/app-disabled.js", "endpoints": {"api_summary": "This file defines several REST API endpoints using the Hono framework. The endpoints are used for error tracking and debugging purposes. They include endpoints for synchronous and asynchronous errors, as well as for rejections and non-error throws.", "methods": ["GET"], "paths": ["/handled", "/sync", "/async", "/rejection-sync", "/rejection-async", "/throw-non-error"]}}
{"file": "cloned/bugsnag-js/test/node/features/fixtures/koa/scenarios/app.js", "endpoints": {"api_summary": "This server is setup to handle errors and log them using Bugsnag. It has several endpoints for testing error handling and logging. The endpoints are used to simulate different types of errors and log them using Bugsnag.", "methods": ["GET", "POST"], "paths": ["/", "/err", "/promise-rejection", "/ctx-throw", "/ctx-throw-400", "/throw-non-error", "/handled", "/bodytest", "/throw-async-callback", "/unhandled-rejection-async-callback", "/breadcrumbs_a", "/breadcrumbs_b"]}}
{"file": "cloned/bugsnag-js/test/node/features/fixtures/express/scenarios/app.js", "endpoints": {"api_summary": "This application defines several REST API endpoints for testing and demonstrating error tracking and logging capabilities. It includes endpoints for synchronous and asynchronous error throwing, rejection handling, and feature flag management. It also includes endpoints for testing context loss and breadcrumb tracking.", "methods": ["GET", "POST"], "paths": ["/", "/sync/:message", "/async", "/next", "/rejection-sync", "/rejection-async", "/unhandled-rejection-async-callback", "/string-as-error", "/throw-non-error", "/oversized", "/handled", "/bodytest", "/features/unhandled", "/features/handled", "/breadcrumbs_a", "/breadcrumbs_b", "/console_breadcrumbs_a", "/console_breadcrumbs_b", "/context-loss"]}}
{"file": "cloned/bugsnag-js/test/aws-lambda/features/fixtures/hono-app/app/app.js", "endpoints": {"api_summary": "This API provides several endpoints for testing error handling and reporting. It includes endpoints for synchronous and asynchronous errors, as well as a non-error throw. The endpoints are used to test the error handling and reporting capabilities of the system.", "methods": ["GET"], "paths": ["/", "/handled", "/unhandled", "/unhandled-async", "/promise-rejection", "/throw-non-error"]}}
{"file": "cloned/bugsnag-js/test/aws-lambda/features/fixtures/serverless-express-app/app/app.js", "endpoints": {"api_summary": "This application provides several REST API endpoints for testing error handling. The endpoints include a basic '/' endpoint, '/handled' for manually notifying Bugsnag, '/unhandled' for throwing an unhandled error, '/unhandled-async' for throwing an error asynchronously, '/unhandled-next' for passing an error to the next middleware function, and '/promise-rejection' for rejecting a Promise.", "methods": ["GET"], "paths": ["/", "/handled", "/unhandled", "/unhandled-async", "/unhandled-next", "/promise-rejection"]}}
{"file": "cloned/bugsnag-js/test/electron/features/support/server.js", "endpoints": {"api_summary": "This file defines a mock server that simulates a REST API. It provides endpoints for uploading minidumps, sending events, and sending sessions. It also has a success endpoint for testing purposes.", "methods": ["GET", "POST"], "paths": ["/minidump", "/events", "/sessions", "/success"]}}
{"file": "cloned/bugsnag-js/examples/js/restify/app.js", "endpoints": {"api_summary": "This API provides several endpoints for different functionalities. The '/' endpoint serves a static HTML page, while the '/handled', '/unhandled', '/add-info', and '/crash' endpoints are used for error handling and notification purposes. The '/static/*' endpoint is used to serve static files.", "methods": ["GET", "POST"], "paths": ["/", "/handled", "/unhandled", "/add-info", "/crash", "/static/*"]}}
{"file": "cloned/bugsnag-js/examples/js/koa/app.js", "endpoints": {"api_summary": "This application is a simple web server that serves a single HTML page and provides several endpoints for testing error handling and reporting capabilities. It uses the Bugsnag service for error tracking and monitoring.", "methods": ["GET", "POST"], "paths": ["/", "/crash", "/unhandled", "/handled", "/add-info"]}}
{"file": "cloned/bugsnag-js/examples/js/express/app.js", "endpoints": {"api_summary": "This application is a simple web server that serves static files and provides several endpoints for testing error handling and reporting. It uses Bugsnag for error tracking.", "methods": ["GET", "POST"], "paths": ["/", "/crash", "/unhandled", "/handled", "/add-info"]}}
{"file": "cloned/bugsnag-js/packages/core/event.js", "endpoints": {"api_summary": "This module defines a class named Event. It is used to create and manage events in a larger system. It does not explicitly define any REST API endpoints.", "methods": [], "paths": []}}
{"file": "cloned/bugsnag-js/packages/plugin-node-surrounding-code/test/fixtures/04.js", "endpoints": {"api_summary": "The Bugsnag client library is used to report errors, track sessions, and manage other aspects of the application. It can be configured to send data to a server using HTTP requests.", "methods": ["GET", "POST"], "paths": ["/notify", "/sessions"]}}
{"file": "cloned/bugsnag-js/packages/plugin-koa/test/koa.test.ts", "endpoints": {"api_summary": "This file defines a set of REST API endpoints for a Koa application. It includes endpoints for handling requests and errors. The endpoints are used to manage the lifecycle of a Bugsnag client, including starting, pausing, and resuming sessions. It also handles the recording of metadata from the request and notifying Bugsnag of any errors that occur.", "methods": ["GET", "POST"], "paths": ["/users", "/users/<built-in function id>"]}}
{"file": "cloned/hyrax/vendor/assets/javascripts/morris/morris.min.js", "endpoints": {"api_summary": "This file is a JavaScript file that defines a number of classes for creating different types of charts using the Morris.js library. It includes classes for creating line, bar, area, donut, and grid charts. The file also includes a class for handling mouse events and grid clicks, and a class for handling hover events. It also includes a class for labeling the x-axis and y-axis, and a class for generating paths for the line and bar charts.", "methods": ["GET", "POST"], "paths": ["/morris.js", "/morris.js/line", "/morris.js/bar", "/morris.js/area", "/morris.js/donut", "/morris.js/grid", "/morris.js/hover", "/morris.js/gridclick", "/morris.js/xaxis", "/morris.js/yaxis", "/morris.js/path"]}}
{"file": "cloned/hyrax/app/assets/javascripts/hyrax/analytics_events.js", "endpoints": {"api_summary": "This file defines several functions and methods related to tracking and analytics. It includes functions for setting up tracking, tracking page views, and tracking analytics events. It also includes a click event handler for a file download button.", "methods": ["GET", "POST"], "paths": ["/setupTracking", "/trackPageView", "/trackAnalyticsEvents", "/file_download"]}}
{"file": "cloned/run-aspnetcore-microservices/src/WebApps/Shopping.Web/wwwroot/lib/bootstrap/dist/js/bootstrap.esm.js", "endpoints": {"api_summary": "This file contains several components of the Bootstrap library, which are used to build responsive, mobile-first projects on the web. It includes components like Alert, Button, Carousel, Collapse, Dropdown, Modal, Offcanvas, Popover, ScrollSpy, Tab, and Toast. These components are used to create interactive elements and user interfaces.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/bootstrap/alert", "/bootstrap/button", "/bootstrap/carousel", "/bootstrap/collapse", "/bootstrap/dropdown", "/bootstrap/modal", "/bootstrap/offcanvas", "/bootstrap/popover", "/bootstrap/scrollspy", "/bootstrap/tab", "/bootstrap/toast"]}}
{"file": "cloned/run-aspnetcore-microservices/src/WebApps/Shopping.Web/wwwroot/lib/bootstrap/dist/js/bootstrap.esm.min.js", "endpoints": {"api_summary": "This file is a part of the Bootstrap library, which is a popular open-source toolkit for developing with HTML, CSS, and JS. It provides a collection of reusable components for responsive web design. It does not explicitly define any REST API endpoints.", "methods": [], "paths": []}}
{"file": "cloned/run-aspnetcore-microservices/src/WebApps/Shopping.Web/wwwroot/lib/bootstrap/dist/js/bootstrap.min.js", "endpoints": {"api_summary": "This file is a part of the Bootstrap library, which is a popular open-source toolkit for developing with HTML, CSS, and JS. It provides a collection of reusable components for responsive web design. It does not explicitly define any REST API endpoints.", "methods": [], "paths": []}}
{"file": "cloned/wazo-auth/integration_tests/assets/saml/webapp/server.py", "endpoints": {"api_summary": "This Flask application provides two endpoints. The first endpoint is a GET request to the root path ('/') which renders an 'index.html' template. The second endpoint is a GET request to '/postacs.html' which also renders a 'postacs.html' template.", "methods": ["GET"], "paths": ["/", "/postacs.html"]}}
{"file": "cloned/wazo-auth/integration_tests/assets/external_auth/oauth2_synchronization_service/main.py", "endpoints": {"api_summary": "This file defines a REST API with three endpoints. The first endpoint is a WebSocket endpoint that listens for events related to a specific state. The second endpoint is an authorization endpoint that sends a code to a WebSocket connection associated with a specific state. The third endpoint is a token endpoint that provides a Microsoft token.", "methods": ["GET", "POST"], "paths": ["/<service>/authorize/<state>", "/<service>/token", "/ws/<state>"]}}
{"file": "cloned/wazo-auth/integration_tests/assets/external_auth/service_plugin/external_auth_service_plugin/plugin.py", "endpoints": {"api_summary": "This file defines two REST API endpoints for managing external authentication services. The endpoints are used to create, read, update, and delete external authentication services for users. The endpoints are protected by access control lists (ACLs) that ensure that only authorized users can access them.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users/<uuid:user_uuid>/external/foo", "/users/<uuid:user_uuid>/external/bar"]}}
{"file": "cloned/wazo-auth/integration_tests/suite/test_sessions.py", "endpoints": {"api_summary": "This file contains a set of tests for a REST API. It defines several endpoints for interacting with the API, including endpoints for listing, creating, and deleting sessions. It also includes endpoints for handling generic tokens and user tokens.", "methods": ["GET", "POST", "DELETE"], "paths": ["/sessions", "/sessions/<built-in function id>", "/tokens"]}}
{"file": "cloned/wazo-auth/integration_tests/suite/test_group_policy.py", "endpoints": {"api_summary": "This file contains tests for the API endpoints related to groups and policies. It tests the creation, deletion, and listing of policies for groups.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/groups/<group_uuid>/policies", "/groups/<group_uuid>/policies/<policy_uuid>", "/policies/new", "/groups/new", "/policies/<policy_uuid>", "/token/new", "/users/<user_uuid>/policies", "/token/set", "/users/<user_uuid>/policies/<policy_uuid>", "/groups/<group_uuid>/users", "/groups/<group_uuid>/users/<user_uuid>"]}}
{"file": "cloned/wazo-auth/integration_tests/suite/test_external_microsoft.py", "endpoints": {"api_summary": "This file contains tests for a Microsoft external authentication service. It defines several endpoints for creating, getting, and deleting external authentication data for a Microsoft service. It also includes a simulation of user authentication.", "methods": ["GET", "POST", "DELETE"], "paths": ["/external/microsoft/<built-in function id>", "/external/microsoft/<built-in function id>/authorize/<state>"]}}
{"file": "cloned/wazo-auth/integration_tests/suite/test_policies.py", "endpoints": {"api_summary": "This file defines a set of REST API endpoints for managing policies. Policies are used to define access control lists (ACLs) that determine what actions a user or group can perform. The API includes endpoints for creating, retrieving, updating, and deleting policies, as well as for adding and removing access from policies.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/0.1/policies", "/0.1/policies/<built-in function id>", "/0.1/policies/<built-in function slug>", "/0.1/policies/<built-in function id>/access", "/0.1/policies/<built-in function slug>/access"]}}
{"file": "cloned/wazo-auth/integration_tests/suite/test_user_group.py", "endpoints": {"api_summary": "This file defines several REST API endpoints for managing user groups and their associated users. It includes endpoints for creating, reading, updating, and deleting user groups and their associated users. It also includes endpoints for sorting and paginating these groups and users.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/groups/<group_uuid>/users", "/users/<user_uuid>/groups", "/groups/<group_uuid>/users/<user_uuid>", "/users/<user_uuid>/groups/<group_uuid>"]}}
{"file": "cloned/wazo-auth/integration_tests/suite/test_db_token.py", "endpoints": {"api_summary": "The provided Python code does not explicitly define any REST API endpoints. It seems to be a set of unit tests for a token-based authentication system. The tests are using a decorator-based approach to set up test data and perform assertions.", "methods": [], "paths": []}}
{"file": "cloned/wazo-auth/integration_tests/suite/test_external.py", "endpoints": {"api_summary": "This file defines several REST API endpoints for an external authentication system. It includes endpoints for creating, deleting, getting, listing, and updating external authentication data. It also includes endpoints for managing external authentication configurations. The endpoints are used to manage user authentication via external services.", "methods": ["GET", "POST", "DELETE"], "paths": ["/external/create/<auth_type>/<user_uuid>", "/external/delete/<auth_type>/<user_uuid>", "/external/get/<auth_type>/<user_uuid>", "/external/list/<user_uuid>", "/external/update/<auth_type>/<user_uuid>", "/external/config/create/<auth_type>", "/external/config/delete/<auth_type>", "/external/config/get/<auth_type>", "/external/config/update/<auth_type>"]}}
{"file": "cloned/wazo-auth/integration_tests/suite/test_emails.py", "endpoints": {"api_summary": "This file contains a set of unit tests for a REST API. The tests are checking the functionality of the API endpoints related to user emails.", "methods": ["GET", "POST"], "paths": ["/users", "/users/<built-in function id>"]}}
{"file": "cloned/wazo-auth/integration_tests/suite/test_token.py", "endpoints": {"api_summary": "This file contains a set of tests for the Wazo Auth service. It defines several endpoints for testing various aspects of the service, including token creation, deletion, listing, and validation. It also includes tests for user authentication and authorization, as well as for handling of refresh tokens.", "methods": ["GET", "POST"], "paths": ["/token/new", "/token/delete", "/token/list", "/refresh_tokens/list", "/token/list/from_user", "/token/delete/from_user", "/token/validate"]}}
{"file": "cloned/wazo-auth/integration_tests/suite/test_http_interface.py", "endpoints": {"api_summary": "This file contains a set of tests for a REST API. It tests various endpoints of the API, including token creation, token validation, token revocation, and more. It also tests the behavior of the API when dealing with different types of requests and different types of users.", "methods": ["GET", "POST", "HEAD", "DELETE"], "paths": ["/0.1/token", "/0.1/token/<token>", "/0.1/token/<token>/check", "/0.1/token/<token>/check_scopes", "/0.1/backends"]}}
{"file": "cloned/wazo-auth/integration_tests/suite/test_groups.py", "endpoints": {"api_summary": "This file defines a set of tests for a REST API that manages groups. It includes endpoints for creating, reading, updating, and deleting groups, as well as for listing groups. It also includes tests for filtering, sorting, and searching groups.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/groups/<built-in function id>", "/groups/<built-in function id>/policies", "/groups/<built-in function id>/policies/<built-in function id>"]}}
{"file": "cloned/wazo-auth/integration_tests/suite/helpers/fixtures/http.py", "endpoints": {"api_summary": "This file defines several REST API endpoints for managing users, tenants, tokens, sessions, groups, policies, LDAP configurations, and SAML configurations. It also includes decorators for managing these resources, such as bulk creation of tenants, user registration, and session management. The endpoints are used to manage the system's resources and configurations.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users", "/tenants", "/tokens", "/sessions", "/groups", "/policies", "/ldap_config", "/saml_config"]}}
{"file": "cloned/wazo-auth/wazo_auth/controller.py", "endpoints": {"api_summary": "This file defines the main controller for the Wazo Auth service. It includes endpoints for authentication, user management, group management, policy management, and more. It also handles the loading of plugins for external authentication, HTTP, and metadata. It also handles the loading of IDP plugins for native and refresh token authentication.", "methods": ["GET", "POST"], "paths": ["/users", "/groups", "/policies", "/authentication", "/external_auth", "/http", "/metadata", "/idp"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/external_auth/microsoft/plugin.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for Microsoft authentication. It allows users to authenticate using their Microsoft account.", "methods": ["GET", "POST"], "paths": ["/users/<uuid:user_uuid>/external/microsoft"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/external_auth/google/http.py", "endpoints": {"api_summary": "This API endpoint provides methods for managing Google authentication for a specific user. It allows for creating, reading, and deleting Google authentication for a user.", "methods": ["POST", "GET", "DELETE"], "paths": ["/users/<built-in function id>"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/external_auth/google/plugin.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for Google authentication. It allows users to authenticate with their Google account. The endpoint is accessible at '/users/<uuid:user_uuid>/external/google'.", "methods": ["GET", "POST"], "paths": ["/users/<uuid:user_uuid>/external/google"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/external_auth/mobile/http.py", "endpoints": {"api_summary": "This file defines three REST API endpoints for mobile authentication. The endpoints allow for the creation, reading, and deletion of mobile authentication tokens for a specific user. The endpoints also provide a way to retrieve the sender ID for Firebase Cloud Messaging (FCM).", "methods": ["GET", "POST", "DELETE"], "paths": ["/users/{user_uuid}/external/mobile/sender_id", "/users/{user_uuid}/external/mobile"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/external_auth/mobile/plugin.py", "endpoints": {"api_summary": "This file defines two REST API endpoints for managing mobile authentication for users. The first endpoint allows for the management of mobile authentication for a specific user, while the second endpoint manages the sender ID for mobile authentication.", "methods": ["GET", "POST"], "paths": ["/users/<uuid:user_uuid>/external/mobile", "/users/<uuid:user_uuid>/external/mobile/sender_id"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/ldap_config/http.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for managing LDAP configurations. It provides GET, PUT, and DELETE methods for managing LDAP configurations. The GET method retrieves the LDAP configuration for a specific tenant. The PUT method creates or updates the LDAP configuration for a specific tenant. The DELETE method deletes the LDAP configuration for a specific tenant.", "methods": ["GET", "PUT", "DELETE"], "paths": ["/ldap_config"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/ldap_config/plugin.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for managing LDAP configurations. It provides a POST method to create or update LDAP configurations.", "methods": ["POST"], "paths": ["/backends/ldap"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/user_session/http.py", "endpoints": {"api_summary": "This file defines two REST API endpoints for managing user sessions. The first endpoint allows for the retrieval of a list of sessions for a specific user. The second endpoint allows for the deletion of a specific session for a specific user.", "methods": ["GET", "DELETE"], "paths": ["/users/{user_uuid}/sessions", "/users/{user_uuid}/sessions/{session_uuid}"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/user_session/plugin.py", "endpoints": {"api_summary": "This file defines two REST API endpoints for managing user sessions. The first endpoint allows for the retrieval of all sessions for a specific user, while the second endpoint allows for the retrieval of a specific session for a specific user.", "methods": ["GET"], "paths": ["/users/<uuid:user_uuid>/sessions", "/users/<uuid:user_uuid>/sessions/<uuid:session_uuid>"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/user_policy/http.py", "endpoints": {"api_summary": "This file defines several REST API endpoints for managing user policies. It includes endpoints for listing, adding, and removing policies for a specific user. The endpoints are secured with ACLs (Access Control Lists) which define the required permissions to access the endpoints.", "methods": ["GET", "PUT", "DELETE"], "paths": ["/users/{user_uuid}/policies", "/users/{user_uuid}/policies/{policy_uuid}", "/users/{user_uuid}/policies/{policy_slug}"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/user_policy/plugin.py", "endpoints": {"api_summary": "This file defines three REST API endpoints for managing user policies. These endpoints allow for the creation, retrieval, update, and deletion of policies associated with a specific user. The endpoints are designed to be flexible and allow for both UUID and slug identifiers for policies.", "methods": ["GET", "POST"], "paths": ["/users/<uuid:user_uuid>/policies/<uuid:policy_uuid>", "/users/<uuid:user_uuid>/policies/<string:policy_slug>", "/users/<uuid:user_uuid>/policies"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/policies/http.py", "endpoints": {"api_summary": "This file defines a set of REST API endpoints for managing policies. Policies are used to define access control rules for users and services. The endpoints allow for the creation, reading, updating, and deleting of policies. They also allow for the management of access rules within policies.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/policies", "/policies/{policy_uuid}", "/policies/{policy_slug}", "/policies/{policy_uuid}/{access}", "/policies/{policy_slug}/{access}"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/policies/plugin.py", "endpoints": {"api_summary": "This file defines a set of RESTful API endpoints for managing policies. These endpoints allow for the creation, retrieval, updating, and deletion of policies. They also allow for the management of access control lists (ACLs) associated with each policy.", "methods": ["GET", "POST"], "paths": ["/policies", "/policies/<uuid:policy_uuid>", "/policies/<uuid:policy_uuid>/acl/<access>", "/policies/<string:policy_slug>", "/policies/<string:policy_slug>/acl/<access>"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/saml/http.py", "endpoints": {"api_summary": "This file defines several REST API endpoints for Single Sign-On (SSO) and Single Logout (SLO) services. It includes endpoints for ACS (Assertion Consumer Service), SSO (Single Sign-On), SLO (Single Logout), and SLS (Single Logout Service).", "methods": ["GET", "POST"], "paths": ["/acs", "/sso", "/slo", "/sls"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/saml/plugin.py", "endpoints": {"api_summary": "This file defines four REST API endpoints for SAML authentication. The endpoints include ACS (Assertion Consumer Service), SSO (Single Sign-On), Logout, and SLS (Single Logout Service). These endpoints are used for handling SAML authentication requests.", "methods": ["GET", "POST"], "paths": ["/saml/acs", "/saml/sso", "/saml/logout", "/saml/sls"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/external/http.py", "endpoints": {"api_summary": "This file defines three REST API endpoints for external authentication. The first endpoint allows users to retrieve a list of external authentication configurations. The second endpoint allows users to create, update, or delete external authentication configurations. The third endpoint allows users to retrieve a list of users connected to an external authentication service.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/external", "/external/<built-in function id>", "/external/<built-in function id>/users"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/external/plugin.py", "endpoints": {"api_summary": "This file defines three REST API endpoints for managing external authentication. The endpoints allow for the retrieval, creation, and deletion of external authentication configurations and users.", "methods": ["GET", "POST"], "paths": ["/users/<uuid:user_uuid>/external", "/external/<string:auth_type>/config", "/external/<string:auth_type>/users"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/tokens/http.py", "endpoints": {"api_summary": "This file defines several REST API endpoints for user authentication and token management. It includes endpoints for user-specific token management, global token management, token scopes checking, and token creation. The endpoints are secured with different access control lists (ACLs) to ensure proper authorization.", "methods": ["GET", "POST", "DELETE", "HEAD"], "paths": ["/tokens", "/tokens/{token_uuid}", "/tokens/{token_uuid}/scopes", "/users/me/tokens", "/users/me/tokens/{client_id}", "/users/{user_uuid}/tokens", "/users/{user_uuid}/tokens/{client_id}", "/tokens"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/tokens/plugin.py", "endpoints": {"api_summary": "This file defines a set of REST API endpoints for token-based authentication. It includes endpoints for creating, retrieving, and refreshing tokens. These endpoints are used to manage user authentication and authorization.", "methods": ["GET", "POST"], "paths": ["/token", "/token/<uuid:token_uuid>", "/token/<uuid:token_uuid>/scopes/check", "/tokens", "/users/<uuid:user_uuid>/tokens", "/users/<uuid:user_uuid>/tokens/<string:client_id>", "/users/me/tokens", "/users/me/tokens/<string:client_id>"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/password_reset/http.py", "endpoints": {"api_summary": "The PasswordReset class provides two methods for a RESTful API. The get method is used to reset a user's password, while the post method is used to change a user's password. These methods are part of a larger Flask application and are not explicitly defined in this file.", "methods": ["GET", "POST"], "paths": []}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/password_reset/plugin.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for password reset. It uses the POST method to reset the password of a user. The endpoint is '/users/password/reset'.", "methods": ["POST"], "paths": ["/users/password/reset"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/user_registration/plugin.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for user registration. It uses the POST method to register a new user. The endpoint is '/users/register'.", "methods": ["POST"], "paths": ["/users/register"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/saml_config/http.py", "endpoints": {"api_summary": "This file defines several REST API endpoints for managing SAML configurations. It includes endpoints for creating, reading, updating, and deleting SAML configurations, as well as for retrieving SAML metadata and the ACS URL template. These endpoints are used to manage SAML configurations for different tenants.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/saml/config", "/saml/metadata", "/saml/acs_url_template"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/saml_config/plugin.py", "endpoints": {"api_summary": "This file defines three REST API endpoints for managing SAML configurations. The endpoints allow for the creation, retrieval, update, and deletion of SAML configurations. They also provide metadata and ACS URL template information.", "methods": ["GET", "POST"], "paths": ["/backends/saml", "/backends/saml/metadata", "/backends/saml/acs_url_template"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/config/http.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for managing configuration settings. It provides GET and PATCH methods to interact with the configuration settings. The GET method retrieves the current configuration settings, while the PATCH method allows for modifications to the configuration settings.", "methods": ["GET", "PATCH"], "paths": ["/config"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/config/plugin.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for managing configurations. It uses the HTTP GET method to retrieve the configuration.", "methods": ["GET"], "paths": ["/config"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/email_confirm/http.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for email confirmation. It provides two endpoints: GET and PUT. The GET endpoint is used to confirm an email, and the PUT endpoint also confirms an email. The email is confirmed by calling the 'confirm' method of the 'email_service' object.", "methods": ["GET", "PUT"], "paths": ["/emails/{email_uuid}/confirm"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/email_confirm/plugin.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for email confirmation. It allows users to confirm their email addresses using a unique identifier (UUID).", "methods": ["GET"], "paths": ["/emails/<uuid:email_uuid>/confirm"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/user_email/http.py", "endpoints": {"api_summary": "This file defines several REST API endpoints for managing user emails. It includes endpoints for updating user emails, confirming user emails, and administering user emails. These endpoints are used to manage user email data, including updating, confirming, and administering user emails.", "methods": ["PUT", "GET"], "paths": ["/users/{user_uuid}/emails", "/users/{user_uuid}/emails/{email_uuid}/confirm"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/user_email/plugin.py", "endpoints": {"api_summary": "This file defines three REST API endpoints for managing user emails. The endpoints allow for email confirmation, updating user emails, and updating admin user emails.", "methods": ["GET", "POST"], "paths": ["/users/<uuid:user_uuid>/emails/<uuid:email_uuid>/confirm", "/admin/users/<uuid:user_uuid>/emails", "/users/<uuid:user_uuid>/emails"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/idp/http.py", "endpoints": {"api_summary": "This file defines three REST API endpoints for managing identity provider (IDP) users. The endpoints allow for the creation, deletion, and updating of IDP users. The endpoints are secured with access control lists (ACLs) that define the required permissions to access each endpoint.", "methods": ["GET", "PUT", "DELETE"], "paths": ["/idp/{idp_type}/users", "/idp/{idp_type}/users/{user_uuid}", "/idp/{idp_type}/users"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/idp/plugin.py", "endpoints": {"api_summary": "This file defines three REST API endpoints for managing identity providers (IDP) and their associated users. The endpoints allow for listing all IDPs, listing all users for a specific IDP, and retrieving a specific user from a specific IDP.", "methods": ["GET", "POST"], "paths": ["/idp", "/idp/<idp_type>/users/<uuid:user_uuid>", "/idp/<idp_type>/users"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/sessions/http.py", "endpoints": {"api_summary": "This file defines two REST API endpoints for managing user sessions. The first endpoint allows for the retrieval of a list of sessions. The second endpoint allows for the deletion of a specific session.", "methods": ["GET", "DELETE"], "paths": ["/sessions", "/sessions/<built-in function id>"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/sessions/plugin.py", "endpoints": {"api_summary": "This file defines two REST API endpoints for managing sessions. The first endpoint ('/sessions') allows for the creation of new sessions. The second endpoint ('/sessions/<uuid:session_uuid>') allows for the retrieval, updating, and deletion of specific sessions.", "methods": ["GET", "POST"], "paths": ["/sessions", "/sessions/<uuid:session_uuid>"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/users/http.py", "endpoints": {"api_summary": "This file defines four REST API endpoints for user management. The endpoints allow for the creation, reading, updating, and deletion of users. Additionally, it provides endpoints for changing a user's password and listing all users.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users/{user_uuid}", "/users/{user_uuid}/password", "/users"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/users/plugin.py", "endpoints": {"api_summary": "This file defines a REST API for managing users. It includes endpoints for creating, retrieving, updating, and deleting users. It also includes an endpoint for changing a user's password.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users", "/users/<uuid:user_uuid>", "/users/<uuid:user_uuid>/password"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/groups/http.py", "endpoints": {"api_summary": "This file defines two REST API endpoints for managing groups. The first endpoint, '/groups', allows for the creation and retrieval of groups. The second endpoint, '/groups/{group_uuid}', allows for the deletion, retrieval, and updating of a specific group. The endpoints are protected by access control lists (ACLs) that ensure that only authorized users can perform certain actions.", "methods": ["GET", "POST", "DELETE", "PUT"], "paths": ["/groups", "/groups/{group_uuid}"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/groups/plugin.py", "endpoints": {"api_summary": "This file defines two REST API endpoints for managing groups. The first endpoint allows for the retrieval, updating, and deletion of a specific group by its unique identifier. The second endpoint allows for the creation and retrieval of all groups.", "methods": ["GET", "POST"], "paths": ["/groups/<uuid:group_uuid>", "/groups"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/status/plugin.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for the status of the application. It provides a GET method to retrieve the status of the application.", "methods": ["GET"], "paths": ["/status"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/group_policy/http.py", "endpoints": {"api_summary": "This file defines several REST API endpoints for managing user groups and their associated policies. It includes endpoints for adding and removing policies from groups, as well as listing all policies associated with a group. The endpoints are secured with access control lists (ACLs) that restrict access based on user roles and permissions.", "methods": ["DELETE", "PUT", "GET"], "paths": ["/auth/groups/{group_uuid}/policies/{policy_uuid}", "/auth/groups/{group_uuid}/policies/{policy_slug}", "/auth/groups/{group_uuid}/policies"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/group_policy/plugin.py", "endpoints": {"api_summary": "This file defines three REST API endpoints for managing group policies. These endpoints allow for the creation, retrieval, updating, and deletion of policies associated with a specific group. The endpoints are designed to be used in conjunction with the group management system, allowing for the assignment and management of policies for different groups.", "methods": ["GET", "POST"], "paths": ["/groups/<uuid:group_uuid>/policies/<uuid:policy_uuid>", "/groups/<uuid:group_uuid>/policies/<string:policy_slug>", "/groups/<uuid:group_uuid>/policies"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/tenants/http.py", "endpoints": {"api_summary": "This file defines several REST API endpoints for managing tenants and their associated domains. Tenants are entities that represent a group of users and can have sub-tenants. The API allows for creating, reading, updating, and deleting tenants, as well as listing all tenants and their associated domains.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/tenants", "/tenants/<built-in function id>", "/tenants/<built-in function id>/domains"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/tenants/plugin.py", "endpoints": {"api_summary": "This file defines a REST API for managing tenants and their associated domains. Tenants are identified by their UUIDs, and each tenant can have multiple domains associated with them. The API allows for creating, retrieving, updating, and deleting tenants and their associated domains.", "methods": ["GET", "POST"], "paths": ["/tenants", "/tenants/<uuid:tenant_uuid>", "/tenants/<uuid:tenant_uuid>/domains"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/user_group/http.py", "endpoints": {"api_summary": "This file defines several REST API endpoints for managing user groups and group users. It includes endpoints for creating, reading, updating, and deleting user groups and group users. The endpoints are secured with ACLs (Access Control Lists) to ensure only authorized users can access them.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/auth/groups/{group_uuid}/users/{user_uuid}", "/auth/groups/{group_uuid}/users", "/auth/users/{user_uuid}/groups"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/user_group/plugin.py", "endpoints": {"api_summary": "This file defines three REST API endpoints for managing user groups and their membership in groups. It allows for adding, removing, and listing users in a group, as well as listing all groups a user is a member of.", "methods": ["GET", "POST"], "paths": ["/groups/<uuid:group_uuid>/users/<uuid:user_uuid>", "/groups/<uuid:group_uuid>/users", "/users/<uuid:user_uuid>/groups"]}}
{"file": "cloned/wazo-auth/wazo_auth/services/saml.py", "endpoints": {"api_summary": "This file defines a REST API for SAML authentication and logout. It includes endpoints for preparing redirect responses, processing authentication responses, invalidating SAML session IDs, updating refresh tokens, cleaning pending requests, and processing logout requests. It also includes endpoints for getting user login and processing logout request responses.", "methods": ["GET", "POST"], "paths": ["/prepare_redirect_response", "/process_auth_response", "/invalidate_saml_session_id", "/update_refresh_token", "/clean_pending_requests", "/process_logout_request", "/process_logout_request_response", "/get_user_login"]}}
{"file": "cloned/data-act-broker-backend/tests/integration/fabs_upload_tests.py", "endpoints": {"api_summary": "This file defines several REST API endpoints for a FABS (Federal Award Broadcast System) file upload service. It includes endpoints for uploading FABS files, checking the status of a submission, and publishing a FABS file. The endpoints are used to interact with the system, allowing users to upload FABS files, check the status of their submissions, and publish their files.", "methods": ["POST", "GET"], "paths": ["/v1/publish_fabs_file/", "/v1/upload_fabs_file/"]}}
{"file": "cloned/data-act-broker-backend/tests/integration/settings_tests.py", "endpoints": {"api_summary": "This file defines several REST API endpoints for managing rule settings. It includes endpoints for getting and saving rule settings for different agencies and files. The endpoints are secured with different levels of permissions, with some endpoints requiring admin permissions.", "methods": ["GET", "POST"], "paths": ["/v1/rule_settings/", "/v1/save_rule_settings/"]}}
{"file": "cloned/data-act-broker-backend/tests/integration/generation_tests.py", "endpoints": {"api_summary": "This file defines several REST API endpoints for file generation and checking. It includes endpoints for generating and checking file generation status for D1, D2, E, and F files. It also includes endpoints for generating and checking detached file generation status for D1 and A files. The endpoints are used to generate and check the status of file generation jobs.", "methods": ["GET", "POST"], "paths": ["/v1/check_generation_status/", "/v1/generate_file/", "/v1/check_detached_generation_status/", "/v1/generate_detached_file/"]}}
{"file": "cloned/data-act-broker-backend/tests/integration/userTests.py", "endpoints": {"api_summary": "This file defines several REST API endpoints for user management and interaction. It includes endpoints for retrieving current user information, setting the skip guide flag, and sending emails to users. These endpoints are used to manage user data and interactions within the system.", "methods": ["GET", "POST"], "paths": ["/v1/active_user/", "/v1/set_skip_guide/", "/v1/email_users/"]}}
{"file": "cloned/data-act-broker-backend/tests/integration/dashboard_tests.py", "endpoints": {"api_summary": "This file contains a set of tests for a dashboard application. It defines several REST API endpoints for interacting with the dashboard, including endpoints for getting rule labels, posting dabs graphs, getting historic dabs table, getting active submission overview, getting impact counts, and getting significance counts. These endpoints are used to fetch data related to the dashboard, such as rule labels, graphs, table data, submission overview, impact counts, and significance counts.", "methods": ["GET", "POST"], "paths": ["/v1/get_rule_labels/", "/v1/historic_dabs_graphs/", "/v1/historic_dabs_table/", "/v1/active_submission_overview/", "/v1/get_impact_counts/", "/v1/get_significance_counts/"]}}
{"file": "cloned/data-act-broker-backend/tests/integration/list_latest_published_files_tests.py", "endpoints": {"api_summary": "This file defines several REST API endpoints for interacting with a database of submissions. It includes endpoints for listing the latest published files for both DABS and FABS submissions. The endpoints are organized by submission type (DABS or FABS), agency, year, period, and file type. The endpoints return a list of agencies, years, periods, and files for each submission type.", "methods": ["GET"], "paths": ["/v1/list_latest_published_files/"]}}
{"file": "cloned/data-act-broker-backend/tests/integration/baseTestAPI.py", "endpoints": {"api_summary": "This file defines a set of test cases for a REST API. It includes endpoints for login, logout, and session handling. These endpoints are used to test the functionality of the API.", "methods": ["POST", "GET"], "paths": ["/v1/login/", "/v1/logout/", "/v1/session/"]}}
{"file": "cloned/data-act-broker-backend/tests/integration/list_submission_tests.py", "endpoints": {"api_summary": "This file defines several REST API endpoints for managing submissions. It includes endpoints for listing submissions, filtering them by various parameters, and logging in and out of the system. The endpoints are used to interact with submissions in the system, such as retrieving, creating, updating, and deleting them.", "methods": ["GET", "POST"], "paths": ["/v1/list_submissions/", "/v1/login/", "/v1/logout/"]}}
{"file": "cloned/data-act-broker-backend/tests/integration/domain_tests.py", "endpoints": {"api_summary": "This file contains a set of tests for the DomainTests class, which is a subclass of BaseTestAPI. The tests are designed to test the functionality of the list_agencies, list_all_agencies, and list_sub_tier_agencies endpoints. These endpoints are used to retrieve lists of agencies and sub-tier agencies.", "methods": ["GET"], "paths": ["/v1/list_agencies/", "/v1/list_all_agencies/", "/v1/list_sub_tier_agencies/"]}}
{"file": "cloned/data-act-broker-backend/tests/unit/dataactvalidator/test_b9_object_class_program_activity.py", "endpoints": {"api_summary": "The code defines a set of unit tests for a data validation process. It uses factories to create test data and asserts the number of errors returned by a validation function.", "methods": [], "paths": []}}
{"file": "cloned/data-act-broker-backend/tests/unit/dataactbroker/test_domain_routes.py", "endpoints": {"api_summary": "This file defines several REST API endpoints for interacting with various data models in the system. It includes endpoints for listing agencies, sub-tier agencies, data sources, and affiliations. These endpoints are used to retrieve data based on user permissions and affiliations.", "methods": ["GET"], "paths": ["/v1/list_agencies/", "/v1/list_agencies/?perm_level={}&perm_type={}", "/v1/list_all_agencies/", "/v1/list_sub_tier_agencies/", "/v1/list_data_sources/"]}}
{"file": "cloned/data-act-broker-backend/tests/unit/dataactbroker/test_user_routes.py", "endpoints": {"api_summary": "This file contains several tests for a REST API that manages user submissions. It defines several endpoints for listing user emails, submissions, and affiliations. The API allows for listing users based on their affiliations, whether they own a submission, or whether they have a DABS or FABS submission. The API also allows for listing all users with a submission, regardless of affiliations, if the user is an admin.", "methods": ["GET"], "paths": ["/v1/list_user_emails/", "/v1/list_submission_users/", "/v1/list_submission_users/cgac_affil/", "/v1/list_submission_users/frec_affil/", "/v1/list_submission_users/cgac_frec_affil/", "/v1/list_submission_users/owned/", "/v1/list_submission_users/fabs_dabs/"]}}
{"file": "cloned/data-act-broker-backend/tests/unit/dataactbroker/test_file_routes.py", "endpoints": {"api_summary": "This file defines several REST API endpoints for a data broker application. The endpoints include listing banners, checking the current page of a submission, and getting the file URL. These endpoints are used to manage and monitor the status of data submissions.", "methods": ["GET", "POST"], "paths": ["/v1/list_banners/", "/v1/check_current_page/", "/v1/get_file_url/"]}}
{"file": "cloned/data-act-broker-backend/tests/unit/dataactbroker/test_permissions.py", "endpoints": {"api_summary": "This file contains a set of test cases for the permissions module in the dataactbroker package. It tests various user permissions and their ability to perform certain actions based on their affiliation with a CGAC or FREC agency. The tests cover various scenarios such as checking if a user has the right permissions to perform certain actions in a specific agency.", "methods": ["GET", "POST"], "paths": ["/permissions/cgac/reader", "/permissions/cgac/writer", "/permissions/cgac/submitter", "/permissions/frec/reader", "/permissions/frec/writer", "/permissions/frec/submitter", "/permissions/cgac/editfabs", "/permissions/cgac/fabs", "/permissions/frec/editfabs", "/permissions/frec/fabs", "/permissions/multiple/fabs", "/permissions/multiple/dabs", "/permissions/multiple/dabs_fabs", "/permissions/submission"]}}
{"file": "cloned/data-act-broker-backend/tests/unit/dataactcore/scripts/test_load_sam_subaward.py", "endpoints": {"api_summary": "This file contains a set of functions and classes that interact with the SAM Subaward API. It includes functions for loading, storing, deleting, and parsing subawards from the API. It also includes tests for these functions.", "methods": ["GET", "POST"], "paths": ["/load_subawards", "/store_subawards", "/delete_subawards", "/parse_raw_subaward", "/pull_subawards"]}}
{"file": "cloned/data-act-broker-backend/dataactvalidator/health_check.py", "endpoints": {"api_summary": "This API is a simple Flask application that runs a validator service. It has a single endpoint '/' which responds to GET requests with a message 'Validator is running'.", "methods": ["GET"], "paths": ["/"]}}
{"file": "cloned/data-act-broker-backend/dataactvalidator/app.py", "endpoints": {"api_summary": "This file defines a Flask-based REST API for a data validation service. It handles file generation and validation requests via SQS messages. The API endpoints are defined in the 'run_app' function, which sets up a polling loop to receive and process messages from an SQS queue. The 'validator_process_file_generation' and 'validator_process_job' functions handle the processing of file generation and validation requests respectively.", "methods": ["GET", "POST"], "paths": ["/", "/validator_process_file_generation", "/validator_process_job"]}}
{"file": "cloned/data-act-broker-backend/dataactbroker/app.py", "endpoints": {"api_summary": "This API provides endpoints for user login, file and generation management, user management, dashboard display, settings modification, domain management, and exception handling. It also includes endpoints for AWS SES email services and user session handling.", "methods": ["GET", "POST"], "paths": ["/", "/v1/login", "/v1/logout", "/v1/users", "/v1/users/<user_id>", "/v1/users/<user_id>/settings", "/v1/users/<user_id>/files", "/v1/users/<user_id>/files/<file_id>", "/v1/users/<user_id>/generations", "/v1/users/<user_id>/generations/<generation_id>", "/v1/users/<user_id>/domains", "/v1/users/<user_id>/domains/<domain_id>", "/v1/users/<user_id>/dashboard", "/v1/exceptions"]}}
{"file": "cloned/data-act-broker-backend/dataactbroker/handlers/dashboard_handler.py", "endpoints": {"api_summary": "This file contains several functions that are used to interact with the DataAct database. These functions are used to validate filters, apply filters, generate graphs, and generate tables for the DataAct dashboard. The functions are used to validate filters, apply filters, generate graphs, and generate tables for the DataAct dashboard.", "methods": ["GET", "POST"], "paths": ["/historic_dabs_warning_graphs", "/historic_dabs_warning_table", "/active_submission_overview", "/get_impact_counts", "/get_significance_counts", "/active_submission_table"]}}
{"file": "cloned/data-act-broker-backend/dataactbroker/handlers/generation_handler.py", "endpoints": {"api_summary": "This file defines several REST API endpoints for generating and checking file generation jobs. It supports file generation for different types of files, including D1, D2, A, E, and F. It also supports detached file generation for these file types.", "methods": ["POST", "GET"], "paths": ["/generate_file", "/check_generation", "/generate_detached_file", "/check_detached_generation"]}}
{"file": "cloned/data-act-broker-backend/dataactbroker/handlers/account_handler.py", "endpoints": {"api_summary": "This file contains a class named AccountHandler which defines several methods for handling user accounts. These methods include login, proxy_login, caia_login, create_session_and_response, set_skip_guide, email_users, perms_to_affiliations, best_affiliation, set_user_name, set_caia_perms, json_for_user, get_caia_tokens, refresh_tokens, get_caia_user_dict, revoke_caia_access, logout, list_user_emails, and list_submission_users. Each of these methods corresponds to a different REST API endpoint.", "methods": ["GET", "POST"], "paths": ["/login", "/proxy_login", "/caia_login", "/create_session_and_response", "/set_skip_guide", "/email_users", "/perms_to_affiliations", "/best_affiliation", "/set_user_name", "/set_caia_perms", "/json_for_user", "/get_caia_tokens", "/refresh_tokens", "/get_caia_user_dict", "/revoke_caia_access", "/logout", "/list_user_emails", "/list_submission_users"]}}
{"file": "cloned/data-act-broker-backend/dataactbroker/handlers/aws/session.py", "endpoints": {"api_summary": "This file defines a REST API for user session management. It includes endpoints for logging in, logging out, and resetting the session ID. It also provides endpoints for managing sessions, such as checking if a session exists, getting the timeout for a session, and getting the data for a session.", "methods": ["GET", "POST"], "paths": ["/login", "/logout", "/reset_id", "/session/exists", "/session/timeout", "/session/data"]}}
{"file": "cloned/data-act-broker-backend/dataactbroker/routes/settings_routes.py", "endpoints": {"api_summary": "This file defines two REST API endpoints for managing rule settings. The first endpoint, '/v1/rule_settings/', allows users to retrieve rule settings based on provided filters. The second endpoint, '/v1/save_rule_settings/', allows users to set rule settings based on provided rules. Both endpoints require a valid agency code and a file type, and they use HTTP GET and POST methods respectively.", "methods": ["GET", "POST"], "paths": ["/v1/rule_settings/", "/v1/save_rule_settings/"]}}
{"file": "cloned/data-act-broker-backend/dataactbroker/routes/file_routes.py", "endpoints": {"api_summary": "This file defines a set of REST API endpoints for a data submission system. It includes endpoints for file upload, status checking, submission metadata retrieval, and more. These endpoints are used to manage and interact with data submissions.", "methods": ["GET", "POST"], "paths": ["/v1/upload_dabs_files/", "/v1/check_status/", "/v1/submission_metadata/", "/v1/submission_data/", "/v1/revalidation_threshold/", "/v1/latest_publication_period/", "/v1/list_banners/", "/v1/list_submissions/", "/v1/list_latest_published_files/", "/v1/list_history/", "/v1/get_published_file/", "/v1/get_submitted_published_file/", "/v1/check_current_page/", "/v1/get_fabs_meta/", "/v1/upload_fabs_file/", "/v1/publish_fabs_file/", "/v1/get_obligations/", "/v1/get_submission_comments/", "/v1/update_submission_comments/", "/v1/get_comments_file/", "/v1/get_submission_zip/", "/v1/report_url/", "/v1/get_file_url/", "/v1/get_detached_file_url/", "/v1/delete_submission/", "/v1/published_submissions/", "/v1/publish_dabs_submission/", "/v1/certify_dabs_submission/", "/v1/publish_and_certify_dabs_submission/", "/v1/restart_validation/", "/v1/revert_submission/"]}}
{"file": "cloned/data-act-broker-backend/dataactbroker/routes/generation_routes.py", "endpoints": {"api_summary": "This file defines four REST API endpoints for file generation and checking the status of file generation. The endpoints are used to generate files, check the status of file generation, generate detached files, and check the status of detached file generation.", "methods": ["GET", "POST"], "paths": ["/v1/generate_file/", "/v1/check_generation_status/", "/v1/generate_detached_file/", "/v1/check_detached_generation_status/"]}}
{"file": "cloned/data-act-broker-backend/dataactbroker/routes/domain_routes.py", "endpoints": {"api_summary": "This file defines several REST API endpoints related to agencies, sub-tier agencies, and data sources. It includes endpoints for listing agencies, sub-tier agencies, and data sources. These endpoints are used to retrieve information about agencies, sub-tier agencies, and data sources.", "methods": ["GET"], "paths": ["/v1/list_agencies/", "/v1/list_all_agencies/", "/v1/list_sub_tier_agencies/", "/v1/list_data_sources/"]}}
{"file": "cloned/data-act-broker-backend/dataactbroker/routes/dashboard_routes.py", "endpoints": {"api_summary": "This file defines several REST API endpoints related to a data dashboard. The endpoints allow users to retrieve various types of data related to the dashboard, including rule labels, historic DABS graphs, and active submission overviews. The endpoints also allow users to retrieve impact and significance counts for a given submission.", "methods": ["GET", "POST"], "paths": ["/v1/get_rule_labels/", "/v1/historic_dabs_graphs/", "/v1/historic_dabs_table/", "/v1/active_submission_overview/", "/v1/get_impact_counts/", "/v1/get_significance_counts/", "/v1/active_submission_table/"]}}
{"file": "cloned/data-act-broker-backend/dataactbroker/routes/login_routes.py", "endpoints": {"api_summary": "This file defines several REST API endpoints related to user authentication and session management. It includes endpoints for login, proxy login, CAIA login, logout, and session check. These endpoints are used to manage user sessions and authenticate users.", "methods": ["GET", "POST"], "paths": ["/v1/login/", "/v1/proxy_login/", "/v1/caia_login/", "/v1/logout/", "/v1/session/"]}}
{"file": "cloned/data-act-broker-backend/dataactbroker/routes/user_routes.py", "endpoints": {"api_summary": "This file defines several REST API endpoints related to user management. It includes endpoints for listing user emails, listing users with submissions, getting the current user information, setting the skip guide parameter, and sending email notifications to users. These endpoints are used to manage user accounts and perform various operations related to user management.", "methods": ["GET", "POST"], "paths": ["/v1/list_user_emails/", "/v1/list_submission_users/", "/v1/active_user/", "/v1/set_skip_guide/"]}}
{"file": "cloned/data-act-broker-backend/dataactbroker/helpers/generation_helper.py", "endpoints": {"api_summary": "This file contains a set of functions that handle the generation and validation of various types of files. It includes functions for starting D, E, F, and DABS file generations, checking the status of a file generation, and mapping the status of a file generation to a status that can be understood by the frontend. It also includes functions for updating a submission's publish status, creating a generation job, checking the prerequisites for a file generation, and copying data from a cached file generation to a job requesting a file.", "methods": ["POST"], "paths": ["/start_d_generation", "/start_e_f_generation", "/start_dabs_generation", "/check_file_generation", "/create_generation_job", "/check_generation_prereqs", "/copy_file_generation_to_job"]}}
{"file": "cloned/data-act-broker-backend/dataactcore/utils/fileD2.py", "endpoints": {"api_summary": "This file defines two REST API endpoints. The first endpoint is used to query data from the PublishedFABS model. It takes in a session, agency code, agency type, and start and end dates as parameters. The second endpoint is used to query published FABS file data. It takes in a session and a submission ID as parameters.", "methods": ["GET", "POST"], "paths": ["/query_data", "/query_published_fabs_data"]}}
{"file": "cloned/data-act-broker-backend/dataactcore/utils/fileBOC.py", "endpoints": {"api_summary": "This file contains a set of functions that interact with a database to retrieve and manipulate data related to the Generic Transaction Accounting System (GTAS) and the Budget Object Class (BOC). It defines several endpoints for querying and comparing data from the GTAS and BOC systems.", "methods": ["GET", "POST"], "paths": ["/query_data", "/sum_published_file_b", "/ussgl_values", "/ussgl_published_file_b_cte", "/sum_gtas_boc", "/initial_query"]}}
{"file": "cloned/data-act-broker-backend/dataactcore/migrations/versions/4b1ee78268fb_add_indexing_to_staging_models.py", "endpoints": {"api_summary": "This file contains database migration scripts for the Data Broker application. It defines several database indexes for various tables in the application, which are used to improve the performance of data retrieval operations. These indexes are used to speed up the process of querying the database and retrieving specific data.", "methods": ["GET", "POST"], "paths": ["/migrations/upgrade_data_broker", "/migrations/downgrade_data_broker"]}}
{"file": "cloned/data-act-broker-backend/dataactcore/scripts/pipeline/load_usps_files.py", "endpoints": {"api_summary": "This file contains a set of functions that interact with the USPS API. It downloads zip4 files from the USPS, extracts them, and uploads them to an AWS S3 bucket. It also handles logging in and out of the USPS API.", "methods": ["POST"], "paths": ["/usps/files", "/usps/download", "/usps/logout"]}}
{"file": "cloned/data-act-broker-backend/dataactcore/scripts/pipeline/load_federal_hierarchy.py", "endpoints": {"api_summary": "This script pulls data from the Federal Hierarchy API and updates a database with this data. It also has the ability to generate a CSV file with the data from the API and export the current office table. The script can handle both full and iterative loads, and it can also handle historical data.", "methods": ["GET", "POST"], "paths": ["/load_federal_hierarchy", "/export_office"]}}
{"file": "cloned/ccpay-payment-app/gov-pay-client/src/main/java/uk/gov/hmcts/payment/api/external/client/GovPayClient.java", "endpoints": {"api_summary": "This file defines a REST API client for interacting with the GovPay service. It provides methods for creating, retrieving, and cancelling payments. It also includes methods for refunding payments. The client uses the Apache HttpClient for making HTTP requests and Jackson for JSON serialization and deserialization.", "methods": ["GET", "POST"], "paths": ["/createPayment", "/retrievePayment", "/cancelPayment", "/refundPayment"]}}
{"file": "cloned/ccpay-payment-app/gov-pay-client/src/test/java/uk/gov/hmcts/payment/api/external/client/GovPayClientTest.java", "endpoints": {"api_summary": "This file contains a set of tests for the GovPayClient class, which is a client for interacting with the GovPay API. It defines several endpoints for creating, retrieving, and cancelling payments. The endpoints are tested using WireMock, a library for stubbing and mocking web services.", "methods": ["POST", "GET", "POST"], "paths": ["/", "/someId", "/cancel"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/configuration/security/SpringSecurityConfiguration.java", "endpoints": {"api_summary": "This file defines several REST API endpoints for a payment system. It includes endpoints for managing payments, refunds, and other related operations. The endpoints are secured using Spring Security, with different roles having different levels of access to different endpoints.", "methods": ["GET", "POST", "PATCH", "DELETE"], "paths": ["/payments", "/payments1", "/card-payments/*/status", "/payments/*", "/telephony/callback", "/jobs/*", "/cases/*/paymentgroups", "/cases/*/payments", "/fees/*", "/card-payments", "/card-payments/*/cancel", "/card-payments/*/details", "/pba-accounts/*/payments", "/refund-for-payment", "/refund-retro-remission", "/refund/resubmit/*", "/reference-data/*", "/case-payment-orders", "/api/*", "/api/*", "/payment-failures/*", "/payment-failures/*", "/payment-failures/*"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/dto/mapper/CreditAccountDtoMapper.java", "endpoints": {"api_summary": "This file contains a mapper class that is used to convert between different data transfer objects (DTOs) and domain objects. It also includes methods for creating, retrieving, and updating payments and fees. It also includes methods for handling the cancellation of payments and for retrieving payment statuses.", "methods": ["GET", "POST"], "paths": ["/payments", "/payments/<built-in function id>", "/fees", "/status"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/dto/mapper/PaymentDtoMapper.java", "endpoints": {"api_summary": "This file contains a PaymentDtoMapper class that is responsible for mapping between different data transfer objects (DTOs) and domain objects. It also contains several methods that handle different types of payments, such as card payments, bulk scan payments, PCI/PAL card payments, and more. It also includes methods for retrieving payment statuses, reconciliation responses, and creating record payments.", "methods": ["GET", "POST"], "paths": ["/payments", "/payments/<built-in function id>", "/payments/status", "/payments/reconciliation", "/payments/create"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/domain/service/ServiceRequestDomainServiceImpl.java", "endpoints": {"api_summary": "This file contains a service class for managing service requests. It provides endpoints for creating, retrieving, and updating service requests. It also includes endpoints for handling online card payments and PBA payments. It also includes a dead letter queue (DLQ) process for managing failed messages.", "methods": ["GET", "POST"], "paths": ["/service-requests", "/service-requests/<serviceRequestReference>", "/service-requests/<serviceRequestReference>/payments", "/service-requests/<serviceRequestReference>/payments/online-card-payment", "/service-requests/<serviceRequestReference>/payments/pba-payment"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/controllers/MaintenanceJobsController.java", "endpoints": {"api_summary": "This API provides a single endpoint for updating the status of card payments. It uses the PATCH method to update the status of payments.", "methods": ["PATCH"], "paths": ["/jobs/card-payments-status-update"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/controllers/ReplayCreditAccountPaymentController.java", "endpoints": {"api_summary": "This file defines a REST API endpoint for replaying credit account payments. It allows users to replay credit account payments by uploading a CSV file. The API also handles payment status updates and payment history updates in case of any errors.", "methods": ["POST"], "paths": ["/replay-credit-account-payments"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/controllers/AccountController.java", "endpoints": {"api_summary": "This API provides endpoints for managing and retrieving account information. It allows users to retrieve the status and available balance for a PBA account number. The API also handles exceptions and returns appropriate error messages.", "methods": ["GET"], "paths": ["/accounts/<accountNumber>"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/controllers/RefundsController.java", "endpoints": {"api_summary": "This API provides endpoints for managing refunds and remissions in a payment system. It allows for the creation of refunds for payments, resubmission of remissions, updating the remission amount in a resubmit journey, and deleting refund details by refund reference. It also handles exceptions related to payment status, remission status, refund requests, and payment references.", "methods": ["POST", "POST", "PATCH", "DELETE"], "paths": ["/refund-for-payment", "/refund-retro-remission", "/refund/resubmit/{payment-reference}", "/refund/{refundReference}"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/controllers/PBAController.java", "endpoints": {"api_summary": "This API provides endpoints for managing PBA accounts and retrieving payments related to these accounts. It allows users to retrieve payments for a specific PBA account and retrieve PBA account details from reference data.", "methods": ["GET"], "paths": ["/pba-accounts/{account}/payments", "/pba-accounts"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/controllers/ServiceRequestController.java", "endpoints": {"api_summary": "This file defines several REST API endpoints for managing service requests and payments. It includes endpoints for creating service requests, making credit account payments, processing dead letter queue messages, and creating online card payments. It also includes an endpoint for retrieving card payment status by internal reference.", "methods": ["POST", "PATCH", "GET"], "paths": ["/service-request", "/service-request/{service-request-reference}/pba-payments", "/jobs/dead-letter-queue-process", "/service-request/{service-request-reference}/card-payments", "/card-payments/{internal-reference}/status"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/controllers/CardPaymentController.java", "endpoints": {"api_summary": "This file defines a REST API for card payments. It includes endpoints for creating, retrieving, and cancelling card payments. It also provides endpoints to retrieve payment details and statuses. The API supports different HTTP methods such as GET and POST.", "methods": ["GET", "POST"], "paths": ["/card-payments", "/card-payments/{reference}", "/card-payments/{reference}/details", "/card-payments/{reference}/statuses", "/card-payments/{reference}/cancel"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/controllers/FeePayApportionController.java", "endpoints": {"api_summary": "This API provides endpoints for retrieving apportionment details for a given payment reference. It also includes endpoints for checking refunds against remission fees and apportions.", "methods": ["GET"], "paths": ["/payment-groups/fee-pay-apportion/<paymentreference>"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/controllers/CasePaymentOrdersController.java", "endpoints": {"api_summary": "This API provides endpoints for retrieving case payment orders. It allows users to get payment orders for specific cases. The API supports pagination, allowing users to specify the page number and page size for the results.", "methods": ["GET"], "paths": ["/case-payment-orders"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/controllers/PaymentReportController.java", "endpoints": {"api_summary": "This API provides two endpoints for generating and emailing payment reports. The first endpoint, '/jobs/email-pay-reports', generates a report of payments between specified dates and sends it via email. The second endpoint, '/jobs/duplicate-payment-process', generates a report of payment failures and sends it via email.", "methods": ["POST"], "paths": ["/jobs/email-pay-reports", "/jobs/duplicate-payment-process"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/controllers/PaymentReferenceDataController.java", "endpoints": {"api_summary": "This API provides endpoints for retrieving various reference data related to payments. It includes endpoints for payment channels, methods, providers, status, and legacy sites.", "methods": ["GET"], "paths": ["/refdata/channels", "/refdata/methods", "/refdata/providers", "/refdata/status", "/refdata/legacy-sites"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/controllers/ServiceRequestReportController.java", "endpoints": {"api_summary": "This API provides endpoints for generating and emailing duplicate service request count reports. It accepts a date parameter in the format YYYY-MM-DD and generates a report for that date.", "methods": ["POST"], "paths": ["/jobs/email-duplicate-sr-report"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/controllers/CreditAccountPaymentController.java", "endpoints": {"api_summary": "This API provides endpoints for managing credit account payments. It allows for the creation, retrieval, and deletion of credit account payments. It also provides endpoints for retrieving the status of a payment.", "methods": ["POST", "GET", "DELETE"], "paths": ["/credit-account-payments", "/credit-account-payments/{paymentReference}", "/credit-account-payments/{paymentReference}/statuses"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/controllers/PaymentStatusController.java", "endpoints": {"api_summary": "This file defines a REST API for managing payment statuses. It includes endpoints for updating payment statuses, retrieving payment failures, deleting payment failures, and generating reports on payment failures and telephony payments. It also includes endpoints for handling unprocessed payments and updating payment references for unprocessed payments.", "methods": ["GET", "POST", "DELETE", "PATCH"], "paths": ["/payment-failures/bounced-cheque", "/payment-failures/chargeback", "/payment-failures/{paymentReference}", "/payment-status-delete/{failureReference}", "/payment-failures/{failureReference}", "/jobs/unprocessed-payment-update", "/payment-failures/failure-report", "/telephony-payments/telephony-payments-report"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/controllers/PaymentController.java", "endpoints": {"api_summary": "This API provides endpoints for managing payments, including updating case references, retrieving payments, updating payment status, and retrieving payment details. It also includes endpoints for testing purposes and reconciliation of payments.", "methods": ["GET", "PATCH"], "paths": ["/payments/{reference}", "/payments/ccd_case_reference/{ccd_case_number}/lag_time/{lag_time}", "/reconciliation-payments", "/payments/status/{status}", "/payments/{reference}", "/refunds/payments"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/controllers/CaseController.java", "endpoints": {"api_summary": "This API provides endpoints for managing payments and payment groups for a case. It allows retrieval of payments and payment groups for a specific case.", "methods": ["GET"], "paths": ["/cases/{case}/payments", "/cases/{ccdcasenumber}/paymentgroups"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/controllers/FeesController.java", "endpoints": {"api_summary": "This API provides endpoints for managing fees. It allows for the deletion of fees by their ID.", "methods": ["DELETE"], "paths": ["/fees/{feeId}"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/controllers/BulkScanningReportController.java", "endpoints": {"api_summary": "This API provides endpoints for generating reports for the Bulk Scan Payment System. It allows users to retrieve reports based on date range and report type.", "methods": ["GET"], "paths": ["/payment/bulkscan-data-report"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/controllers/RemissionController.java", "endpoints": {"api_summary": "This API provides endpoints for managing remissions in a payment system. It allows for the creation of upfront and retrospective remissions, as well as the creation of retrospective remissions for payments. It also includes error handling for various scenarios such as data integrity violations, invalid payment group references, payment fees not found, and more.", "methods": ["POST", "POST", "POST"], "paths": ["/remissions", "/payment-groups/{payment-group-reference}/fees/{unique_fee_id}/remissions", "/payment-groups/{payment-group-reference}/fees/{unique_fee_id}/retro-remission"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/controllers/PaymentGroupController.java", "endpoints": {"api_summary": "This API provides endpoints for managing payment groups and their associated fees. It allows for the creation, retrieval, and modification of payment groups and their fees. It also supports the recording of bulk scan payments and telephony card payments.", "methods": ["GET", "POST", "PUT"], "paths": ["/payment-groups/{payment-group-reference}", "/payment-groups", "/payment-groups/{payment-group-reference}/bulk-scan-payments", "/payment-groups/bulk-scan-payments", "/payment-groups/{payment-group-reference}/bulk-scan-payments-strategic", "/payment-groups/bulk-scan-payments-strategic", "/payment-groups/{payment-group-reference}/telephony-card-payments"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/controllers/PaymentRecordController.java", "endpoints": {"api_summary": "This file defines a REST API endpoint for recording payments. It allows users to create a new payment record with associated fees. The API supports GET and POST methods.", "methods": ["GET", "POST"], "paths": ["/payment-records"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/controllers/PaymentAllocationController.java", "endpoints": {"api_summary": "This API provides endpoints for managing payment allocations. It allows for the creation of new payment allocations and retrieval of payment records. The API is designed to handle payment allocation creation and retrieval operations.", "methods": ["POST"], "paths": ["/payment-allocations"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/controllers/pcipal/TelephonyController.java", "endpoints": {"api_summary": "This API provides endpoints for managing telephony payments. It allows updating the status of a payment via a PCI-PAL callback response. The API also handles exceptions for payment not found and invalid method arguments.", "methods": ["POST"], "paths": ["/telephony/callback"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/controllers/mock/MockCallbackControllerForTesting.java", "endpoints": {"api_summary": "This file defines two REST API endpoints for a mock callback service. The first endpoint, '/mock-api/serviceCallback', accepts a PUT request with a PaymentDto object in the request body. The second endpoint, '/mock-api/serviceCallback/{reference}', accepts a GET request with a reference path variable. These endpoints are used to manage a list of callbacks.", "methods": ["PUT", "GET"], "paths": ["/mock-api/serviceCallback", "/mock-api/serviceCallback/{reference}"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/v1/controllers/PaymentOldController.java", "endpoints": {"api_summary": "This API provides endpoints for managing payments. It allows users to create, retrieve, cancel, and refund payments. The API also handles exceptions and logs errors.", "methods": ["GET", "POST"], "paths": ["/users/{userId}/payments", "/users/{userId}/payments/{paymentId}", "/users/{userId}/payments/{paymentId}/cancel", "/users/{userId}/payments/{paymentId}/refunds"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/service/IdamServiceImpl.java", "endpoints": {"api_summary": "This file defines three REST API endpoints for interacting with the IDAM service. The endpoints are used to retrieve user details, user ID, and user identity data. These endpoints are used to authenticate and authorize users in the system.", "methods": ["GET"], "paths": ["/o/userinfo", "/details", "/api/v1/users"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/service/PaymentStatusUpdateServiceImpl.java", "endpoints": {"api_summary": "This file defines several REST API endpoints for managing payment failures and status updates. It includes endpoints for inserting bounced cheque and chargeback payment failures, searching for payment failures, updating payment failures, generating payment failure reports, and handling unprocessed payments. It also includes endpoints for fetching refunds for failed payments and for generating telephony payments reports.", "methods": ["GET", "POST", "PATCH"], "paths": ["/payment/{paymentReference}/action/cancel", "/refund/payment-failure-report", "/payment/{failureReference}", "/payment/unprocessed", "/payment/failure/report", "/payment/telephony/report"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/service/PaymentRefundsService.java", "endpoints": {"api_summary": "This file defines a REST API service for managing payment refunds. It includes endpoints for creating refunds, validating retrospective remission requests, updating the remission amount, checking refunds against remissions, deleting refunds by reference, and retrieving approved refunds from the refund service.", "methods": ["GET", "POST"], "paths": ["/payment/refunds", "/payment/refunds/remission", "/payment/refunds/remission/<built-in function id>", "/payment/refunds/<paymentReference>", "/payment/refunds/<refundReference>", "/payment/refunds/approved/<ccdCaseNumber>"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/service/PaymentRefundsServiceImpl.java", "endpoints": {"api_summary": "This file defines several REST API endpoints for managing payments and refunds. It includes endpoints for creating refunds, validating retrospective remission requests, updating the remission amount, and deleting refunds by refund reference. It also includes endpoints for checking refunds against remissions and fee apportionments. The endpoints are used to manage the lifecycle of payments and refunds in a system.", "methods": ["GET", "POST", "DELETE"], "paths": ["/refund", "/refund", "/refund/<built-in function id>"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/service/IacServiceImpl.java", "endpoints": {"api_summary": "This file defines a REST API endpoint for retrieving supplementary information for IAC payments. It uses the Spring framework for defining the API endpoints and for handling HTTP requests and responses. The endpoint is used to retrieve supplementary information for IAC payments.", "methods": ["POST"], "paths": ["/supplementary-details"]}}
{"file": "cloned/ccpay-payment-app/api/src/contractTest/java/uk/gov/hmcts/payment/api/controllers/consumer/ReferenceDataLocationConsumerTest.java", "endpoints": {"api_summary": "This API endpoint is used to retrieve organisational service details. It provides information about the jurisdiction, service ID, organisational unit, business area, service description, service code, service short description, CCD service name, and CCD case types. This information is used to manage and organize services within the system.", "methods": ["GET"], "paths": ["/refdata/location/orgServices"]}}
{"file": "cloned/ccpay-payment-app/api/src/contractTest/java/uk/gov/hmcts/payment/api/controllers/provider/CardPaymentProviderTest.java", "endpoints": {"api_summary": "This file contains a set of tests for a REST API that manages card payments. It uses the Pact framework to verify the contract between the provider and the consumer. The API allows for the creation, retrieval, and search of payments. It also handles the retrieval of payment details.", "methods": ["GET", "POST"], "paths": ["/payments", "/payments/<payment_reference>", "/payments/search"]}}
{"file": "cloned/ccpay-payment-app/api/src/functionalTest/java/uk/gov/hmcts/payment/functional/PBAPaymentFunctionalTest.java", "endpoints": {"api_summary": "This file contains a set of functional tests for the Payment API. It defines several REST API endpoints for creating, retrieving, and deleting payments. The API endpoints are used to interact with the Payment API, which is used for handling payments in different services such as Probate, Civil, IAC, FPL, and SPEC.", "methods": ["GET", "POST", "DELETE"], "paths": ["/payments", "/payments/{reference}", "/payments/search", "/payments/ccd/{ccdCaseNumber}", "/payments/groups", "/payments/groups/{paymentGroupReference}"]}}
{"file": "cloned/ccpay-payment-app/api/src/functionalTest/java/uk/gov/hmcts/payment/functional/RefundsRequestorJourneyPBAFunctionalTest.java", "endpoints": {"api_summary": "This file contains a set of functional tests for the PBA Payment API. It covers various scenarios such as creating PBA payments, adding remissions, submitting refunds, and handling various error scenarios. It also includes tests for failed payments, null contact details, invalid contact details, and more.", "methods": ["GET", "POST"], "paths": ["/payments", "/payments/{paymentReference}", "/payments/refunds", "/payments/refunds/{refundReference}", "/payments/remissions", "/payments/remissions/{remissionReference}", "/payments/chargebacks", "/payments/chargebacks/{failureReference}", "/payments/status-update-second", "/payments/payment-groups/{ccdCaseNumber}", "/payments/payment-apportion/{paymentReference}"]}}
{"file": "cloned/ccpay-payment-app/api/src/functionalTest/java/uk/gov/hmcts/payment/functional/RefundsRequestorJourneyTelephonyPaymentFunctionalTest.java", "endpoints": {"api_summary": "This file contains a set of functional tests for a REST API. It defines several endpoints for creating, updating, and deleting payments and refunds. It also includes endpoints for initiating telephony payments and handling callbacks from a telephony service.", "methods": ["GET", "POST", "DELETE"], "paths": ["/payments", "/payments/{paymentReference}", "/refunds", "/refunds/{refundReference}", "/telephony-payments", "/telephony-callback"]}}
{"file": "cloned/ccpay-payment-app/api/src/functionalTest/java/uk/gov/hmcts/payment/functional/OnlineCardPaymentFunctionalTest.java", "endpoints": {"api_summary": "This file contains a set of functional tests for the online card payment system. It uses a mix of JUnit and Serenity BDD to define the tests. The tests cover the creation, retrieval, and validation of card payments. They also test the retrieval of payments, remissions, and fees by payment-group-reference. The tests also include a test for a refund for a card payment, which is currently not supported.", "methods": ["GET", "POST"], "paths": ["/payments", "/payments/{reference}", "/payments/groups/{ccdCaseNumber}", "/govpay/{reference}"]}}
{"file": "cloned/ccpay-payment-app/api/src/functionalTest/java/uk/gov/hmcts/payment/functional/PaymentsSearchFunctionalTest.java", "endpoints": {"api_summary": "This file is a test file for a payment system. It uses JUnit for testing and RestAssured for making HTTP requests. It also uses a custom DSL (Domain Specific Language) for making requests to the API.", "methods": [], "paths": []}}
{"file": "cloned/ccpay-payment-app/api/src/functionalTest/java/uk/gov/hmcts/payment/functional/TelephonyPaymentsTest.java", "endpoints": {"api_summary": "This file contains a set of functional tests for a telephony payments API. It uses a variety of endpoints to create, retrieve, and update telephony payments. It also includes endpoints for card payments, payment group creation, and payment report retrieval.", "methods": ["GET", "POST"], "paths": ["/payments", "/payments/{paymentReference}", "/payments/search", "/payments/groups", "/payments/groups/{paymentGroupReference}", "/payments/telephony", "/payments/telephony/{paymentReference}", "/payments/telephony/callback", "/payments/reports"]}}
{"file": "cloned/ccpay-payment-app/api/src/functionalTest/java/uk/gov/hmcts/payment/functional/ServiceRequestBasedOnlineCardPayment.java", "endpoints": {"api_summary": "This file contains a set of functional tests for a RESTful API. It defines several endpoints for creating, retrieving, and deleting online card payments. The API endpoints are used to manage payments for service requests.", "methods": ["GET", "POST"], "paths": ["/service-requests", "/service-requests/{serviceRequestReference}/online-card-payments", "/payments/{paymentReference}", "/payments/internal-reference/{internalReference}"]}}
{"file": "cloned/ccpay-payment-app/api/src/functionalTest/java/uk/gov/hmcts/payment/functional/PaymentStatusFunctionalTest.java", "endpoints": {"api_summary": "This file contains a set of functional tests for the Payment API. It covers various scenarios such as creating payments, refunding payments, and handling payment failures. It also includes tests for unprocessed payments, payment status updates, and payment failure reports.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/payments", "/payments/<built-in function id>", "/refunds", "/chargebacks", "/unprocessed-payments", "/payment-failures", "/payment-failure-reports"]}}
{"file": "cloned/ccpay-payment-app/api/src/functionalTest/java/uk/gov/hmcts/payment/functional/s2s/S2sApi.java", "endpoints": {"api_summary": "This file defines a REST API endpoint for service token generation. It uses the POST method to send a request to the '/lease' endpoint with a JSON body containing the microservice name and one-time password. The response is expected to be a text/plain format.", "methods": ["POST"], "paths": ["/lease"]}}
{"file": "cloned/ccpay-payment-app/api/src/functionalTest/java/uk/gov/hmcts/payment/functional/fixture/PaymentFixture.java", "endpoints": {"api_summary": "This file contains a set of utility methods for generating various types of payment requests. These methods are used to create instances of various payment request objects, which can be used for testing or for simulating real-world payment scenarios. The requests are created with various parameters such as amount, description, case reference, service, currency, site ID, and fees. The methods are grouped by the type of payment they represent, such as card payments, credit account payments, and bar payments.", "methods": ["GET", "POST"], "paths": ["/payment/card", "/payment/account", "/payment/bar", "/payment/refund", "/payment/chargeback", "/payment/remission"]}}
{"file": "cloned/ccpay-payment-app/api/src/functionalTest/java/uk/gov/hmcts/payment/functional/idam/IdamApi.java", "endpoints": {"api_summary": "This file defines several REST API endpoints for user management and authentication. It includes endpoints for creating, deleting, and authenticating users. It also includes endpoints for exchanging codes for access tokens.", "methods": ["POST", "DELETE", "POST", "POST", "POST"], "paths": ["/testing-support/accounts", "/testing-support/accounts/{email}", "/oauth2/authorize", "/oauth2/token", "/o/token"]}}
{"file": "cloned/ccpay-payment-app/api/src/functionalTest/java/uk/gov/hmcts/payment/functional/service/RefDataTestService.java", "endpoints": {"api_summary": "This file contains a service class for testing the reference data API. It provides methods for posting an organisation and approving an organisation. It also includes a method for reading file contents.", "methods": ["POST", "PUT"], "paths": ["/refdata/internal/v1/organisations", "/refdata/internal/v1/organisations/{organisationIdentifier}"]}}
{"file": "cloned/ccpay-payment-app/api/src/functionalTest/java/uk/gov/hmcts/payment/functional/service/PaymentTestService.java", "endpoints": {"api_summary": "This file defines a set of REST API endpoints for a payment service. It includes endpoints for card payments, credit account payments, payment records, and other related operations. It also includes endpoints for managing refunds, payment failures, and other payment-related operations.", "methods": ["GET", "POST", "PATCH", "DELETE"], "paths": ["/card-payments", "/card-payments/{reference}", "/payments/{reference}", "/accounts/{accountNumber}", "/credit-account-payments", "/refund-for-payment", "/refund-retro-remission", "/payments/ccd_case_reference/{ccd_case_number}/lag_time/{lag_time}", "/payment-records", "/credit-account-payments/{reference}", "/pba-accounts/{accountNumber}/payments", "/reconciliation-payments?ccd_case_number={ccdCaseNumber}", "/reconciliation-payments?ccd_case_number={ccdCaseNumber}", "/reconciliation-payments?end_date={endDate}&start_date={startDate}", "/reconciliation-payments?end_date={endDate}&start_date={startDate}", "/reconciliation-payments?end_date={endDate}&start_date={startDate}", "/reconciliation-payments?end_date={endDate}&start_date={startDate}", "/telephony-payments/telephony-payments-report?date_from={dateFrom}&date_to={dateTo}", "/cases/{ccdcasenumber}/paymentgroups", "/credit-account-payments/{paymentReference}", "/refund/{reference}", "/payment-failures/bounced-cheque", "/payment-failures/chargeback", "/payment-failures/{paymentReference}", "/payment-status-delete/{failureReference}", "/payment-failures/{failureReference}", "/payment-failures/unprocessed-payment", "/bulk-scan-payment", "/bulk-scan-payments", "/case/{dcn}", "/bulk-scan-payment/{dcn}", "/refunds/payments?paymentReferenceList={paymentReferenceList}", "/payment-groups/fee-pay-apportion/{paymentreference}", "/payment-failures/failure-report"]}}
{"file": "cloned/ccpay-payment-app/api/src/functionalTest/java/uk/gov/hmcts/payment/functional/service/ServiceRequestTestService.java", "endpoints": {"api_summary": "This file defines a set of REST API endpoints for a payment service. It includes endpoints for creating service requests, fetching payment groups, creating PBA payments for a service request, creating online card payments for a service request, and fetching the status of an online card payment for an internal reference. These endpoints are used to manage and interact with payment-related services.", "methods": ["GET", "POST"], "paths": ["/service-request", "/cases/{ccdcasenumber}/paymentgroups", "/service-request/{serviceRequestReference}/pba-payments", "/service-request/{service-request-reference}/card-payments", "/card-payments/{internal-reference}/status"]}}
{"file": "cloned/ccpay-payment-app/api/src/functionalTest/java/uk/gov/hmcts/payment/functional/service/CaseTestService.java", "endpoints": {"api_summary": "This file contains a service class for testing cases in the HMCTS payment system. It defines a single REST API endpoint that allows retrieval of payment groups for a specific case.", "methods": ["GET"], "paths": ["/cases/{ccdcasenumber}/paymentgroups"]}}
{"file": "cloned/ccpay-payment-app/api/src/functionalTest/java/uk/gov/hmcts/payment/functional/dsl/PaymentsTestDsl.java", "endpoints": {"api_summary": "This file defines a set of REST API endpoints for managing payments. It includes endpoints for creating, updating, and retrieving payments, payment groups, and account information. It also includes endpoints for handling remissions, bulk scan payments, and telephony callbacks. It also includes endpoints for managing service requests and payments.", "methods": ["GET", "POST", "PUT", "PATCH"], "paths": ["/payment-groups/{reference}", "/users/{userToken}/payments/{paymentId}", "/accounts/{accountNumber}", "/info", "/service-request", "/service-request/{service_request_reference}/pba-payments", "/card-payments", "/payment-groups/{payment-group-reference}/telephony-card-payments", "/payment-records", "/remissions", "/payment-groups/{payment-group-reference}/fees/{unique_fee_id}/remissions", "/payment-groups/{payment-group-reference}/fees/{unique_fee_id}/retro-remission", "/payment-groups", "/payment-groups/{payment-group-reference}", "/payment-groups/{payment-group-reference}/bulk-scan-payments", "/payment-groups/{payment-group-reference}/bulk-scan-payments-strategic", "/payment-groups/bulk-scan-payments", "/payment-groups/{payment-group-reference}", "/payment-groups/{payment-group-reference}", "/payment-groups/{payment-group-reference}", "/reconciliation-payments", "/reconciliation-payments", "/reconciliation-payments", "/payments", "/jobs/card-payments-status-update", "/jobs/unprocessed-payment-update", "/telephony/callback"]}}
{"file": "cloned/ccpay-payment-app/api/src/test/java/uk/gov/hmcts/payment/api/componenttests/CreditAccountPaymentControllerMockTest.java", "endpoints": {"api_summary": "This file defines two REST API endpoints for a Credit Account Payment service. The first endpoint, GET /credit-account-payments/{reference}, retrieves a payment by its reference. The second endpoint, DELETE /credit-account-payments/{reference}, deletes a payment by its reference.", "methods": ["GET", "DELETE"], "paths": ["/credit-account-payments/{reference}", "/credit-account-payments/{reference}"]}}
{"file": "cloned/ccpay-payment-app/api/src/test/java/uk/gov/hmcts/payment/api/componenttests/GovPayComponentMockTest.java", "endpoints": {"api_summary": "This API provides endpoints for creating and retrieving payments using the GovPay service. It allows users to create new payments and retrieve existing payments.", "methods": ["GET", "POST"], "paths": ["/v1/payments"]}}
{"file": "cloned/ccpay-payment-app/api/src/test/java/uk/gov/hmcts/payment/api/componenttests/PaymentRefundsServiceTest.java", "endpoints": {"api_summary": "This file contains a set of tests for the PaymentRefundsService class. It tests the functionality of the service for creating and updating refunds, as well as checking refunds against remissions. It also includes tests for validating contact details and partial refunds.", "methods": ["GET", "POST"], "paths": ["/payment-refunds-service/create-refund", "/payment-refunds-service/update-remission", "/payment-refunds-service/check-refund-against-remission", "/payment-refunds-service/validate-contact-details", "/payment-refunds-service/validate-partial-refunds"]}}
{"file": "cloned/ccpay-payment-app/api/src/test/java/uk/gov/hmcts/payment/api/componenttests/LiberataApportionmentTest.java", "endpoints": {"api_summary": "This file contains a set of test cases for the payment API. It tests various functionalities of the API such as apportionment, payment channel, and date created. It also tests the feature toggling of the apportionment feature.", "methods": ["GET", "POST"], "paths": ["/api/ff4j/store/features/payment-search/enable", "/api/ff4j/store/features/bulk-scan-check/enable", "/payments"]}}
{"file": "cloned/ccpay-payment-app/api/src/test/java/uk/gov/hmcts/payment/api/componenttests/serviceanduser/ServiceAndUserTestApplication.java", "endpoints": {"api_summary": "This file defines a REST API for testing purposes. It includes endpoints for testing the authentication and authorization of users and services. The API allows for the retrieval of user and service details.", "methods": ["GET"], "paths": ["/test"]}}
{"file": "cloned/ccpay-payment-app/api/src/test/java/uk/gov/hmcts/payment/api/controllers/CreditAccountPaymentControllerTest.java", "endpoints": {"api_summary": "This file contains several REST API endpoints for managing credit account payments. It includes endpoints for creating, retrieving, and deleting credit account payments. It also includes endpoints for retrieving payment statuses and for validating credit account payments. The API endpoints are designed to interact with the account service and the payment repository.", "methods": ["GET", "POST", "DELETE"], "paths": ["/credit-account-payments", "/credit-account-payments/<built-in function id>", "/credit-account-payments/<built-in function id>/statuses", "/payment-groups/<built-in function id>"]}}
{"file": "cloned/ccpay-payment-app/api/src/test/java/uk/gov/hmcts/payment/api/controllers/BulkScanningReportControllerTest.java", "endpoints": {"api_summary": "This file contains a set of tests for a Bulk Scanning Report Controller in a payment system. It tests various functionalities of the controller such as generating reports, handling different payment providers, and handling different report types. It also tests error handling for invalid report types and date formats.", "methods": ["GET"], "paths": ["/payment/bulkscan-data-report"]}}
{"file": "cloned/ccpay-payment-app/api/src/test/java/uk/gov/hmcts/payment/api/controllers/OrderControllerTest.java", "endpoints": {"api_summary": "This file contains a set of tests for the OrderController in the uk.gov.hmcts.payment.api.controllers package. It tests various scenarios related to creating payments for orders, such as successful payment, payment with account on hold, account not found, and invalid currency. It also tests scenarios where the order reference is not found, duplicate fees in the order, and invalid case type. The tests use a mocked account service and reference data service to simulate different scenarios.", "methods": ["GET", "POST"], "paths": ["/order", "/order/{orderReference}/credit-account-payment"]}}
{"file": "cloned/ccpay-payment-app/api/src/test/java/uk/gov/hmcts/payment/api/controllers/PaymentRecordControllerTest.java", "endpoints": {"api_summary": "This file contains a set of tests for the PaymentRecordController. It tests various aspects of the payment record functionality, including creating, retrieving, and validating payments. It also tests the error handling for invalid requests.", "methods": ["GET", "POST"], "paths": ["/payment-records", "/payments", "/api/ff4j/store/features/payment-search/enable"]}}
{"file": "cloned/ccpay-payment-app/api/src/test/java/uk/gov/hmcts/payment/api/controllers/ServiceRequestReportControllerTest.java", "endpoints": {"api_summary": "This API endpoint is used to generate and email a duplicate service request report. It accepts a date parameter in the format 'yyyy-MM-dd' and returns a report of duplicate service requests for that date. If the date parameter is not provided or is in an invalid format, the API will return an error message.", "methods": ["POST"], "paths": ["/jobs/email-duplicate-sr-report"]}}
{"file": "cloned/ccpay-payment-app/api/src/test/java/uk/gov/hmcts/payment/api/controllers/RemissionControllerTest.java", "endpoints": {"api_summary": "This API provides endpoints for creating and managing remissions. It allows users to create new remissions, retrieve existing remissions, and update existing remissions. Each remission is associated with a specific fee, and the API provides endpoints for managing these associations.", "methods": ["POST"], "paths": ["/remissions"]}}
{"file": "cloned/ccpay-payment-app/api/src/test/java/uk/gov/hmcts/payment/api/controllers/PaymentStatusControllerTest.java", "endpoints": {"api_summary": "This API provides endpoints for managing payment statuses. It includes endpoints for bounced cheques, chargebacks, retrieving payment failures by payment reference, deleting payment statuses by failure reference, updating payment statuses, and generating payment failure reports. It also includes endpoints for unprocessed payments and telephony payments reports.", "methods": ["GET", "POST", "PATCH", "DELETE"], "paths": ["/payment-failures/bounced-cheque", "/payment-failures/chargeback", "/payment-failures/RC-1637-5072-9888-4233", "/payment-status-delete/test", "/payment-failures/failureReference", "/payment-failures/unprocessed-payment", "/jobs/unprocessed-payment-update", "/payment-failures/failure-report", "/telephony-payments/telephony-payments-report"]}}
{"file": "cloned/ccpay-payment-app/api/src/test/java/uk/gov/hmcts/payment/api/controllers/PaymentReportControllerMockTest.java", "endpoints": {"api_summary": "This file contains a set of tests for the PaymentReportController. It defines several REST API endpoints for generating payment reports and sending them via email. The endpoints allow for the specification of payment method, start and end dates, and service name. The endpoints also handle validation errors.", "methods": ["POST"], "paths": ["/jobs/email-pay-reports", "/jobs/duplicate-payment-process"]}}
{"file": "cloned/ccpay-payment-app/api/src/test/java/uk/gov/hmcts/payment/api/controllers/RefundsControllerTest.java", "endpoints": {"api_summary": "This file contains a set of REST API endpoints for managing refunds and remissions. It includes endpoints for creating refunds, deleting refunds, updating remission amounts, and creating retroactive remission refunds. It also includes error handling for invalid requests and exceptions.", "methods": ["GET", "POST", "DELETE", "PATCH"], "paths": ["/refund-for-payment", "/refund/<refundReference>", "/refund-retro-remission", "/refund/resubmit/<paymentReference>"]}}
{"file": "cloned/ccpay-payment-app/api/src/test/java/uk/gov/hmcts/payment/api/controllers/FeePayApportionControllerTest.java", "endpoints": {"api_summary": "This file contains a set of tests for the FeePayApportionController. It tests the retrieval of apportion details for different payment references and fee IDs. It also tests the handling of exceptions and the response when a payment is not found.", "methods": ["GET"], "paths": ["/payment-groups/fee-pay-apportion/<reference>", "/payment-groups/fee-pay-apportion/<reference>", "/payment-groups/fee-pay-apportion/<reference>", "/payment-groups/fee-pay-apportion/<reference>", "/payment-groups/fee-pay-apportion/<reference>", "/payment-groups/fee-pay-apportion/<reference>", "/payment-groups/fee-pay-apportion/<reference>", "/payment-groups/fee-pay-apportion/<reference>", "/payment-groups/fee-pay-apportion/<reference>"]}}
{"file": "cloned/ccpay-payment-app/api/src/test/java/uk/gov/hmcts/payment/api/controllers/PaymentAllocationControllerTest.java", "endpoints": {"api_summary": "This file contains a set of tests for the PaymentAllocationController. It tests the functionality of the API endpoints related to payment allocations. The endpoints include adding a payment allocation, adding a payment allocation without a payment group reference, adding a payment allocation without a payment reference, adding a payment allocation for a solicited payment, adding a payment allocation for an unsolicited payment, adding a payment allocation for an unidentified payment, and handling the case when a payment is not found.", "methods": ["POST"], "paths": ["/payment-allocations"]}}
{"file": "cloned/ccpay-payment-app/api/src/test/java/uk/gov/hmcts/payment/api/controllers/ServiceRequestControllerTest.java", "endpoints": {"api_summary": "This file contains a set of tests for the ServiceRequestController class. It defines several REST API endpoints for creating and managing service requests. These endpoints include endpoints for creating PBA payments, handling account on hold, deleted, and insufficient funds scenarios, and more. The API endpoints are used to interact with the service request domain service, account service, and other related services.", "methods": ["GET", "POST"], "paths": ["/service-request/{serviceRequestReference}/pba-payments", "/service-request/{serviceRequestReference}/card-payments", "/card-payments/{internalReference}/status", "/service-request"]}}
{"file": "cloned/ccpay-payment-app/api/src/test/java/uk/gov/hmcts/payment/api/controllers/AccountControllerTest.java", "endpoints": {"api_summary": "This test class is used to test the AccountController in a Spring Boot application. It uses Mockito for mocking and stubbing the AccountService and AccountController, and it uses WireMock for stubbing HTTP requests. It also uses JUnit for testing.", "methods": [], "paths": []}}
{"file": "cloned/ccpay-payment-app/model/src/main/java/uk/gov/hmcts/payment/api/service/PciPalPaymentService.java", "endpoints": {"api_summary": "This file defines a REST API service for handling payments using the PCI PAL service. It provides endpoints for creating, updating, retrieving, and searching payments. It also includes endpoints for managing telephony provider authorisation tokens and launching telephony provider links.", "methods": ["GET", "POST"], "paths": ["/getTelephonyProviderLink", "/getPaymentProviderAutorisationTokens", "/create", "/update", "/retrieve", "/search"]}}
{"file": "cloned/ccpay-payment-app/model/src/main/java/uk/gov/hmcts/payment/api/service/ReferenceDataServiceImpl.java", "endpoints": {"api_summary": "This file defines a REST API service for retrieving organisational service details and site IDs. It uses the Spring framework for routing and HTTP method annotations. The service interacts with a reference data service to retrieve organisational service details and site IDs.", "methods": ["GET"], "paths": ["/refdata/location/orgServices"]}}
{"file": "cloned/ccpay-payment-app/model/src/main/java/uk/gov/hmcts/payment/api/service/AccountServiceImpl.java", "endpoints": {"api_summary": "This file defines a REST API endpoint for retrieving account information. It uses the Spring framework for building the API and Resilience4j for handling failures and latency. The endpoint is used to retrieve account information for a given PBA code.", "methods": ["GET"], "paths": ["/accounts/<pbaCode>"]}}
{"file": "cloned/ccpay-payment-app/model/src/main/java/uk/gov/hmcts/payment/api/service/govpay/GovPayDelegatingPaymentService.java", "endpoints": {"api_summary": "This file defines a REST API for interacting with the GovPay service. It provides endpoints for creating, retrieving, and cancelling payments. It also supports searching for payments based on certain criteria.", "methods": ["GET", "POST"], "paths": ["/create", "/retrieve/<id>", "/cancel/<cancelUrl>", "/search"]}}
{"file": "cloned/ccpay-payment-app/model/src/test/java/uk/gov/hmcts/payment/api/service/PaymentServiceImplTest.java", "endpoints": {"api_summary": "This file is a test file for a Payment Service in Java. It does not define any REST API endpoints explicitly. It uses Mockito for mocking and stubbing the PaymentServiceImpl and Payment2Repository. It tests the methods of the PaymentServiceImpl class.", "methods": [], "paths": []}}
{"file": "cloned/ccpay-payment-app/reference-data/src/main/java/uk/gov/hmcts/payment/referencedata/controllers/ReferenceDataController.java", "endpoints": {"api_summary": "This API provides a list of allowed sites. It is used to validate and ensure that only valid sites are used in the system.", "methods": ["GET"], "paths": ["/reference-data/sites"]}}
{"file": "cloned/ccpay-payment-app/reference-data/src/test/java/uk/gov/hmcts/payment/referencedata/controllers/ReferenceDataControllerTest.java", "endpoints": {"api_summary": "This API endpoint provides a list of all sites in the system. It uses the GET method to retrieve this data.", "methods": ["GET"], "paths": ["/reference-data/sites"]}}
{"file": "cloned/ccpay-payment-app/case-payment-orders-client/src/main/java/uk/gov/hmcts/payment/casepaymentorders/client/CpoServiceClient.java", "endpoints": {"api_summary": "This file defines a REST API client for interacting with the Case Payment Orders service. It provides a method to retrieve case payment orders. The method accepts several query parameters to filter the results. The client also handles errors and includes authorization headers for user and service-to-service authentication.", "methods": ["GET"], "paths": ["/case-payment-orders"]}}
{"file": "cloned/ccpay-payment-app/case-payment-orders-client/src/test/java/uk/gov/hmcts/payment/casepaymentorders/client/CpoServiceClientTest.java", "endpoints": {"api_summary": "This API provides endpoints for managing case payment orders. It allows retrieval of case payment orders based on various parameters such as IDs, case IDs, and pagination parameters. It also handles error responses from the server, returning custom exceptions for specific HTTP status codes.", "methods": ["GET"], "paths": ["/case-payment-orders"]}}
{"file": "cloned/php-gaming-website/assets/js/Chat/ChatService.js", "endpoints": {"api_summary": "This service provides endpoints for chat operations. It allows users to write messages to a specific chat and retrieve all messages from a specific chat.", "methods": ["GET", "POST"], "paths": ["/api/chat/chats/<chatId>/write-message", "/api/chat/chats/<chatId>/messages"]}}
{"file": "cloned/php-gaming-website/assets/js/ConnectFour/GameService.js", "endpoints": {"api_summary": "This file contains a GameService class that provides several methods for interacting with a game server. The methods include redirecting to a game, making a move, aborting a game, resigning from a game, and joining a game. These methods are all RESTful and use HTTP methods such as GET and POST.", "methods": ["GET", "POST"], "paths": ["/game/<gameId>", "/api/connect-four/games/<gameId>/move", "/api/connect-four/games/<gameId>/abort", "/api/connect-four/games/<gameId>/resign", "/api/connect-four/games/<gameId>/join"]}}
{"file": "cloned/saleor/saleor/urls.py", "endpoints": {"api_summary": "This file defines several REST API endpoints for a Django application. The API endpoints include a GraphQL endpoint, a digital product download endpoint, plugin webhook endpoints, a thumbnail generation endpoint, and a JWKS endpoint. These endpoints are used to interact with the application's data and functionality.", "methods": ["GET", "POST"], "paths": ["/graphql/", "/digital-download/<token>/", "/plugins/channel/<channel_slug>/<plugin_id>/", "/plugins/global/<plugin_id>/", "/plugins/<plugin_id>/", "/thumbnail/<instance_id>/<size>/<format>/", "/.well-known/jwks.json"]}}
{"file": "cloned/saleor/saleor/product/search.py", "endpoints": {"api_summary": "This file contains a set of utility functions for managing and searching products in a Django application. It includes functions for preparing product search vectors, generating search vectors for variants, attributes, and attribute values, and searching products. It also includes a function for updating the search vector of products in batches.", "methods": ["GET", "POST"], "paths": ["/products/search", "/products/update_search_vector"]}}
{"file": "cloned/saleor/saleor/product/managers.py", "endpoints": {"api_summary": "This file contains a set of Django models and managers for managing products, variants, collections, and their related data. It also includes methods for querying and annotating these models, and for sorting and filtering them. It does not define any REST API endpoints explicitly.", "methods": [], "paths": []}}
{"file": "cloned/saleor/saleor/product/models.py", "endpoints": {"api_summary": "This file defines several REST API endpoints for managing products, categories, and collections. It includes endpoints for creating, reading, updating, and deleting these resources. The endpoints are designed to be used in a Django-based web application.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/categories", "/categories/<built-in function id>", "/products", "/products/<built-in function id>", "/variants", "/variants/<built-in function id>", "/collections", "/collections/<built-in function id>"]}}
{"file": "cloned/saleor/saleor/product/views.py", "endpoints": {"api_summary": "This file defines a single REST API endpoint that allows users to download digital products. The endpoint accepts a token as a parameter and returns a file if the token is valid. If the token is not valid, it returns a 404 error.", "methods": ["GET"], "paths": ["/digital_product/<str:token>"]}}
{"file": "cloned/saleor/saleor/product/tests/test_product.py", "endpoints": {"api_summary": "This file contains tests for various functions related to product management, including filtering, cleaning, and getting prices. It also includes tests for digital product views, downloads, and media deletion. It also includes a task for updating variant names.", "methods": [], "paths": []}}
{"file": "cloned/saleor/saleor/product/migrations/0183_calculate_discounted_prices.py", "endpoints": {"api_summary": "This file contains a set of functions that manage discounts for products and product variants in a Django application. It uses Django's ORM to interact with the database and perform operations such as fetching discounts, updating product and variant prices, and calculating the minimal price of a product or variant. It also includes a migration that runs the discount calculation when the migration is applied.", "methods": [], "paths": []}}
{"file": "cloned/saleor/saleor/csv/tests/export/products_data/test_prepare_headers.py", "endpoints": {"api_summary": "This file contains utility functions for generating headers for different types of data and export fields and headers for products. These functions could be used in a REST API to generate the headers for a response to a GET request.", "methods": ["GET"], "paths": ["/products"]}}
{"file": "cloned/saleor/saleor/csv/utils/products_data.py", "endpoints": {"api_summary": "This file contains a set of functions that are used to generate data for exporting products and their variants. It includes functions for preparing data about product and variant relations, handling attributes, channels, and warehouses. It also includes functions for adding collection, image, and attribute information to the data.", "methods": [], "paths": []}}
{"file": "cloned/saleor/saleor/webhook/tests/test_payment_webhook_utils.py", "endpoints": {"api_summary": "This file contains a set of tests for various functions in the payment module of the project. It tests the functionality of the payment gateway, transaction parsing, and the clearing of successful deliveries. It does not define any REST API endpoints.", "methods": [], "paths": []}}
{"file": "cloned/saleor/saleor/webhook/tests/test_webhook_sample_payloads.py", "endpoints": {"api_summary": "This file contains a set of unit tests for a webhook payload generation system. The tests are checking the generation of different types of payloads for different webhook events.", "methods": [], "paths": []}}
{"file": "cloned/saleor/saleor/webhook/tests/test_utils.py", "endpoints": {"api_summary": "This file contains a set of tests for a webhook system. It defines several fixtures and test cases for testing the functionality of the webhook system. It does not define any REST API endpoints explicitly.", "methods": [], "paths": []}}
{"file": "cloned/saleor/saleor/webhook/tests/test_webhook_payloads.py", "endpoints": {"api_summary": "This file contains utility functions and classes used for generating payloads for various webhook events. It does not contain any explicit REST API endpoints.", "methods": [], "paths": []}}
{"file": "cloned/saleor/saleor/webhook/tests/subscription_webhooks/test_create_deliveries_for_taxes.py", "endpoints": {"api_summary": "This file defines REST API endpoints for calculating taxes for checkouts and orders. The endpoints are used to calculate the taxes for a given checkout or order.", "methods": ["POST"], "paths": ["/checkout/calculate-taxes", "/order/calculate-taxes"]}}
{"file": "cloned/saleor/saleor/webhook/tests/subscription_webhooks/test_create_deliveries_for_transaction_process_session.py", "endpoints": {"api_summary": "This file defines several REST API endpoints for managing transactions. These endpoints are used to process transactions, which can be initiated from either a checkout or an order. The endpoints are used to create, update, and retrieve transaction data. They also allow for the retrieval of transaction data based on the source object, which can be either a checkout or an order.", "methods": ["POST"], "paths": ["/transaction/process/checkout", "/transaction/process/order", "/transaction/source_object/checkout", "/transaction/source_object/order"]}}
{"file": "cloned/saleor/saleor/webhook/observability/utils.py", "endpoints": {"api_summary": "This file defines several REST API endpoints for an observability service. It includes endpoints for fetching webhooks, reporting API calls, and reporting event delivery attempts. These endpoints are used to monitor and report on the performance and behavior of the system.", "methods": ["GET", "POST"], "paths": ["/get_webhooks", "/report_api_call", "/report_event_delivery_attempt"]}}
{"file": "cloned/saleor/saleor/webhook/observability/payloads.py", "endpoints": {"api_summary": "This file contains code for generating payloads for API calls and event delivery attempts. It includes functions for serializing headers, GraphQL operations, and event payloads. It also includes functions for generating API call and event delivery attempt payloads.", "methods": ["POST", "GET"], "paths": ["/generate_api_call_payload", "/generate_event_delivery_attempt_payload"]}}
{"file": "cloned/saleor/saleor/webhook/observability/tests/test_payloads.py", "endpoints": {"api_summary": "This file contains tests for various functions related to the generation of payloads for API calls and event delivery attempts. It also includes tests for serialization of GraphQL operations, headers, and obfuscation of sensitive data. It does not explicitly define any REST API endpoints.", "methods": [], "paths": []}}
{"file": "cloned/saleor/saleor/webhook/transport/utils.py", "endpoints": {"api_summary": "This file contains a collection of functions and classes that handle webhooks, which are HTTP callbacks that are triggered by specific events. Webhooks can be used to notify external services about changes in the system. The file also includes functions for sending webhooks using different protocols such as HTTP, AWS SQS, and Google Cloud PubSub. It also includes functions for handling webhook retries, creating and updating webhook attempts, and managing event deliveries.", "methods": ["GET", "POST"], "paths": ["/webhooks", "/webhooks/<built-in function id>"]}}
{"file": "cloned/saleor/saleor/webhook/transport/asynchronous/tests/test_create_deliveries_for_subscriptions.py", "endpoints": {"api_summary": "This file contains unit tests for the webhook functionality of a Django application. It tests the creation of event deliveries for different scenarios, such as when the payload changes, when the payload does not change, and when there are more objects than the maximum number of webhook events in the database bulk.", "methods": [], "paths": []}}
{"file": "cloned/saleor/saleor/webhook/transport/tests/test_list_stored_payment_methods.py", "endpoints": {"api_summary": "This file contains a set of tests for various functions related to payment methods. It includes functions for listing stored payment methods, deleting stored payment methods, initializing tokenization for payment gateways, and tokenizing payment methods. These functions are used to manage and interact with payment methods in the system.", "methods": ["GET", "POST"], "paths": ["/payment/list_stored_payment_methods", "/payment/delete_stored_payment_method", "/payment/initialize_tokenization", "/payment/tokenize_payment_method"]}}
{"file": "cloned/saleor/saleor/webhook/transport/synchronous/transport.py", "endpoints": {"api_summary": "This file contains a set of functions and tasks related to webhook handling, transaction requests, and tax data processing. It also includes functions for sending synchronous webhook requests, triggering webhooks synchronously, and triggering all webhooks synchronously for tax data. It also includes functions for handling transaction requests and creating deliveries for subscription sync events.", "methods": ["POST"], "paths": ["/webhook/handle_transaction_request_task", "/webhook/send_webhook_request_sync", "/webhook/trigger_webhook_sync_if_not_cached", "/webhook/create_delivery_for_subscription_sync_event", "/webhook/trigger_webhook_sync", "/webhook/trigger_taxes_all_webhooks_sync", "/webhook/trigger_transaction_request"]}}
{"file": "cloned/saleor/saleor/webhook/response_schemas/transaction.py", "endpoints": {"api_summary": "This file defines several REST API endpoints for a payment gateway system. It includes endpoints for initializing a payment session, processing transactions, and handling transaction events. These endpoints are used to manage transactions, such as charging, refunding, and cancelling transactions. The endpoints are designed to be used in a RESTful manner, with each endpoint representing a specific action or resource.", "methods": ["GET", "POST"], "paths": ["/payment/initialize_session", "/payment/transaction/charge", "/payment/transaction/refund", "/payment/transaction/cancel", "/payment/transaction/event"]}}
{"file": "cloned/saleor/saleor/tests/e2e/metadata/utils/update_metadata.py", "endpoints": {"api_summary": "This file contains a single GraphQL mutation for updating metadata. It is used to update the metadata of an item with a given ID and input. The mutation returns the updated metadata or any errors that occurred during the update.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/tests/e2e/metadata/utils/delete_metadata.py", "endpoints": {"api_summary": "This file contains a single GraphQL mutation for deleting metadata. It is used to remove specific metadata from an item identified by its ID. The mutation takes in an ID and a list of keys, and returns the updated metadata for the item.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/tests/e2e/orders/test_draft_order_update_uses_denormalized_prices.py", "endpoints": {"api_summary": "This file contains a set of tests for a REST API. It defines several endpoints for creating, updating, and deleting orders, as well as managing promotions and shipping methods. It also includes tests for updating channel listings and shipping method prices.", "methods": ["POST", "PUT", "DELETE"], "paths": ["/draft_order_create", "/draft_order_update", "/order_line_delete", "/order_lines_create", "/create_product_variant_channel_listing", "/create_shipping_method", "/create_shipping_method_channel_listing"]}}
{"file": "cloned/saleor/saleor/tests/e2e/orders/discounts/test_order_voucher_specific_product_and_manual_line_discount.py", "endpoints": {"api_summary": "This file contains a set of tests for a REST API. It defines several endpoints for creating, updating, and deleting resources. It also includes endpoints for managing vouchers and discounts.", "methods": ["POST", "PUT", "DELETE"], "paths": ["/draft_order_create", "/order_lines_create", "/order_update_shipping", "/draft_order_update", "/order_line_discount_update", "/draft_order_complete"]}}
{"file": "cloned/saleor/saleor/tests/e2e/orders/discounts/test_manual_total_discount_applied_on_draft_order.py", "endpoints": {"api_summary": "This file contains two endpoints for managing draft orders. The endpoints are used to create, update, and complete draft orders. The endpoints also support adding discounts to the orders.", "methods": ["POST", "PUT", "POST"], "paths": ["/draft_order_create", "/order_lines_create", "/order_update_shipping", "/order_discount_add", "/draft_order_complete"]}}
{"file": "cloned/saleor/saleor/tests/e2e/orders/discounts/test_order_voucher_entire_order_cheapest_product.py", "endpoints": {"api_summary": "This file contains a set of tests for a REST API. It defines several endpoints for creating, updating, and completing draft orders. It also includes endpoints for creating and updating vouchers.", "methods": ["POST", "PUT", "GET"], "paths": ["/draft_order_create", "/order_lines_create", "/order_update_shipping", "/draft_order_update", "/draft_order_complete", "/prepare_voucher"]}}
{"file": "cloned/saleor/saleor/tests/e2e/orders/discounts/test_order_voucher_entire_order.py", "endpoints": {"api_summary": "This file contains two REST API endpoints. The first endpoint is used to create a draft order with a voucher for a fixed entire order. The second endpoint is used to create a draft order with a voucher for a percentage entire order. Both endpoints use HTTP POST method.", "methods": ["POST"], "paths": ["/draft_order_with_voucher_fixed_entire_order_CORE_0928", "/draft_order_with_voucher_percentage_entire_order_CORE_0929"]}}
{"file": "cloned/saleor/saleor/tests/e2e/orders/discounts/test_order_products_on_catalog_promotion_and_voucher_entire.py", "endpoints": {"api_summary": "This file contains a set of functions that interact with a REST API. It prepares products, promotions, vouchers, and orders for testing purposes. It also includes a test function that tests the entire order process with a catalog promotion and a voucher.", "methods": ["POST", "GET", "PUT"], "paths": ["/product/tasks/recalculate_discounted_price_for_products_task", "/product/utils/create_category", "/product/utils/create_product", "/product/utils/create_product_channel_listing", "/product/utils/create_product_type", "/product/utils/create_product_variant", "/product/utils/create_product_variant_channel_listing", "/promotions/utils/create_promotion", "/promotions/utils/create_promotion_rule", "/shop/utils/preparing_shop", "/taxes/utils/update_country_tax_rates", "/utils/assign_permissions", "/vouchers/utils/create_voucher", "/vouchers/utils/create_voucher_channel_listing", "/utils/draft_order_complete", "/utils/draft_order_create", "/utils/draft_order_update", "/utils/order_lines_create", "/utils/order_update_shipping"]}}
{"file": "cloned/saleor/saleor/tests/e2e/orders/discounts/test_manual_order_discount_and_voucher.py", "endpoints": {"api_summary": "This file contains a set of tests for a REST API. It defines several endpoints for creating, updating, and deleting orders, as well as for managing vouchers and discounts. It also includes a function for preparing vouchers.", "methods": ["POST", "PUT", "DELETE"], "paths": ["/orders", "/orders/<order_id>", "/vouchers", "/discounts/<discount_id>"]}}
{"file": "cloned/saleor/saleor/tests/e2e/orders/discounts/test_order_voucher_free_shipping.py", "endpoints": {"api_summary": "This file contains a set of tests for a REST API. It defines several endpoints for creating, updating, and completing draft orders. It also includes endpoints for creating and updating vouchers.", "methods": ["POST", "PUT", "PATCH"], "paths": ["/draft_order_create", "/order_lines_create", "/order_update_shipping", "/draft_order_update", "/draft_order_complete", "/prepare_voucher"]}}
{"file": "cloned/saleor/saleor/tests/e2e/orders/discounts/test_order_products_on_promotion_and_manual_order_discount.py", "endpoints": {"api_summary": "This file contains a set of tests for a REST API. It tests the functionality of the API endpoints related to order creation, updating, and completion. It also tests the functionality of the API endpoints related to promotions and discounts.", "methods": ["POST"], "paths": ["/orders", "/orders/<built-in function id>", "/promotions", "/discounts"]}}
{"file": "cloned/saleor/saleor/tests/e2e/checkout/utils/checkout_email_update.py", "endpoints": {"api_summary": "This file contains a single GraphQL mutation for updating the email of a checkout. It is used to update the email of a checkout in the system.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/tests/e2e/checkout/discounts/test_checkout_with_promotion_and_voucher.py", "endpoints": {"api_summary": "This file contains a set of tests for a REST API. It defines several endpoints for creating, updating, and deleting resources. The endpoints are used to test the functionality of the API.", "methods": ["POST", "GET", "PUT", "DELETE"], "paths": ["/checkout", "/checkout/<built-in function id>", "/checkout/<built-in function id>/promo_code", "/checkout/<built-in function id>/lines", "/checkout/<built-in function id>/delivery_method", "/checkout/<built-in function id>/payment", "/checkout/<built-in function id>/complete"]}}
{"file": "cloned/saleor/saleor/tests/e2e/checkout/discounts/sales/test_checkout_with_fixed_sale_should_not_result_in_negative_price.py", "endpoints": {"api_summary": "This file contains a test suite for a REST API that manages sales and checkouts. It includes endpoints for creating, updating, and completing checkouts, as well as managing products and sales. The API is used to manage a shop's sales and checkouts, including creating sales, adding products to sales, and completing checkouts.", "methods": ["POST", "PUT", "GET"], "paths": ["/checkout/create", "/checkout/<checkout_id>/lines/add", "/checkout/<checkout_id>/lines/update", "/checkout/<checkout_id>/delivery_method/update", "/checkout/<checkout_id>/payment/create", "/checkout/<checkout_id>/complete", "/product/prepare", "/sale/prepare"]}}
{"file": "cloned/saleor/saleor/tests/e2e/checkout/discounts/sales/test_checkout_product_on_percentage_sale.py", "endpoints": {"api_summary": "This file contains a set of tests for a REST API. It tests the functionality of the API endpoints related to checkout, including creating a checkout, adding lines to the checkout, removing lines from the checkout, updating lines in the checkout, setting the delivery method for the checkout, creating a payment for the checkout, and completing the checkout. The tests are run using the pytest framework.", "methods": ["POST", "GET", "DELETE", "PUT"], "paths": ["/checkout/create", "/checkout/lines/add", "/checkout/lines/delete", "/checkout/lines/update", "/checkout/delivery_method/update", "/checkout/payment/create", "/checkout/complete"]}}
{"file": "cloned/saleor/saleor/tests/e2e/checkout/discounts/sales/test_checkout_product_on_fixed_sale.py", "endpoints": {"api_summary": "This file contains a set of tests for a REST API. It tests the functionality of the API endpoints related to checkout, including creating a checkout, adding lines to the checkout, removing lines from the checkout, updating lines in the checkout, setting the delivery method for the checkout, creating a payment for the checkout, and completing the checkout. The tests are run using the pytest framework.", "methods": ["POST", "GET", "DELETE", "PUT"], "paths": ["/checkout/create", "/checkout/lines/add", "/checkout/lines/delete", "/checkout/lines/update", "/checkout/delivery_method/update", "/checkout/payment/create", "/checkout/complete"]}}
{"file": "cloned/saleor/saleor/tests/e2e/checkout/discounts/promotions/test_promotion_discount_applied_on_checkout_with_specific_total_and_subtotal.py", "endpoints": {"api_summary": "The provided Python code does not define any REST API endpoints explicitly. It is a set of test cases for a REST API. It uses a mix of pytest and API calls to test the functionality of the API.", "methods": [], "paths": []}}
{"file": "cloned/saleor/saleor/tests/e2e/checkout/discounts/promotions/test_promotion_applied_on_checkout_with_subtotal_within_specified_range.py", "endpoints": {"api_summary": "This file contains two REST API endpoints. The first endpoint is used to create a new promotion. The second endpoint is used to apply a promotion to a checkout. Both endpoints are used to manage promotions and checkouts in a system.", "methods": ["POST", "PUT"], "paths": ["/promotions", "/checkouts/<built-in function id>"]}}
{"file": "cloned/saleor/saleor/tests/e2e/checkout/zero_total/test_0_total_checkout_with_order_promotion_and_free_shipping.py", "endpoints": {"api_summary": "This file contains a set of end-to-end tests for a checkout process in a web application. It tests the creation, addition, updating, and completion of a checkout process, including the application of a promotion and the selection of a delivery method. The tests are parameterized to test different payment strategies.", "methods": ["POST"], "paths": ["/checkout/create", "/checkout/lines/add", "/checkout/lines/update", "/checkout/delivery_method/update", "/checkout/complete"]}}
{"file": "cloned/saleor/saleor/tests/e2e/checkout/taxes/test_checkout_with_click_and_collect_calculate_simple_taxes_based_on_shipping_address.py", "endpoints": {"api_summary": "This file contains two endpoints for a checkout system. The endpoints are used to create, update, and complete a checkout process. The checkout process includes setting the billing address, setting the delivery method, and creating a payment. The endpoints are used in a system that manages products, taxes, and shipping.", "methods": ["POST", "PUT", "GET"], "paths": ["/checkout", "/checkout/billing_address", "/checkout/delivery_method", "/checkout/payment"]}}
{"file": "cloned/saleor/saleor/tests/e2e/vouchers/test_export_voucher_codes.py", "endpoints": {"api_summary": "This file contains a set of tests for a voucher management system. It defines several endpoints for creating, exporting, and validating vouchers. The endpoints are used to manage vouchers, including creating new vouchers, exporting voucher codes, and validating voucher IDs and codes.", "methods": ["POST"], "paths": ["/vouchers", "/vouchers/export", "/vouchers/validate"]}}
{"file": "cloned/saleor/saleor/tests/e2e/vouchers/utils/query_voucher.py", "endpoints": {"api_summary": "This file contains a function to retrieve voucher information from a GraphQL API. It uses a GraphQL query to fetch voucher details based on the provided voucher ID.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/tests/e2e/promotions/utils/promotion_rule_translate.py", "endpoints": {"api_summary": "This file defines a GraphQL mutation for translating promotion rules. It allows for the modification of existing promotion rules in a specific language.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/checkout/models.py", "endpoints": {"api_summary": "This file defines the models for a checkout system. It includes classes for Checkout and CheckoutLine, which represent the checkout process and the individual items in the checkout respectively. The Checkout model includes fields for user information, shipping and billing addresses, and a list of items in the checkout. The CheckoutLine model represents a single item in the checkout, including the product variant, quantity, and price.", "methods": [], "paths": []}}
{"file": "cloned/saleor/saleor/payment/tests/test_payment.py", "endpoints": {"api_summary": "This file contains a set of tests for the payment module of a Python-based e-commerce platform. It tests various functionalities of the payment module such as creating payments, capturing transactions, refunding payments, and more. It also includes tests for payment authorization, capture, and refund processes.", "methods": ["GET", "POST"], "paths": ["/payment/create", "/payment/capture", "/payment/refund"]}}
{"file": "cloned/saleor/saleor/payment/gateways/authorize_net/__init__.py", "endpoints": {"api_summary": "This file contains a set of functions that interact with the Authorize.net API. It includes functions for authenticating, processing payments, capturing, authorizing, voiding, listing client sources, and refunding. These functions are used to interact with the Authorize.net API, which is a REST API.", "methods": ["POST"], "paths": ["/authenticate_test", "/process_payment", "/capture", "/authorize", "/void", "/list_client_sources", "/refund"]}}
{"file": "cloned/saleor/saleor/payment/gateways/authorize_net/tests/test_authorize_net.py", "endpoints": {"api_summary": "This file contains a set of integration tests for a payment gateway. It tests the functionality of the payment process, including authentication, processing, refunding, voiding, and listing client sources. It also tests the authorization and capture of payments.", "methods": ["GET", "POST"], "paths": ["/authenticate_test", "/process_payment", "/process_payment_with_user", "/process_payment_reuse_source", "/process_payment_error_response", "/process_payment_error_response_null", "/refund", "/refund_error", "/authorize_and_capture", "/void", "/void_duplicate", "/void_failure", "/list_client_sources", "/list_client_sources_other_name"]}}
{"file": "cloned/saleor/saleor/payment/gateways/authorize_net/tests/test_plugin.py", "endpoints": {"api_summary": "This file contains unit tests for the AuthorizeNetGatewayPlugin. It tests the functionality of the plugin, including getting payment gateways, validating the plugin configuration, processing payments, refunding payments, authorizing payments, capturing payments, and listing payment sources.", "methods": [], "paths": []}}
{"file": "cloned/saleor/saleor/payment/gateways/np_atobarai/api.py", "endpoints": {"api_summary": "This file contains several REST API endpoints for managing transactions with a payment gateway. It includes endpoints for registering, cancelling, changing, and reporting transactions. These endpoints are used to manage the lifecycle of a payment, from its creation to its fulfillment.", "methods": ["POST", "POST", "PATCH", "POST"], "paths": ["/register_transaction", "/cancel_transaction", "/change_transaction", "/reregister_transaction_for_partial_return"]}}
{"file": "cloned/saleor/saleor/payment/gateways/np_atobarai/api_helpers.py", "endpoints": {"api_summary": "This file contains a set of functions that interact with the NP Atobarai API. It includes functions for registering, cancelling, and reporting transactions. It also includes helper functions for formatting addresses, handling payment data, and error handling.", "methods": ["GET", "POST", "PATCH"], "paths": ["/transactions/cancel", "/transactions", "/shipments"]}}
{"file": "cloned/saleor/saleor/payment/gateways/np_atobarai/tests/test_api.py", "endpoints": {"api_summary": "This file contains a set of tests for the NP Atobarai payment gateway plugin. It tests the functionality of the plugin, including refunding payments, reporting fulfillments, changing transactions, and registering transactions. It also includes fixtures for setting up test data and mocks for external dependencies.", "methods": ["GET", "POST"], "paths": ["/payment/gateways/np_atobarai/test_refund_payment", "/payment/gateways/np_atobarai/test_report_fulfillment", "/payment/gateways/np_atobarai/test_change_transaction_success", "/payment/gateways/np_atobarai/test_register_transaction_success"]}}
{"file": "cloned/saleor/saleor/payment/gateways/stripe/stripe_api.py", "endpoints": {"api_summary": "This file contains a set of functions that interact with the Stripe API. It provides functionality for managing webhooks, customers, payment methods, and payment intents. It also includes functions for capturing, refunding, and cancelling payments.", "methods": ["GET", "POST", "DELETE"], "paths": ["/plugins-per-channel/<plugin_id>/<channel_slug>", "/stripe/webhook", "/stripe/payment-intent/<payment_intent_id>", "/stripe/payment-intent/<payment_intent_id>/capture", "/stripe/payment-intent/<payment_intent_id>/refund", "/stripe/payment-intent/<payment_intent_id>/cancel"]}}
{"file": "cloned/saleor/saleor/payment/gateways/stripe/webhooks.py", "endpoints": {"api_summary": "This file contains a set of functions that handle webhooks from Stripe, a popular payment gateway. These functions are used to update the status of payments and handle various events related to those payments. They include functions for handling successful, failed, and authorized payment intents, as well as processing and refunding payments.", "methods": ["POST"], "paths": ["/handle_webhook"]}}
{"file": "cloned/saleor/saleor/payment/gateways/stripe/plugin.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for the StripeGatewayPlugin class. It provides endpoints for processing payments, confirming payments, capturing payments, refunding payments, voiding payments, and listing payment sources. It also handles webhooks for Stripe events and manages the configuration of the StripeGatewayPlugin.", "methods": ["GET", "POST"], "paths": ["/webhook", "/process_payment", "/confirm_payment", "/capture_payment", "/refund_payment", "/void_payment", "/list_payment_sources"]}}
{"file": "cloned/saleor/saleor/payment/gateways/stripe/tests/test_stripe_api.py", "endpoints": {"api_summary": "This file contains a set of functions that interact with the Stripe API. It includes functions for creating, retrieving, updating, and deleting payment intents, payment methods, and webhooks. It also includes functions for managing customers and their payment methods.", "methods": ["GET", "POST", "PATCH", "DELETE"], "paths": ["/payment/gateways/stripe/stripe_api/stripe.WebhookEndpoint", "/payment/gateways/stripe/stripe_api/stripe.PaymentIntent", "/payment/gateways/stripe/stripe_api/stripe.PaymentMethod", "/payment/gateways/stripe/stripe_api/stripe.Refund", "/payment/gateways/stripe/stripe_api/stripe.Customer"]}}
{"file": "cloned/saleor/saleor/payment/gateways/dummy_credit_card/tests/test_dummy_credit_card.py", "endpoints": {"api_summary": "This file contains a set of tests for a dummy credit card payment gateway. It includes tests for authorization, voiding, capturing, and refunding transactions. It also includes tests for error handling and edge cases.", "methods": ["GET", "POST"], "paths": ["/authorize", "/void", "/capture", "/refund", "/process_payment"]}}
{"file": "cloned/saleor/saleor/payment/gateways/braintree/__init__.py", "endpoints": {"api_summary": "This file contains a set of functions that interact with the Braintree payment gateway. It defines several endpoints for different operations such as authorization, capture, void, refund, and client token generation. It also includes functions for managing customer sources and payment information.", "methods": ["GET", "POST"], "paths": ["/braintree/client_token", "/braintree/authorize", "/braintree/capture", "/braintree/void", "/braintree/refund", "/braintree/list_client_sources"]}}
{"file": "cloned/saleor/saleor/payment/gateways/braintree/tests/test_braintree.py", "endpoints": {"api_summary": "This file contains a set of tests for the Braintree payment gateway. It includes functions for authorizing, capturing, refunding, voiding, and listing customer sources. It also includes fixtures for setting up the gateway configuration and payment information.", "methods": ["GET", "POST"], "paths": ["/authorize", "/capture", "/refund", "/void", "/list_client_sources"]}}
{"file": "cloned/saleor/saleor/payment/gateways/adyen/plugin.py", "endpoints": {"api_summary": "This file defines a REST API for the Adyen payment gateway. It includes endpoints for initializing payments, processing payments, confirming payments, refunding payments, capturing payments, and voiding payments. It also includes endpoints for handling webhooks and additional actions. The API is used to interact with the Adyen payment gateway, allowing for secure and efficient payment processing.", "methods": ["GET", "POST"], "paths": ["/plugins/channel/{channel_slug}/mirumee.payments.adyen/webhooks", "/plugins/channel/{channel_slug}/mirumee.payments.adyen/additional-actions"]}}
{"file": "cloned/saleor/saleor/core/jwt.py", "endpoints": {"api_summary": "This file contains utility functions and helper methods for handling JSON Web Tokens (JWT) and user authentication in a Django application.", "methods": [], "paths": []}}
{"file": "cloned/saleor/saleor/core/tests/test_auth_backend_saleor_header.py", "endpoints": {"api_summary": "This file contains a set of unit tests for a JSON Web Token (JWT) authentication system. It tests the functionality of the authentication backend, including token creation, validation, and error handling.", "methods": [], "paths": []}}
{"file": "cloned/saleor/saleor/core/utils/tests/test_editorjs.py", "endpoints": {"api_summary": "The provided Python code is a set of unit tests for a function named `clean_editor_js`, which is part of the `editorjs` module in the `saleor.core.utils` package. This function is used to clean up and sanitize data from the Editor.js editor, which is a block-style editor. It's not a REST API endpoint, but a function that's used within the application.", "methods": [], "paths": []}}
{"file": "cloned/saleor/saleor/thumbnail/tests/test_views.py", "endpoints": {"api_summary": "This file contains a set of tests for a thumbnail generation service. It defines several endpoints for generating thumbnails for different types of objects such as categories, collections, users, product media, and app logos. The thumbnails are generated based on the size and format specified in the URL.", "methods": ["GET"], "paths": ["/thumbnail/{category_id}/{size}/", "/thumbnail/{collection_id}/{size}/", "/thumbnail/{user_uuid}/{size}/", "/thumbnail/{product_media_id}/{size}/", "/thumbnail/{app_uuid}/{size}/", "/thumbnail/{app_installation_uuid}/{size}/"]}}
{"file": "cloned/saleor/saleor/warehouse/models.py", "endpoints": {"api_summary": "This file contains a Django application for managing warehouses and stocks. It includes methods for querying and manipulating warehouses, stocks, and their allocations. It also includes endpoints for click and collect functionality, which allows customers to pick up their orders from the warehouse.", "methods": [], "paths": []}}
{"file": "cloned/saleor/saleor/warehouse/reservations.py", "endpoints": {"api_summary": "This file contains the logic for reserving stocks and preorders for a checkout process. It includes functions for reserving stocks, preorders, and checking if reservation is enabled. It also includes helper functions for sorting stocks, creating stock reservations, and getting checkout lines to reserve.", "methods": [], "paths": []}}
{"file": "cloned/saleor/saleor/graphql/views.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for a GraphQLView. It uses Django's View class to handle HTTP requests. The endpoint is defined in the dispatch method, which checks the HTTP method and calls the appropriate method. The endpoint is defined for the '/graphql' path.", "methods": ["GET", "POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/product/filters.py", "endpoints": {"api_summary": "This file contains a set of Django models and functions for managing products, categories, collections, and product types in a Django-based e-commerce platform. It also includes filters for querying these models based on various criteria.", "methods": ["GET", "POST"], "paths": ["/products", "/categories", "/collections", "/product_types"]}}
{"file": "cloned/saleor/saleor/graphql/product/schema.py", "endpoints": {"api_summary": "This file defines a GraphQL API for managing products, categories, collections, and related entities. It includes endpoints for creating, updating, and deleting products, categories, collections, and their related entities. It also includes endpoints for managing digital content and product variants.", "methods": ["GET", "POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/product/sorters.py", "endpoints": {"api_summary": "This file defines several REST API endpoints related to product management, including categories, collections, products, product variants, product types, and media. These endpoints allow for sorting and filtering of these items based on various criteria.", "methods": ["GET", "POST"], "paths": ["/categories", "/categories/<built-in function id>", "/collections", "/collections/<built-in function id>", "/products", "/products/<built-in function id>", "/productVariants", "/productVariants/<built-in function id>", "/productTypes", "/productTypes/<built-in function id>", "/media", "/media/<built-in function id>"]}}
{"file": "cloned/saleor/saleor/graphql/product/dataloaders/products.py", "endpoints": {"api_summary": "This file contains a collection of Django data loaders that are used to efficiently load data from the database. These loaders are used to batch load data from the database, which can significantly improve performance. The loaders are used to load data related to products, categories, collections, and other entities.", "methods": [], "paths": []}}
{"file": "cloned/saleor/saleor/graphql/product/tests/test_collection_filtering_and_sorting_with_channels.py", "endpoints": {"api_summary": "This file contains a set of tests for a GraphQL API. It defines several endpoints for querying and sorting collections. The endpoints are used to retrieve collections based on their availability or published date, and also to filter them by their publication status or slug. The tests are parameterized to test different scenarios and edge cases.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/product/tests/test_product_discounted_price.py", "endpoints": {"api_summary": "This file contains tests for a REST API that manages product variants, categories, collections, and sales. It includes endpoints for creating, updating, and deleting products, categories, collections, and sales. It also includes endpoints for adding and removing products from collections.", "methods": ["POST", "GET", "DELETE"], "paths": ["/productVariantDelete", "/categoryDelete", "/collectionAddProducts", "/collectionRemoveProducts", "/saleCreate", "/saleUpdate", "/saleDelete", "/saleCataloguesAdd", "/saleCataloguesRemove"]}}
{"file": "cloned/saleor/saleor/graphql/product/tests/test_variant_channel_listing_update.py", "endpoints": {"api_summary": "This file contains a set of tests for a GraphQL API endpoint that updates product variant channel listings. It tests various scenarios such as updating prices, costs, prior prices, and preorder thresholds. It also tests different user roles and permissions. The API endpoint is used to update product variant channel listings.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/product/tests/test_product_filtering_and_sorting_with_channels.py", "endpoints": {"api_summary": "This file contains a set of tests for a product sorting and filtering system. It defines several endpoints for testing product sorting and filtering functionality. The endpoints are used to test the sorting and filtering of products based on various parameters such as publication status, price, minimal price, publication date, and more. The tests are run on a set of products that are created in the fixture 'products_for_sorting_with_channels'. The tests are run on two channels: 'channel_USD' and 'channel_PLN'. The tests are run using the GraphQL API.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/product/tests/test_digital_content.py", "endpoints": {"api_summary": "This file contains a set of tests for a digital content management system. It defines several endpoints for fetching, creating, updating, and deleting digital content. It also includes endpoints for managing digital content URLs.", "methods": ["GET", "POST"], "paths": ["/digitalContents", "/digitalContent/<built-in function id>", "/digitalContentCreate", "/digitalContentDelete", "/digitalContentUpdate", "/digitalContentUrlCreate"]}}
{"file": "cloned/saleor/saleor/graphql/product/tests/test_product_pagination.py", "endpoints": {"api_summary": "This file contains a set of tests for a product management system. It defines several endpoints for categories, collections, products, and product types. These endpoints are used to manage and retrieve data related to these entities.", "methods": ["POST"], "paths": ["/graphql/categories", "/graphql/collections", "/graphql/products", "/graphql/productTypes"]}}
{"file": "cloned/saleor/saleor/graphql/product/tests/test_category_filtering.py", "endpoints": {"api_summary": "This file contains a set of tests for a GraphQL API. It defines several endpoints for querying and filtering products and categories. The endpoints include filtering by channel, isPublished, attributes, stockAvailability, stocks, search, price, ids, and sorting by name. It also includes a where filter for products and categories.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/product/tests/test_product_channel_listings_queries.py", "endpoints": {"api_summary": "This file contains a set of tests for a product pricing system. It defines several endpoints for fetching product pricing information. The endpoints are used to fetch product pricing information for different countries and channels. The pricing information includes price ranges and gross prices.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/product/tests/test_product_sorting.py", "endpoints": {"api_summary": "This file contains a set of tests for a Django-based REST API. It tests various endpoints for sorting, pagination, and error handling. The API endpoints are defined in the test functions, which use the Django test client to make HTTP requests to the API. The endpoints tested include sorting products by published date, created date, rating, and collection. The pagination is tested for sorting products by published date.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/product/tests/test_product_sorting_attributes.py", "endpoints": {"api_summary": "This file contains a set of tests for a product sorting API. It defines several endpoints for sorting products by attributes. The API allows sorting by a single attribute value or multiple attribute values. It also handles cases where the product type was updated after the product was created, or when the attribute does not have a value.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/product/tests/test_variant_pricing.py", "endpoints": {"api_summary": "This file contains a set of tests for a REST API. It tests the pricing endpoints of a product variant. The tests cover various scenarios such as pricing with and without a discount, pricing with and without a tax rate, and pricing with and without a country specified. The tests also cover the case where the price is not available for a variant.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/product/tests/test_product_pricing.py", "endpoints": {"api_summary": "This file defines several REST API endpoints for a product pricing service. The endpoints are used to retrieve pricing information for products in different countries. The pricing information includes the net and gross price, and the tax amount. The endpoints are used in the context of a sales channel, which is a platform where products are sold. The endpoints are tested using pytest, a testing framework for Python.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/product/tests/queries/test_product_types_query.py", "endpoints": {"api_summary": "This file contains tests for a REST API that manages product types. It includes tests for querying product types, filtering product types, sorting product types, and handling errors when querying non-existent product types. It also includes a test for a custom search filter.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/product/tests/queries/test_product_variants_query.py", "endpoints": {"api_summary": "This file contains a set of tests for a GraphQL API. It tests various endpoints of the API, including fetching all variants, fetching variants by IDs, and testing visibility of products in listings. The API endpoints are defined in the test functions, which use the client objects to make requests to the API.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/product/tests/queries/test_variant_query.py", "endpoints": {"api_summary": "This file contains a set of tests for a GraphQL API that provides information about product variants. It includes tests for retrieving product variants by ID, SKU, or external reference, and for different user roles (staff, app, customer, anonymous user). It also includes tests for variant attributes, digital content, and stock quantities.", "methods": ["GET", "POST"], "paths": ["/graphql", "/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/product/tests/queries/test_product_variant_query.py", "endpoints": {"api_summary": "This file contains a set of tests for a product variant API. It defines several endpoints for fetching product variant details, including weight, channel listings, stocks, and preorder information. It also includes tests for different user roles and permissions. The API is used to fetch product variant details, including its weight, channel listings, stocks, and preorder information.", "methods": ["GET", "POST"], "paths": ["/productVariant/<built-in function id>", "/productVariant/<built-in function id>/channelListings", "/productVariant/<built-in function id>/stocks", "/productVariant/<built-in function id>/preorder"]}}
{"file": "cloned/saleor/saleor/graphql/product/tests/queries/test_product_query.py", "endpoints": {"api_summary": "This file contains a set of GraphQL queries and mutations for fetching and manipulating product data. It includes queries for fetching product details, collections, images, media, variants, and attributes. It also includes queries for checking product availability and pricing. It also includes queries for fetching product media and images by ID. It also includes queries for fetching product variants sorted by ID. It also includes queries for fetching product attributes by slug. It also includes queries for fetching product tax class.", "methods": ["GET", "POST"], "paths": ["/graphql", "/graphql/product/<built-in function id>", "/graphql/product/<built-in function id>/image/<built-in function id>", "/graphql/product/<built-in function id>/media/<built-in function id>"]}}
{"file": "cloned/saleor/saleor/graphql/product/tests/queries/test_variants_query.py", "endpoints": {"api_summary": "This file contains a set of tests for a GraphQL API that manages product variants. It tests the retrieval of product variants by their IDs, without price, and by customer. It also tests the retrieval of all product variants without a specified list of IDs.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/product/tests/deprecated/test_product.py", "endpoints": {"api_summary": "This file defines several REST API endpoints for a product management system. It includes endpoints for fetching products, collections, and variants. It also includes endpoints for sorting and filtering products and collections. The endpoints are used to manage and retrieve product data, collections, and variants.", "methods": ["POST"], "paths": ["/graphql/product", "/graphql/products", "/graphql/collections", "/graphql/variants"]}}
{"file": "cloned/saleor/saleor/graphql/product/tests/deprecated/test_product_sorting.py", "endpoints": {"api_summary": "This file contains a set of tests for a GraphQL API. The API provides endpoints for querying products, collections, and sorting them by publication date. It also includes pagination for these endpoints.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/product/tests/mutations/test_product_type_create.py", "endpoints": {"api_summary": "The provided Python code does not explicitly define any REST API endpoints. It seems to be a set of unit tests for a GraphQL API.", "methods": [], "paths": []}}
{"file": "cloned/saleor/saleor/graphql/product/tests/mutations/test_product_type_update.py", "endpoints": {"api_summary": "This file contains a set of tests for a product type update mutation in a GraphQL API. It defines several endpoints for updating product types, including updating the slug, name, weight, kind, and variant names. It also includes error handling for invalid inputs.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/product/tests/mutations/test_product_variant_stocks_create.py", "endpoints": {"api_summary": "This file contains tests for a GraphQL API. It tests the functionality of creating, updating, and deleting stocks for product variants. It also tests the functionality of invalidating the stocks dataloader on create stocks.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/product/tests/mutations/test_product_media_create.py", "endpoints": {"api_summary": "This file contains a set of tests for a GraphQL API endpoint that manages product media. It tests the creation of product media, including both image and video media, and the handling of errors. It also tests the character limit for the alt text.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/product/tests/mutations/test_product_variant_bulk_create.py", "endpoints": {"api_summary": "This API is used to create multiple product variants in a single request. It allows you to create variants with different attributes, stocks, and channel listings. It also supports error handling and error policies. The API can be used to create variants with different attributes, stocks, and channel listings. It also supports error handling and error policies.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/product/tests/mutations/test_product_type_delete.py", "endpoints": {"api_summary": "This file contains tests for a REST API endpoint that manages product types. It includes endpoints for deleting product types, deleting product types with associated images, deleting product types with associated file attributes, and deleting product types with associated variants in a draft order. The endpoints are used to manage product types, their associated images, file attributes, and variants in a draft order.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/product/tests/mutations/test_product_variant_preorder_deactivate.py", "endpoints": {"api_summary": "This file contains a set of tests for a REST API endpoint that manages preorder variants. It includes tests for deactivating preorder variants, handling errors when attempting to deactivate non-preorder variants, and handling errors when the preorder variant cannot be deactivated. It also includes tests for different user roles attempting to deactivate a preorder variant.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/product/tests/mutations/test_product_variant_bulk_update.py", "endpoints": {"api_summary": "This file contains a set of tests for the product variant bulk update mutation in the Saleor GraphQL API. It tests various scenarios such as updating product variants, creating and updating stocks, and updating channel listings. It also tests error handling for invalid inputs.", "methods": ["POST"], "paths": ["/graphql/"]}}
{"file": "cloned/saleor/saleor/graphql/product/tests/mutations/test_product_variant_stocks_update.py", "endpoints": {"api_summary": "This file contains a set of tests for a REST API endpoint that manages product variant stocks. It tests the creation, update, and deletion of stocks for product variants. It also tests the behavior of the API when certain conditions are met, such as when a stock quantity is updated or when a stock is out of quantity.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/product/tests/mutations/test_product_bulk_create.py", "endpoints": {"api_summary": "This file contains tests for the product bulk create mutation in the Saleor GraphQL API. It tests various scenarios such as creating products with base data, media, attributes, channel listings, variants, and more.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/product/tests/mutations/test_product_delete.py", "endpoints": {"api_summary": "This file contains a set of tests for the product deletion functionality in a Django-based web application. It tests various scenarios such as deleting a product, deleting a product with an image, triggering webhooks, deleting a product with a file attribute, removing checkout lines, deleting a product variant in a draft order, and deleting a product by external reference. It also tests the removal of references to a product, product variant, and page.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/product/tests/benchmark/test_category.py", "endpoints": {"api_summary": "This file contains tests for a REST API that provides endpoints for fetching, creating, updating, and deleting categories. It also includes a test for a federation query that fetches multiple categories.", "methods": ["GET", "POST", "DELETE"], "paths": ["/category/<built-in function id>", "/categories", "/category/<built-in function id>/delete", "/categories/federation"]}}
{"file": "cloned/saleor/saleor/graphql/product/tests/benchmark/test_product.py", "endpoints": {"api_summary": "This file contains a set of tests for a product management system. It defines several endpoints for retrieving, creating, updating, and deleting products, as well as for managing product attributes, images, media, and channel listings. It also includes tests for filtering products by attributes, translations, and for federation queries.", "methods": ["GET", "POST"], "paths": ["/products/<built-in function id>", "/products/<built-in function id>/attributes", "/products/<built-in function id>/images", "/products/<built-in function id>/media", "/products/<built-in function id>/channel-listings", "/products/<built-in function id>/product-types", "/products/<built-in function id>/product-attributes", "/products/<built-in function id>/variant-attributes", "/products/<built-in function id>/translations", "/products/<built-in function id>/federation-queries"]}}
{"file": "cloned/saleor/saleor/graphql/product/tests/benchmark/test_variant.py", "endpoints": {"api_summary": "This file contains a set of tests for a product variant management system. It defines several endpoints for creating, updating, and retrieving product variants, as well as for bulk creating product variants. It also includes a test for a federation query endpoint.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/product/tests/benchmark/test_collection.py", "endpoints": {"api_summary": "This file contains a set of tests for a GraphQL API. It defines several endpoints for testing different aspects of the API, including viewing collections, retrieving collection channel listings, creating, deleting, and managing collections, and more. It also includes tests for batching product IDs for collection creation and deletion.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/product/bulk_mutations/category_bulk_delete.py", "endpoints": {"api_summary": "This file defines a GraphQL mutation for deleting categories. It uses the ModelBulkDeleteMutation class, which is a generic mutation for deleting multiple objects at once. The mutation requires a list of category IDs to delete.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/product/bulk_mutations/product_media_bulk_delete.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for deleting product media. It uses the ModelBulkDeleteMutation class, which is a mutation for deleting multiple instances of a model. The endpoint is protected by the ProductPermissions.MANAGE_PRODUCTS permission.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/product/mutations/channels.py", "endpoints": {"api_summary": "This file defines several REST API endpoints for managing products, product variants, and collections. It includes endpoints for updating product channel listings, product variant prices, and collection channel listings.", "methods": ["POST"], "paths": ["/graphql/?query=mutation%20ProductChannelListingUpdate%28%24input%3A%20ProductChannelListingUpdateInput%21%2C%20%24id%3A%20ID%21%29%20%7B%0A%20%20productChannelListingUpdate%28input%3A%20%24input%2C%20id%3A%20%24id%29%20%7B%0A%20%20%20%20product%20%7B%0A%20%20%20%20%20%20id%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D", "/graphql/?query=mutation%20ProductVariantChannelListingUpdate%28%24input%3A%20%5BNonNullList%21ProductVariantChannelListingAddInput%21%5D%21%2C%20%24id%3A%20ID%21%2C%20%24sku%3A%20String%21%29%20%7B%0A%20%20productVariantChannelListingUpdate%28input%3A%20%24input%2C%20id%3A%20%24id%2C%20sku%3A%20%24sku%29%20%7B%0A%20%20%20%20variant%20%7B%0A%20%20%20%20%20%20id%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D", "/graphql/?query=mutation%20CollectionChannelListingUpdate%28%24input%3A%20CollectionChannelListingUpdateInput%21%2C%20%24id%3A%20ID%21%29%20%7B%0A%20%20collectionChannelListingUpdate%28input%3A%20%24input%2C%20id%3A%20%24id%29%20%7B%0A%20%20%20%20collection%20%7B%0A%20%20%20%20%20%20id%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D"]}}
{"file": "cloned/saleor/saleor/graphql/product/mutations/digital_contents.py", "endpoints": {"api_summary": "This file defines several REST API endpoints for managing digital content in a product variant. It includes endpoints for creating, updating, and deleting digital content, as well as generating URLs for digital content. The endpoints are used to manage the digital content of a product variant, which includes uploading, deleting, and updating the digital content. The URLs generated can be used to access the digital content.", "methods": ["POST", "DELETE", "PUT", "GET"], "paths": ["/digitalcontent/create", "/digitalcontent/delete", "/digitalcontent/update", "/digitalcontent/url/create"]}}
{"file": "cloned/saleor/saleor/graphql/product/mutations/attributes.py", "endpoints": {"api_summary": "This file defines several REST API endpoints for managing product types and attributes. It includes operations for assigning, unassigning, and updating attributes for product types. It also includes endpoints for reordering attributes and attribute values for products and product variants.", "methods": ["GET", "POST"], "paths": ["/product_type_assign", "/product_type_unassign", "/product_type_update", "/product_reorder", "/product_variant_reorder"]}}
{"file": "cloned/saleor/saleor/graphql/product/mutations/product/product_update.py", "endpoints": {"api_summary": "This file defines a GraphQL mutation for updating a product. It includes methods for cleaning and validating input data, handling metadata, saving the product, and performing post-save actions. It also includes a method for constructing the instance and cleaning the instance.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/product/mutations/product/product_media_create.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for creating product media. It allows users to create new media objects (images or videos) associated with a product. The endpoint supports both image uploads and external URLs. It also validates the input data and handles errors.", "methods": ["POST"], "paths": ["/product/media/create"]}}
{"file": "cloned/saleor/saleor/graphql/product/mutations/product_variant/product_variant_reorder.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for reordering product variants. It allows you to change the order of product variants. The endpoint is used to update the order of variants in a product. It uses the POST method and the path is '/product/<product_id>/reorder'.", "methods": ["POST"], "paths": ["/product/<product_id>/reorder"]}}
{"file": "cloned/saleor/saleor/graphql/product/mutations/product_variant/product_variant_update.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for updating product variants. It allows for the modification of existing product variants, including their attributes, SKU, and other properties. The endpoint is accessible via HTTP POST method and the path is '/product-variant-update/'.", "methods": ["POST"], "paths": ["/product-variant-update/"]}}
{"file": "cloned/saleor/saleor/graphql/product/mutations/product_variant/product_variant_create.py", "endpoints": {"api_summary": "This file defines a set of REST API endpoints for managing product variants. It includes endpoints for creating, updating, and deleting product variants. It also includes endpoints for managing attributes and stocks of the product variants.", "methods": ["POST", "PUT", "DELETE"], "paths": ["/product-variant-create", "/product-variant-update", "/product-variant-delete", "/product-variant-attributes", "/product-variant-stocks"]}}
{"file": "cloned/saleor/saleor/graphql/product/types/channels.py", "endpoints": {"api_summary": "This file defines several REST API endpoints related to product listings, variants, and collections. It includes endpoints for fetching product channel listings, variant channel listings, and collection channel listings. These endpoints are used to manage and retrieve product data in different channels.", "methods": ["GET", "POST"], "paths": ["/product-channel-listings", "/product-channel-listings/<built-in function id>", "/product-variant-channel-listings", "/product-variant-channel-listings/<built-in function id>", "/collection-channel-listings", "/collection-channel-listings/<built-in function id>"]}}
{"file": "cloned/saleor/saleor/graphql/product/types/collections.py", "endpoints": {"api_summary": "This file defines a REST API for managing collections of products. It includes endpoints for creating, reading, updating, and deleting collections, as well as for managing products within those collections. It also includes endpoints for managing channel listings for each collection.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/collections", "/collections/<built-in function id>", "/collections/<built-in function id>/products", "/collections/<built-in function id>/channel_listings"]}}
{"file": "cloned/saleor/saleor/graphql/product/types/categories.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for the Category model. It provides various methods to interact with the Category model, including GET, POST, and DELETE. The paths include '/categories', '/categories/<id>', and '/categories/<id>/products'.", "methods": ["GET", "POST", "DELETE"], "paths": ["/categories", "/categories/<id>", "/categories/<id>/products"]}}
{"file": "cloned/saleor/saleor/graphql/csv/types.py", "endpoints": {"api_summary": "This file defines several REST API endpoints related to exporting files and events. It includes endpoints for fetching export files, their associated events, and user and app information. The endpoints are secured and require specific permissions to access.", "methods": ["GET"], "paths": ["/export_file", "/export_file/<built-in function id>", "/export_event", "/export_event/<built-in function id>", "/user", "/user/<built-in function id>", "/app", "/app/<built-in function id>"]}}
{"file": "cloned/saleor/saleor/graphql/csv/schema.py", "endpoints": {"api_summary": "This file defines a REST API for exporting products, gift cards, and voucher codes. It also provides endpoints for retrieving export file details and a list of all export files.", "methods": ["GET", "POST"], "paths": ["/export_file/<built-in function id>", "/export_files"]}}
{"file": "cloned/saleor/saleor/graphql/csv/tests/queries/test_export_files.py", "endpoints": {"api_summary": "This file contains a set of tests for a GraphQL API that manages export files. It includes endpoints for filtering and sorting export files based on various parameters such as status, creation date, update date, user, and app. It also includes tests for each of these endpoints.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/csv/tests/mutations/test_export_voucher_codes.py", "endpoints": {"api_summary": "This file defines several REST API endpoints for exporting voucher codes. These endpoints allow users to export voucher codes in CSV format. The endpoints are used by staff and apps to export voucher codes. The endpoints are used in the context of a saleor e-commerce platform.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/csv/mutations/export_products.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for exporting products to a CSV file. It allows users to specify various attributes, warehouses, channels, and product fields to be exported. The exported file can be of various file types.", "methods": ["POST"], "paths": ["/export_products"]}}
{"file": "cloned/saleor/saleor/graphql/shop/types.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for the 'Shop' object. It provides various endpoints to access and manipulate shop-related data. These endpoints include details about available payment gateways, external authentications, shipping methods, countries, languages, permissions, and more. The endpoints also allow for the management of shop settings and configurations.", "methods": ["GET", "POST"], "paths": ["/shop", "/shop/<built-in function id>"]}}
{"file": "cloned/saleor/saleor/graphql/shop/schema.py", "endpoints": {"api_summary": "This file defines a GraphQL API for a shop. It includes endpoints for fetching shop information, order settings, and gift card settings. It also includes endpoints for updating shop settings, fetching tax rates, translating shop settings, updating shop address, updating order settings, and updating gift card settings.", "methods": ["GET", "POST"], "paths": ["/graphql?query={shop{...}}", "/graphql?query={orderSettings{...}}", "/graphql?query={giftCardSettings{...}}", "/graphql?mutation={staffNotificationRecipientCreate(...){...}}", "/graphql?mutation={staffNotificationRecipientUpdate(...){...}}", "/graphql?mutation={staffNotificationRecipientDelete(...){...}}", "/graphql?mutation={shopDomainUpdate(...){...}}", "/graphql?mutation={shopSettingsUpdate(...){...}}", "/graphql?mutation={shopFetchTaxRates(...){...}}", "/graphql?mutation={shopSettingsTranslate(...){...}}", "/graphql?mutation={shopAddressUpdate(...){...}}", "/graphql?mutation={orderSettingsUpdate(...){...}}", "/graphql?mutation={giftCardSettingsUpdate(...){...}}"]}}
{"file": "cloned/saleor/saleor/graphql/shop/tests/queries/test_shop.py", "endpoints": {"api_summary": "This file contains a set of tests for the shop API. It tests various endpoints of the API, including fetching shop information, countries, limits, versions, channels, permissions, digital content settings, default mail sender settings, available external authentications, available payment gateways, available shipping methods, staff notifications, and more. It also includes tests for filtering countries based on whether they are attached to shipping zones.", "methods": ["GET", "POST"], "paths": ["/shop", "/shop/countries", "/shop/limits", "/shop/versions", "/shop/channels", "/shop/permissions", "/shop/digital_content_settings", "/shop/default_mail_sender_settings", "/shop/available_external_authentications", "/shop/available_payment_gateways", "/shop/available_shipping_methods", "/shop/staff_notifications", "/shop/countries/filter"]}}
{"file": "cloned/saleor/saleor/graphql/shop/tests/mutations/test_staff_notification_recipient_create.py", "endpoints": {"api_summary": "This file contains tests for a GraphQL API endpoint that manages staff notification recipients. It tests the creation of a staff notification recipient using either a user ID or an email address. The tests also cover error handling for invalid user types and empty email addresses.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/shop/tests/mutations/test_shop_settings_update.py", "endpoints": {"api_summary": "This file contains a set of tests for the shop settings update mutation in a GraphQL API. It tests various scenarios for updating shop settings such as digital content settings, general shop settings, reservation settings, limit quantity per checkout, customer set password URL, and default mail sender settings. It also includes tests for invalid inputs and error handling.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/shop/mutations/staff_notification_recipient_delete.py", "endpoints": {"api_summary": "This file defines a single REST API endpoint for deleting staff notification recipients. It uses the ModelDeleteMutation class to handle the deletion of staff notification recipients. The endpoint is protected by the SitePermissions.MANAGE_SETTINGS permission.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/shop/mutations/shop_fetch_tax_rates.py", "endpoints": {"api_summary": "This file defines a single REST API endpoint for fetching tax rates. It uses the POST method to fetch the tax rates. The endpoint is '/shop/fetch-tax-rates'.", "methods": ["POST"], "paths": ["/shop/fetch-tax-rates"]}}
{"file": "cloned/saleor/saleor/graphql/webhook/schema.py", "endpoints": {"api_summary": "This file defines a GraphQL API for managing webhooks. It includes endpoints for creating, deleting, updating, retrying event deliveries, triggering webhooks, and dry running them. It also provides endpoints for fetching webhook events and sample payloads.", "methods": ["GET", "POST"], "paths": ["/webhook", "/webhook_events", "/webhook_sample_payload"]}}
{"file": "cloned/saleor/saleor/graphql/webhook/tests/test_subscription_query.py", "endpoints": {"api_summary": "This file contains a set of tests for the SubscriptionQuery class in the saleor.webhook module. It tests the functionality of the class, including parsing GraphQL queries, validating them, and extracting event types from them. It also tests the error handling of the class.", "methods": ["GET", "POST"], "paths": ["/subscription_query", "/subscription_query/<built-in function id>"]}}
{"file": "cloned/saleor/saleor/graphql/webhook/tests/queries/test_event_delivery_sort.py", "endpoints": {"api_summary": "This file defines several REST API endpoints for querying and sorting event deliveries and delivery attempts. It includes endpoints for sorting deliveries by creation date in ascending and descending order, and for sorting delivery attempts by creation date in ascending and descending order.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/webhook/tests/pregenerated_subscription/test_tax_configurations_with_pregenerated_payloads.py", "endpoints": {"api_summary": "This file contains tests for the tax calculation functionality of the Saleor e-commerce platform. It defines several test cases for different tax calculation strategies and price entry scenarios. The tests are designed to ensure that the tax calculation process is working correctly and that the results are as expected.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/webhook/tests/pregenerated_subscription/test_checkout_resolvers.py", "endpoints": {"api_summary": "This file contains a set of tests for a Django-based REST API. It tests various endpoints of the API, including checkout, shipping methods, and more. The tests are written using the Django testing framework and the pytest library.", "methods": ["POST"], "paths": ["/checkout", "/shipping_methods", "/available_shipping_methods", "/checkouts"]}}
{"file": "cloned/saleor/saleor/graphql/webhook/tests/mutations/test_webhook_dry_run.py", "endpoints": {"api_summary": "This file contains a set of tests for a webhook dry run feature. It defines several endpoints for testing different scenarios such as missing user permission, non-existing id, invalid query, event type not supported, root type, shop type, and transaction item metadata updated. It also tests for removed apps.", "methods": ["POST"], "paths": ["/webhookDryRun"]}}
{"file": "cloned/saleor/saleor/graphql/webhook/tests/mutations/test_webhook_update.py", "endpoints": {"api_summary": "This file contains a set of tests for a webhook update feature. It defines several endpoints for updating webhooks, including endpoints for updating webhooks by app, other app, inactive app, app that can't change webhooks ownership, missing webhook, app that doesn't exist, by staff, for removed app, without permission, inherit events from query, invalid custom headers, notify user with another event, and filterable channel slugs. Each endpoint corresponds to a specific test function in the file.", "methods": ["POST"], "paths": ["/webhook/update"]}}
{"file": "cloned/saleor/saleor/graphql/webhook/tests/mutations/test_webhook_create.py", "endpoints": {"api_summary": "This file defines several REST API endpoints for a webhook service. It includes endpoints for creating, updating, and deleting webhooks. The endpoints are used by both app and staff users. The webhooks are used to send HTTP requests to a specified URL when certain events occur. The events can be asynchronous (ORDER_CREATED, PAYMENT_LIST_GATEWAYS) or synchronous (ORDER_CREATED, PAYMENT_LIST_GATEWAYS).", "methods": ["POST", "GET", "DELETE"], "paths": ["/webhook/create", "/webhook/update", "/webhook/delete"]}}
{"file": "cloned/saleor/saleor/graphql/webhook/mutations/webhook_update.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for updating webhooks. It allows users to modify existing webhook subscriptions. The API supports HTTP methods such as GET and POST. The URL paths include '/webhooks' and '/webhooks/<built-in function id>'.", "methods": ["GET", "POST"], "paths": ["/webhooks", "/webhooks/<built-in function id>"]}}
{"file": "cloned/saleor/saleor/graphql/webhook/mutations/webhook_delete.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for deleting a webhook. The endpoint is used to deactivate a webhook before it is deleted. The endpoint requires an ID of the webhook to be deleted. The endpoint also requires the app to be active.", "methods": ["POST"], "paths": ["/webhook/delete"]}}
{"file": "cloned/saleor/saleor/graphql/webhook/mutations/webhook_dry_run.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for performing a dry run of a webhook event. It supports a single event (the first, if multiple provided in the `query`). Requires permission relevant to processed event.", "methods": ["POST"], "paths": ["/webhook/dry-run"]}}
{"file": "cloned/saleor/saleor/graphql/webhook/mutations/webhook_create.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for creating a webhook. The endpoint allows users to create a new webhook subscription. The webhook can be associated with an app and can subscribe to various events. The endpoint also allows for custom headers and a subscription query to be defined.", "methods": ["POST"], "paths": ["/webhook/create"]}}
{"file": "cloned/saleor/saleor/graphql/tests/test_metrics.py", "endpoints": {"api_summary": "This API provides a GraphQL endpoint for executing queries. It is used to interact with the Saleor GraphQL API.", "methods": ["POST"], "paths": ["/graphql/"]}}
{"file": "cloned/saleor/saleor/graphql/shipping/types.py", "endpoints": {"api_summary": "This file defines several REST API endpoints related to shipping methods and zones. It includes endpoints for creating, updating, and deleting shipping methods, zones, and their associated data. It also includes endpoints for fetching shipping methods, zones, and their associated data.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/shipping_methods", "/shipping_methods/<built-in function id>", "/shipping_zones", "/shipping_zones/<built-in function id>", "/shipping_zones/<built-in function id>/shipping_methods", "/shipping_zones/<built-in function id>/shipping_methods/<built-in function id>"]}}
{"file": "cloned/saleor/saleor/graphql/shipping/schema.py", "endpoints": {"api_summary": "This file defines a set of REST API endpoints for managing shipping zones and prices. It includes endpoints for creating, updating, and deleting shipping zones and prices, as well as for translating shipping prices. It also includes endpoints for managing shipping method channel listings.", "methods": ["GET", "POST", "DELETE", "PUT"], "paths": ["/shipping_zone", "/shipping_zones"]}}
{"file": "cloned/saleor/saleor/graphql/shipping/tests/queries/test_shipping_zone.py", "endpoints": {"api_summary": "This file contains several tests for a Django application that defines several REST API endpoints. The endpoints are used to interact with a shipping zone and its associated shipping methods. The endpoints allow for querying shipping zones, their associated shipping methods, and their tax classes. The endpoints also allow for testing the application's response to invalid or non-existent IDs.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/shipping/tests/mutations/test_shipping_price_update.py", "endpoints": {"api_summary": "The code provided is a set of unit tests for a Django application. It does not contain any explicit REST API endpoints.", "methods": [], "paths": []}}
{"file": "cloned/saleor/saleor/graphql/shipping/tests/mutations/test_shipping_zone_update.py", "endpoints": {"api_summary": "This file contains a set of tests for a Django application that manages shipping zones and related operations. It includes tests for creating, updating, and deleting shipping zones, as well as for adding and removing warehouses and channels from shipping zones. It also includes tests for triggering webhooks when shipping zones are updated.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/shipping/tests/mutations/test_bulk_delete.py", "endpoints": {"api_summary": "This file contains tests for the shipping methods and zones in a saleor e-commerce platform. It defines several REST API endpoints for creating, updating, and deleting shipping methods and zones.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/shipping/tests/mutations/test_shipping_price_create.py", "endpoints": {"api_summary": "This file contains several tests for a shipping method API. It defines several endpoints for creating, updating, and deleting shipping methods. It also includes tests for error handling and edge cases. The API allows for the creation of both price-based and weight-based shipping methods, each with their own set of parameters.", "methods": ["POST"], "paths": ["/shipping/price", "/shipping/weight"]}}
{"file": "cloned/saleor/saleor/graphql/shipping/tests/mutations/test_shipping_method_channel_listing_update.py", "endpoints": {"api_summary": "This file contains a set of tests for a Django application that manages shipping methods and their channel listings. It tests the creation, updating, and removal of shipping method channel listings, as well as the validation of input data. It also includes a test for triggering webhooks when a shipping method channel listing is updated.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/shipping/tests/benchmark/test_shipping_methods.py", "endpoints": {"api_summary": "This file contains tests for a GraphQL API that manages shipping methods. It includes endpoints for querying shipping methods, excluding products from shipping methods, and removing products from the excluded products list for a shipping method.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/shipping/mutations/shipping_zone_delete.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for deleting a shipping zone. It uses the ModelDeleteMutation class to handle the deletion of a shipping zone. The endpoint is protected by the MANAGE_SHIPPING permission.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/shipping/mutations/shipping_method_channel_listing_update.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for managing shipping method's availability in channels. It allows adding or removing channels to a shipping method, and updating the price, minimum order price, and maximum order price for each channel.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/shipping/mutations/shipping_price_create.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for creating a new shipping price. It uses the ShippingPriceCreate class, which is a mutation that creates a new shipping method. The endpoint is accessible via a POST request to the '/shipping/price/create' path.", "methods": ["POST"], "paths": ["/shipping/price/create"]}}
{"file": "cloned/saleor/saleor/graphql/checkout/filters.py", "endpoints": {"api_summary": "This file defines a set of REST API endpoints for managing checkouts. These endpoints allow for the creation, retrieval, update, and deletion of checkout objects. They also provide filtering and searching capabilities based on various parameters such as customer, creation date, search term, channels, metadata, update date, authorization status, and charge status.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/checkout", "/checkout/<built-in function id>"]}}
{"file": "cloned/saleor/saleor/graphql/checkout/schema.py", "endpoints": {"api_summary": "This file defines a set of GraphQL API endpoints for managing checkout processes. It includes operations for creating, updating, and deleting checkouts, as well as managing associated checkout lines. It also includes operations for managing checkout promotions and customer information.", "methods": ["GET", "POST"], "paths": ["/checkout", "/checkouts", "/checkout_lines", "/checkout_add_promo_code", "/checkout_billing_address_update", "/checkout_complete", "/checkout_create", "/checkout_create_from_order", "/checkout_customer_attach", "/checkout_customer_detach", "/checkout_customer_note_update", "/checkout_email_update", "/checkout_line_delete", "/checkout_lines_delete", "/checkout_lines_add", "/checkout_lines_update", "/checkout_remove_promo_code", "/checkout_payment_create", "/checkout_shipping_address_update", "/checkout_shipping_method_update", "/checkout_delivery_method_update", "/checkout_language_code_update", "/order_create_from_checkout"]}}
{"file": "cloned/saleor/saleor/graphql/checkout/dataloaders/promotion_rule_infos.py", "endpoints": {"api_summary": "This file defines a data loader class for loading variant promotion rule information by checkout line ID. It interacts with various other data loaders to fetch the necessary data for the API endpoints.", "methods": ["GET"], "paths": ["/variant_promotion_rule_info_by_checkout_line_id"]}}
{"file": "cloned/saleor/saleor/graphql/checkout/dataloaders/checkout_infos.py", "endpoints": {"api_summary": "This file defines two REST API endpoints. The first endpoint is used to retrieve checkout information based on a checkout token. The second endpoint is used to retrieve checkout line information based on a checkout token.", "methods": ["GET"], "paths": ["/checkout/<checkout_token>", "/checkout/<checkout_token>/lines"]}}
{"file": "cloned/saleor/saleor/graphql/checkout/tests/test_checkout_promo_codes.py", "endpoints": {"api_summary": "This file contains tests for a REST API that handles checkout operations. It includes endpoints for fetching checkout totals, gift card codes, and checking out without a gift card.", "methods": ["POST"], "paths": ["/checkout/totals", "/checkout/gift_cards", "/checkout/gift_cards/without_gift_card"]}}
{"file": "cloned/saleor/saleor/graphql/checkout/tests/test_checkout_filters.py", "endpoints": {"api_summary": "This file contains a set of tests for a Django-based REST API. It defines several endpoints for interacting with the Checkout model, including filtering, sorting, and searching. It also includes tests for various payment statuses and transaction values.", "methods": ["POST"], "paths": ["/checkouts"]}}
{"file": "cloned/saleor/saleor/graphql/checkout/tests/test_checkout_line_problems.py", "endpoints": {"api_summary": "This file contains a set of tests for a Django-based REST API. It tests various scenarios related to checkout functionality, such as checking the availability of products, their stock levels, and their pricing. It also tests the behavior of the API when certain conditions are not met, such as when a product is not available for purchase, or when a product's stock is insufficient.", "methods": ["POST"], "paths": ["/checkouts"]}}
{"file": "cloned/saleor/saleor/graphql/checkout/tests/test_checkout_price_expiration.py", "endpoints": {"api_summary": "This file contains a set of tests for a GraphQL API. It defines several endpoints for interacting with a checkout system. These endpoints allow for adding, updating, and deleting lines from a checkout, updating the shipping and billing addresses, and updating the shipping and delivery methods. It also includes tests for invalidating the checkout prices.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/checkout/tests/deprecated/test_checkout_lines_add.py", "endpoints": {"api_summary": "This file contains tests for a REST API endpoint that allows adding lines to a checkout. It defines several endpoints for adding lines to a checkout, each with a different method of identification (either by checkout ID or checkout token).", "methods": ["POST"], "paths": ["/checkoutLinesAdd"]}}
{"file": "cloned/saleor/saleor/graphql/checkout/tests/deprecated/test_checkout_line_delete.py", "endpoints": {"api_summary": "This file contains a set of tests for a REST API endpoint that manages checkout lines. It defines several endpoints for deleting checkout lines, including by ID, token, or old line ID. It also includes tests for error handling when neither token nor ID are provided, or when both are provided.", "methods": ["POST"], "paths": ["/checkout/lines/delete"]}}
{"file": "cloned/saleor/saleor/graphql/checkout/tests/mutations/test_checkout_billing_address_update.py", "endpoints": {"api_summary": "This file contains a set of tests for the checkout billing address update functionality in a Django-based web application. It tests various scenarios such as updating the billing address, handling required fields, skipping required fields, skipping value checks, disabling fields normalization, handling problems, skipping validation, triggering webhooks, and resetting the save address flag. It also includes tests for updating the billing address with the saveAddress flag set to false or true.", "methods": ["POST"], "paths": ["/graphql/"]}}
{"file": "cloned/saleor/saleor/graphql/checkout/tests/mutations/test_checkout_customer_attach.py", "endpoints": {"api_summary": "This file contains a set of tests for a checkout system. It defines several endpoints for interacting with the checkout system, including attaching a customer to a checkout, and testing various scenarios such as attaching a customer to a checkout with or without a customer ID, attaching a customer to a checkout with active problems, and triggering webhooks when a customer is attached to a checkout.", "methods": ["POST"], "paths": ["/checkout/customer/attach"]}}
{"file": "cloned/saleor/saleor/graphql/checkout/mutations/checkout_delivery_method_update.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for updating the delivery method of a checkout. It supports both built-in and external shipping methods, as well as collection points (warehouses).", "methods": ["POST"], "paths": ["/checkout/delivery-method-update"]}}
{"file": "cloned/saleor/saleor/graphql/checkout/mutations/checkout_create_from_order.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for creating a checkout from an existing order. It includes methods for handling unavailable variants, not found variants, not published variants, variants exceeding quantity limit, and variants unavailable for purchase. It also includes a method for cleaning order lines and creating a checkout.", "methods": ["POST"], "paths": ["/checkout/create-from-order"]}}
{"file": "cloned/saleor/saleor/graphql/checkout/mutations/checkout_billing_address_update.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for updating the billing address in an existing checkout. It allows users to update the billing address of a checkout, save the address to the user's address book upon checkout completion, and validate the received billing address data.", "methods": ["POST"], "paths": ["/checkout/billing-address-update"]}}
{"file": "cloned/saleor/saleor/graphql/checkout/mutations/checkout_create.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for creating a checkout. It includes endpoints for creating a new checkout, retrieving an existing checkout, and updating an existing checkout. The API allows for the creation of checkouts with specific lines of items, and the ability to save shipping and billing addresses. The API also includes endpoints for managing metadata and private metadata.", "methods": ["POST", "GET", "PUT"], "paths": ["/checkout/create", "/checkout/<built-in function id>", "/checkout/<built-in function id>/metadata", "/checkout/<built-in function id>/private_metadata"]}}
{"file": "cloned/saleor/saleor/graphql/checkout/mutations/checkout_lines_add.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for adding checkout lines to an existing checkout. It allows users to add items to their checkout, update quantities, and manage their shipping and delivery methods.", "methods": ["POST"], "paths": ["/checkout/lines/add"]}}
{"file": "cloned/saleor/saleor/graphql/payment/types.py", "endpoints": {"api_summary": "This file contains a collection of classes and functions related to payment processing, including transaction management, payment gateway configuration, and stored payment method handling. It also includes REST API endpoints for managing payments, transactions, and payment methods.", "methods": ["GET", "POST"], "paths": ["/payment", "/transaction", "/payment_method"]}}
{"file": "cloned/saleor/saleor/graphql/payment/schema.py", "endpoints": {"api_summary": "This file defines a set of GraphQL API endpoints for managing payments and transactions. It includes endpoints for initializing payments, capturing payments, refunding payments, and voiding payments. It also includes endpoints for creating, updating, and reporting on transactions.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/payment/tests/queries/test_payments_filter.py", "endpoints": {"api_summary": "This file contains a set of tests for a GraphQL API endpoint that handles payments. It tests the filtering of payments by checkouts, IDs, and empty ID lists. The tests cover various scenarios such as filtering by multiple IDs, an empty ID list, and a non-existing ID.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/payment/tests/queries/test_payments_query.py", "endpoints": {"api_summary": "This file contains a set of tests for a payment system. It defines several endpoints for querying payments, including endpoints for querying all payments, payments by user with access to all channels, payments by user with restricted access to channels, payments by app, and payments by customer. It also includes endpoints for querying a payment by ID.", "methods": ["POST"], "paths": ["/payments", "/payment/<built-in function id>"]}}
{"file": "cloned/saleor/saleor/graphql/payment/tests/mutations/test_payment_gateway_initialize.py", "endpoints": {"api_summary": "This file contains tests for the payment gateway initialization process. It defines several endpoints for initializing payment gateways for checkouts and orders. The endpoints are used to initialize payment sessions for the checkout or order, and return the gateway configurations. The tests cover various scenarios such as initializing with and without payment gateways, with and without amounts, and with multiple payment gateways.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/payment/tests/mutations/test_checkout_payment_create.py", "endpoints": {"api_summary": "This file contains a set of tests for the checkout payment functionality. It defines several endpoints for creating payments for checkouts. These endpoints are used to process payments for checkouts, including validating the checkout, calculating the total cost, and creating the payment. The endpoints also handle errors and edge cases, such as missing billing addresses or unsupported currencies.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/payment/tests/mutations/test_payment_gateway_initialize_tokenization.py", "endpoints": {"api_summary": "This file contains unit tests for the payment gateway initialization tokenization feature. It tests the functionality of the payment gateway by sending GraphQL mutations to the server.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/payment/tests/mutations/test_transaction_request_action.py", "endpoints": {"api_summary": "This file contains a set of tests for a payment transaction system. It defines several endpoints for transaction requests, including charge, refund, and cancelation requests. These endpoints are used to interact with the payment system, such as charging a customer, refunding a transaction, or canceling a transaction.", "methods": ["POST"], "paths": ["/transaction/request/charge", "/transaction/request/refund", "/transaction/request/cancel"]}}
{"file": "cloned/saleor/saleor/graphql/payment/tests/mutations/test_stored_payment_method_request_delete.py", "endpoints": {"api_summary": "This file contains tests for a stored payment method request delete API endpoint. It tests the functionality of the endpoint for different types of users, including user, app, and anonymous users. It also tests the error handling for different scenarios such as when the app or plugin is not subscribed to the event, when the channel is incorrect, and when the delete operation fails.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/payment/tests/mutations/test_transaction_request_refund_for_granted_refund.py", "endpoints": {"api_summary": "This file contains a set of tests for a REST API endpoint that handles transaction refund requests for granted refunds. It tests various scenarios such as missing permissions, non-existing transactions or granted refunds, and various error conditions. It also tests the functionality of the endpoint when it is triggered by an app or a staff user.", "methods": ["POST"], "paths": ["/endpoint/"]}}
{"file": "cloned/saleor/saleor/graphql/payment/mutations/payment/checkout_payment_create.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for creating a new payment for a given checkout. It uses Django and Graphene to define the API endpoints. The endpoint is used to create a new payment for a checkout. The endpoint requires a checkout ID and a PaymentInput object.", "methods": ["POST"], "paths": ["/checkout/<built-in function id>/payment/"]}}
{"file": "cloned/saleor/saleor/graphql/payment/mutations/payment/payment_refund.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for refunding a payment. It allows users to refund a captured payment amount. The endpoint is protected by permissions, and it uses the gateway to perform the refund. If the refund is successful, it triggers the order_refunded action.", "methods": ["POST"], "paths": ["/payment/refund"]}}
{"file": "cloned/saleor/saleor/graphql/payment/mutations/stored_payment_methods/payment_method_intialize_tokenization.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for tokenizing payment methods. It allows users to initialize the tokenization process for their payment methods. The endpoint supports GET and POST methods.", "methods": ["GET", "POST"], "paths": ["/payment/initialize_tokenization"]}}
{"file": "cloned/saleor/saleor/graphql/payment/mutations/stored_payment_methods/payment_method_request_delete.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for deleting a stored payment method. It uses the Django framework and Graphene library for defining the API. The endpoint is used to delete a stored payment method on the payment provider side.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/payment/mutations/stored_payment_methods/payment_method_process_tokenization.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for tokenizing payment methods. It allows users to process payment method tokenization using a payment gateway app. The endpoint is used to process tokenization requests for a specific payment gateway app.", "methods": ["POST"], "paths": ["/payment/process_tokenization"]}}
{"file": "cloned/saleor/saleor/graphql/payment/mutations/transaction/transaction_initialize.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for initializing a transaction session. It uses a payment gateway to initialize the session and handles the transaction. The endpoint is used to initialize a transaction session for a checkout or order. It also includes methods to clean the action, app from the payment gateway, and the idempotency key.", "methods": ["POST"], "paths": ["/transaction/initialize"]}}
{"file": "cloned/saleor/saleor/graphql/payment/mutations/transaction/payment_gateway_initialize.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for initializing a payment gateway session. It includes methods for preparing the response and performing the mutation. The API endpoint is used to initialize a payment gateway session for a given checkout or order. The API endpoint takes in an ID, an amount, and a list of payment gateways to initialize.", "methods": ["POST"], "paths": ["/payment/initialize"]}}
{"file": "cloned/saleor/saleor/graphql/payment/mutations/transaction/transaction_create.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for creating transactions. It allows users to create transactions for checkouts or orders. The API also allows for the creation of transaction events and updates to the order or checkout.", "methods": ["POST"], "paths": ["/transaction/create"]}}
{"file": "cloned/saleor/saleor/graphql/payment/mutations/transaction/transaction_update.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for updating transactions. It allows users to update transaction details such as the amount, currency, and metadata. The endpoint also handles transaction events and updates related orders and checkouts.", "methods": ["POST"], "paths": ["/transaction/update"]}}
{"file": "cloned/saleor/saleor/graphql/payment/mutations/transaction/transaction_event_report.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for reporting transaction events. It allows users to report events related to transactions, such as authorization requests, charge requests, refund requests, etc. The API also allows for updating transaction metadata and private metadata.", "methods": ["POST"], "paths": ["/transaction/event/report"]}}
{"file": "cloned/saleor/saleor/graphql/menu/types.py", "endpoints": {"api_summary": "This file defines a GraphQL API for managing menus and menu items. It includes endpoints for creating, reading, updating, and deleting menus and menu items. It also includes endpoints for moving menu items within a menu.", "methods": ["GET", "POST"], "paths": ["/graphql/menu", "/graphql/menu/<built-in function id>", "/graphql/menuitem", "/graphql/menuitem/<built-in function id>", "/graphql/menuitemmove"]}}
{"file": "cloned/saleor/saleor/graphql/menu/schema.py", "endpoints": {"api_summary": "This file defines a GraphQL API for managing menus and menu items. It includes queries for retrieving menus, menu items, and performing various operations on them. It also includes mutations for creating, updating, and deleting menus and menu items.", "methods": ["GET", "POST"], "paths": ["/graphql?query={menu(id:$id, channel:$channel, name:$name, slug:$slug)}", "/graphql?query={menus(channel:$channel, sort_by:$sort_by, filter:$filter)}", "/graphql?query={menu_item(id:$id, channel:$channel)}", "/graphql?query={menu_items(channel:$channel, sort_by:$sort_by, filter:$filter)}", "/graphql", "/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/menu/tests/queries/test_menu.py", "endpoints": {"api_summary": "This file contains a set of tests for a GraphQL API. It tests the functionality of the menu query, including querying by id, name, slug, and error handling. It also tests the menu items query, which includes querying by id, name, slug, and error handling.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/menu/tests/queries/test_menu_item.py", "endpoints": {"api_summary": "This file contains a set of tests for a GraphQL API. The API is used to query menu items. It includes endpoints for querying menu items by ID, testing the API with invalid channels, and testing the API with different permissions. The API also allows for querying static URLs and pages based on user permissions.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/menu/tests/mutations/test_menu_create.py", "endpoints": {"api_summary": "This file contains tests for a Django-based REST API. It tests the creation of a menu, validation of menu items, and the triggering of webhooks when a menu is created. It also tests the handling of slug conflicts and the ability to provide a custom slug.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/menu/tests/mutations/test_menu_item_delete.py", "endpoints": {"api_summary": "This file contains unit tests for a Django application. It uses the Django testing client to make GraphQL requests, which is a common way to test GraphQL APIs.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/menu/tests/mutations/test_menu_delete.py", "endpoints": {"api_summary": "This file contains unit tests for a GraphQL API. It tests the deletion of a menu item in a Django application. The test includes making a GraphQL mutation to delete a menu item and then asserting that the item no longer exists.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/menu/mutations/menu_item_move.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for moving menu items. It allows for the modification of menu items, including their parent and sort order. The endpoint is used to manage the menu structure of a system.", "methods": ["POST"], "paths": ["/menu/item/move"]}}
{"file": "cloned/saleor/saleor/graphql/core/connection.py", "endpoints": {"api_summary": "This file contains a collection of utility functions for handling REST API endpoints in a Django project. It includes functions for creating connections, filtering queries, and handling pagination. It also includes functions for handling GraphQL queries and mutations.", "methods": ["GET", "POST"], "paths": ["/api/endpoint1", "/api/endpoint2"]}}
{"file": "cloned/saleor/saleor/graphql/core/tests/test_query_cost_validation.py", "endpoints": {"api_summary": "This file contains a set of tests for a GraphQL API. It defines several endpoints for testing the API's functionality. The endpoints are used to test the API's ability to handle different types of queries and their complexity. The tests cover a range of scenarios, from queries that exceed the maximum cost limit to those that do not, and from queries with different levels of complexity.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/core/tests/test_pagination.py", "endpoints": {"api_summary": "This file defines a GraphQL API for querying and paginating a list of books. It includes tests for pagination functionality, including forward and backward pagination, as well as tests for page info and error handling.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/core/tests/test_scalars.py", "endpoints": {"api_summary": "This file contains tests for a GraphQL API. It defines several endpoints for testing various features of the API, including querying, mutating, and initializing payment gateways. It also tests the handling of JSON and DateTime scalars.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/core/tests/test_graphql.py", "endpoints": {"api_summary": "This file contains a set of tests for a REST API. It tests the functionality of the API endpoints, including authentication, querying, and error handling.", "methods": ["GET", "POST"], "paths": ["/api/", "/api/token/", "/api/products/", "/api/orders/"]}}
{"file": "cloned/saleor/saleor/graphql/core/tests/test_base_mutation.py", "endpoints": {"api_summary": "This file defines several REST API endpoints for interacting with products and orders. It includes endpoints for creating, updating, and retrieving product and order information. The endpoints are secured with JWT tokens, and include error handling for invalid IDs and expired tokens.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/core/tests/test_view.py", "endpoints": {"api_summary": "This file contains a set of tests for a GraphQL API. It defines several endpoints for testing various aspects of the API, including batch queries, invalid requests, and permission checks. It also includes tests for error handling and logging.", "methods": ["POST"], "paths": ["/graphql/"]}}
{"file": "cloned/saleor/saleor/graphql/core/types/filter_input.py", "endpoints": {"api_summary": "This file contains a collection of classes and functions that are used to define and manage REST API endpoints. It includes classes for filtering and inputting data, as well as classes for handling different types of data. It also includes classes for handling different types of filters and inputs.", "methods": ["GET", "POST"], "paths": ["/api/filter", "/api/input", "/api/data", "/api/filter_input", "/api/data_type"]}}
{"file": "cloned/saleor/saleor/graphql/warehouse/filters.py", "endpoints": {"api_summary": "This file defines two REST API endpoints related to warehouses and stock. The first endpoint allows for filtering and searching through warehouses based on various parameters such as name, email, click and collect option, and channels. The second endpoint allows for filtering and searching through stock based on the product variant and warehouse.", "methods": ["GET"], "paths": ["/warehouses", "/stocks"]}}
{"file": "cloned/saleor/saleor/graphql/warehouse/types.py", "endpoints": {"api_summary": "This file defines a set of GraphQL API endpoints for managing warehouses and stocks. It includes endpoints for creating, updating, and retrieving warehouse and stock information. It also includes endpoints for managing allocations.", "methods": ["GET", "POST"], "paths": ["/graphql/warehouse/create", "/graphql/warehouse/update", "/graphql/warehouse/retrieve", "/graphql/stock/create", "/graphql/stock/update", "/graphql/stock/retrieve", "/graphql/allocation/create", "/graphql/allocation/update", "/graphql/allocation/retrieve"]}}
{"file": "cloned/saleor/saleor/graphql/warehouse/schema.py", "endpoints": {"api_summary": "This file defines two sets of REST API endpoints. The first set is for managing warehouses, including creating, updating, deleting, and assigning shipping zones to warehouses. The second set is for managing stock, including bulk updates. Both sets of endpoints require specific permissions to access.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/warehouse/<built-in function id>", "/warehouses", "/stock/<built-in function id>", "/stocks", "/stock_bulk_update"]}}
{"file": "cloned/saleor/saleor/graphql/warehouse/tests/queries/test_warehouse.py", "endpoints": {"api_summary": "This file contains a set of GraphQL queries for a Warehouse object. It defines several endpoints for querying warehouse data, including details about the warehouse, its shipping zones, stocks, and address. The endpoints are secured with permissions, and can be queried by different user roles. The endpoints also support querying by external reference.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/warehouse/tests/queries/test_warehouses_filtering.py", "endpoints": {"api_summary": "This file contains a set of tests for a GraphQL API endpoint that queries warehouses. The API allows for filtering by various parameters such as search, ids, isPrivate, clickAndCollectOption, channels, and metadata. The tests cover various scenarios such as searching for warehouses by name, email, ids, isPrivate, clickAndCollectOption, channels, and metadata.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/warehouse/tests/queries/test_warehouses_pagination.py", "endpoints": {"api_summary": "This file contains tests for a GraphQL API endpoint that handles warehouse data. It includes tests for pagination and filtering of warehouse data. The API endpoint is used to retrieve warehouse data, and it supports sorting and filtering by name and ID.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/warehouse/tests/bulk_mutations/test_stock_bulk_update.py", "endpoints": {"api_summary": "This file contains a set of tests for a GraphQL API endpoint that allows for bulk updates to stock quantities. It tests various scenarios such as updating stocks using IDs, sending a stock updated event, and handling errors when invalid arguments are provided. It also tests the API's ability to handle external references and IDs.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/warehouse/tests/mutations/test_warehouse_create.py", "endpoints": {"api_summary": "This file contains a set of tests for a REST API endpoint that manages warehouses. It includes endpoints for creating, updating, and deleting warehouses. It also includes endpoints for triggering webhooks when a warehouse is created.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/warehouse/tests/mutations/test_warehouse_delete.py", "endpoints": {"api_summary": "This file contains tests for a REST API endpoint that manages warehouses. It includes endpoints for creating, updating, and deleting warehouses. It also includes endpoints for triggering webhooks when certain events occur, such as when a warehouse is deleted.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/warehouse/bulk_mutations/stock_bulk_update.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for bulk updating stocks. It allows for the updating of stocks for a given variant and warehouse. The API uses HTTP methods such as GET and POST. The URL paths include '/users' and '/users/<built-in function id>'.", "methods": ["GET", "POST"], "paths": ["/users", "/users/<built-in function id>"]}}
{"file": "cloned/saleor/saleor/graphql/plugins/schema.py", "endpoints": {"api_summary": "This file defines two REST API endpoints for managing plugins. The first endpoint, '/plugin', allows for the retrieval of a specific plugin by its ID. The second endpoint, '/plugins', provides a list of plugins, which can be filtered and sorted. Both endpoints require the 'MANAGE_PLUGINS' permission.", "methods": ["GET", "GET"], "paths": ["/plugin", "/plugins"]}}
{"file": "cloned/saleor/saleor/graphql/plugins/tests/test_mutation_plugin_update.py", "endpoints": {"api_summary": "This file contains a set of tests for a plugin system. It defines several endpoints for updating plugin configurations. These endpoints are used to manage the configuration of plugins in the system. The endpoints allow for the activation and deactivation of plugins, as well as the updating of their configuration.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/plugins/tests/queries/test_plugins.py", "endpoints": {"api_summary": "This file contains tests for a plugin system. It defines several endpoints for querying and manipulating plugins. These endpoints are used to retrieve, create, update, and delete plugins. The endpoints are secured and require specific permissions to access.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/order/resolvers.py", "endpoints": {"api_summary": "This file contains several functions that define REST API endpoints. The endpoints are used to interact with orders, draft orders, and order events. They allow for the retrieval, creation, and modification of these resources. The endpoints are secured and only accessible to authorized users.", "methods": ["GET", "POST"], "paths": ["/orders", "/orders/<built-in function id>", "/draft_orders", "/orders_total", "/order/<built-in function id>", "/homepage_events", "/order_by_token"]}}
{"file": "cloned/saleor/saleor/graphql/order/filters.py", "endpoints": {"api_summary": "This file defines a set of REST API endpoints for managing orders. It includes endpoints for filtering, searching, and updating orders. It also includes endpoints for managing gift cards and payment statuses.", "methods": ["GET", "POST"], "paths": ["/orders", "/orders/<built-in function id>", "/orders/<built-in function id>/gift_card_used", "/orders/<built-in function id>/gift_card_bought", "/orders/<built-in function id>/payment_status", "/orders/<built-in function id>/authorize_status", "/orders/<built-in function id>/charge_status", "/orders/<built-in function id>/status", "/orders/<built-in function id>/customer", "/orders/<built-in function id>/created", "/orders/<built-in function id>/updated_at", "/orders/<built-in function id>/search", "/orders/<built-in function id>/channels", "/orders/<built-in function id>/is_click_and_collect", "/orders/<built-in function id>/is_preorder", "/orders/<built-in function id>/ids", "/orders/<built-in function id>/checkout_tokens", "/orders/<built-in function id>/gift_card_used", "/orders/<built-in function id>/gift_card_bought", "/orders/<built-in function id>/numbers", "/orders/<built-in function id>/checkout_ids"]}}
{"file": "cloned/saleor/saleor/graphql/order/schema.py", "endpoints": {"api_summary": "This file defines a GraphQL API for managing orders and draft orders. It includes endpoints for creating, updating, and deleting orders and draft orders, as well as for managing order lines and discounts. It also includes endpoints for fulfilling orders and managing fulfillment. It also includes endpoints for managing order notes and refunds.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/order/tests/test_homepage.py", "endpoints": {"api_summary": "This file contains a set of tests for a GraphQL API. It defines several endpoints for querying and manipulating orders and their events. The endpoints include homepage events, order totals, and order counts. The tests cover different user roles and permissions, including staff, app, customer, and anonymous users.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/order/tests/queries/test_order_by_token.py", "endpoints": {"api_summary": "This file contains a set of tests for a GraphQL API endpoint that retrieves order information. It tests various scenarios such as retrieving order details for different types of users (anonymous, order owner, superuser, staff, app with and without permissions) and different order statuses (draft, without addresses). It also tests the payment details retrieval for different user roles.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/order/tests/queries/test_pagination.py", "endpoints": {"api_summary": "This file contains a set of tests for the Order model in a Django application. It defines several endpoints for querying and filtering orders. The endpoints are used to retrieve, create, update, and delete orders. The tests cover a variety of scenarios, including filtering by creation date, customer, payment status, and search terms.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/order/tests/queries/test_fulfillment.py", "endpoints": {"api_summary": "This file contains tests for a REST API that manages orders and their fulfillments. It includes endpoints for querying order fulfillment data, testing if a staff user can query order fulfillment data, and testing the fulfillment of an order with refund details.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/order/tests/queries/test_draft_order_with_filter.py", "endpoints": {"api_summary": "This file contains a set of tests for a draft order query with filter. It tests various scenarios such as searching by number, customer fields, created date, search, base total price range, base subtotal price range, base total price one of, base subtotal price one of, and base total price with and or. It also tests missing currency for base total price and base subtotal price.", "methods": ["POST"], "paths": ["/draftOrders"]}}
{"file": "cloned/saleor/saleor/graphql/order/tests/queries/test_order_entity.py", "endpoints": {"api_summary": "This file contains tests for a GraphQL API endpoint that fetches orders. It tests different scenarios such as staff, customer, unauthenticated users, and their permissions. The API endpoint is used to fetch orders based on their IDs.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/order/tests/queries/test_order_granted_refunds.py", "endpoints": {"api_summary": "This file contains a set of tests for the saleor.payment module. It tests the functionality of the granted refunds feature in the saleor.payment module. The tests cover various scenarios such as creating, querying, and updating granted refunds. The tests also cover the functionality of the total granted refund feature.", "methods": ["POST"], "paths": ["/orders"]}}
{"file": "cloned/saleor/saleor/graphql/order/tests/queries/test_order_events.py", "endpoints": {"api_summary": "This file contains several tests for a REST API. The API is used to interact with orders and their related events. It includes endpoints for querying orders and their events, as well as for creating and updating events. The API also allows for the retrieval of event lines, even if the original line has been deleted or if the line's primary key is missing from the event data.", "methods": ["POST"], "paths": ["/orders"]}}
{"file": "cloned/saleor/saleor/graphql/order/tests/queries/test_draft_order.py", "endpoints": {"api_summary": "This file contains a set of tests for the draft orders query in a GraphQL API. It tests different scenarios such as querying draft orders by different types of users (staff, app, customer), and different tax configurations (flat rates, tax app). It also tests the behavior of the query when there are granted refunds, fulfillments, and events associated with the order.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/order/tests/queries/test_orders.py", "endpoints": {"api_summary": "This file contains a set of tests for the Saleor e-commerce platform. It defines several test cases for different scenarios related to orders, including updating order prices, handling refunds, fulfillments, and events. It also includes a test for a GraphQL query to search orders.", "methods": [], "paths": []}}
{"file": "cloned/saleor/saleor/graphql/order/tests/deprecated/test_order.py", "endpoints": {"api_summary": "This file contains a set of tests for the Saleor e-commerce platform. It defines several REST API endpoints for order management, fulfillment, and discount management. The endpoints are used to create, update, delete, and manage orders, fulfillments, and discounts.", "methods": ["POST", "GET", "PUT", "DELETE"], "paths": ["/orders/total", "/orderLine/delete/<built-in function id>", "/orderLine/update/<built-in function id>", "/order/fulfill", "/order/fulfillment/refund", "/order/fulfillment/return", "/orderLine/discount/update/<built-in function id>", "/orderLine/discount/remove/<built-in function id>"]}}
{"file": "cloned/saleor/saleor/graphql/order/tests/mutations/test_draft_order_create.py", "endpoints": {"api_summary": "This file contains a set of tests for the draft order creation functionality in the Saleor e-commerce platform. It tests various scenarios such as creating an order with a voucher, applying a voucher to an order, creating an order with a custom price, and more. It also includes tests for various error scenarios and edge cases.", "methods": ["POST"], "paths": ["/graphql/"]}}
{"file": "cloned/saleor/saleor/graphql/order/tests/mutations/test_order_line_delete.py", "endpoints": {"api_summary": "This file contains a set of tests for the order line delete mutation in a Django application. It tests various scenarios such as removing a line from an order, removing a line with no line allocations, removing a line by a user without channel access, removing a line by an app, removing a line from a draft order, and removing a non-removable gift line. It also tests the webhook triggers for the order line delete mutation.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/order/tests/mutations/test_order_grant_refund_create.py", "endpoints": {"api_summary": "The code provided does not define any REST API endpoints explicitly. It seems to be a set of test cases for a GraphQL API endpoint.", "methods": [], "paths": []}}
{"file": "cloned/saleor/saleor/graphql/order/tests/mutations/test_order_bulk_cancel.py", "endpoints": {"api_summary": "This file contains several test cases for the order bulk cancel functionality in a REST API. It tests the functionality of cancelling multiple orders, handling cases where the user does not have channel access, and triggering a webhook when a product variant is back in stock. It also tests the functionality when the SKU is not provided.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/order/tests/mutations/test_order_capture.py", "endpoints": {"api_summary": "This file contains a set of tests for the order capture functionality in a Django application. It tests the order capture mutation, the order capture by user without channel access, the order capture by app, and the order capture triggers webhooks. It also includes a mocking of the webhook transport and the call of the order event.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/order/tests/mutations/test_draft_order_delete.py", "endpoints": {"api_summary": "This file contains a set of tests for a draft order deletion API. It defines several endpoints for deleting draft orders, including by ID, by external reference, and by both ID and external reference. It also tests the release of voucher codes for multiple-use and single-use vouchers. It also tests the triggering of webhooks for draft order deletion.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/order/tests/mutations/test_draft_order_bulk_delete.py", "endpoints": {"api_summary": "This file contains a set of tests for a REST API that manages orders and order lines. It defines several endpoints for creating, updating, and deleting orders and order lines. The endpoints are secured with different permissions, and some endpoints are only accessible to certain users or apps.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/order/tests/mutations/test_order_lines_create.py", "endpoints": {"api_summary": "This API endpoint is used to create order lines in a Django project. It allows you to add products to an order, specifying the variant, quantity, and optionally a custom price and whether to create a new line if the variant already exists in the order. It also handles promotions, discounts, and other related features.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/order/tests/mutations/test_order_refund.py", "endpoints": {"api_summary": "This file contains tests for the order refund functionality in a REST API. It defines several endpoints for testing the refund of an order, including partial and full refunds. It also includes tests for refunds by users and apps, and checks for gift card lines.", "methods": ["POST"], "paths": ["/orderRefund"]}}
{"file": "cloned/saleor/saleor/graphql/order/tests/mutations/test_order_confirm.py", "endpoints": {"api_summary": "This file contains a set of tests for the order confirmation functionality in a Django-based e-commerce platform. It tests various scenarios such as confirming an order, capturing payment, handling fully paid orders, and more. It also includes tests for different user roles and payment statuses.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/order/tests/mutations/test_order_price_expiration.py", "endpoints": {"api_summary": "This file contains a set of tests for a REST API. The API is used to manage orders, including draft orders, order lines, and addresses. It also includes endpoints for updating orders and order lines.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/order/tests/mutations/test_fulfillment_cancel.py", "endpoints": {"api_summary": "This file contains a set of tests for the fulfillment cancellation functionality in a saleor-based e-commerce system. It defines several endpoints for testing different scenarios related to fulfillment cancellation, including successful cancellation, cancellation by users without channel access, cancellation by apps, cancellation for orders with gift card lines, cancellation without warehouse ID, cancellation for fulfillments awaiting approval, cancellation for fulfillments awaiting approval with specified warehouse, cancellation for fulfillments in canceled state, and cancellation for fulfillments in warehouse without stock.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/order/tests/integration/test_draft_order.py", "endpoints": {"api_summary": "This file contains tests for a REST API that manages draft orders. It includes endpoints for creating, updating, and completing draft orders. It also includes a test to ensure that a user cannot manage a draft order after losing access to a channel.", "methods": ["POST"], "paths": ["/draft_order_create", "/draft_order_update", "/draft_order_complete", "/order_lines_create", "/mark_order_as_paid", "/query_order_by_id", "/permission_group_update"]}}
{"file": "cloned/saleor/saleor/graphql/order/tests/benchmark/test_fulfillment_refund_and_return_products.py", "endpoints": {"api_summary": "This file contains two REST API endpoints for managing orders and fulfillments. The first endpoint allows for the refund of products in an order line. The second endpoint allows for the return of products in an order line, and replaces them with another product. Both endpoints use the POST method.", "methods": ["POST"], "paths": ["/orderFulfillmentRefundProducts", "/orderFulfillmentReturnProducts"]}}
{"file": "cloned/saleor/saleor/graphql/order/tests/benchmark/test_order.py", "endpoints": {"api_summary": "This file contains GraphQL API endpoints for fetching and manipulating order details. It includes endpoints for fetching order details for users, staff, and multiple orders. It also includes endpoints for fetching draft orders.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/order/bulk_mutations/draft_orders.py", "endpoints": {"api_summary": "This file defines two REST API endpoints for managing draft orders and order lines. The endpoints allow for the creation, deletion, and modification of draft orders and order lines. The endpoints also include validation checks to ensure that only draft orders can be modified and that orders with payments or transactions attached cannot be deleted.", "methods": ["POST"], "paths": ["/draft_orders/bulk_delete", "/order_lines/bulk_delete"]}}
{"file": "cloned/saleor/saleor/graphql/order/mutations/order_grant_refund_create.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for creating a new granted refund for an order. It allows users to add a granted refund to an order, specifying the amount, reason, lines to assign to the refund, and whether to include shipping costs. The endpoint also validates the input and handles errors.", "methods": ["POST"], "paths": ["/orders/<built-in function id>/grant-refund"]}}
{"file": "cloned/saleor/saleor/graphql/order/mutations/draft_order_create.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for creating a draft order. It includes endpoints for creating a draft order, adding lines to the order, and handling voucher codes. The API allows users to create draft orders, add lines to the order, and handle voucher codes.", "methods": ["POST"], "paths": ["/orders/draft-create"]}}
{"file": "cloned/saleor/saleor/graphql/order/mutations/fulfillment_refund_products.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for refunding products in an order. It allows users to refund unfulfilled lines and fulfilled lines in an order. The endpoint also allows users to manually specify the amount to be refunded and whether to include shipping costs.", "methods": ["POST"], "paths": ["/orders/<built-in function id>/refund-products"]}}
{"file": "cloned/saleor/saleor/graphql/order/mutations/order_grant_refund_update.py", "endpoints": {"api_summary": "This file defines a GraphQL API endpoint for updating a granted refund in an order. It allows for the modification of a granted refund, including the addition or removal of lines, changing the reason, and adjusting the amount. It also includes validation checks to ensure the validity of the input data.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/order/mutations/order_refund.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for refunding an order. It allows users to refund an order by providing the order ID and the amount to be refunded. The endpoint uses the POST method and the path is '/orders/<built-in function id>/refund'.", "methods": ["POST"], "paths": ["/orders/<built-in function id>/refund"]}}
{"file": "cloned/saleor/saleor/graphql/order/mutations/order_fulfill.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for fulfilling orders. It allows for the creation of new fulfillments for an order, and updates the tracking number of a fulfillment. The API endpoints are used to manage the fulfillment process of orders in the system.", "methods": ["POST"], "paths": ["/orders/<built-in function id>/fulfill"]}}
{"file": "cloned/saleor/saleor/graphql/order/mutations/fulfillment_cancel.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for cancelling fulfillments in an order. It allows users to cancel a fulfillment and optionally restock items. The endpoint requires a valid user with the MANAGE_ORDERS permission. The endpoint also requires a fulfillment ID and an optional warehouse ID.", "methods": ["POST"], "paths": ["/fulfillment/cancel/<built-in function id>"]}}
{"file": "cloned/saleor/saleor/graphql/order/mutations/draft_order_update.py", "endpoints": {"api_summary": "This file defines a GraphQL mutation for updating a draft order. It includes methods for cleaning and validating input data, handling metadata, and saving the updated order. It also includes methods for handling shipping and voucher updates.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/meta/tests/queries/test_product.py", "endpoints": {"api_summary": "This file contains a set of tests for a GraphQL API. It defines several endpoints for querying and mutating various types of data in the system. The endpoints are used to fetch and manipulate data related to categories, collections, digital contents, products, product types, product variants, and product media. The tests cover different user roles and permissions, including anonymous users, customers, staff, and apps.", "methods": ["POST"], "paths": ["/graphql/category", "/graphql/collection", "/graphql/digitalContent", "/graphql/product", "/graphql/productType", "/graphql/productVariant", "/graphql/productMedia"]}}
{"file": "cloned/saleor/saleor/graphql/meta/tests/queries/test_warehouse.py", "endpoints": {"api_summary": "This file contains tests for a GraphQL API that manages warehouses. It tests the public and private metadata of warehouses. The API allows users to query the public and private metadata of a warehouse.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/meta/tests/queries/test_channel.py", "endpoints": {"api_summary": "This file contains tests for a GraphQL API that manages channels. It defines endpoints for querying private and public metadata of channels. The private metadata is only accessible to staff and app users, while the public metadata is accessible to all users.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/meta/tests/queries/test_discount.py", "endpoints": {"api_summary": "This file contains a set of tests for a GraphQL API that manages sales, vouchers, and promotions. It defines endpoints for querying public and private metadata for these entities. The API allows users to query metadata for these entities, but only with the appropriate permissions.", "methods": ["POST"], "paths": ["/graphql/saleMeta", "/graphql/voucherMeta", "/graphql/promotionMeta"]}}
{"file": "cloned/saleor/saleor/graphql/meta/tests/queries/test_app.py", "endpoints": {"api_summary": "This file contains tests for a GraphQL API that manages apps. It tests the private and public metadata of apps. The API allows users to query the metadata of apps, but only with certain permissions.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/meta/tests/queries/test_gift_card.py", "endpoints": {"api_summary": "This file contains tests for a GraphQL API that manages gift cards. It defines endpoints for querying private and public metadata of gift cards. The private metadata is only accessible to staff and app users, while the public metadata is accessible to all users.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/meta/tests/queries/test_page.py", "endpoints": {"api_summary": "This file contains tests for a GraphQL API. It defines several endpoints for querying page types, including public and private metadata. The endpoints are used to retrieve metadata for page types, with different permissions for different user types.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/meta/tests/queries/test_payment.py", "endpoints": {"api_summary": "This file contains a set of tests for the payment and metadata endpoints of the API. It tests the functionality of the private and public metadata endpoints for different user roles and permissions.", "methods": ["GET", "POST"], "paths": ["/payment/private_metadata", "/payment/public_metadata"]}}
{"file": "cloned/saleor/saleor/graphql/meta/tests/queries/test_account.py", "endpoints": {"api_summary": "This file defines several REST API endpoints for user metadata management. It includes endpoints for querying public and private metadata of users, as well as endpoints for querying metadata of the current user. The endpoints are used to manage user metadata, which can be used to store and retrieve custom data related to users.", "methods": ["POST"], "paths": ["/graphql/user/public_meta", "/graphql/user/private_meta", "/graphql/user/self/public_meta", "/graphql/user/self/private_meta"]}}
{"file": "cloned/saleor/saleor/graphql/meta/tests/queries/test_order.py", "endpoints": {"api_summary": "This file contains a set of tests for a GraphQL API that interacts with an Order model. It tests various queries and mutations related to the Order model, including public and private metadata. The tests cover different user roles such as anonymous users, customers, staff, and apps.", "methods": ["GET", "POST"], "paths": ["/order/<built-in function id>", "/order/<built-in function id>/metadata", "/order/<built-in function id>/private_metadata", "/order/<built-in function id>/transactions/metadata", "/order/<built-in function id>/transactions/private_metadata"]}}
{"file": "cloned/saleor/saleor/graphql/meta/tests/mutations/test_shop.py", "endpoints": {"api_summary": "This file contains tests for a REST API that manages shop settings. It includes endpoints for updating metadata, deleting private and public metadata, and adding public and private metadata.", "methods": ["POST", "POST", "POST", "POST"], "paths": ["/shopSettingsUpdate", "/deletePrivateMetadata", "/deleteMetadata", "/updateMetadata", "/updatePrivateMetadata"]}}
{"file": "cloned/saleor/saleor/graphql/meta/tests/mutations/test_update_metadata.py", "endpoints": {"api_summary": "This file contains a set of tests for a GraphQL API. It tests the functionality of the 'updateMetadata' mutation, which is used to update metadata for various types of objects in the system.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/meta/tests/mutations/test_channel.py", "endpoints": {"api_summary": "This API provides endpoints for managing metadata for a channel. It allows for the addition, updating, and deletion of public and private metadata for a channel.", "methods": ["GET", "POST"], "paths": ["/channels/<channel_id>/metadata", "/channels/<channel_id>/private_metadata"]}}
{"file": "cloned/saleor/saleor/graphql/meta/tests/mutations/test_discount.py", "endpoints": {"api_summary": "This file contains a set of tests for a REST API that manages discounts. It tests the creation, deletion, and updating of public and private metadata for various types of items such as vouchers, sales, and promotions.", "methods": ["GET", "POST"], "paths": ["/vouchers/<voucher_id>/metadata", "/sales/<sale_id>/metadata", "/promotions/<promotion_id>/metadata"]}}
{"file": "cloned/saleor/saleor/graphql/meta/tests/mutations/test_shipping.py", "endpoints": {"api_summary": "This file contains a set of tests for a REST API that manages shipping methods and zones. It includes endpoints for creating, updating, and deleting public and private metadata for both shipping methods and zones.", "methods": ["GET", "POST"], "paths": ["/test_delete_private_metadata_for_shipping_method", "/test_delete_private_metadata_for_shipping_zone", "/test_delete_public_metadata_for_shipping_method", "/test_delete_public_metadata_for_shipping_zone", "/test_add_public_metadata_for_shipping_method", "/test_add_public_metadata_for_shipping_zone", "/test_add_private_metadata_for_shipping_method", "/test_add_private_metadata_for_shipping_zone"]}}
{"file": "cloned/saleor/saleor/graphql/meta/tests/mutations/test_menu.py", "endpoints": {"api_summary": "This file contains a set of tests for a REST API. It defines several endpoints for interacting with a menu and menu item system. These endpoints allow for the creation, reading, updating, and deletion of metadata for both public and private data.", "methods": ["GET", "POST"], "paths": ["/menu/<menu_id>/metadata", "/menu/<menu_id>/private_metadata", "/menu_item/<menu_item_id>/metadata", "/menu_item/<menu_item_id>/private_metadata"]}}
{"file": "cloned/saleor/saleor/graphql/meta/tests/mutations/test_payment.py", "endpoints": {"api_summary": "This file contains tests for a REST API that manages payment and transaction items. It includes endpoints for updating private and public metadata, deleting private metadata, and adding private metadata.", "methods": ["POST"], "paths": ["/tests/test_update_private_metadata", "/tests/test_update_public_metadata", "/tests/test_delete_private_metadata", "/tests/test_add_private_metadata"]}}
{"file": "cloned/saleor/saleor/graphql/meta/tests/mutations/test_order.py", "endpoints": {"api_summary": "This file contains a set of tests for a Django-based REST API. It tests various endpoints for adding, updating, and deleting metadata for various models in the system. It also tests the triggering of webhooks when metadata is updated.", "methods": ["GET", "POST"], "paths": ["/orders/<built-in function id>", "/orders/<built-in function id>/metadata", "/orders/<built-in function id>/private_metadata", "/order_lines/<built-in function id>/metadata", "/fulfillments/<built-in function id>/metadata", "/fulfillments/<built-in function id>/private_metadata", "/transaction_items/<built-in function id>/metadata", "/categories/<built-in function id>/private_metadata", "/collections/<built-in function id>/private_metadata", "/digital_contents/<built-in function id>/private_metadata", "/fulfillments/<built-in function id>/private_metadata"]}}
{"file": "cloned/saleor/saleor/graphql/attribute/filters.py", "endpoints": {"api_summary": "This file defines a set of REST API endpoints for managing attributes in a system. It includes endpoints for filtering, searching, and retrieving attributes. It also includes endpoints for managing attribute values.", "methods": ["GET", "POST"], "paths": ["/attributes", "/attributes/<built-in function id>", "/attribute-values", "/attribute-values/<built-in function id>"]}}
{"file": "cloned/saleor/saleor/graphql/attribute/bulk_mutations.py", "endpoints": {"api_summary": "This file defines two REST API endpoints for managing attributes and attribute values. The endpoints allow for the creation, retrieval, update, and deletion of attributes and attribute values. The endpoints also trigger webhook events for updates and deletions.", "methods": ["POST", "DELETE"], "paths": ["/attributes/bulk-delete", "/attribute-values/bulk-delete"]}}
{"file": "cloned/saleor/saleor/graphql/attribute/schema.py", "endpoints": {"api_summary": "This file defines a set of GraphQL API endpoints for managing attributes and their values. It includes endpoints for creating, updating, deleting, and translating attributes and their values. It also includes endpoints for bulk operations such as creating, updating, deleting, and translating multiple attributes and values.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/attribute/tests/queries/test_attribute_filtering_with_channels.py", "endpoints": {"api_summary": "This file defines several REST API endpoints for managing attributes. It includes endpoints for creating, updating, and deleting attributes, as well as for filtering attributes based on various criteria such as category or collection. It also includes endpoints for testing these endpoints.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/attributes", "/attributes/<built-in function id>", "/attributes/filter/<built-in function id>", "/attributes/filter/<built-in function id>/<built-in function id>", "/attributes/filter/<built-in function id>/<built-in function id>/<built-in function id>"]}}
{"file": "cloned/saleor/saleor/graphql/attribute/tests/queries/test_attributes_sort.py", "endpoints": {"api_summary": "This file contains tests for a GraphQL API. It tests the sorting of attributes and attribute choices. It does not define any REST API endpoints explicitly.", "methods": [], "paths": []}}
{"file": "cloned/saleor/saleor/graphql/attribute/tests/queries/test_attribute_query.py", "endpoints": {"api_summary": "This file contains a set of tests for a Django-based GraphQL API. It tests various aspects of the API, including querying attributes, checking permissions, and validating responses. It also includes tests for error handling and edge cases.", "methods": ["GET", "POST"], "paths": ["/api/attributes", "/api/attributes/<built-in function id>"]}}
{"file": "cloned/saleor/saleor/graphql/attribute/tests/queries/test_attribute_pagination.py", "endpoints": {"api_summary": "This file defines a GraphQL API for querying and manipulating attributes. It includes endpoints for sorting and filtering attributes, as well as filtering attributes by collection and category. The API allows for pagination of the results.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/attribute/tests/mutations/test_attribute_bulk_update.py", "endpoints": {"api_summary": "This file contains a set of tests for a GraphQL mutation that updates attributes in bulk. It covers various scenarios such as updating attribute names, adding and removing values, and handling errors. It also includes tests for triggering webhooks when attributes are updated.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/attribute/tests/mutations/test_attribute_value_create.py", "endpoints": {"api_summary": "This file contains a set of tests for a Django-based REST API. It defines several endpoints for creating, updating, and retrieving attribute values. It also includes tests for triggering webhooks when attribute values are created or updated.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/attribute/tests/mutations/test_attribute_value_delete.py", "endpoints": {"api_summary": "This file contains a set of tests for the attribute value deletion functionality in the Saleor e-commerce platform. It tests the deletion of attribute values, including their removal from products and triggers webhooks for updates. It also tests the deletion of attribute values by external reference and handles errors when both id and external reference are provided.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/attribute/tests/mutations/test_attribute_delete.py", "endpoints": {"api_summary": "This file contains several tests for a REST API endpoint that manages attributes in a product type. It includes endpoints for deleting attributes, deleting attributes by external reference, and checking for errors when deleting attributes by both id and external reference. It also includes a test for deleting a file attribute.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/attribute/tests/mutations/test_attribute_bulk_create.py", "endpoints": {"api_summary": "This file contains a set of tests for a GraphQL API endpoint that allows for the bulk creation of attributes. The API endpoint is used to create multiple attributes at once, with various options for error handling and external reference handling. The API endpoint is used in the context of a larger system that manages product types and attributes.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/attribute/tests/mutations/test_attribute_update.py", "endpoints": {"api_summary": "This file contains a set of tests for the attribute update functionality in the Saleor e-commerce platform. It defines several endpoints for updating attributes, including updating the name, slug, and values of attributes. It also includes endpoints for testing error handling and edge cases.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/attribute/tests/benchmark/test_attribute.py", "endpoints": {"api_summary": "This file contains tests for a REST API that manages attributes and their translations. It tests the retrieval of attributes, their translations, and the translations of attribute values.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/attribute/mutations/attribute_value_create.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for creating attribute values. It allows users to create new attribute values for a specific attribute. The endpoint uses the POST method and the path is '/attribute/<attribute_id>/values'.", "methods": ["POST"], "paths": ["/attribute/<attribute_id>/values"]}}
{"file": "cloned/saleor/saleor/graphql/attribute/mutations/attribute_bulk_create.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for bulk attribute creation. It includes methods for cleaning and validating attribute and value data, creating attributes and their values, and saving them to the database. It also includes a mutation class for bulk attribute creation, which includes methods for cleaning and validating input data, creating attributes and their values, and saving them to the database. The endpoint is used to create multiple attributes and their values in a single request.", "methods": ["POST"], "paths": ["/AttributeBulkCreate"]}}
{"file": "cloned/saleor/saleor/graphql/attribute/mutations/attribute_bulk_update.py", "endpoints": {"api_summary": "This file defines a GraphQL API endpoint for bulk updating attributes. It allows for the modification of multiple attributes and their associated values in a single request. The API supports error handling and policy configuration for handling errors during the update process.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/attribute/mutations/attribute_reorder_values.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for reordering attribute values. It allows users to reorder attribute values using a specified list of reordering operations. The endpoint is used to update the order of attribute values in the system.", "methods": ["POST"], "paths": ["/attribute/<built-in function id>/reorder"]}}
{"file": "cloned/saleor/saleor/graphql/attribute/mutations/attribute_update.py", "endpoints": {"api_summary": "This file defines a GraphQL API for managing attributes. Attributes are used to describe products and their properties. The API includes endpoints for creating, updating, and deleting attributes, as well as adding and removing attribute values.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/tax/dataloaders.py", "endpoints": {"api_summary": "This file contains several data loaders for tax-related operations. These loaders are used to fetch tax configurations, tax classes, and tax rates from the database. They are used to load data in a performant way, reducing the number of database queries.", "methods": ["GET"], "paths": ["/tax/configuration/<int:channel_id>", "/tax/class/<int:tax_class_id>", "/tax/class/<int:tax_class_id>/rate", "/tax/class/<int:tax_class_id>/charge_taxes"]}}
{"file": "cloned/saleor/saleor/graphql/tax/types.py", "endpoints": {"api_summary": "This file defines several REST API endpoints related to tax configuration, tax classes, and tax rates. It includes endpoints for creating, updating, and deleting tax configurations, tax classes, and tax rates. It also includes endpoints for retrieving tax configurations, tax classes, and tax rates.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/tax/configurations", "/tax/configurations/<built-in function id>", "/tax/classes", "/tax/classes/<built-in function id>", "/tax/rates", "/tax/rates/<built-in function id>"]}}
{"file": "cloned/saleor/saleor/graphql/tax/schema.py", "endpoints": {"api_summary": "This file defines a GraphQL API for managing tax configurations and tax classes. It includes endpoints for creating, deleting, updating, and retrieving tax configurations and tax classes. It also includes endpoints for managing tax exemptions and retrieving tax class rates grouped by country.", "methods": ["GET", "POST"], "paths": ["/tax_configuration/<id>", "/tax_configurations", "/tax_class/<id>", "/tax_classes", "/tax_country_configuration/<country_code>", "/tax_country_configurations"]}}
{"file": "cloned/saleor/saleor/graphql/tax/tests/queries/test_tax_configuration.py", "endpoints": {"api_summary": "This file contains tests for a REST API endpoint that manages tax configurations. It tests the functionality of the tax configuration endpoint, including permissions, resolvers, and private metadata.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/tax/tests/mutations/test_tax_configuration_update.py", "endpoints": {"api_summary": "This file contains a set of tests for the tax configuration update functionality in a Django application. It tests various scenarios such as updating tax configurations, creating and updating country configurations, removing country configurations, updating tax app IDs, and handling errors. It also tests the use of weighted tax for shipping.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/tax/tests/mutations/test_tax_country_configuration_update.py", "endpoints": {"api_summary": "This file contains a GraphQL mutation for updating tax country configurations. It allows for the creation, updating, and deletion of tax class country rates for a given country. It also includes tests for these operations.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/tax/mutations/tax_configuration_update.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for updating tax configurations. It allows for the creation, updating, and removal of tax configurations for a given channel. The API supports HTTP methods such as GET and POST. The URL paths include the name of the repository and the specific endpoint for updating tax configurations.", "methods": ["GET", "POST"], "paths": ["/<repository_name>/tax-configurations/update"]}}
{"file": "cloned/saleor/saleor/graphql/tax/mutations/tax_class_update.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for updating tax classes. It allows for the creation, updating, and removal of tax class country rates. The API provides endpoints for updating tax class names and country rates.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/tax/mutations/tax_country_configuration_update.py", "endpoints": {"api_summary": "This file defines a GraphQL API endpoint for updating tax class rates for a specific country. It allows for the creation, updating, and deletion of tax class rates for a specific country.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/discount/filters.py", "endpoints": {"api_summary": "This file defines several REST API endpoints for managing vouchers, sales, and promotions. It includes endpoints for filtering and searching vouchers, sales, and promotions. It also includes endpoints for updating the status of vouchers and promotions.", "methods": ["GET", "POST"], "paths": ["/vouchers", "/vouchers/<built-in function id>", "/sales", "/sales/<built-in function id>", "/promotions", "/promotions/<built-in function id>"]}}
{"file": "cloned/saleor/saleor/graphql/discount/tests/queries/test_promotion.py", "endpoints": {"api_summary": "This file defines a set of GraphQL API endpoints for managing promotions. It includes endpoints for querying promotions, their rules, and their events. It also includes endpoints for testing the permissions of different types of users.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/discount/tests/queries/test_sales_filtering.py", "endpoints": {"api_summary": "This file contains a set of test cases for a GraphQL API endpoint that queries sales data. The API endpoint is used to filter sales based on various parameters such as status, discount type, start date, update date, and search term. The API endpoint is used to retrieve sales data from the database.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/discount/tests/queries/test_sales_pagination.py", "endpoints": {"api_summary": "This file contains a set of tests for a GraphQL API that manages sales promotions. It includes endpoints for pagination and filtering of sales data. The API allows for sorting by various fields and filtering by status, type, and start date.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/discount/tests/queries/test_promotions.py", "endpoints": {"api_summary": "This file contains tests for a GraphQL API that manages promotions. It tests the query for promotions, pagination, and permissions. The API endpoints are defined in the tests, which are testing the GraphQL API.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/discount/tests/queries/test_promotions_filtering.py", "endpoints": {"api_summary": "This file contains a set of tests for a GraphQL API endpoint that queries promotions. It tests various filters for the promotions, including by id, name, end date, start date, and type. The tests cover a range of scenarios, including empty values, non-existing values, and values that fall within a specified range.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/discount/tests/queries/test_sale.py", "endpoints": {"api_summary": "This file contains a set of tests for a REST API endpoint that provides information about sales. It tests different scenarios such as staff, app, customer, and error handling. The API endpoint is used to retrieve information about sales, including their name, type, discount value, currency, and associated products, variants, collections, and categories.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/discount/tests/queries/test_vouchers_filtering.py", "endpoints": {"api_summary": "This file contains a set of tests for a GraphQL API endpoint that queries vouchers. The API endpoint is used to filter vouchers based on various parameters such as status, times used, start date, discount type, and search. The tests cover various scenarios such as filtering vouchers by status (active, expired, scheduled), times used, start date, discount type, and search. The tests also cover the case where the voucher is expired but still has some uses left.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/discount/tests/deprecated/test_voucher_create.py", "endpoints": {"api_summary": "This file contains a set of tests for a voucher creation API endpoint. The API endpoint allows the creation of vouchers with various parameters such as name, code, discount value type, usage limit, start and end dates, and whether the voucher can be applied once per order or customer. The API also triggers a webhook when a voucher is created. The API also checks for the existence of a voucher code in the gift card and voucher codes.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/discount/tests/deprecated/test_voucher_update.py", "endpoints": {"api_summary": "This file contains unit tests for the voucher update functionality in a Django application. It tests the functionality of updating a voucher in the system using the Django testing client to send POST requests to a GraphQL endpoint.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/discount/tests/deprecated/test_discount.py", "endpoints": {"api_summary": "This file contains tests for a REST API that manages sales and vouchers. It includes endpoints for querying sales, vouchers, and filtering them by name. It also includes tests for sorting sales and vouchers.", "methods": ["POST"], "paths": ["/sales", "/sales/<built-in function id>", "/vouchers", "/vouchers/<built-in function id>"]}}
{"file": "cloned/saleor/saleor/graphql/discount/tests/mutations/test_voucher_create.py", "endpoints": {"api_summary": "The provided Python code does not explicitly define any REST API endpoints. It seems to be a set of unit tests for a Django application, which is a web framework for Python. The tests are written using the pytest framework and they are testing the functionality of the voucher creation process in the Django application.", "methods": [], "paths": []}}
{"file": "cloned/saleor/saleor/graphql/discount/tests/mutations/test_sale_catalogues_remove.py", "endpoints": {"api_summary": "This file contains a set of tests for a REST API endpoint that manages catalogues for sales. It defines several endpoints for adding, removing, and updating catalogues for sales. The endpoints are used to manage the catalogues of products, collections, categories, and variants that are associated with sales. The endpoints also handle errors and edge cases.", "methods": ["POST"], "paths": ["/saleCataloguesRemove"]}}
{"file": "cloned/saleor/saleor/graphql/discount/tests/mutations/test_sale_catalogues_add.py", "endpoints": {"api_summary": "This file contains a set of tests for a REST API endpoint that manages catalogues for sales. It defines several endpoints for adding catalogues to sales, updating catalogues, and handling errors. The endpoints are used to manage the catalogues of products, collections, categories, and variants associated with sales.", "methods": ["POST"], "paths": ["/saleCataloguesAdd"]}}
{"file": "cloned/saleor/saleor/graphql/discount/tests/mutations/test_sale_channel_listing_update.py", "endpoints": {"api_summary": "This file contains a set of tests for a GraphQL API endpoint that manages sale channel listings. It tests the functionality of adding, updating, and removing channels from a sale, as well as handling various error scenarios. The API is used to manage the channel listings of a sale, which are used to determine the discount value for each channel.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/discount/tests/mutations/test_sale_bulk_delete.py", "endpoints": {"api_summary": "This file contains a set of unit tests for a GraphQL API. The tests cover various scenarios such as deleting sales, triggering webhooks, and handling errors. The API endpoints are not explicitly defined in this file.", "methods": [], "paths": []}}
{"file": "cloned/saleor/saleor/graphql/discount/tests/mutations/test_promotion_rule_create.py", "endpoints": {"api_summary": "This file contains GraphQL mutations for creating promotion rules. These mutations allow users to create new promotion rules, which can be used to apply discounts or other promotional offers to products or orders. The mutations are used to create, update, and delete promotion rules.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/discount/tests/mutations/test_voucher_delete.py", "endpoints": {"api_summary": "This file contains two tests for a voucher deletion mutation in a GraphQL API. The first test deletes a voucher and checks if the voucher still exists in the database. The second test triggers a webhook after deleting a voucher.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/discount/tests/mutations/test_voucher_catalogues_add.py", "endpoints": {"api_summary": "The provided Python code does not define any REST API endpoints explicitly. It seems to be a set of unit tests for a Django application, which is a web framework for Python. The tests are written in a way that they are not directly related to REST API endpoints. They are testing the functionality of the application, not the API endpoints.", "methods": [], "paths": []}}
{"file": "cloned/saleor/saleor/graphql/discount/tests/benchmark/test_promotion_rule_create.py", "endpoints": {"api_summary": "This file contains two GraphQL mutations for creating promotion rules. The first mutation creates a catalogue promotion rule, while the second creates a gift promotion rule. Both mutations are used to create new promotion rules for a given promotion.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/discount/mutations/bulk_mutations.py", "endpoints": {"api_summary": "This file defines two REST API endpoints for managing sales and vouchers. The sales endpoint allows for the creation, deletion, and updating of sales. The vouchers endpoint allows for the creation, deletion, and updating of vouchers. Both endpoints use HTTP methods such as GET, POST, and DELETE.", "methods": ["GET", "POST", "DELETE"], "paths": ["/sales", "/vouchers"]}}
{"file": "cloned/saleor/saleor/graphql/discount/mutations/sale/sale_channel_listing_update.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for managing sale channel listings. It allows for the addition and removal of channels to a sale. The sale's availability in channels can be managed through this endpoint.", "methods": ["POST"], "paths": ["/sale/<built-in function id>/channel_listing"]}}
{"file": "cloned/saleor/saleor/graphql/discount/mutations/voucher/voucher_update.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for updating vouchers. It allows users to update voucher details such as code, usage settings, and other attributes. The endpoint uses HTTP POST method and the path is '/voucher/update'.", "methods": ["POST"], "paths": ["/voucher/update"]}}
{"file": "cloned/saleor/saleor/graphql/discount/mutations/voucher/voucher_create.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for creating vouchers. Vouchers are used to provide discounts or promotional offers to customers. The API endpoint allows for the creation of new vouchers with specific attributes such as type, name, start and end dates, discount value type, and products, variants, collections, categories, and countries that the voucher can be applied to. It also allows for the addition of multiple promo codes to a voucher.", "methods": ["POST"], "paths": ["/vouchers/"]}}
{"file": "cloned/saleor/saleor/graphql/discount/mutations/voucher/voucher_code_bulk_delete.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for deleting voucher codes. It allows users to delete voucher codes by providing a list of voucher codes IDs. The endpoint uses the POST HTTP method and the path is '/voucher_codes/bulk_delete'.", "methods": ["POST"], "paths": ["/voucher_codes/bulk_delete"]}}
{"file": "cloned/saleor/saleor/graphql/discount/mutations/promotion/promotion_create.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for creating a new promotion. It includes methods for creating, updating, and deleting promotions. It also includes methods for managing the rules associated with each promotion.", "methods": ["POST"], "paths": ["/promotions/create"]}}
{"file": "cloned/saleor/saleor/graphql/discount/mutations/promotion/promotion_rule_delete.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for deleting a promotion rule. It uses the DELETE HTTP method and the URL path '/users/<built-in function id>'.", "methods": ["DELETE"], "paths": ["/users/<built-in function id>"]}}
{"file": "cloned/saleor/saleor/graphql/discount/types/vouchers.py", "endpoints": {"api_summary": "This file defines a REST API for managing vouchers. Vouchers are a type of discount that can be applied to specific categories, collections, or products. They can be used during checkout by providing valid voucher codes. The API includes endpoints for creating, reading, updating, and deleting vouchers, as well as for managing voucher codes and channel listings.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/vouchers", "/vouchers/<built-in function id>", "/vouchers/<built-in function id>/codes", "/vouchers/<built-in function id>/categories", "/vouchers/<built-in function id>/collections", "/vouchers/<built-in function id>/products", "/vouchers/<built-in function id>/variants", "/vouchers/<built-in function id>/channel_listings"]}}
{"file": "cloned/saleor/saleor/graphql/discount/types/sales.py", "endpoints": {"api_summary": "This file defines a REST API for managing sales in a system. Sales are discounts that can be applied to categories, collections, products, or product variants. The API allows for creating, updating, and deleting sales. It also provides endpoints for listing sales, their categories, collections, products, variants, and channel listings.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/sales", "/sales/<built-in function id>", "/sales/<built-in function id>/categories", "/sales/<built-in function id>/collections", "/sales/<built-in function id>/products", "/sales/<built-in function id>/variants", "/sales/<built-in function id>/channel_listings"]}}
{"file": "cloned/saleor/saleor/graphql/account/resolvers.py", "endpoints": {"api_summary": "This file contains a set of resolvers for a GraphQL API. It defines several endpoints for querying and manipulating user data, addresses, permissions, and payment sources. It also includes endpoints for validating address formats and fetching payment sources.", "methods": ["GET", "POST"], "paths": ["/graphql/resolve_customers", "/graphql/resolve_permission_group", "/graphql/resolve_permission_groups", "/graphql/resolve_staff_users", "/graphql/resolve_user", "/graphql/resolve_users", "/graphql/resolve_address_validation_rules", "/graphql/resolve_payment_sources", "/graphql/resolve_address", "/graphql/resolve_addresses", "/graphql/resolve_permissions"]}}
{"file": "cloned/saleor/saleor/graphql/account/filters.py", "endpoints": {"api_summary": "This file defines three REST API endpoints. The first two endpoints are for filtering and searching users and permission groups respectively. The third endpoint is for filtering and searching staff users. All endpoints use HTTP methods like GET and POST.", "methods": ["GET", "POST"], "paths": ["/users/filter", "/permission-groups/filter", "/staff-users/filter"]}}
{"file": "cloned/saleor/saleor/graphql/account/types.py", "endpoints": {"api_summary": "This file defines several REST API endpoints related to user management, address validation, customer events, user permissions, and group management. It also includes endpoints for managing user checkouts, gift cards, orders, stored payment sources, and payment methods. It also includes endpoints for managing staff notifications and permission groups.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users", "/users/<built-in function id>", "/addresses", "/addresses/<built-in function id>", "/customer-events", "/customer-events/<built-in function id>", "/user-permissions", "/user-permissions/<built-in function id>", "/groups", "/groups/<built-in function id>", "/checkouts", "/checkouts/<built-in function id>", "/gift-cards", "/gift-cards/<built-in function id>", "/orders", "/orders/<built-in function id>", "/stored-payment-sources", "/stored-payment-sources/<built-in function id>", "/staff-notifications", "/staff-notifications/<built-in function id>", "/permission-groups", "/permission-groups/<built-in function id>"]}}
{"file": "cloned/saleor/saleor/graphql/account/schema.py", "endpoints": {"api_summary": "This file defines a GraphQL API for managing user accounts, permissions, and staff users. It includes endpoints for account registration, address management, customer and staff management, and permission group management. It also includes endpoints for authentication and password management.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/account/tests/queries/test_address.py", "endpoints": {"api_summary": "This file contains a set of tests for a GraphQL API. It tests the functionality of the API endpoints related to addresses. The API endpoints are used to retrieve, create, update, and delete addresses. The tests cover different scenarios such as retrieving an address as an owner, another user, an app with and without permissions, and as an anonymous user. The tests also cover the federation of addresses, which allows for the retrieval of addresses from other users.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/account/tests/queries/test_staff_users_filtering.py", "endpoints": {"api_summary": "This file contains a set of tests for a GraphQL API. It defines several endpoints for querying staff users. The endpoints are used to filter and search staff users based on various parameters such as status, ids, and search terms. The endpoints also support pagination.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/account/tests/queries/test_account_events.py", "endpoints": {"api_summary": "This file contains a set of tests for a GraphQL API. It defines several endpoints for querying customer events. The endpoints are used to retrieve events related to customer accounts, such as account creation, activation, deactivation, password reset, order placement, note addition, digital link download, deletion, name assignment, and email assignment. The endpoints are protected by permissions and can only be accessed by users with the appropriate permissions.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/account/tests/queries/test_customers_filtering.py", "endpoints": {"api_summary": "This file contains a set of tests for a GraphQL API that provides customer data. It tests various filters and sorting options for the customers endpoint.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/account/tests/queries/test_me.py", "endpoints": {"api_summary": "This file contains a set of tests for the GraphQL API endpoints related to the 'me' query. It tests the functionality of the 'me' query, including the 'checkout', 'orders', 'checkoutTokens', and 'storedPaymentMethods' sub-queries. It also tests the functionality of the 'checkout' and 'orders' sub-queries, including the 'totalPrice' and 'lines' sub-queries.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/account/tests/bulk_mutations/test_customer_bulk_delete.py", "endpoints": {"api_summary": "This file contains three tests for a REST API endpoint that manages customer deletion. The API allows for bulk deletion of customers, and it also triggers webhooks for each deletion. The API also supports deletion by an app.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/account/tests/bulk_mutations/test_staff_bulk_delete.py", "endpoints": {"api_summary": "This file contains a set of tests for a REST API endpoint that manages staff members. It includes tests for deleting staff members, triggering webhooks, handling permissions, and error scenarios. The API endpoint is used to manage staff members, and it is used by different types of users (staff, app, superuser).", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/account/tests/mutations/staff/test_customer_create.py", "endpoints": {"api_summary": "This file contains a set of tests for the customer creation API endpoint. It tests the creation of a new customer, including setting their password, sending a password set link, and handling various error scenarios. It also tests the webhook triggering for the account set password requested event.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/account/tests/mutations/staff/test_staff_update.py", "endpoints": {"api_summary": "This file contains a set of tests for a Django-based REST API. It tests various functionalities of the API, including updating staff users, triggering webhooks, and handling errors. It also tests the permissions and groups of the users.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/account/tests/mutations/staff/test_staff_create.py", "endpoints": {"api_summary": "The provided Python code does not explicitly define any REST API endpoints. It seems to be a set of unit tests for a Django application, which is a web framework for Python. The tests are written using the Django testing framework and the pytest library. They are testing the functionality of the application, not the API endpoints.", "methods": [], "paths": []}}
{"file": "cloned/saleor/saleor/graphql/account/tests/mutations/staff/test_customer_update.py", "endpoints": {"api_summary": "This file contains a set of tests for a GraphQL API that manages customer data. It includes endpoints for updating customer details, changing customer email, activating or deactivating customer accounts, and assigning gift cards and orders to customers. It also includes tests for handling events when customer details are updated.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/account/tests/mutations/staff/test_address_update.py", "endpoints": {"api_summary": "This file contains a set of unit tests for a GraphQL API. The tests cover various scenarios such as updating user addresses, triggering webhooks, and handling edge cases. The API is used to manage user addresses and related data.", "methods": [], "paths": []}}
{"file": "cloned/saleor/saleor/graphql/account/tests/mutations/staff/test_staff_delete.py", "endpoints": {"api_summary": "This file contains a set of tests for the staff delete and update mutations in a Django application. It tests the functionality of these mutations, including their ability to delete staff users, trigger webhooks, delete avatars from storage, handle permissions, and validate user deletion and updates.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/account/tests/mutations/permission_group/test_permission_group_delete.py", "endpoints": {"api_summary": "This file contains a set of tests for a Django application. It defines several endpoints for testing the functionality of the application. The endpoints are used to test the creation, deletion, and modification of user groups. The endpoints are used to test the functionality of the webhook plugin, which is used to trigger webhooks when certain events occur. The endpoints are also used to test the functionality of the permission system, which is used to manage user permissions.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/account/tests/mutations/permission_group/test_permission_group_update.py", "endpoints": {"api_summary": "The provided code does not contain any explicit REST API endpoints.", "methods": [], "paths": []}}
{"file": "cloned/saleor/saleor/graphql/account/tests/mutations/account/test_account_update.py", "endpoints": {"api_summary": "This file contains a set of tests for a GraphQL API endpoint that allows users to update their account information. It includes tests for updating language code, names, addresses, and metadata. It also includes tests for error handling and permissions.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/account/tests/mutations/account/test_account_address_create.py", "endpoints": {"api_summary": "This file contains a set of tests for a REST API endpoint that manages user addresses. It includes tests for creating, updating, and deleting addresses, as well as for handling errors and edge cases. It also includes tests for the permissions of the API endpoints.", "methods": ["POST"], "paths": ["/account/address/create"]}}
{"file": "cloned/saleor/saleor/graphql/account/tests/mutations/authentication/test_token_create.py", "endpoints": {"api_summary": "This file contains a set of tests for the token creation functionality in a GraphQL API. It tests the creation of tokens, their validation, and their use in the system. It also tests the error handling for invalid credentials, unconfirmed emails, deactivated users, and other scenarios. It also tests the case-insensitivity of the email address and the throttling of login attempts.", "methods": [], "paths": []}}
{"file": "cloned/saleor/saleor/graphql/account/tests/mutations/authentication/test_token_verify.py", "endpoints": {"api_summary": "This API endpoint is used to verify access tokens for users and applications. It can verify if a token is valid, and if it is, it returns the user's email and permissions. If the token is invalid, it returns an error code.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/account/tests/benchmark/test_permission_group.py", "endpoints": {"api_summary": "This file contains a set of tests for a Django application. It defines several endpoints for creating, updating, deleting, and querying permission groups. These endpoints are used to manage user permissions and groups in the application.", "methods": ["POST"], "paths": ["/permissionGroupCreate", "/permissionGroupUpdate", "/permissionGroupDelete", "/permissionGroup", "/GetGroupInFederation"]}}
{"file": "cloned/saleor/saleor/graphql/account/tests/benchmark/test_account.py", "endpoints": {"api_summary": "This file contains a set of tests for a REST API. It defines several endpoints for querying, creating, updating, and deleting users, groups, and other related data. It also includes tests for querying customers and addresses in a federated manner.", "methods": ["GET", "POST"], "paths": ["/users", "/users/<built-in function id>", "/staff/create", "/staff/update", "/staff/delete", "/customers", "/addresses"]}}
{"file": "cloned/saleor/saleor/graphql/account/mutations/staff/address_delete.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for deleting an address. It uses the DELETE HTTP method and the path '/users/<built-in function id>'. This endpoint is used to remove an address from a user's account.", "methods": ["DELETE"], "paths": ["/users/<built-in function id>"]}}
{"file": "cloned/saleor/saleor/graphql/account/mutations/staff/customer_create.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for creating a new customer. It includes methods for saving a customer, setting their addresses, and sending a password set notification. The endpoint is used to create a new customer account.", "methods": ["POST"], "paths": ["/users"]}}
{"file": "cloned/saleor/saleor/graphql/account/mutations/staff/address_create.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for creating a new address for a user. It uses the POST method to create a new address for a specific user. The endpoint is '/users/<built-in function id>'.", "methods": ["POST"], "paths": ["/users/<built-in function id>"]}}
{"file": "cloned/saleor/saleor/graphql/account/mutations/permission_group/permission_group_update.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for updating permission groups. It allows for the modification of existing permission groups, including the addition or removal of permissions, users, and channels. It also includes checks to ensure that the requestor has the necessary permissions to manage the group and its components.", "methods": ["POST"], "paths": ["/permission_group_update"]}}
{"file": "cloned/saleor/saleor/graphql/account/mutations/account/account_address_update.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for updating an address of the logged-in user. It uses the POST method to update the address. The path of the endpoint is '/users'.", "methods": ["POST"], "paths": ["/users"]}}
{"file": "cloned/saleor/saleor/graphql/account/mutations/account/account_address_delete.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for deleting an address of the logged-in user. The endpoint requires one of the following permissions: MANAGE_USERS, IS_OWNER.", "methods": ["DELETE"], "paths": ["/users/address"]}}
{"file": "cloned/saleor/saleor/graphql/account/mutations/account/account_register.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for user registration. It allows users to register an account with the system. The endpoint accepts HTTP POST requests and requires the user to provide their email, password, and other optional information such as first name, last name, redirect URL, language code, and metadata. The endpoint also supports account confirmation by email if enabled in the system settings.", "methods": ["POST"], "paths": ["/users"]}}
{"file": "cloned/saleor/saleor/graphql/giftcard/filters.py", "endpoints": {"api_summary": "This file contains a set of classes and functions that define a REST API for managing gift cards and their events. It includes filtering and sorting capabilities for gift cards and gift card events. It also includes a set of classes for filtering and sorting gift card tags.", "methods": ["GET", "POST"], "paths": ["/gift-cards", "/gift-cards/<built-in function id>", "/gift-card-events", "/gift-card-events/<built-in function id>", "/gift-card-tags", "/gift-card-tags/<built-in function id>"]}}
{"file": "cloned/saleor/saleor/graphql/giftcard/types.py", "endpoints": {"api_summary": "This file defines several REST API endpoints related to gift cards. It includes endpoints for creating, updating, and deleting gift cards, as well as for fetching gift card events and tags. It also includes endpoints for fetching gift cards, gift card events, and gift card tags.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/giftcards", "/giftcards/<built-in function id>", "/giftcards/<built-in function id>/events", "/giftcards/<built-in function id>/tags"]}}
{"file": "cloned/saleor/saleor/graphql/giftcard/schema.py", "endpoints": {"api_summary": "This file defines a GraphQL API for managing gift cards. It includes endpoints for creating, updating, deleting, and activating gift cards, as well as for managing gift card tags. It also includes endpoints for bulk actions on gift cards.", "methods": ["GET", "POST"], "paths": ["/gift_card", "/gift_cards", "/gift_card_currencies", "/gift_card_tags", "/gift_card_activate", "/gift_card_create", "/gift_card_delete", "/gift_card_deactivate", "/gift_card_update", "/gift_card_resend", "/gift_card_add_note", "/gift_card_bulk_create", "/gift_card_bulk_delete", "/gift_card_bulk_activate", "/gift_card_bulk_deactivate"]}}
{"file": "cloned/saleor/saleor/graphql/giftcard/tests/queries/test_gift_card_filtering.py", "endpoints": {"api_summary": "This file contains a set of tests for a GraphQL API endpoint that manages gift cards. It tests various filters and sorting options for the gift cards, including by tags, products, used by user, currency, active status, used status, current balance, initial balance, code, metadata, and created by email. It also tests error handling for missing currency in current balance and initial balance filters.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/giftcard/tests/queries/test_gift_card_sorting.py", "endpoints": {"api_summary": "This file contains a set of tests for a GraphQL API that manages gift cards. It tests sorting gift cards by current balance, product, used by, and creation date. It also tests sorting by current balance without a currency in the filter, which should return an error.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/giftcard/tests/queries/test_gift_card.py", "endpoints": {"api_summary": "This file contains a set of tests for a gift card system. It defines several endpoints for querying gift card data and events. The endpoints are used to fetch gift card details, including its balance, events, and other related data. The tests also cover different scenarios such as querying gift cards by different users, apps, and with different permissions.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/giftcard/tests/bulk_mutations/test_gift_card_bulk_delete.py", "endpoints": {"api_summary": "This file contains tests for a GraphQL API endpoint that allows the bulk deletion of gift cards. It tests the functionality of the endpoint for different user roles (staff, app, and customer) and also includes a test for triggering webhooks when a gift card is deleted.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/giftcard/tests/bulk_mutations/test_gift_card_bulk_deactivate.py", "endpoints": {"api_summary": "This file contains a set of tests for a GraphQL API endpoint that allows the bulk deactivation of gift cards. It includes tests for different user roles (staff, app, customer) and also includes a test that triggers webhooks when a gift card is deactivated.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/giftcard/tests/bulk_mutations/test_gift_card_bulk_create.py", "endpoints": {"api_summary": "This file contains tests for a gift card bulk creation API. It defines several endpoints for creating gift cards in bulk. The API allows for the creation of gift cards with different properties such as balance, tags, and expiry date. It also handles errors and validations for these properties.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/giftcard/tests/mutations/test_gift_card_create.py", "endpoints": {"api_summary": "This file contains a set of tests for the gift card creation functionality in a Django-based web application. It defines several endpoints for creating gift cards, each with different parameters and permissions. The endpoints include creating a gift card with a specific user, creating a gift card by an app, and creating a gift card with a specific expiry date. The tests also include error handling for invalid inputs and edge cases.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/giftcard/tests/benchmark/test_gift_card_mutations.py", "endpoints": {"api_summary": "This file contains a set of tests for a gift card system. It defines several endpoints for creating, updating, and managing gift cards. These endpoints are used to interact with the gift card system, allowing for the creation, updating, and activation of gift cards.", "methods": ["POST"], "paths": ["/giftCardCreate", "/giftCardUpdate", "/giftCardBulkActivate", "/giftCardBulkCreate"]}}
{"file": "cloned/saleor/saleor/graphql/giftcard/tests/benchmark/test_gift_card_queries.py", "endpoints": {"api_summary": "This file contains a set of tests for a GraphQL API that manages gift cards. It includes endpoints for querying gift card details, filtering gift cards by tags, used by user, and products.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/giftcard/bulk_mutations/gift_card_bulk_create.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for creating multiple gift cards. It allows users to create multiple gift cards with specific attributes such as count, balance, tags, expiry date, and activation status. The endpoint also includes validation checks for the input data.", "methods": ["POST"], "paths": ["/giftcard/bulk/create"]}}
{"file": "cloned/saleor/saleor/graphql/giftcard/mutations/gift_card_update.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for updating gift cards. It allows users to update gift card details such as tags, balance, and expiry date. The API also supports metadata and private metadata.", "methods": ["POST"], "paths": ["/giftcard/update"]}}
{"file": "cloned/saleor/saleor/graphql/giftcard/mutations/gift_card_delete.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for deleting gift cards. It uses the ModelDeleteMutation class to handle the deletion of gift cards. The endpoint is protected by the MANAGE_GIFT_CARD permission. After a gift card is deleted, it triggers a webhook event of type GIFT_CARD_DELETED.", "methods": ["POST"], "paths": ["/giftcard/delete/<built-in function id>"]}}
{"file": "cloned/saleor/saleor/graphql/page/dataloaders.py", "endpoints": {"api_summary": "This file defines several REST API endpoints for interacting with page attributes and values. It includes endpoints for loading pages by ID, page types by ID, pages by page type ID, page attributes by page type ID, and attribute values by page ID and attribute slug. These endpoints are used to retrieve and manipulate data related to pages, attributes, and values in a system.", "methods": ["GET", "POST"], "paths": ["/pages/<built-in function id>", "/page_types/<built-in function id>", "/pages_by_pagetype/<built-in function id>", "/page_attributes_by_pagetype/<built-in function id>", "/attributevalues_all_by_page_and_attributeslug/<built-in function id>"]}}
{"file": "cloned/saleor/saleor/graphql/page/filters.py", "endpoints": {"api_summary": "This file defines two REST API endpoints related to pages and page types. The first endpoint allows for filtering and searching pages based on various parameters such as title, slug, content, and page types. The second endpoint allows for filtering and searching page types based on their name, slug, and ID.", "methods": ["GET", "POST"], "paths": ["/pages", "/page_types"]}}
{"file": "cloned/saleor/saleor/graphql/page/bulk_mutations.py", "endpoints": {"api_summary": "This file defines several REST API endpoints for managing pages and page types. It includes endpoints for creating, updating, and deleting pages and page types. It also includes endpoints for publishing and unpublishing pages.", "methods": ["POST", "DELETE"], "paths": ["/pages/bulk-delete", "/pages/bulk-publish", "/page-types/bulk-delete"]}}
{"file": "cloned/saleor/saleor/graphql/page/types.py", "endpoints": {"api_summary": "This file defines two REST API endpoints related to page management. The first endpoint is for managing page types, which includes creating, updating, and deleting page types. The second endpoint is for managing pages, which includes creating, updating, and deleting pages. Both endpoints require appropriate permissions to access.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/page-types", "/pages"]}}
{"file": "cloned/saleor/saleor/graphql/page/schema.py", "endpoints": {"api_summary": "This file defines a set of GraphQL API endpoints for managing pages and page types. It includes endpoints for creating, deleting, updating, and retrieving pages and page types. It also includes endpoints for translating pages and managing page attributes.", "methods": ["GET", "POST"], "paths": ["/graphql?query={page(id:$id, slug:$slug, slug_language_code:$slug_language_code)}", "/graphql?query={pages(sort_by:$sort_by, filter:$filter)}", "/graphql?query={page_type(id:$id)}", "/graphql?query={page_types(sort_by:$sort_by, filter:$filter)}", "/graphql?mutation={page_create(input:$input)}", "/graphql?mutation={page_delete(id:$id)}", "/graphql?mutation={page_bulk_delete(ids:$ids)}", "/graphql?mutation={page_bulk_publish(ids:$ids)}", "/graphql?mutation={page_update(id:$id, input:$input)}", "/graphql?mutation={page_translate(id:$id, language_code:$language_code, input:$input)}", "/graphql?mutation={page_type_create(input:$input)}", "/graphql?mutation={page_type_update(id:$id, input:$input)}", "/graphql?mutation={page_type_delete(id:$id)}", "/graphql?mutation={page_type_bulk_delete(ids:$ids)}", "/graphql?mutation={page_attribute_assign(page_id:$page_id, attribute_id:$attribute_id)}", "/graphql?mutation={page_attribute_unassign(page_id:$page_id, attribute_id:$attribute_id)}", "/graphql?mutation={page_type_reorder_attributes(type_id:$type_id, attribute_ids:$attribute_ids)}", "/graphql?mutation={page_reorder_attribute_values(page_id:$page_id, attribute_id:$attribute_id, attribute_value_ids:$attribute_value_ids)}"]}}
{"file": "cloned/saleor/saleor/graphql/page/tests/queries/test_pages.py", "endpoints": {"api_summary": "This file contains a set of tests for a Django application that uses GraphQL to interact with a Page model. The tests cover various aspects of the Page model, including querying, filtering, sorting, and permissions. The API endpoints are not explicitly defined in this file, but the tests are effectively acting as endpoints.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/page/tests/queries/test_page_type.py", "endpoints": {"api_summary": "This file contains a set of tests for a GraphQL API. It defines several endpoints for querying page types and their attributes. The endpoints are used to fetch page type data, including its attributes and available attributes. The endpoints are also used to test the visibility of page type attributes in the storefront for customers and staff.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/page/tests/queries/test_page.py", "endpoints": {"api_summary": "This file contains a set of tests for a GraphQL API endpoint that queries pages. It tests various scenarios such as querying a page by ID, slug, and checking permissions. It also tests the visibility of page attributes in the storefront.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/page/tests/mutations/test_page_type_create.py", "endpoints": {"api_summary": "The provided Python code does not explicitly define any REST API endpoints. It seems to be a set of unit tests for a Django application, which is a web framework for Python. The tests are written in a way that they interact with the application through GraphQL, not REST.", "methods": [], "paths": []}}
{"file": "cloned/saleor/saleor/graphql/page/tests/mutations/test_page_types_bulk_delete.py", "endpoints": {"api_summary": "This file contains a set of unit tests for a GraphQL API. The tests cover various scenarios such as deleting page types, triggering webhooks, and handling invalid IDs. The API endpoints are defined in the GraphQL schema, which is not explicitly defined in this file.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/page/tests/benchmark/test_page_type.py", "endpoints": {"api_summary": "This file contains tests for a REST API that manages page types. It includes endpoints for querying a single page type, querying multiple page types, and a federation endpoint for querying multiple page types. The API allows for the management of page types, their attributes, and their availability in the storefront.", "methods": ["POST"], "paths": ["/graphql/pageType", "/graphql/pageTypes", "/graphql/GetAppInFederation"]}}
{"file": "cloned/saleor/saleor/graphql/translations/schema.py", "endpoints": {"api_summary": "This file defines a GraphQL API for translatable items. It provides endpoints to retrieve translatable items of different kinds, such as products, collections, categories, attributes, attribute values, product variants, pages, shipping methods, vouchers, menu items, promotions, promotion rules, and sales. It also provides endpoints to retrieve individual translatable items by their ID.", "methods": ["GET", "POST"], "paths": ["/translations", "/translation/<built-in function id>"]}}
{"file": "cloned/saleor/saleor/graphql/translations/tests/deprecated/test_translations.py", "endpoints": {"api_summary": "This file contains a set of GraphQL queries for various translations in a sales, shipping, and product management system. It includes queries for products, collections, categories, attributes, attribute values, variants, pages, shipping methods, sales, vouchers, and menu items. These queries are used to fetch translations for these entities in different languages.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/translations/tests/mutations/test_product_variant_bulk_translate.py", "endpoints": {"api_summary": "This file contains a set of tests for a REST API endpoint that allows for bulk translation of product variants. The API endpoint is used to translate product variants in multiple languages. It supports both creating new translations and updating existing ones.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/translations/tests/mutations/test_attribute_bulk_translate.py", "endpoints": {"api_summary": "This file contains a set of tests for a REST API endpoint that allows for bulk translation of attributes. The API endpoint is used to translate multiple attributes at once, and it supports both creating and updating translations. The API also supports translation using attribute IDs or external references.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/translations/tests/mutations/test_product_translate.py", "endpoints": {"api_summary": "This file contains a set of tests for a GraphQL API endpoint that translates product names and slugs. It tests the functionality of the productTranslate mutation, which is used to translate product names and slugs in different languages.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/translations/tests/mutations/test_promotion_translate.py", "endpoints": {"api_summary": "This file contains tests for a REST API endpoint that manages translations for promotional content. It defines several endpoints for creating, updating, and translating promotional content. The endpoints are used to manage translations for promotional content in different languages.", "methods": ["POST"], "paths": ["/promotion/translate"]}}
{"file": "cloned/saleor/saleor/graphql/translations/tests/mutations/test_page_translate.py", "endpoints": {"api_summary": "This file contains a set of tests for a GraphQL API endpoint that translates pages. It tests the creation, update, and retrieval of page translations.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/translations/tests/mutations/test_promotion_rule_translate.py", "endpoints": {"api_summary": "This file contains a set of unit tests for a GraphQL API. It tests the functionality of the promotion rule translation mutation.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/translations/tests/mutations/test_attribute_value_bulk_transalte.py", "endpoints": {"api_summary": "This file contains a set of tests for the AttributeValueBulkTranslate mutation in the Saleor project. It tests the creation and updating of translations for attribute values in different languages. It also tests the creation of translations using the value's external reference. It also includes tests for error handling.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/translations/tests/mutations/test_product_bulk_translate.py", "endpoints": {"api_summary": "This file contains a set of tests for a REST API endpoint that allows for bulk translation of products. The API endpoint is used to translate multiple products at once, and it supports both creating and updating translations. The API also supports translation using both the product's ID and external reference.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/translations/tests/mutations/test_sale_translate.py", "endpoints": {"api_summary": "This file contains three test cases for a REST API endpoint that translates sales. The API endpoint is used to translate sales from one language to another. It supports both sale ID and translatable content ID as input.", "methods": ["POST"], "paths": ["/saleTranslate"]}}
{"file": "cloned/saleor/saleor/graphql/translations/tests/mutations/test_collection_translate.py", "endpoints": {"api_summary": "This file contains a set of tests for a GraphQL API endpoint that translates collections. It tests the translation of collections in different languages and handles various edge cases such as missing slugs and conflicting slugs.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/translations/mutations/attribute_value_bulk_translate.py", "endpoints": {"api_summary": "This file defines a GraphQL API for translating attribute values. It allows for the creation and updating of translations for attribute values.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/translations/mutations/product_variant_bulk_translate.py", "endpoints": {"api_summary": "This file defines a GraphQL API endpoint for translating product variants. It allows for the creation and updating of translations for product variants.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/translations/mutations/product_bulk_translate.py", "endpoints": {"api_summary": "This file defines a GraphQL API endpoint for bulk translations of products. It allows for the creation and updating of translations for products in different languages.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/translations/mutations/attribute_bulk_translate.py", "endpoints": {"api_summary": "This file defines a GraphQL API endpoint for bulk translation of attributes. It allows users to create or update translations for attributes in a specified language.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/channel/types.py", "endpoints": {"api_summary": "This file defines a REST API for managing channels, including stock settings, order settings, checkout settings, and payment settings. It also includes endpoints for retrieving and updating channel information, such as name, status, default country, and warehouses.", "methods": ["GET", "POST"], "paths": ["/channels", "/channels/<built-in function id>", "/channels/<built-in function id>/stock_settings", "/channels/<built-in function id>/order_settings", "/channels/<built-in function id>/checkout_settings", "/channels/<built-in function id>/payment_settings"]}}
{"file": "cloned/saleor/saleor/graphql/channel/tests/queries/test_channels.py", "endpoints": {"api_summary": "This file contains tests for a GraphQL API. It defines several endpoints for querying channels, including the ability to check if a channel has orders. The endpoints are used to test the functionality of the API.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/channel/tests/queries/test_channel.py", "endpoints": {"api_summary": "This file contains a set of tests for a GraphQL API. It defines several endpoints for querying and manipulating data related to channels, orders, checkouts, and payments. The endpoints are used to fetch and update data related to these entities.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/channel/tests/mutations/test_channel_reorder_warehouses.py", "endpoints": {"api_summary": "This file contains tests for a REST API endpoint that allows for the reordering of warehouses in a channel. The API endpoint is used to manage the order of warehouses in a channel. It can be used to add, remove, or reorder warehouses in a channel.", "methods": ["POST"], "paths": ["/channelReorderWarehouses"]}}
{"file": "cloned/saleor/saleor/graphql/channel/tests/mutations/test_channel_delete.py", "endpoints": {"api_summary": "This file contains a set of tests for a GraphQL mutation that deletes a channel. It tests various scenarios such as deleting a channel with orders, deleting a channel without orders, deleting a channel with different currency, deleting a channel as a staff user, as an app, as a customer, as an anonymous user, and triggering webhooks. It also tests the deletion of invalid warehouse to zone relations.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/channel/mutations/channel_deactivate.py", "endpoints": {"api_summary": "This API endpoint is used to deactivate a channel. It takes in a channel ID as an argument and deactivates the corresponding channel.", "methods": ["POST"], "paths": ["/channel/deactivate"]}}
{"file": "cloned/saleor/saleor/graphql/channel/mutations/channel_delete.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for managing channels. It allows for the creation, deletion, and migration of channels. It also handles the migration of orders and checkouts from one channel to another.", "methods": ["POST"], "paths": ["/channel/delete/<built-in function id>"]}}
{"file": "cloned/saleor/saleor/graphql/channel/mutations/channel_reorder_warehouses.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for reordering warehouses in a channel. It allows users to reorder the warehouses of a specific channel. The API endpoint is used to perform this operation.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/invoice/tests/test_invoice_request.py", "endpoints": {"api_summary": "This file contains a set of tests for the invoice request functionality in the Saleor e-commerce platform. It defines several endpoints for invoice requests, including the ability to request an invoice for an order, request an invoice by an app, and request an invoice with various status checks. It also includes tests for invalid order status, no billing address, no invoice number, and no invoice plugin.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/invoice/tests/test_send_invoice_notification.py", "endpoints": {"api_summary": "This file contains tests for the invoice sending functionality of the Saleor e-commerce platform. It defines several endpoints for sending invoices via email. These endpoints are used to send invoices to customers via email. The endpoints are secured with different permissions, allowing for different levels of access.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/invoice/mutations/invoice_create.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for creating an invoice. It allows users to create an invoice for a specific order. The endpoint requires a valid order ID and input data for the invoice. The endpoint also validates the order status and billing address before creating the invoice.", "methods": ["POST"], "paths": ["/orders/<built-in function id>/invoice/create"]}}
{"file": "cloned/saleor/saleor/graphql/invoice/mutations/invoice_delete.py", "endpoints": {"api_summary": "This file defines a single REST API endpoint for deleting invoices. It uses the ModelDeleteMutation class, which is a built-in mutation in Saleor, a GraphQL-based e-commerce platform. The endpoint is accessible via a DELETE HTTP method at the '/invoice/delete' path.", "methods": ["DELETE"], "paths": ["/invoice/delete"]}}
{"file": "cloned/saleor/saleor/graphql/invoice/mutations/invoice_request.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for requesting an invoice for an order. It uses the Django framework and the graphene library for defining the API. The endpoint is used to request an invoice for an order using a plugin. The endpoint requires a valid order ID and an optional invoice number.", "methods": ["POST"], "paths": ["/invoice/request"]}}
{"file": "cloned/saleor/saleor/graphql/app/types.py", "endpoints": {"api_summary": "This file contains the definition of a GraphQL API for managing apps, their extensions, tokens, and webhooks. It also includes branding and manifest data for these apps.", "methods": ["GET", "POST"], "paths": ["/graphql/app/<built-in function id>", "/graphql/app/<built-in function id>/tokens", "/graphql/app/<built-in function id>/webhooks", "/graphql/app/<built-in function id>/extensions", "/graphql/app/<built-in function id>/brand", "/graphql/app/<built-in function id>/manifest"]}}
{"file": "cloned/saleor/saleor/graphql/app/schema.py", "endpoints": {"api_summary": "This file defines a GraphQL API for managing apps and their extensions. It includes endpoints for creating, updating, deleting, and fetching apps, as well as managing their extensions. It also includes endpoints for managing app installations and tokens.", "methods": ["GET", "POST"], "paths": ["/graphql?query={apps_installations}", "/graphql?query={apps}", "/graphql?query={app(id:$id)}", "/graphql?query={app_extensions}", "/graphql?query={app_extension(id:$id)}", "/graphql?mutation={app_create}", "/graphql?mutation={app_update}", "/graphql?mutation={app_delete}", "/graphql?mutation={app_token_create}", "/graphql?mutation={app_token_delete}", "/graphql?mutation={app_token_verify}", "/graphql?mutation={app_install}", "/graphql?mutation={app_retry_install}", "/graphql?mutation={app_delete_failed_installation}", "/graphql?mutation={app_fetch_manifest}", "/graphql?mutation={app_activate}", "/graphql?mutation={app_deactivate}", "/graphql?mutation={app_reenable_sync_webhooks}"]}}
{"file": "cloned/saleor/saleor/graphql/app/tests/queries/test_app_extension.py", "endpoints": {"api_summary": "This file contains tests for a REST API endpoint that provides information about App Extensions. The API allows for querying of App Extensions by their ID, and includes various tests to ensure the API is functioning correctly. The API also includes a feature to generate access tokens for App Extensions, which are used to authenticate the App Extension with the server.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/app/tests/queries/test_apps.py", "endpoints": {"api_summary": "This file contains a set of tests for a GraphQL API that manages applications. It defines several endpoints for querying, sorting, and filtering applications, as well as for managing extensions and metadata. It also includes endpoints for managing permissions and tokens.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/app/tests/queries/test_apps_installations.py", "endpoints": {"api_summary": "This file contains tests for a GraphQL API that manages app installations. It includes endpoints for querying app installations, testing permissions, and generating thumbnail URLs.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/app/tests/mutations/test_app_token_delete.py", "endpoints": {"api_summary": "This file contains a set of unit tests for a GraphQL API. The tests cover various scenarios such as deleting app tokens, checking permissions, and handling errors. The API endpoints are not explicitly defined in this file.", "methods": [], "paths": []}}
{"file": "cloned/saleor/saleor/graphql/app/tests/mutations/test_app_update.py", "endpoints": {"api_summary": "This file contains a set of tests for the AppUpdate mutation in the Saleor platform. It tests the functionality of updating an app, including adding permissions, triggering webhooks, and handling errors. It also tests the permissions and scope of the app.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/app/tests/benchmarks/test_apps.py", "endpoints": {"api_summary": "This file contains three tests for a GraphQL API. The first test checks the functionality of the federation query, which is used to retrieve data from multiple services. The second test checks the functionality of the apps query, which retrieves apps with their tokens and webhooks. The third test checks the functionality of the apps query, which retrieves apps with their tokens and webhooks.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/app/mutations/app_create.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for creating a new app. It includes methods for cleaning input, performing mutation, and saving the app. The endpoint is accessible via a POST request to '/app/create'.", "methods": ["POST"], "paths": ["/app/create"]}}
{"file": "cloned/saleor/saleor/graphql/app/mutations/app_token_verify.py", "endpoints": {"api_summary": "This endpoint is used to verify an app token. It takes a token as input and returns a boolean value indicating whether the token is valid or not.", "methods": ["POST"], "paths": ["/api/verify_app_token/"]}}
{"file": "cloned/saleor/saleor/plugins/views.py", "endpoints": {"api_summary": "This file defines three REST API endpoints for handling webhooks from plugins. These endpoints are used to manage and handle webhooks from plugins, which are external services that can interact with the Saleor platform. The endpoints allow for the handling of global plugin webhooks, plugin webhooks without a specific channel, and plugin webhooks for a specific channel.", "methods": ["GET", "POST"], "paths": ["/handle_plugin_webhook/<plugin_id>", "/handle_global_plugin_webhook/<plugin_id>", "/handle_plugin_per_channel_webhook/<plugin_id>/<channel_slug>"]}}
{"file": "cloned/saleor/saleor/plugins/webhook/tests/test_payment_gateway_initialize_tokenization.py", "endpoints": {"api_summary": "This file contains tests for the payment gateway initialize tokenization functionality. It defines several endpoints for testing different scenarios such as successful initialization, missing correct response from webhook, and failure from the app. The endpoints are tested using mock requests and assertions to verify the responses.", "methods": ["POST"], "paths": ["/payment_gateway_initialize_tokenization"]}}
{"file": "cloned/saleor/saleor/plugins/webhook/tests/test_payment_method_process_tokenization.py", "endpoints": {"api_summary": "This file contains a set of tests for the payment method process tokenization functionality in the Saleor webhook plugin. It defines several endpoints for testing different scenarios such as successful tokenization, failure to deliver, additional action required, and missing required id. It also includes a test for invalidating the cache for the app.", "methods": ["GET", "POST"], "paths": ["/webhook/payment_method_process_tokenization", "/webhook/list_stored_payment_methods", "/webhook/payment_method_process_tokenization/<built-in function id>", "/webhook/list_stored_payment_methods/<built-in function id>"]}}
{"file": "cloned/saleor/saleor/plugins/webhook/tests/test_transaction_initialize_session_webhook.py", "endpoints": {"api_summary": "This file contains a set of tests for a webhook plugin in a Python application. The webhook plugin is responsible for initializing transactions for checkouts and orders. It uses a REST API to communicate with the application.", "methods": ["POST", "GET"], "paths": ["/transaction_initialize_session/checkout", "/transaction_initialize_session/order", "/transaction_initialize_session/checkout_with_request_data", "/transaction_initialize_session/order_with_request_data", "/transaction_initialize_session/checkout_without_request_data", "/transaction_initialize_session/order_without_request_data", "/transaction_initialize_session/checkout_with_request_data_and_static_payload", "/transaction_initialize_session/order_with_request_data_and_static_payload", "/transaction_initialize_session/checkout_without_request_data_and_static_payload", "/transaction_initialize_session/order_without_request_data_and_static_payload"]}}
{"file": "cloned/saleor/saleor/plugins/webhook/tests/test_payment_method_initialize_tokenization.py", "endpoints": {"api_summary": "This file contains a set of tests for the payment method initialize tokenization functionality in the Saleor webhook plugin. It tests the functionality of the plugin in different scenarios, such as successful tokenization, failure to deliver, additional action required, and missing required id. It also tests the functionality of the plugin when the expected result invalidates the cache for the app.", "methods": ["GET", "POST"], "paths": ["/endpoint/"]}}
{"file": "cloned/saleor/saleor/plugins/webhook/tests/test_list_shipping_methods_for_checkout.py", "endpoints": {"api_summary": "This file contains tests for a Django webhook plugin that handles shipping methods for checkouts. It tests the functionality of the plugin, including the caching of shipping methods, invalidation of cache when checkout changes, and the handling of webhook responses.", "methods": ["GET", "POST"], "paths": ["/webhook/transport/synchronous/transport/send_webhook_request_sync", "/webhook/transport/synchronous/transport/cache/set", "/webhook/transport/synchronous/transport/cache/get", "/webhook/event_types/WebhookEventSyncType/SHIPPING_LIST_METHODS_FOR_CHECKOUT", "/webhook/payloads/generate_checkout_payload", "/webhook/transport/utils/generate_cache_key_for_webhook", "/webhook/plugin/get_shipping_methods_for_checkout", "/webhook/transport/shipping/get_cache_data_for_shipping_list_methods_for_checkout"]}}
{"file": "cloned/saleor/saleor/plugins/webhook/tests/test_transaction_process_session_webhook.py", "endpoints": {"api_summary": "This file contains tests for a webhook plugin in a Python application. The webhook plugin is responsible for processing transactions for checkouts and orders. It sends HTTP requests to a webhook URL when a transaction is processed. The webhook URL is defined in the webhook object created in the tests.", "methods": ["POST"], "paths": ["/webhook/transaction_process_session"]}}
{"file": "cloned/saleor/saleor/plugins/webhook/tests/test_list_stored_payment_methods_webhook.py", "endpoints": {"api_summary": "This file contains tests for the list_stored_payment_methods function in the webhook.transport.synchronous.transport module. It tests the functionality of the function with different scenarios such as static payload, subscription issuing principal, subscription issuing principal as app, subscription payload, cache availability, and incorrect response. It also tests the functionality of the function when the webhook response is incorrect.", "methods": ["GET", "POST"], "paths": ["/webhook/transport/synchronous/transport/list_stored_payment_methods"]}}
{"file": "cloned/saleor/saleor/plugins/webhook/tests/test_payment_gateway_initialize_session_webhook.py", "endpoints": {"api_summary": "This file defines several REST API endpoints for managing payment gateways. It includes endpoints for initializing sessions for both checkouts and orders. The endpoints are used to manage payment gateways and their sessions. The endpoints are used in the context of webhooks, which are used to notify other applications about events that happen in the system.", "methods": ["POST"], "paths": ["/payment_gateway_initialize_session/checkout", "/payment_gateway_initialize_session/order"]}}
{"file": "cloned/saleor/saleor/plugins/webhook/tests/test_payment_webhook.py", "endpoints": {"api_summary": "This file contains a set of tests for a webhook plugin in a Django application. It tests the functionality of the plugin, including getting payment gateways, running payment webhooks, and handling payment errors. It also includes tests for sending webhook requests synchronously and handling different types of responses.", "methods": ["GET", "POST"], "paths": ["/webhook/transport/synchronous/transport/send_webhook_request_sync", "/webhook/transport/synchronous/transport/get_payment_gateways", "/webhook/transport/synchronous/transport/run_payment_webhook", "/webhook/transport/synchronous/transport/check_plugin_id"]}}
{"file": "cloned/saleor/saleor/plugins/webhook/tests/subscription_webhooks/filterable_webhooks/test_draft_order_updated.py", "endpoints": {"api_summary": "This file contains unit tests for a webhook system. The webhook system is a way for an app to provide other applications with real-time information. When a certain event happens, such as a new order being created, updated, or deleted, the app makes a request to a URL you provide.", "methods": [], "paths": []}}
{"file": "cloned/saleor/saleor/plugins/tests/test_manager_get_taxes.py", "endpoints": {"api_summary": "The PluginsManager class provides REST API endpoints for getting taxes for a checkout or an order. These endpoints are used to retrieve tax data for a checkout or an order.", "methods": ["GET", "POST"], "paths": ["/plugins/get_taxes_for_checkout", "/plugins/get_taxes_for_order"]}}
{"file": "cloned/saleor/saleor/plugins/tests/test_views.py", "endpoints": {"api_summary": "This file contains three tests for different types of webhook views in a plugin system. The tests are parametrized to test different scenarios for each type of webhook view. The tests are checking the status code of the response for different plugin IDs and paths.", "methods": ["POST"], "paths": ["/plugins/<plugin_id>/webhook/paid", "/plugins/channel/<channel_slug>/<plugin_id>/webhook/paid", "/plugins/global/<plugin_id>/webhook/paid"]}}
{"file": "cloned/saleor/saleor/plugins/sendgrid/tasks.py", "endpoints": {"api_summary": "This file contains a collection of Celery tasks that send emails using the SendGrid API. These tasks are used to send various types of notifications to users, such as account confirmations, password resets, order confirmations, and more. The tasks are decorated with Celery's task decorator, which allows them to be run asynchronously and retried in case of failure.", "methods": ["POST"], "paths": ["/celery/send_account_confirmation_email_task", "/celery/send_password_reset_email_task", "/celery/send_request_email_change_email_task", "/celery/send_user_change_email_notification_task", "/celery/send_account_delete_confirmation_email_task", "/celery/send_set_user_password_email_task", "/celery/send_invoice_email_task", "/celery/send_order_confirmation_email_task", "/celery/send_fulfillment_confirmation_email_task", "/celery/send_fulfillment_update_email_task", "/celery/send_payment_confirmation_email_task", "/celery/send_order_canceled_email_task", "/celery/send_order_refund_email_task", "/celery/send_gift_card_email_task", "/celery/send_order_confirmed_email_task", "/celery/send_email_with_dynamic_template_id"]}}
{"file": "cloned/saleor/saleor/plugins/user_email/tasks.py", "endpoints": {"api_summary": "This file defines a set of tasks for sending various types of emails related to user accounts, gift cards, invoices, and orders. It also includes events for tracking these actions.", "methods": ["POST"], "paths": ["/send_account_confirmation_email_task", "/send_password_reset_email_task", "/send_request_email_change_email_task", "/send_user_change_email_notification_task", "/send_account_delete_confirmation_email_task", "/send_set_user_password_email_task", "/send_gift_card_email_task", "/send_invoice_email_task", "/send_order_confirmation_email_task", "/send_fulfillment_confirmation_email_task", "/send_fulfillment_update_email_task", "/send_payment_confirmation_email_task", "/send_order_canceled_email_task", "/send_order_refund_email_task", "/send_order_confirmed_email_task"]}}
{"file": "cloned/saleor/saleor/plugins/user_email/notify_events.py", "endpoints": {"api_summary": "This file defines several REST API endpoints for user email notifications. These endpoints include password reset, account confirmation, email change request, account deletion, gift card sending, setting customer password, invoice sending, order confirmation, fulfillment confirmation, fulfillment update, payment confirmation, order cancelation, order refund, and order confirmation. These endpoints are used to send various types of notifications to users.", "methods": [], "paths": []}}
{"file": "cloned/saleor/saleor/plugins/user_email/tests/test_notify_events.py", "endpoints": {"api_summary": "This file contains a set of tests for the user email plugin in Saleor, a Python-based e-commerce platform. The tests cover various user account and order-related notifications, including password reset, account confirmation, email change, account deletion, password setting, invoice generation, order confirmation, fulfillment updates, payment confirmations, order cancellations, and order refunds. The tests use mock objects to simulate the email sending tasks.", "methods": ["GET", "POST"], "paths": ["/redirect", "/download", "/account/password/reset", "/account/confirm", "/account/email/change", "/account/delete", "/account/password/set", "/invoice", "/order/confirm", "/fulfillment/update", "/payment/confirm", "/order/cancel", "/order/refund"]}}
{"file": "cloned/saleor/saleor/plugins/admin_email/tests/test_notify_events.py", "endpoints": {"api_summary": "This file contains tests for the admin email plugin of Saleor, which is a platform for e-commerce. The tests cover various scenarios such as password reset, setting staff password, sending order confirmation, and handling CSV exports. These tests are used to ensure the plugin is working as expected.", "methods": ["GET", "POST"], "paths": ["/plugins/admin_email/notify_events/send_staff_password_reset_email_task", "/plugins/admin_email/notify_events/send_set_staff_password_email_task", "/plugins/admin_email/notify_events/send_email_with_link_to_download_file_task", "/plugins/admin_email/notify_events/send_staff_order_confirmation_email_task", "/plugins/admin_email/notify_events/send_export_failed_email_task"]}}
{"file": "cloned/saleor/saleor/plugins/admin_email/tests/test_tasks.py", "endpoints": {"api_summary": "This file contains several tasks that are used to send emails related to user management, password reset, exporting data, and order confirmation. It uses a variety of email templates and configurations to send these emails.", "methods": ["GET", "POST"], "paths": ["/send_staff_password_reset_email_task", "/send_set_staff_password_email_task", "/send_email_with_link_to_download_file_task", "/send_export_failed_email_task", "/send_staff_order_confirmation_email_task"]}}
{"file": "cloned/saleor/saleor/plugins/avatax/__init__.py", "endpoints": {"api_summary": "This file contains a set of functions and classes for interacting with the Avalara Avatax API. It includes functions for generating request data, fetching tax data, and handling errors. It also includes functions for validating addresses and orders, and for generating tax codes.", "methods": [], "paths": []}}
{"file": "cloned/saleor/saleor/plugins/avatax/tests/test_tasks.py", "endpoints": {"api_summary": "This file contains tests for the Avatax plugin. It tests the functionality of the api_post_request_task function, which is used to send requests to the Avatax API. The function is tested with different scenarios, including successful requests, requests with missing responses, and requests with orders that don't have any lines with taxes to calculate.", "methods": ["POST"], "paths": ["/transactions/createoradjust"]}}
{"file": "cloned/saleor/saleor/order/notifications.py", "endpoints": {"api_summary": "This file contains a collection of functions and classes that are used to handle orders, fulfillments, and payments in a Django-based e-commerce application. It includes functions for sending notifications, generating payloads for various events, and handling discounts and attributes.", "methods": ["GET", "POST"], "paths": ["/orders", "/orders/<built-in function id>", "/fulfillments", "/fulfillments/<built-in function id>", "/payments", "/payments/<built-in function id>"]}}
{"file": "cloned/saleor/saleor/order/fetch.py", "endpoints": {"api_summary": "This file contains a set of functions and classes that are used to fetch and manipulate order information. It includes functions for fetching order lines, order info, and draft order lines info. It also includes classes for OrderInfo and OrderLineInfo. The file also includes functions for attaching voucher info to order lines and reattaching apply once per order voucher info.", "methods": [], "paths": []}}
{"file": "cloned/saleor/saleor/order/tests/fixtures/order_line.py", "endpoints": {"api_summary": "This file contains fixtures for testing purposes. It defines several fixtures for creating order lines in different scenarios. These fixtures are used to test the functionality of the order line creation process.", "methods": [], "paths": []}}
{"file": "cloned/saleor/saleor/tax/utils.py", "endpoints": {"api_summary": "This file contains a set of utility functions for tax calculations in a Django-based application. It includes functions for getting tax configurations, calculating tax rates, and determining tax strategies. It also includes functions for handling shipping taxes and tax class kwargs.", "methods": [], "paths": []}}
{"file": "cloned/saleor/saleor/tax/tests/test_utils.py", "endpoints": {"api_summary": "This file contains a set of unit tests for various functions related to tax calculations in a sales system. It tests the functionality of functions that calculate tax rates, determine the country of taxation, and determine the tax application ID. It also tests the functionality of functions that calculate shipping tax rates for both checkouts and orders.", "methods": [], "paths": []}}
{"file": "cloned/saleor/saleor/discount/tasks.py", "endpoints": {"api_summary": "This file contains a set of tasks for handling promotions in a Django application. It includes tasks for handling promotion start and end notifications, clearing expired promotion rules, decreasing voucher code usage, and updating discounted prices. It also includes helper functions for fetching promotion rules and variants.", "methods": [], "paths": []}}
{"file": "cloned/saleor/saleor/account/tests/test_account.py", "endpoints": {"api_summary": "This file contains a set of tests for the address form and related functionality in a Django project. It tests the validation of address forms, phone numbers, and the normalization of Japanese addresses. It also tests the functionality of the get_address_form function, which is used to create address forms based on the provided data and country code. The tests also include validation of possible phone numbers and the normalization of country areas.", "methods": [], "paths": []}}
{"file": "cloned/saleor/saleor/app/installation_utils.py", "endpoints": {"api_summary": "This file contains a set of functions and classes that are used to manage and install third-party applications in a Django-based application. It includes functions for fetching app manifest data, installing apps, and handling app brand data. It also includes a Celery task for fetching brand data asynchronously.", "methods": [], "paths": []}}
{"file": "cloned/saleor/saleor/app/tasks.py", "endpoints": {"api_summary": "This file contains two main functions: one for installing an app and another for removing apps. The installation function is a task that can be run asynchronously, while the removal function is also a task that can be run asynchronously. It also includes a helper function for removing deliveries.", "methods": ["POST"], "paths": ["/install_app_task", "/remove_apps_task"]}}
{"file": "cloned/saleor/saleor/app/tests/test_installation_utils.py", "endpoints": {"api_summary": "This file contains a set of tests for the app installation utilities in the Saleor platform. It tests the functionality of installing an app, including validating the app's manifest, installing the app, and handling various edge cases. It also tests the functionality of fetching brand data and icon images.", "methods": [], "paths": []}}
{"file": "cloned/java-microservice/user-service/src/main/java/com/apssouza/controllers/AccountController.java", "endpoints": {"api_summary": "This file defines a REST API for managing user accounts. It provides endpoints for listing all accounts, creating a new account, updating an existing account, retrieving a specific account by ID, and searching for an account by email. These endpoints are accessible via HTTP methods such as GET, POST, and PUT.", "methods": ["GET", "POST", "PUT"], "paths": ["/accounts", "/accounts/{id}", "/accounts/search"]}}
{"file": "cloned/java-microservice/remainder-service/src/main/java/com/apssouza/controllers/TodoServiceStatisticsController.java", "endpoints": {"api_summary": "This API provides statistics about the invocation of the TodoService. It provides the average, count, minimum, and maximum duration of the service invocations.", "methods": ["GET"], "paths": ["/todo-statistics"]}}
{"file": "cloned/java-microservice/remainder-service/src/main/java/com/apssouza/controllers/TodoChangesController.java", "endpoints": {"api_summary": "This file defines a REST API endpoint for monitoring changes in a to-do list. It provides a GET endpoint to retrieve recent changes in the to-do list.", "methods": ["GET"], "paths": ["/todo-changes"]}}
{"file": "cloned/java-microservice/remainder-service/src/main/java/com/apssouza/controllers/TodoController.java", "endpoints": {"api_summary": "This API provides endpoints for managing a to-do list. It allows users to create, read, update, and delete tasks. It also allows users to search tasks by user email and update the status of a task.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/todos", "/todos/search", "/todos/{id}", "/todos/{id}/status"]}}
{"file": "cloned/java-microservice/remainder-service/src/main/java/com/apssouza/services/TodoService.java", "endpoints": {"api_summary": "This service provides endpoints for managing a list of todos. It allows for retrieving, deleting, listing, creating, updating, and getting todos by user email.", "methods": ["GET", "POST", "DELETE", "PUT"], "paths": ["/todos/{id}", "/todos/{id}", "/todos", "/todos", "/todos/{id}", "/todos/user/{email}"]}}
{"file": "cloned/java-microservice/mail-service/src/main/java/com/apssouza/mailservice/controllers/NotifyController.java", "endpoints": {"api_summary": "This API provides a single endpoint for sending emails. It uses the GET method to send an email. The email is created using the EmailCreateCommand and sent asynchronously using the EmailCommandHandler.", "methods": ["GET"], "paths": ["/send/email"]}}
{"file": "cloned/java-microservice/mail-service/src/main/java/com/apssouza/mailservice/controllers/EmailController.java", "endpoints": {"api_summary": "This file defines a REST API endpoint for an email service. The API allows users to retrieve a list of all emails stored in the system. The GET method is used to retrieve the list of emails.", "methods": ["GET"], "paths": ["/emails"]}}
{"file": "cloned/java-microservice/oauth-server/src/main/java/com/apssouza/clients/UserClient.java", "endpoints": {"api_summary": "This API endpoint is used to get a user by email. It uses the GET method and the URL path '/accounts/search'. The email parameter is passed as a request parameter.", "methods": ["GET"], "paths": ["/accounts/search"]}}
{"file": "cloned/java-microservice/api-gateway/src/main/java/com/apssouza/controllers/UserController.java", "endpoints": {"api_summary": "This file defines a REST API for managing users and their associated todos. It provides endpoints for getting all users, getting the current user, getting todos for the current user, and creating a new todo for the current user.", "methods": ["GET", "POST"], "paths": ["/accounts", "/accounts/me", "/accounts/me/todos"]}}
{"file": "cloned/java-microservice/api-gateway/src/main/java/com/apssouza/controllers/TodoController.java", "endpoints": {"api_summary": "This API provides a list of all users. It is part of a larger system that manages To Do tasks. The API endpoint is '/todos' and it uses the GET method to retrieve the list of users.", "methods": ["GET"], "paths": ["/todos"]}}
{"file": "cloned/java-microservice/api-gateway/src/main/java/com/apssouza/clients/UserClient.java", "endpoints": {"api_summary": "This file defines three REST API endpoints for a user service. The first endpoint retrieves all users, the second endpoint retrieves a user by email, and the third endpoint creates a new user. These endpoints are used to manage user accounts in the system.", "methods": ["GET", "GET", "POST"], "paths": ["/accounts", "/accounts/search", "/users"]}}
{"file": "cloned/java-microservice/api-gateway/src/main/java/com/apssouza/clients/TodoClient.java", "endpoints": {"api_summary": "This file defines a REST API client for a todo application. It provides endpoints to get all users, get todos by user email, and create a new todo. These endpoints are used to interact with the todo application.", "methods": ["GET", "POST"], "paths": ["/todos", "/todos/search", "/todos"]}}
{"file": "cloned/website/authserver/src/main/java/org/flowant/website/controller/JwkSetRest.java", "endpoints": {"api_summary": "This file defines a REST API endpoint for retrieving JSON Web Key Set (JWK Set). The JWK Set is used for signing and verifying JSON Web Tokens (JWTs). The endpoint is accessible at '/.well-known/jwks.json' and returns a JSON object containing the JWK Set.", "methods": ["GET"], "paths": ["/.well-known/jwks.json"]}}
{"file": "cloned/website/authserver/src/main/java/org/flowant/website/controller/UserRest.java", "endpoints": {"api_summary": "This file defines two REST API endpoints. The first endpoint, '/user', is used to retrieve user information. The second endpoint, '/admin', is used to retrieve admin information.", "methods": ["GET"], "paths": ["/user", "/admin"]}}
{"file": "cloned/website/authserver/src/test/java/org/flowant/authserver/HTTPBasicAuthenticationTest.java", "endpoints": {"api_summary": "This API provides endpoints for user authentication and resource access. It uses HTTP Basic authentication for user authentication and secures some resources. The '/user' endpoint is secured and requires authentication. The '/' endpoint is unsecured and can be accessed by anyone.", "methods": ["GET"], "paths": ["/user", "/"]}}
{"file": "cloned/website/authserver/src/test/java/org/flowant/authserver/OAuth2JwtTokenIssuerTests.java", "endpoints": {"api_summary": "This file contains a set of tests for the OAuth2 JWT token issuer. It tests the functionality of the JWK set URI, user info URL, and the password and refresh token functionality.", "methods": ["GET", "POST"], "paths": ["/oauth/token", "/oauth/token", "/oauth/token", "/oauth/token", "/oauth/token", "/oauth/token", "/oauth/token", "/oauth/token", "/oauth/token"]}}
{"file": "cloned/website/backend/src/main/java/org/flowant/website/BackendSecurityConfiguration.java", "endpoints": {"api_summary": "This code is part of a Spring Security configuration for a web application. It sets up a password encoder and a security filter chain. It does not directly define any REST API endpoints.", "methods": [], "paths": []}}
{"file": "cloned/website/backend/src/main/java/org/flowant/website/rest/ReplyRest.java", "endpoints": {"api_summary": "This file defines a REST API for managing replies to comments on a website. It provides endpoints for getting, posting, updating, and deleting replies. The replies can be filtered by container ID and author ID.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/reply", "/reply/popular", "/reply/{id}/{cid}", "/reply/{id}/{cid}"]}}
{"file": "cloned/website/backend/src/main/java/org/flowant/website/rest/NotificationRest.java", "endpoints": {"api_summary": "This file defines a REST API for managing notifications. It provides endpoints for creating, retrieving, updating, and deleting notifications. It also includes endpoints for managing subscribers to notifications.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/notification", "/notification/{id}/{cid}", "/notification/{id}/{cid}/{subscriber}"]}}
{"file": "cloned/website/backend/src/main/java/org/flowant/website/rest/PopularRepositoryRest.java", "endpoints": {"api_summary": "This file defines a REST API for interacting with a popular repository. It provides endpoints for getting popular sub-items by container ID, getting all items by parameters, and deleting items by ID. These endpoints are used to manage and retrieve data from the repository.", "methods": ["GET", "POST", "DELETE"], "paths": ["/popular", "/popular/<built-in function id>"]}}
{"file": "cloned/website/backend/src/main/java/org/flowant/website/rest/RelationRest.java", "endpoints": {"api_summary": "This file defines a REST API for managing relations between users. It provides endpoints for creating, updating, retrieving, and deleting relations. It also includes endpoints for following and unfollowing users.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/relation", "/relation/{method}/{id}/{followee}", "/relation/{id}"]}}
{"file": "cloned/website/backend/src/main/java/org/flowant/website/rest/WebSiteRest.java", "endpoints": {"api_summary": "This file defines a REST API for managing web sites. It provides endpoints for creating, reading, updating, and deleting web sites. The API allows for the retrieval of all web sites or a specific web site by its ID.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/website", "/website/<built-in function id>"]}}
{"file": "cloned/website/backend/src/main/java/org/flowant/website/rest/ReviewReputationRest.java", "endpoints": {"api_summary": "This API provides endpoints for managing review reputations. It allows for the creation, retrieval, updating, and deletion of review reputations. The endpoints are accessible via HTTP methods such as GET, POST, PUT, and DELETE.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/review_rpt", "/review_rpt/<id>/<cid>"]}}
{"file": "cloned/website/backend/src/main/java/org/flowant/website/rest/ContentRest.java", "endpoints": {"api_summary": "This file defines a REST API for managing content. It provides endpoints for getting, posting, putting, and deleting content. It also provides endpoints for getting popular content and deleting content with file references.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/content", "/content/popular", "/content/{id}/{cid}", "/content/{id}/{cid}"]}}
{"file": "cloned/website/backend/src/main/java/org/flowant/website/rest/SearchRest.java", "endpoints": {"api_summary": "This file defines a REST API endpoint for searching content by tag. It provides a GET endpoint at '/search' that accepts a 'tag' parameter and returns a list of content that matches the tag.", "methods": ["GET"], "paths": ["/search"]}}
{"file": "cloned/website/backend/src/main/java/org/flowant/website/rest/FileRest.java", "endpoints": {"api_summary": "This file defines a REST API for file management. It allows for the creation, retrieval, and deletion of files. The API supports multiple file uploads and deletions in a batch. The API uses HTTP methods to perform these operations.", "methods": ["GET", "POST", "DELETE"], "paths": ["/files", "/files/{id}", "/files/deletes"]}}
{"file": "cloned/website/backend/src/main/java/org/flowant/website/rest/SubItemRest.java", "endpoints": {"api_summary": "This file defines a REST API for managing sub-items. It provides endpoints for creating, updating, retrieving, and deleting sub-items. These endpoints are accessible via HTTP methods such as GET, POST, PUT, and DELETE.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/subitem", "/subitem/<built-in function id>"]}}
{"file": "cloned/website/backend/src/main/java/org/flowant/website/rest/IdCidRepositoryRest.java", "endpoints": {"api_summary": "This file defines a REST API for interacting with a repository of objects that extend the HasIdCid interface. The API allows for retrieval of objects by container ID, author ID, subscriber ID, and other parameters. The API uses pagination and provides a next link header for efficient data retrieval.", "methods": ["GET"], "paths": ["/{id}/{cid}"]}}
{"file": "cloned/website/backend/src/main/java/org/flowant/website/rest/ContentReputationRest.java", "endpoints": {"api_summary": "This file defines a REST API for managing content reputations. It provides endpoints for creating, reading, updating, and deleting content reputations. The endpoints are accessible via HTTP methods such as GET, POST, PUT, and DELETE.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/content_rpt", "/content_rpt/<id>/<cid>"]}}
{"file": "cloned/website/backend/src/main/java/org/flowant/website/rest/UserRest.java", "endpoints": {"api_summary": "This file defines a REST API for managing users. It includes endpoints for user signup, login, creation, update, retrieval, and deletion. It also includes a password encryption mechanism and a file storage system for user files.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/user", "/user/signup", "/user/{id}"]}}
{"file": "cloned/website/backend/src/main/java/org/flowant/website/rest/ReplyReputationRest.java", "endpoints": {"api_summary": "This API provides endpoints for managing ReplyReputation objects. It allows for creating, reading, updating, and deleting ReplyReputation objects. The endpoints are accessible via HTTP methods such as GET, POST, PUT, and DELETE.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/reply_rpt", "/reply_rpt/<id>/<cid>"]}}
{"file": "cloned/website/backend/src/main/java/org/flowant/website/rest/MessageRest.java", "endpoints": {"api_summary": "This file defines a REST API for managing messages. It provides endpoints for creating, reading, updating, and deleting messages. It also provides endpoints for retrieving messages based on container ID or author ID.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/message", "/message/{id}/{cid}"]}}
{"file": "cloned/website/backend/src/main/java/org/flowant/website/rest/ReviewRest.java", "endpoints": {"api_summary": "This file defines a REST API for managing reviews. It provides endpoints for getting, posting, updating, and deleting reviews. It also provides endpoints for getting popular reviews and getting reviews by their ID and container ID.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/review", "/review/popular", "/review/<id>/<cid>"]}}
{"file": "cloned/website/backend/src/test/java/org/flowant/website/rest/FileRestTest.java", "endpoints": {"api_summary": "This API provides endpoints for managing files. It allows users to upload, download, and delete files. The API uses HTTP methods such as GET, POST, and DELETE to perform these operations.", "methods": ["GET", "POST", "DELETE"], "paths": ["/files", "/files/<built-in function id>"]}}
{"file": "cloned/website/backend/src/test/java/org/flowant/website/rest/ReplyRestTest.java", "endpoints": {"api_summary": "This file is a test file for a REST API. It's using Spring Boot for testing REST endpoints, but it's not explicitly defining any endpoints.", "methods": [], "paths": []}}
{"file": "cloned/website/backend/src/test/java/org/flowant/website/rest/RestWithRepositoryTest.java", "endpoints": {"api_summary": "This file defines a set of REST API endpoints for interacting with a repository of entities. It provides CRUD operations for the entities, as well as pagination and a popular sub-item operation. The endpoints are defined in the test methods of the class, which are used to test the repository operations.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/baseUrl", "/baseUrl/{id}", "/baseUrl?cid={cid}&page={page}&size={size}", "/baseUrl/popular?cid={cid}"]}}
{"file": "cloned/website/frontend/src/app/app-routing.module.ts", "endpoints": {"api_summary": "This file defines a set of routes for an Angular application. It includes routes for various components such as HomeComponent, SignInComponent, SignUpComponent, SearchContentComponent, ContentEditorComponent, ContentViewerComponent, NotificationComponent, MessageComponent, UserProfileComponent, UserContentComponent, and PageNotFoundComponent. These routes are protected by AuthGuard and can only be accessed by users with specific authorities. The routes also include parameters such as id and cid which are used to identify specific resources.", "methods": ["GET", "POST"], "paths": ["/", "/signin", "/signup", "/admin", "/search", "/search/:tag", "/content/edit", "/content/edit/:id/:cid", "/content/view/:id/:cid", "/notification", "/message", "/user/profile", "/user/profile/:id", "/user/content", "/user/content/:id", "/**"]}}
{"file": "cloned/website/frontend/src/app/reputation/reputation.component.ts", "endpoints": {"api_summary": "This component is part of a larger Angular application. It interacts with the backend through the BackendService. It fetches user data and handles user interactions like liking content.", "methods": [], "paths": []}}
{"file": "cloned/website/frontend/src/app/_services/backend.service.ts", "endpoints": {"api_summary": "This file defines a REST API service in Angular using the HttpClient module. The service provides endpoints for user management, relation management, content search, file management, and reputation accumulation. It also includes endpoints for user authorization and error handling.", "methods": ["GET", "POST", "DELETE"], "paths": ["/users", "/users/<built-in function id>", "/relations", "/search", "/files", "/files/<built-in function id>", "/authorize"]}}
{"file": "cloned/website/common/src/main/java/org/flowant/website/model/Message.java", "endpoints": {"api_summary": "This file defines a model class for a message system. It includes fields for the message ID, receiver name, author ID, author name, message content, read status, and time. It also includes a static method for creating a message from a sender to a receiver.", "methods": [], "paths": []}}
{"file": "cloned/EHR-Route/provider-service/src/main/java/ehroute/providerservice/TestController.java", "endpoints": {"api_summary": "This API provides a simple test endpoint that returns a 'Hello World' message. It is used for testing purposes.", "methods": ["GET"], "paths": ["test"]}}
{"file": "cloned/EHR-Route/identity-service/src/main/java/ehroute/identityservice/controllers/AccountController.java", "endpoints": {"api_summary": "This file defines two REST API endpoints for an identity service. The first endpoint, '/current', is a GET method that returns the current user's principal. The second endpoint, '/register', is a POST method that creates a new account using a command object. Both endpoints are part of the 'Account' controller.", "methods": ["GET", "POST"], "paths": ["/current", "/register"]}}
{"file": "cloned/EHR-Route/identity-service/src/main/java/ehroute/identityservice/controllers/AuthenticationController.java", "endpoints": {"api_summary": "This file defines three REST API endpoints for user authentication and consent. The first endpoint handles user login, the second endpoint handles user authentication, and the third endpoint handles user consent. All endpoints are defined in the AuthenticationController class.", "methods": ["GET", "POST"], "paths": ["/authentication/login", "/authentication/login", "/authentication/consent"]}}
{"file": "cloned/daos/src/tests/ftest/util/container_rf_test_base.py", "endpoints": {"api_summary": "This file is a test case for a DAOS system. It simulates various scenarios and verifies the system's behavior. It does not define any REST API endpoints explicitly.", "methods": [], "paths": []}}
{"file": "cloned/daos/src/tests/ftest/util/soak_utils.py", "endpoints": {"api_summary": "The provided Python code is a test script for a soak test framework. It includes various functions for creating pools, containers, and running various harasser tests, such as server reboots, server stop/start, extend, exclude/reintegrate, snapshot, and so on. It also includes functions for running various types of tests, such as IOR, MDTEST, FIO, and DAOS_RACER.", "methods": [], "paths": []}}
{"file": "cloned/daos/src/tests/ftest/recovery/pool_membership.py", "endpoints": {"api_summary": "This file is a test file for a DAOS system. It uses the DAOS API to create and manipulate pools, containers, and targets, and then tests the system's recovery capabilities.", "methods": [], "paths": []}}
{"file": "cloned/daos/src/tests/ftest/control/dmg_pool_query_ranks.py", "endpoints": {"api_summary": "This test class tests the pool query command with ranks state in the DAOS system. It verifies the state of ranks after excluding and reintegrating them.", "methods": [], "paths": []}}
{"file": "cloned/daos/src/tests/ftest/control/dmg_pool_query_test.py", "endpoints": {"api_summary": "This file is a test file for the DAOS system. It uses the DAOS Management Tool (dmg) to test the functionality of the pool query command.", "methods": [], "paths": []}}
{"file": "cloned/daos/src/tests/ftest/aggregation/throttling.py", "endpoints": {"api_summary": "This file is a test case for the DAOS system. It uses the IOR tool to test the performance of the DAOS system under different conditions. The test case verifies the ior performance during aggregation throttling.", "methods": [], "paths": []}}
{"file": "cloned/daos/src/tests/ftest/aggregation/checksum.py", "endpoints": {"api_summary": "This test class is used to verify the integrity of aggregated data in a DAOS system. It uses the IOR tool to write and read data, and checks the integrity of the data after aggregation.", "methods": [], "paths": []}}
{"file": "cloned/daos/src/tests/ftest/aggregation/dfuse_space_check.py", "endpoints": {"api_summary": "This test case is for the DAOS system. It creates a pool, container, and dfuse, and then tests the space reclaiming feature of DAOS.", "methods": [], "paths": []}}
{"file": "cloned/daos/src/tests/ftest/security/cont_acl.py", "endpoints": {"api_summary": "This file is a test file for the DAOS system. It tests the security features of the DAOS container, such as user and group access control lists (ACLs).", "methods": [], "paths": []}}
{"file": "cloned/daos/src/tests/ftest/nvme/health.py", "endpoints": {"api_summary": "This test case is used to validate the health of NVMe devices in a DAOS system. It creates pools, verifies the health of the devices, and scans the NVMe health.", "methods": [], "paths": []}}
{"file": "cloned/daos/src/tests/ftest/osa/online_parallel_test.py", "endpoints": {"api_summary": "This test class runs multiple OSA commands/IO in parallel. It uses various utilities and commands to test the system's functionality.", "methods": [], "paths": []}}
{"file": "cloned/daos/src/tests/ftest/container/api_basic_attribute.py", "endpoints": {"api_summary": "This file contains tests for setting, listing, and getting attributes of a DAOS container. It does not define any REST API endpoints explicitly.", "methods": [], "paths": []}}
{"file": "cloned/daos/src/tests/ftest/container/per_server_fault_domain.py", "endpoints": {"api_summary": "The provided Python code does not define any REST API endpoints explicitly. It is a test file for a DAOS (Distributed Asynchronous Object Storage) system. It uses the IOR (I/O workloads) and DAOS commands to test the system's fault tolerance.", "methods": [], "paths": []}}
{"file": "cloned/daos/src/tests/ftest/erasurecode/space_usage.py", "endpoints": {"api_summary": "This file is a test case for a DAOS system. It verifies the space usage of the EC (Erasure Coding) data in the system. It defines two test cases, one for each EC type (EC_4P1GX and EC_4P2GX). The test cases create a pool, a POSIX container, and use IOR (IOR is a parallel I/O benchmark tool) to create a large file with EC*GX. The test case then verifies the expected number of targets were used and the used targets use within X% of the mean space.", "methods": [], "paths": []}}
{"file": "cloned/daos/src/tests/ftest/erasurecode/rebuild_fio.py", "endpoints": {"api_summary": "The provided Python code is a test class for a DAOS system, which is a parallel object store designed for very large scale data storage. It does not contain any HTTP methods or URL paths, which are typical for REST API endpoints.", "methods": [], "paths": []}}
{"file": "cloned/daos/src/tests/ftest/telemetry/telemetry_pool_metrics.py", "endpoints": {"api_summary": "This file is a test file for a DAOS (Distributed Asynchronous Object Storage) system. It uses the IOR (IOzone replacement) tool to generate deterministic workloads and verifies the DAOS engine IO telemetry basic metrics infrastructure.", "methods": [], "paths": []}}
{"file": "cloned/daos/src/tests/ftest/dfuse/container_type.py", "endpoints": {"api_summary": "This test case is used to verify the behavior of dfuse (Distributed File System in Userspace) when mounting different types of containers in a DAOS system. It tests the behavior of dfuse with both default and POSIX containers.", "methods": [], "paths": []}}
{"file": "cloned/daos/src/tests/ftest/datamover/dst_create.py", "endpoints": {"api_summary": "This file defines several REST API endpoints for a Data Mover test suite. The endpoints are used to test the creation of destination containers in a Data Mover test suite. The endpoints cover different scenarios such as creating containers in the same pool, different pools, and with special characters in the label. The endpoints also test the creation of POSIX containers when using the DFS API.", "methods": ["POST"], "paths": ["/test_dm_dst_create_dcp_posix_dfs", "/test_dm_dst_create_dcp_posix_daos", "/test_dm_dst_create_dcp_unknown_daos", "/test_dm_dst_create_fs_copy_posix_dfs"]}}
{"file": "cloned/daos/src/tests/ftest/fault_injection/pool.py", "endpoints": {"api_summary": "This file is a test case for a fault injection test in a DAOS system. It does not define any HTTP methods or URL paths.", "methods": [], "paths": []}}
{"file": "cloned/daos/src/control/system/raft/raft.go", "endpoints": {"api_summary": "This file defines the core functionality of the Raft distributed consensus algorithm, which is used to manage the state of a distributed system. It includes methods for initializing, configuring, and managing the Raft service, as well as for submitting and applying updates to the system state. It also includes a FSM (Finite State Machine) implementation that is used to apply updates to the system state.", "methods": [], "paths": []}}
{"file": "cloned/daos/src/control/server/ctl_smd_rpc.go", "endpoints": {"api_summary": "This file defines several REST API endpoints for a control service. The service is used to manage and query SMD (Storage Management Device) devices. It provides endpoints for querying SMD devices and managing them. The endpoints are used to retrieve information about SMD devices, replace faulty devices, and manage LED states of SMD devices.", "methods": ["GET", "POST"], "paths": ["/querySmdDevices", "/querySmdPools", "/SmdQuery", "/SmdManage"]}}
{"file": "cloned/daos/src/control/server/ctl_ranks_rpc.go", "endpoints": {"api_summary": "This file defines several REST API endpoints for a server control service. The service manages data-plane instances (DAOS system members) and provides methods to prepare for shutdown, stop, reset format, start, and set log masks for these instances. The endpoints are used to manage the lifecycle of these instances and to configure their logging behavior.", "methods": ["POST"], "paths": ["/PrepShutdownRanks", "/StopRanks", "/ResetFormatRanks", "/StartRanks", "/SetEngineLogMasks"]}}
{"file": "cloned/daos/src/control/server/mgmt_drpc_test.go", "endpoints": {"api_summary": "This file contains the server package for the DAOS project. It defines several endpoints for managing the server and its engines. The endpoints include handling of NotifyReady requests, cluster events, and pool service rank queries. The endpoints are used to manage the state of the server and its associated services.", "methods": ["POST"], "paths": ["/handleNotifyReady", "/handleClusterEvent", "/handleGetPoolServiceRanks", "/handlePoolFindByLabel"]}}
{"file": "cloned/daos/src/control/server/instance_drpc.go", "endpoints": {"api_summary": "This file contains the implementation of a server that interacts with a data plane engine instance. It defines several methods for managing the engine instance, including starting, stopping, and checking its status. It also includes methods for making dRPC calls to the engine instance, which are used for various operations such as preparing for shutdown, pinging a rank, and getting the health of the BIOS. Finally, it includes methods for listing SMD devices.", "methods": [], "paths": []}}
{"file": "cloned/daos/src/control/server/ctl_storage.go", "endpoints": {"api_summary": "This file defines a REST API for managing storage resources. It provides endpoints for preparing and scanning SCM (Storage Class Memory) and NVMe (Non-Volatile Memory Express) devices. It also includes an endpoint for enabling VMD (Virtual Memory Dump) support in the storage provider. The file also includes a function for retrieving storage usage statistics.", "methods": ["GET", "POST"], "paths": ["/scm/prepare", "/scm/scan", "/nvme/prepare", "/nvme/scan", "/storage/enable_vmd", "/storage/usage"]}}
{"file": "cloned/daos/src/control/server/mgmt_system_test.go", "endpoints": {"api_summary": "This file defines several REST API endpoints for a server management service. It includes endpoints for system query, start, stop, and exclude operations, as well as for system drain and erase operations. It also includes endpoints for joining and leaving the system, as well as for updating the system's fabric providers.", "methods": ["GET", "POST"], "paths": ["/system/query", "/system/start", "/system/stop", "/system/exclude", "/system/drain", "/system/erase", "/system/join", "/system/leave", "/system/update"]}}
{"file": "cloned/daos/src/control/server/ctl_firmware.go", "endpoints": {"api_summary": "This file defines a REST API for managing firmware on storage devices. It provides endpoints for querying and updating firmware on both SCM (Solid-State Memory) and NVMe (Non-Volatile Memory Express) devices. The API allows users to fetch information about the device firmware and update it.", "methods": ["GET", "POST"], "paths": ["/firmware/query", "/firmware/update"]}}
{"file": "cloned/daos/src/control/server/storage/scm.go", "endpoints": {"api_summary": "This file contains the code for managing and interacting with the Storage Class Memory (SCM) in a DAOS system. It includes operations for mounting, unmounting, formatting, checking the format of, scanning, preparing, and querying and updating the firmware of SCM. It also includes helper functions for calculating the recommended RAM-disk size and the minimum required memory for a given RAM-disk size.", "methods": [], "paths": []}}
{"file": "cloned/daos/src/control/server/storage/provider.go", "endpoints": {"api_summary": "This file defines a storage provider that provides various storage capabilities such as SCM (Storage Class Memory), Bdev (Block Devices), and Metadata. It also includes methods for preparing, formatting, and mounting these storage devices. The endpoints are not explicitly defined in this file, but they are used by other parts of the system to interact with the storage provider.", "methods": ["GET", "POST"], "paths": ["/storage/prepare", "/storage/format", "/storage/mount"]}}
{"file": "cloned/daos/src/control/server/storage/scm/provider.go", "endpoints": {"api_summary": "This file defines a REST API for managing and interrogating SCM (Storage Class Memory) storage components. It provides endpoints for scanning, preparing, formatting, and mounting SCM storage components. It also includes endpoints for checking the format of SCM storage components and for mounting and unmounting them.", "methods": ["GET", "POST"], "paths": ["/scan", "/prepare", "/format", "/mount", "/unmount", "/checkformat"]}}
{"file": "cloned/daos/src/control/server/storage/bdev/backend_json.go", "endpoints": {"api_summary": "This file defines a set of REST API endpoints for managing block devices in a storage system. It includes methods for setting options, attaching NVMe controllers, enabling VMD, creating AIO devices, and setting hotplug properties. It also includes methods for setting acceleration properties, SPDK JSON-RPC server settings, and auto-faulty settings. The endpoints are used to configure the SPDK subsystem and the DAOS configuration.", "methods": ["GET", "POST"], "paths": ["/bdev/set_options", "/bdev/nvme_set_options", "/bdev/nvme_attach_controller", "/bdev/vmd_enable", "/bdev/aio_create", "/daos/set_hotplug_busid_range", "/daos/set_accel_props", "/daos/set_spdk_rpc_server", "/daos/set_auto_faulty_props"]}}
{"file": "cloned/daos/src/control/server/storage/bdev/mocks.go", "endpoints": {"api_summary": "This file defines a mock backend for block device operations. It provides methods for scanning, formatting, preparing, resetting, updating firmware, writing and reading configurations for block devices. These methods can be used to simulate block device operations in a testing environment.", "methods": ["GET", "POST"], "paths": ["/bdev/scan", "/bdev/format", "/bdev/prepare", "/bdev/reset", "/bdev/update_firmware", "/bdev/write_config", "/bdev/read_config"]}}
{"file": "cloned/daos/src/control/cmd/hello_drpc/hello/drpc_test.pb.go", "endpoints": {"api_summary": "This file defines two enums, Module and Function, and two messages, Hello and HelloResponse. It does not explicitly define any REST API endpoints.", "methods": [], "paths": []}}
{"file": "cloned/daos/src/control/cmd/daos/pool_test.go", "endpoints": {"api_summary": "This file defines several REST API endpoints for interacting with a pool of resources. It includes endpoints for listing, querying, and managing pools of resources. It also includes endpoints for setting, getting, and deleting attributes of the pools.", "methods": ["GET", "POST"], "paths": ["/pool/list", "/pool/query", "/pool/query-targets", "/pool/set-attr", "/pool/get-attr", "/pool/del-attr", "/pool/list-attr"]}}
{"file": "cloned/daos/src/control/cmd/dmg/check.go", "endpoints": {"api_summary": "This file defines a set of REST API endpoints for system check operations. It includes enabling, disabling, starting, stopping, querying, setting, getting, and repairing system checks. The endpoints are used to manage and monitor the system's health and integrity.", "methods": ["GET", "POST"], "paths": ["/check/enable", "/check/disable", "/check/start", "/check/stop", "/check/query", "/check/set-policy", "/check/get-policy", "/check/repair"]}}
{"file": "cloned/daos/src/control/cmd/dmg/system.go", "endpoints": {"api_summary": "This file defines a set of REST API endpoints for system management. It includes endpoints for querying system status, stopping, starting, and managing the system. It also includes endpoints for managing the system's attributes and properties.", "methods": ["GET", "POST"], "paths": ["/system/leader-query", "/system/query", "/system/stop", "/system/start", "/system/exclude", "/system/clear-exclude", "/system/drain", "/system/reintegrate", "/system/erase", "/system/list-pools", "/system/cleanup", "/system/set-attr", "/system/get-attr", "/system/del-attr", "/system/set-prop", "/system/get-prop"]}}
{"file": "cloned/daos/src/control/cmd/dmg/storage_query.go", "endpoints": {"api_summary": "This file defines several REST API endpoints for managing and querying storage devices. It includes endpoints for listing devices, pools, and their usage. It also includes endpoints for setting devices as faulty and replacing devices. It also includes endpoints for checking and setting the status LED of devices.", "methods": ["GET", "POST"], "paths": ["/list-devices", "/list-pools", "/usage", "/nvme-faulty", "/nvme", "/check", "/identify"]}}
{"file": "cloned/daos/src/control/cmd/dmg/pretty/pool.go", "endpoints": {"api_summary": "This file contains several functions that are used to handle and manipulate data related to DAOS pools. These functions include functions for querying, creating, listing, and manipulating pools. They also include functions for printing pool properties and responses to pool rank operations.", "methods": ["GET", "POST"], "paths": ["/pools", "/pools/<built-in function id>"]}}
{"file": "cloned/daos/src/control/cmd/daos_agent/procmon.go", "endpoints": {"api_summary": "This file defines a process monitoring system for DAOS, which is a parallel distributed object store designed for massively parallel processing. It monitors the processes and handles the pool handles. It also provides a way to clean up server handles and flush all handles.", "methods": ["POST", "DELETE", "GET"], "paths": ["/AddPoolHandle", "/RemovePoolHandle", "/NotifyExit", "/FlushAllHandles", "/cleanupServerHandles"]}}
{"file": "cloned/daos/src/control/cmd/daos_firmware_helper/handler.go", "endpoints": {"api_summary": "This file defines several REST API endpoints for managing storage devices. It includes endpoints for querying and updating SCM (Storage Class Memory) and NVMe (Non-Volatile Memory Express) firmware. These endpoints are used to manage firmware updates for these devices.", "methods": ["GET", "POST"], "paths": ["/scm/query", "/scm/update", "/nvme/query", "/nvme/update"]}}
{"file": "cloned/daos/src/control/cmd/daos_firmware_helper/handler_test.go", "endpoints": {"api_summary": "This file defines three REST API endpoints for managing firmware updates in a DAOS system. The endpoints are used to query and update the firmware of the Storage Class Memory (SCM) modules and Non-Volatile Memory Express (NVMe) devices. The SCM endpoints are used to query the current firmware status and update the firmware of the SCM modules. The NVMe endpoints are used to update the firmware of the NVMe devices.", "methods": ["GET", "POST"], "paths": ["/daos/firmware/scm/query", "/daos/firmware/scm/update", "/daos/firmware/nvme/update"]}}
{"file": "cloned/daos/src/control/cmd/daos_server_helper/handler.go", "endpoints": {"api_summary": "This file defines a set of REST API endpoints for managing storage devices, including metadata, SCM (Storage Class Memory), and Bdev (Block device) operations. It provides endpoints for mounting, unmounting, formatting, and checking the format of metadata and storage devices. It also provides endpoints for scanning, preparing, and formatting storage devices.", "methods": ["GET", "POST"], "paths": ["/metadata/mount", "/metadata/unmount", "/metadata/format", "/metadata/needs_format", "/scm/mount", "/scm/unmount", "/scm/format", "/scm/check_format", "/scm/scan", "/scm/prepare", "/bdev/scan", "/bdev/prepare", "/bdev/format", "/bdev/write_config", "/bdev/read_config"]}}
{"file": "cloned/daos/src/control/drpc/modules.go", "endpoints": {"api_summary": "This file defines several REST API endpoints for different modules in the DAOS system. The endpoints are used for various tasks such as managing pools, devices, and security. The endpoints are used to interact with the DAOS system and perform operations such as creating, deleting, and updating pools, setting up devices, and validating credentials.", "methods": ["GET", "POST"], "paths": ["/security/agent/request_credentials", "/management/prep_shutdown", "/management/ping_rank", "/management/set_rank", "/management/set_log_masks", "/management/get_attach_info", "/management/pool_create", "/management/pool_destroy", "/management/pool_evict", "/management/pool_exclude", "/management/pool_drain", "/management/pool_reintegrate", "/management/pool_extend", "/management/bio_health_query", "/management/set_up", "/management/smd_list_devs", "/management/smd_list_pools", "/management/pool_get_acl", "/management/pool_overwrite_acl", "/management/pool_update_acl", "/management/pool_delete_acl", "/management/dev_set_faulty", "/management/dev_replace", "/management/list_containers", "/management/pool_query", "/management/pool_query_targets", "/management/pool_set_prop", "/management/cont_set_owner", "/management/group_update", "/management/notify_pool_connect", "/management/notify_pool_disconnect", "/management/notify_exit", "/management/pool_get_prop", "/management/checker_start", "/management/checker_stop", "/management/checker_query", "/management/checker_prop", "/management/checker_action", "/management/pool_upgrade", "/management/led_manage", "/management/setup_client_telemetry", "/server/notify_ready", "/server/cluster_event", "/server/get_pool_service_ranks", "/server/pool_find_bylabel", "/server/list_pools", "/security/validate_credentials"]}}
{"file": "cloned/daos/src/control/lib/daos/pool_test.go", "endpoints": {"api_summary": "This file contains tests for the daos package, which includes functions for querying and managing DAOS pools. It does not define any REST API endpoints.", "methods": [], "paths": []}}
{"file": "cloned/daos/src/control/lib/daos/selftest.go", "endpoints": {"api_summary": "This file defines a set of types and functions for running self-tests on a DAOS system. It includes types for self-test configurations, endpoints, and results, as well as functions for setting defaults, validating configurations, and calculating metrics for endpoint latencies.", "methods": [], "paths": []}}
{"file": "cloned/daos/src/control/lib/daos/api/container_test.go", "endpoints": {"api_summary": "This file contains a set of API tests for the DAOS API. It defines several endpoints for interacting with DAOS containers, including opening, destroying, querying, listing, getting, setting, and deleting container attributes. It also includes tests for handling container connections and DFS attributes.", "methods": ["GET", "POST"], "paths": ["/api/container/open", "/api/container/destroy", "/api/container/query", "/api/container/listAttributes", "/api/container/getAttributes", "/api/container/setAttributes", "/api/container/deleteAttributes"]}}
{"file": "cloned/daos/src/control/lib/daos/api/libdaos_cont_stubs.go", "endpoints": {"api_summary": "This file defines several REST API endpoints for a container management system. The endpoints allow for the creation, deletion, and querying of container information. The endpoints also allow for the setting and getting of container attributes and properties. The endpoints are used to manage the state and configuration of containers in a DAOS system.", "methods": ["GET", "POST", "DELETE"], "paths": ["/container", "/container/<built-in function id>", "/container/<built-in function id>/attributes", "/container/<built-in function id>/properties"]}}
{"file": "cloned/daos/src/control/lib/control/pool_test.go", "endpoints": {"api_summary": "This file defines several REST API endpoints for a DAOS control plane. These endpoints are used to manage and interact with the DAOS system, including creating and managing pools, querying pool information, and performing various administrative tasks.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/pool/create", "/pool/destroy", "/pool/upgrade", "/pool/exclude", "/pool/drain", "/pool/reintegrate", "/pool/evict", "/pool/query", "/pool/set_prop", "/pool/get_prop", "/pool/list"]}}
{"file": "cloned/daos/src/control/lib/control/network.go", "endpoints": {"api_summary": "This file defines two REST API endpoints. The first endpoint is used to scan the network and retrieve information about the host fabric. The second endpoint is used to get attach information for a DAOS cluster.", "methods": ["POST"], "paths": ["/network/scan", "/attach/info"]}}
{"file": "cloned/daos/src/control/lib/control/firmware.go", "endpoints": {"api_summary": "This file defines two REST API endpoints for querying and updating firmware on storage devices. The endpoints are used to retrieve and update firmware information for SCM and NVMe devices respectively.", "methods": ["GET", "POST"], "paths": ["/firmware/query", "/firmware/update"]}}
{"file": "cloned/daos/src/control/lib/control/pool_acl.go", "endpoints": {"api_summary": "This file defines four REST API endpoints for managing access control lists (ACLs) for a pool of data. The endpoints allow for getting, overwriting, updating, and deleting ACL entries for a pool.", "methods": ["GET", "POST", "POST", "POST"], "paths": ["/pool/getACL", "/pool/overwriteACL", "/pool/updateACL", "/pool/deleteACL"]}}
{"file": "cloned/daos/src/control/lib/control/storage.go", "endpoints": {"api_summary": "This file contains a set of functions and structures for managing and configuring storage devices on a DAOS system. It includes functions for scanning, formatting, and managing NVMe and SCM (Solid State Memory) devices. It also includes functions for re-binding and adding devices to the system.", "methods": ["POST"], "paths": ["/storage/scan", "/storage/format", "/storage/nvme/rebind", "/storage/nvme/add-device"]}}
{"file": "cloned/daos/src/control/lib/control/server_meta.go", "endpoints": {"api_summary": "This file defines several REST API endpoints for managing and querying SMD (Storage Management Device) information. It includes endpoints for querying SMD devices and pools, and for managing SMD devices such as setting them as faulty, replacing them, and managing their LED status. The endpoints are used to interact with the SMD devices in a DAOS (Distributed Asynchronous Object Storage) system.", "methods": ["GET", "POST"], "paths": ["/smd/query", "/smd/manage"]}}
{"file": "cloned/daos/src/control/lib/hostlist/hostlist.go", "endpoints": {"api_summary": "This file defines a hostlist package that provides a data structure for managing a list of hosts. It includes methods for creating, manipulating, and querying the list. It also provides functionality for parsing and generating hostnames in a specific format.", "methods": ["GET", "POST"], "paths": ["/hostlist", "/hostlist/<built-in function id>"]}}
{"file": "cloned/daos/src/control/vendor/github.com/desertbit/readline/complete.go", "endpoints": {"api_summary": "This code is part of a readline-like library. It does not define any REST API endpoints explicitly.", "methods": [], "paths": []}}
{"file": "cloned/daos/src/control/vendor/github.com/Jille/raft-grpc-transport/grpcapi.go", "endpoints": {"api_summary": "This file defines a gRPC API for a Raft transport system. It includes endpoints for appending entries, requesting votes, timing out, and installing snapshots. These endpoints are used to manage the state of a Raft cluster.", "methods": ["POST", "GET", "POST", "POST", "POST"], "paths": ["/AppendEntries", "/RequestVote", "/TimeoutNow", "/InstallSnapshot", "/AppendEntriesPipeline"]}}
{"file": "cloned/daos/src/control/vendor/github.com/Jille/raft-grpc-transport/raftapi.go", "endpoints": {"api_summary": "This file defines a REST API for a Raft consensus algorithm, which is a distributed consensus protocol that is designed to be easy to understand. The API includes endpoints for appending entries, requesting votes, and timeout now, as well as an endpoint for installing snapshots. It also supports pipelined append entries for better performance.", "methods": ["GET", "POST"], "paths": ["/appendEntries", "/requestVote", "/timeoutNow", "/installSnapshot"]}}
{"file": "cloned/daos/src/control/vendor/github.com/Jille/raft-grpc-transport/proto/transport_grpc.pb.go", "endpoints": {"api_summary": "This file defines a gRPC service called 'RaftTransport'. It provides several endpoints for managing a Raft cluster. These endpoints include appending entries, requesting votes, and initiating a timeout. They also support installing snapshots.", "methods": ["AppendEntriesPipeline", "AppendEntries", "RequestVote", "TimeoutNow", "InstallSnapshot"], "paths": ["/RaftTransport/AppendEntriesPipeline", "/RaftTransport/AppendEntries", "/RaftTransport/RequestVote", "/RaftTransport/TimeoutNow", "/RaftTransport/InstallSnapshot"]}}
{"file": "cloned/daos/src/control/vendor/github.com/golang/protobuf/proto/text_decode.go", "endpoints": {"api_summary": "This file is part of the Go Protobuf library and it provides functionality for parsing and serializing protocol buffers in text format. It does not define any explicit REST API endpoints.", "methods": [], "paths": []}}
{"file": "cloned/daos/src/control/vendor/github.com/google/go-cmp/cmp/report_slices.go", "endpoints": {"api_summary": "This file contains a set of functions for comparing Go values. It specifically defines functions for comparing slices and strings, which can be used to format differences in slices and strings in a more readable format. It also includes functions for coalescing and cleaning up adjacent identical and unequal edit groups, which can be used to smooth out high-frequency changes within a certain window size.", "methods": [], "paths": []}}
{"file": "cloned/daos/src/control/vendor/github.com/armon/go-metrics/inmem_endpoint.go", "endpoints": {"api_summary": "This file defines a set of REST API endpoints for metrics data. It provides endpoints to display metrics and stream metrics data. The endpoints are used to retrieve metrics data in a summarized format and to stream metrics data in real-time.", "methods": ["GET", "POST"], "paths": ["/DisplayMetrics", "/Stream"]}}
{"file": "cloned/daos/src/control/vendor/github.com/hashicorp/go-immutable-radix/iradix.go", "endpoints": {"api_summary": "This file defines a radix tree data structure and a transactional interface for manipulating it. It provides methods for inserting, deleting, and retrieving data from the tree. It also supports prefix deletion and transactional commits with notifications for mutations.", "methods": ["GET", "POST", "DELETE"], "paths": ["/insert", "/delete", "/deletePrefix", "/get", "/commit"]}}
{"file": "cloned/daos/src/control/vendor/github.com/hashicorp/raft/inmem_transport.go", "endpoints": {"api_summary": "This file defines a set of in-memory transport functions for the Raft consensus algorithm. It provides a way to simulate a network environment for testing purposes. The functions include creating new in-memory addresses, setting up in-memory pipelines for AppendEntries requests, and handling other Raft protocol messages like RequestVote, InstallSnapshot, and TimeoutNow. The transport also supports heartbeat handling and peer connection management.", "methods": ["POST", "GET", "PUT", "DELETE"], "paths": ["/raft/NewInmemAddr", "/raft/NewInmemTransportWithTimeout", "/raft/NewInmemTransport", "/raft/InmemTransport/SetHeartbeatHandler", "/raft/InmemTransport/Consumer", "/raft/InmemTransport/LocalAddr", "/raft/InmemTransport/AppendEntriesPipeline", "/raft/InmemTransport/AppendEntries", "/raft/InmemTransport/RequestVote", "/raft/InmemTransport/InstallSnapshot", "/raft/InmemTransport/TimeoutNow", "/raft/InmemTransport/makeRPC", "/raft/InmemTransport/EncodePeer", "/raft/InmemTransport/DecodePeer", "/raft/InmemTransport/Connect", "/raft/InmemTransport/Disconnect", "/raft/InmemTransport/DisconnectAll", "/raft/InmemTransport/Close", "/raft/newInmemPipeline", "/raft/inmemPipeline/decodeResponses", "/raft/inmemPipeline/AppendEntries", "/raft/inmemPipeline/Consumer", "/raft/inmemPipeline/Close"]}}
{"file": "cloned/daos/src/control/vendor/github.com/hashicorp/raft/net_transport.go", "endpoints": {"api_summary": "This file defines a NetworkTransport struct and its methods for handling REST API requests. It includes methods for AppendEntries, RequestVote, InstallSnapshot, TimeoutNow, and EncodePeer. It also provides a NetworkTransportConfig struct for configuring the network transport layer. The NetworkTransport struct uses a StreamLayer interface for providing a stream abstraction, and a ServerAddressProvider interface for overriding the target address when establishing a connection to invoke an RPC. The NetworkTransport struct also includes methods for setting up and closing streams, handling connections, and pipelining AppendEntries requests.", "methods": ["GET", "POST"], "paths": ["/appendEntries", "/requestVote", "/installSnapshot", "/timeoutNow", "/encodePeer"]}}
{"file": "cloned/daos/src/control/vendor/github.com/hashicorp/raft/replication.go", "endpoints": {"api_summary": "This file defines a Raft consensus algorithm, which is a type of distributed consensus algorithm used for managing a replicated log. It is used in distributed systems to achieve fault tolerance and ensure data consistency. The file also includes a replication mechanism for sending log entries to followers, which is used in the Raft algorithm.", "methods": ["GET", "POST"], "paths": ["/raft", "/raft/<built-in function id>"]}}
{"file": "cloned/daos/src/control/vendor/github.com/prometheus/procfs/mountstats.go", "endpoints": {"api_summary": "This file contains code related to parsing and handling NFS mount statistics. It does not define any REST API endpoints.", "methods": [], "paths": []}}
{"file": "cloned/daos/src/control/vendor/github.com/prometheus/common/expfmt/text_parse.go", "endpoints": {"api_summary": "This file is part of the Prometheus project, which is a system monitoring and alerting toolkit. It includes a parser for the simple and flat text-based exchange format used by Prometheus. This parser is used to convert text-based metrics into the Protocol Buffers format used by Prometheus.", "methods": [], "paths": []}}
{"file": "cloned/daos/src/control/vendor/github.com/prometheus/client_golang/prometheus/histogram.go", "endpoints": {"api_summary": "This file defines a Histogram metric and related functions in the Prometheus library. It provides functionality for creating and managing histograms, which are used to track the distribution of observations in a stream of data. The histograms can be used to calculate quantiles, which can be used to understand the distribution of data. The file also defines a HistogramVec, which is a vector of histograms that share the same descriptor but have different label values. It also provides a way to create a constant histogram, which is useful for creating temporary histograms.", "methods": [], "paths": []}}
{"file": "cloned/daos/src/control/vendor/github.com/prometheus/client_golang/prometheus/doc.go", "endpoints": {"api_summary": "This file is part of the Prometheus client library for Go. It provides a set of tools and interfaces to instrument Go applications for monitoring. It includes a basic HTTP server that serves the metrics collected by the application, and a push gateway to push metrics to a Pushgateway server. It also provides a registry for metrics, and a set of metric types including Gauge, Counter, Summary, and Histogram.", "methods": ["GET", "POST"], "paths": ["/metrics"]}}
{"file": "cloned/daos/src/control/vendor/github.com/prometheus/client_golang/prometheus/counter.go", "endpoints": {"api_summary": "This file defines a set of counter-related functions and structures in the Prometheus library. It includes a Counter interface, a CounterVec struct, and a CounterFunc function. These are used to create and manage counters in Prometheus, which are used to count the number of times a specific event occurs. The CounterVec struct is used to create a vector of counters that can be partitioned by different labels, while the CounterFunc function is used to create a counter whose value is determined at collect time by calling a provided function.", "methods": ["GET", "POST"], "paths": ["/prometheus/counter", "/prometheus/countervec", "/prometheus/counterfunc"]}}
{"file": "cloned/daos/src/control/vendor/github.com/prometheus/client_golang/prometheus/promhttp/delegator.go", "endpoints": {"api_summary": "This code is part of the Prometheus project, which is a monitoring and alerting toolkit. It's a Go library for HTTP server middleware that provides a wrapper around the standard net/http package. It's used to delegate HTTP methods and handle HTTP responses.", "methods": [], "paths": []}}
{"file": "cloned/daos/src/control/vendor/github.com/prometheus/client_golang/prometheus/promhttp/http.go", "endpoints": {"api_summary": "This file defines a set of HTTP handlers for serving Prometheus metrics. It includes functions for creating HTTP handlers for gathering and serving Prometheus metrics, as well as for instrumenting these handlers with metrics about the number of requests and errors. It also includes functions for handling errors and compressing responses.", "methods": ["GET"], "paths": ["/"]}}
{"file": "cloned/daos/src/control/vendor/go.etcd.io/bbolt/bucket.go", "endpoints": {"api_summary": "This file defines a key-value store database system using a B+tree data structure. It provides methods for creating, reading, updating, and deleting key-value pairs, as well as managing nested buckets (sub-buckets). It also includes methods for managing sequences, statistics, and iterating over key-value pairs. However, it does not explicitly define any REST API endpoints.", "methods": [], "paths": []}}
{"file": "cloned/daos/src/control/vendor/golang.org/x/text/transform/transform.go", "endpoints": {"api_summary": "This file contains a set of utility functions and interfaces for transforming bytes in Go. It provides a way to read from and write to io.Reader and io.Writer interfaces, transforming the bytes read or written. It also provides a way to chain multiple transformers together and a way to remove runes from a byte slice based on a given function.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/transform", "/transform/<built-in function id>"]}}
{"file": "cloned/daos/src/control/vendor/golang.org/x/sys/unix/syscall_linux_arm64.go", "endpoints": {"api_summary": "This file contains system calls and other low-level operations in Go programming language.", "methods": [], "paths": []}}
{"file": "cloned/daos/src/control/vendor/golang.org/x/sys/unix/zsysnum_linux_amd64.go", "endpoints": {"api_summary": "This file defines system call numbers for Linux.", "methods": [], "paths": []}}
{"file": "cloned/daos/src/control/vendor/golang.org/x/sys/unix/ztypes_solaris_amd64.go", "endpoints": {"api_summary": "This file contains definitions for various system-level functions and data structures used by the Solaris operating system. It does not define any REST API endpoints.", "methods": [], "paths": []}}
{"file": "cloned/daos/src/control/vendor/golang.org/x/net/trace/trace.go", "endpoints": {"api_summary": "This file defines a tracing system for Go applications. It provides endpoints for viewing active and completed requests, along with latency information. It also provides endpoints for viewing event logs.", "methods": ["GET"], "paths": ["/debug/requests", "/debug/events"]}}
{"file": "cloned/daos/src/control/vendor/golang.org/x/net/http2/client_conn_pool.go", "endpoints": {"api_summary": "This file defines a client connection pool for HTTP/2 connections. It manages a pool of HTTP/2 client connections and provides methods to get a specific HTTP/2 connection to an HTTP/2 server. It also handles the case when a connection is needed but not available, by dialing a new connection. It also handles the case when a connection is presented to us by the net/http package, the GetConn hook has already been called. It also handles the case when a connection for a key doesn't already exist, by making a new connection. It also provides a method to mark a connection as dead.", "methods": ["GET", "POST"], "paths": ["/clientConnPool/GetClientConn", "/clientConnPool/MarkDead"]}}
{"file": "cloned/daos/src/control/vendor/golang.org/x/net/http2/write.go", "endpoints": {"api_summary": "This code is a part of the Go programming language's http2 package. It is a low-level HTTP/2 implementation used by the Go programming language. It is used by the Go's net/http package to handle HTTP/2 requests.", "methods": [], "paths": []}}
{"file": "cloned/daos/src/control/vendor/golang.org/x/net/idna/idna9.0.0.go", "endpoints": {"api_summary": "This file defines a set of functions and types related to Internationalized Domain Names in Go. It includes functions for converting between ASCII and Unicode forms of domain names, as well as a Profile type that defines the configuration of a IDNA mapper. It also includes various options for configuring the Profile and a Profile for common use cases.", "methods": ["GET", "POST"], "paths": ["/idna/toascii", "/idna/tounicode"]}}
{"file": "cloned/daos/src/control/vendor/golang.org/x/net/idna/idna10.0.0.go", "endpoints": {"api_summary": "This file defines several functions for handling Internationalized Domain Names (IDNs) according to the IDNA2008 standard. It includes functions for converting between ASCII and Unicode forms of domain names, as well as a Profile system for customizing the handling of these names. The Profile system allows for different levels of validation and mapping of IDNs, such as for domain name lookup or registration.", "methods": ["GET", "POST"], "paths": ["/idna/toascii", "/idna/tounicode"]}}
{"file": "cloned/daos/src/control/vendor/google.golang.org/grpc/picker_wrapper.go", "endpoints": {"api_summary": "This code is part of the gRPC library in Go. It's a high performance, open-source universal RPC framework. It enables client and server applications to communicate transparently, and makes it easier to build connected systems.", "methods": [], "paths": []}}
{"file": "cloned/daos/src/control/vendor/google.golang.org/grpc/internal/serviceconfig/serviceconfig.go", "endpoints": {"api_summary": "This file is part of the gRPC library in Go programming language. It defines utility functions to parse service config, including balancer configurations and method configurations. It also defines the retry policy for methods.", "methods": [], "paths": []}}
{"file": "cloned/daos/src/control/vendor/google.golang.org/grpc/credentials/credentials.go", "endpoints": {"api_summary": "This file defines the credentials package for gRPC, which is a high performance, open-source universal RPC framework. It provides various credentials support for gRPC library, which encapsulate all the state needed by a client to authenticate with a server and make various assertions. It includes PerRPCCredentials interface, SecurityLevel enum, TransportCredentials interface, Bundle interface, and other related interfaces and structs.", "methods": [], "paths": []}}
{"file": "cloned/daos/src/control/vendor/google.golang.org/protobuf/internal/impl/codec_extension.go", "endpoints": {"api_summary": "This file is part of the Google Protocol Buffers (protobuf) library in Go. It's used for encoding and decoding protobuf messages, which is a binary format for structured data.", "methods": [], "paths": []}}
{"file": "cloned/daos/src/control/vendor/google.golang.org/protobuf/internal/encoding/json/decode.go", "endpoints": {"api_summary": "This file defines a JSON decoder that can parse and validate JSON data. It does not define any REST API endpoints explicitly, but it is used in the context of a larger system that might use it for decoding JSON data.", "methods": [], "paths": []}}
{"file": "cloned/daos/src/control/vendor/google.golang.org/protobuf/types/known/anypb/any.pb.go", "endpoints": {"api_summary": "This file defines the 'Any' message type, which is used to represent an arbitrary serialized protocol buffer message along with a URL that describes the type of the serialized message. It provides functions to pack and unpack these messages, as well as to check the type of the message. This is used in the Google Protocol Buffers library to represent any message type.", "methods": ["GET", "POST"], "paths": ["/google/protobuf/any.proto"]}}
{"file": "cloned/daos/src/control/vendor/google.golang.org/protobuf/encoding/protowire/wire.go", "endpoints": {"api_summary": "This file contains utility functions for parsing and formatting raw wire encoding in Google's Protocol Buffers. It provides functions for encoding and decoding varint, fixed32, fixed64, bytes, and group values. It also includes functions for handling errors and encoding/decoding tags and zig-zag encoding/decoding.", "methods": ["GET", "POST"], "paths": ["/protowire/ConsumeField", "/protowire/ConsumeTag", "/protowire/SizeTag", "/protowire/AppendVarint", "/protowire/ConsumeVarint", "/protowire/SizeVarint", "/protowire/AppendFixed32", "/protowire/ConsumeFixed32", "/protowire/SizeFixed32", "/protowire/AppendFixed64", "/protowire/ConsumeFixed64", "/protowire/SizeFixed64", "/protowire/AppendBytes", "/protowire/ConsumeBytes", "/protowire/SizeBytes", "/protowire/AppendString", "/protowire/ConsumeString", "/protowire/AppendGroup", "/protowire/ConsumeGroup", "/protowire/SizeGroup", "/protowire/DecodeTag", "/protowire/EncodeTag", "/protowire/DecodeZigZag", "/protowire/EncodeZigZag", "/protowire/DecodeBool", "/protowire/EncodeBool"]}}
{"file": "cloned/daos/src/control/vendor/google.golang.org/protobuf/encoding/prototext/decode.go", "endpoints": {"api_summary": "This file contains a set of utility functions for working with Protocol Buffers in text format. It provides functionality for unmarshaling Protocol Buffers from text format and marshaling Protocol Buffers to text format. It also provides functionality for handling unknown fields and errors during unmarshaling.", "methods": ["GET", "POST"], "paths": ["/unmarshal", "/marshal"]}}
{"file": "cloned/daos/src/control/common/proto/mgmt/mgmt_grpc.pb.go", "endpoints": {"api_summary": "This file defines a set of REST API endpoints for a management service. These endpoints are used to manage and interact with a DAOS system. The endpoints include operations for joining the system, managing pools, querying system status, and more. They are used to create, destroy, and manage pools, and to manage system attributes and properties.", "methods": ["GET", "POST"], "paths": ["/mgmt/Join", "/mgmt/ClusterEvent", "/mgmt/LeaderQuery", "/mgmt/PoolCreate", "/mgmt/PoolDestroy", "/mgmt/PoolEvict", "/mgmt/PoolExclude", "/mgmt/PoolDrain", "/mgmt/PoolExtend", "/mgmt/PoolReintegrate", "/mgmt/PoolQuery", "/mgmt/PoolQueryTarget", "/mgmt/PoolSetProp", "/mgmt/PoolGetProp", "/mgmt/PoolGetACL", "/mgmt/PoolOverwriteACL", "/mgmt/PoolUpdateACL", "/mgmt/PoolDeleteACL", "/mgmt/GetAttachInfo", "/mgmt/ListPools", "/mgmt/ListContainers", "/mgmt/ContSetOwner", "/mgmt/SystemQuery", "/mgmt/SystemStop", "/mgmt/SystemStart", "/mgmt/SystemExclude", "/mgmt/SystemDrain", "/mgmt/SystemErase", "/mgmt/SystemCleanup", "/mgmt/SystemCheckEnable", "/mgmt/SystemCheckDisable", "/mgmt/SystemCheckStart", "/mgmt/SystemCheckStop", "/mgmt/SystemCheckQuery", "/mgmt/SystemCheckSetPolicy", "/mgmt/SystemCheckGetPolicy", "/mgmt/SystemCheckRepair", "/mgmt/PoolUpgrade", "/mgmt/SystemSetAttr", "/mgmt/SystemGetAttr", "/mgmt/SystemSetProp", "/mgmt/SystemGetProp", "/mgmt/FaultInjectReport", "/mgmt/FaultInjectPoolFault", "/mgmt/FaultInjectMgmtPoolFault"]}}
{"file": "cloned/daos/src/control/common/proto/mgmt/cont.pb.go", "endpoints": {"api_summary": "This file defines a REST API endpoint for changing the ownership of a container in a DAOS system. The endpoint allows users to change the owner of a container by specifying the system identifier, container identifier, pool identifier, owner user, owner group, and service ranks.", "methods": ["POST"], "paths": ["/mgmt/cont"]}}
{"file": "cloned/daos/src/control/common/proto/ctl/ctl.pb.go", "endpoints": {"api_summary": "This file defines a set of REST API endpoints for managing storage, network, firmware, and server related operations. It includes endpoints for storage scanning, formatting, nvme rebind, nvme device addition, network scanning, firmware querying, firmware updating, smd querying, smd management, setting log masks, preparing shutdown of ranks, stopping ranks, resetting format of ranks, starting ranks, and collecting logs.", "methods": ["GET", "POST"], "paths": ["/ctl/StorageScan", "/ctl/StorageFormat", "/ctl/StorageNvmeRebind", "/ctl/StorageNvmeAddDevice", "/ctl/NetworkScan", "/ctl/FirmwareQuery", "/ctl/FirmwareUpdate", "/ctl/SmdQuery", "/ctl/SmdManage", "/ctl/SetEngineLogMasks", "/ctl/PrepShutdownRanks", "/ctl/StopRanks", "/ctl/ResetFormatRanks", "/ctl/StartRanks", "/ctl/CollectLog"]}}
{"file": "cloned/daos/src/control/common/proto/ctl/storage_nvme.pb.go", "endpoints": {"api_summary": "This file defines three REST API endpoints for managing NVMe controllers. The endpoints are used to scan NVMe devices, retrieve information about them, and format them. The endpoints are used in the context of a storage management system.", "methods": ["GET", "POST"], "paths": ["/scan", "/info", "/format"]}}
{"file": "cloned/daos/src/control/common/proto/ctl/ctl_grpc.pb.go", "endpoints": {"api_summary": "This file defines a set of REST API endpoints for a control service. These endpoints are used to manage and control a DAOS system and its hardware. They include endpoints for storage scanning, formatting, rebind, adding devices, network scanning, firmware querying and updating, SMD querying and managing, setting engine log masks, preparing shutdown, stopping, resetting and starting ranks, and collecting logs.", "methods": ["GET", "POST"], "paths": ["/ctl/StorageScan", "/ctl/StorageFormat", "/ctl/StorageNvmeRebind", "/ctl/StorageNvmeAddDevice", "/ctl/NetworkScan", "/ctl/FirmwareQuery", "/ctl/FirmwareUpdate", "/ctl/SmdQuery", "/ctl/SmdManage", "/ctl/SetEngineLogMasks", "/ctl/PrepShutdownRanks", "/ctl/StopRanks", "/ctl/ResetFormatRanks", "/ctl/StartRanks", "/ctl/CollectLog"]}}
{"file": "cloned/daos/src/client/java/daos-java/src/main/java/io/daos/dfs/DaosUns.java", "endpoints": {"api_summary": "This file defines a REST API for interacting with the DAOS Unified Namespace (DaosUns) service. It provides methods to resolve paths, set and get application information, parse attributes, and get access information. These methods can be used to interact with the DAOS Unified Namespace service.", "methods": ["GET", "POST"], "paths": ["/resolvePath", "/setAppInfo", "/getAppInfo", "/parseAttribute", "/getAccessInfo"]}}
{"file": "cloned/daos/src/vos/storage_estimator/daos_storage_estimator.py", "endpoints": {"api_summary": "The provided Python script is a command-line tool that uses argparse to define subcommands, which are similar to endpoints in a REST API. However, it does not define any HTTP methods or URL paths.", "methods": [], "paths": []}}
{"file": "cloned/liberty-bikes/game-service/src/main/java/org/libertybikes/restclient/PlayerService.java", "endpoints": {"api_summary": "This file defines a REST API for a player service. It provides two endpoints: one for retrieving player information and another for recording game results. The endpoints are used to interact with a player service running on localhost at port 8081.", "methods": ["GET", "POST"], "paths": ["/player/{playerId}", "/rank/{playerId}"]}}
{"file": "cloned/liberty-bikes/game-service/src/main/java/org/libertybikes/game/round/service/GameRoundService.java", "endpoints": {"api_summary": "This file defines a REST API for managing game rounds. It provides endpoints for creating, listing, and retrieving game rounds. It also includes endpoints for getting an available round, requeuing to the next round, and deleting a round.", "methods": ["GET", "POST"], "paths": ["/round", "/round/available", "/round/{roundId}", "/round/{roundId}/requeue"]}}
{"file": "cloned/liberty-bikes/game-service/src/main/java/org/libertybikes/game/round/service/GameRoundWebsocket.java", "endpoints": {"api_summary": "This file defines a WebSocket API for a game round service. It allows clients to interact with the game round service via WebSocket connections. The API includes endpoints for opening, closing, and messaging sessions, as well as for managing game rounds and players.", "methods": ["GET", "POST"], "paths": ["/round/ws/{roundId}"]}}
{"file": "cloned/liberty-bikes/game-service/src/main/java/org/libertybikes/game/round/service/PartyService.java", "endpoints": {"api_summary": "This file defines a REST API for managing parties and their associated rounds. It provides endpoints for creating, listing, and retrieving parties, as well as for describing the configuration of the service. It also includes endpoints for managing queues within parties.", "methods": ["GET", "POST"], "paths": ["/party", "/party/describe", "/party/{partyId}", "/party/{partyId}/round", "/party/{partyId}/queue"]}}
{"file": "cloned/liberty-bikes/auth-service/src/main/java/org/libertybikes/auth/service/AuthTypes.java", "endpoints": {"api_summary": "This API endpoint provides a list of all configured authentication types. It uses the GET method to retrieve the list of authentication types.", "methods": ["GET"], "paths": ["/"]}}
{"file": "cloned/liberty-bikes/auth-service/src/main/java/org/libertybikes/auth/service/AuthApp.java", "endpoints": {"api_summary": "This application is a RESTful web service application. It uses the JAX-RS API for building RESTful web services. The base URI for all the resource URIs provided by this application is '/'.", "methods": ["GET", "POST"], "paths": ["/"]}}
{"file": "cloned/liberty-bikes/auth-service/src/main/java/org/libertybikes/auth/service/google/GoogleAuth.java", "endpoints": {"api_summary": "This file defines a REST API endpoint for Google authentication. It uses the GoogleAuthorizationCodeFlow to authenticate users via Google OAuth2. The endpoint is '/GoogleAuth' and it responds to GET requests. When a GET request is made to this endpoint, it redirects the user to Google for authentication.", "methods": ["GET"], "paths": ["/GoogleAuth"]}}
{"file": "cloned/liberty-bikes/auth-service/src/main/java/org/libertybikes/auth/service/google/GoogleCallback.java", "endpoints": {"api_summary": "This file defines a REST API endpoint for Google authentication. It includes a single endpoint at '/GoogleCallback' that handles GET requests. This endpoint is used to authenticate users with Google. It uses the GoogleAuthorizationCodeFlow to exchange an authorization code for a Google access token. If the authentication is successful, it creates a JWT token and redirects the user to the frontend URL with the JWT token.", "methods": ["GET"], "paths": ["/GoogleCallback"]}}
{"file": "cloned/liberty-bikes/auth-service/src/main/java/org/libertybikes/auth/service/github/GitHubCallback.java", "endpoints": {"api_summary": "This file defines a REST API endpoint for GitHub authentication. It uses the GitHub OAuth API to authenticate users and retrieve their email address. The endpoint is used to authenticate users through GitHub and retrieve their email address. The endpoint is also used to create a JWT token for the authenticated user.", "methods": ["GET"], "paths": ["/GitHubCallback"]}}
{"file": "cloned/liberty-bikes/auth-service/src/main/java/org/libertybikes/auth/service/github/GitHubUserAPI.java", "endpoints": {"api_summary": "This file defines a REST API endpoint for GitHub user data. It provides a GET method to retrieve user emails from GitHub.", "methods": ["GET"], "paths": ["/user/emails"]}}
{"file": "cloned/liberty-bikes/auth-service/src/main/java/org/libertybikes/auth/service/github/GitHubOAuthAPI.java", "endpoints": {"api_summary": "This file defines a REST API endpoint for GitHub OAuth authentication. It provides a single endpoint to retrieve an access token from GitHub using the OAuth protocol.", "methods": ["GET"], "paths": ["/login/oauth/access_token"]}}
{"file": "cloned/liberty-bikes/auth-service/src/main/java/org/libertybikes/auth/service/github/GitHubAuth.java", "endpoints": {"api_summary": "This file defines a REST API endpoint for GitHub authentication. It provides a GET endpoint at '/GitHubAuth' that redirects the user to GitHub's authentication page. The endpoint uses the GitHub OAuth 2.0 protocol to authenticate users.", "methods": ["GET"], "paths": ["/GitHubAuth"]}}
{"file": "cloned/liberty-bikes/auth-service/src/main/java/org/libertybikes/auth/service/twitter/TwitterAuth.java", "endpoints": {"api_summary": "This file defines a REST API endpoint for Twitter authentication. It uses the Twitter4J library to interact with the Twitter API. The endpoint '/TwitterAuth' is a GET endpoint that initiates the Twitter authentication process. The user is redirected to Twitter to authenticate and then redirected back to the callback URL.", "methods": ["GET"], "paths": ["/TwitterAuth"]}}
{"file": "cloned/liberty-bikes/auth-service/src/main/java/org/libertybikes/auth/service/twitter/TwitterCallback.java", "endpoints": {"api_summary": "This file defines a REST API endpoint for Twitter authentication. It uses the Twitter API to authenticate users and returns a JSON Web Token (JWT) for the authenticated user. The endpoint is accessible via a GET request to the '/TwitterCallback' path.", "methods": ["GET"], "paths": ["/TwitterCallback"]}}
{"file": "cloned/liberty-bikes/player-service/src/main/java/org/libertybikes/player/service/PlayerService.java", "endpoints": {"api_summary": "This file defines a REST API for a player service. It provides endpoints for getting all players, creating a new player, getting a player by id, and checking if a player exists based on a JWT token. The API also provides metrics for the number of player logins.", "methods": ["GET", "POST"], "paths": ["/player", "/player/<playerId>", "/player/getJWTInfo"]}}
{"file": "cloned/liberty-bikes/player-service/src/main/java/org/libertybikes/player/service/RankingService.java", "endpoints": {"api_summary": "This service provides a REST API for ranking players in a game. It includes endpoints for initializing players, retrieving the top N players, and recording a game for a specific player. The service also includes a method for calculating rating changes based on game placement.", "methods": ["GET", "POST"], "paths": ["/rank", "/rank/{playerId}"]}}
{"file": "cloned/liberty-bikes/frontend/prebuild/src/app/controls/controls.component.ts", "endpoints": {"api_summary": "This file defines a REST API endpoint for the requeue function. It is used to requeue a player to the next round in a game. The endpoint is accessed via HTTP GET method and the URL path is '/api/game/requeue'. The endpoint requires a 'playerId' parameter in the URL.", "methods": ["GET"], "paths": ["/api/game/requeue"]}}
{"file": "cloned/bmo/extensions/EditComments/web/js/inline-comment-editor.js", "endpoints": {"api_summary": "This file defines a REST API endpoint for editing comments in a bug tracking system. It provides endpoints for fetching, updating, and deleting comments. The endpoints are used to manage the comments in the system.", "methods": ["GET", "PUT"], "paths": ["/editcomments/comment/<built-in function id>"]}}
{"file": "cloned/bmo/extensions/ProdCompSearch/web/js/prod_comp_search.js", "endpoints": {"api_summary": "This file contains two REST API endpoints. The first endpoint is used to search for products and components. The second endpoint is used to retrieve frequently used components.", "methods": ["GET"], "paths": ["/prod_comp_search/find/<query>", "/prod_comp_search/frequent"]}}
{"file": "cloned/bmo/extensions/Review/web/js/moment.min.js", "endpoints": {"api_summary": "This file is a part of the Moment.js library, which is a lightweight JavaScript date library for parsing, validating, manipulating, and formatting dates. It is used for handling dates and times in JavaScript.", "methods": [], "paths": []}}
{"file": "cloned/Cluster.WebCrawler/src/WebCrawler.Web/wwwroot/lib/signalr/signalr.js", "endpoints": {"api_summary": "This file contains a SignalR client implementation for .NET, which is a library for ASP.NET developers to include real-time web functionality in their applications. It provides a simple API for creating server-side remote procedure calls (RPC) without resorting to Ajax requests.", "methods": ["GET", "POST"], "paths": ["/signalr/negotiate"]}}
{"file": "cloned/subscan-essentials/docs/api/docs.go", "endpoints": {"api_summary": "This API provides endpoints for interacting with the blockchain. It includes endpoints for querying blocks, transactions, events, logs, tokens, metadata, and runtime information. It also provides endpoints for interacting with the EVM (Ethereum Virtual Machine) related data such as accounts, contracts, tokens, and transactions. It also provides endpoints for scanning the chain for extrinsics and events.", "methods": ["POST"], "paths": ["/api/plugin/balance/account", "/api/plugin/balance/accounts", "/api/plugin/balance/transfer", "/api/plugin/evm/account/tokens", "/api/plugin/evm/accounts", "/api/plugin/evm/block", "/api/plugin/evm/blocks", "/api/plugin/evm/contract", "/api/plugin/evm/contract/solcs", "/api/plugin/evm/contracts", "/api/plugin/evm/token/erc721/collectibles", "/api/plugin/evm/token/holder", "/api/plugin/evm/token/transfer", "/api/plugin/evm/tokens", "/api/plugin/evm/transaction", "/api/plugin/evm/transactions", "/api/scan/block", "/api/scan/blocks", "/api/scan/event", "/api/scan/events", "/api/scan/evm/contract/solcs", "/api/scan/extrinsic", "/api/scan/extrinsics", "/api/scan/logs", "/api/scan/metadata", "/api/scan/runtime/list", "/api/scan/runtime/metadata", "/api/scan/token"]}}
{"file": "cloned/subscan-essentials/internal/server/http/scan.go", "endpoints": {"api_summary": "This file defines several REST API endpoints for interacting with a blockchain network. It includes endpoints for fetching metadata, tokens, blocks, extrinsics, events, logs, and runtime information. These endpoints can be used to fetch detailed information about the blockchain network, including its current state, transactions, events, and more.", "methods": ["GET", "POST"], "paths": ["/api/scan/metadata", "/api/scan/token", "/api/scan/blocks", "/api/scan/block", "/api/scan/extrinsics", "/api/scan/extrinsic", "/api/scan/events", "/api/scan/event", "/api/scan/logs", "/api/scan/check_hash", "/api/scan/runtime/list", "/api/scan/runtime/metadata"]}}
{"file": "cloned/subscan-essentials/internal/server/http/http.go", "endpoints": {"api_summary": "This file defines a REST API server using the Gin framework. The API provides several endpoints for interacting with the system, including endpoints for metadata, token, blocks, block, extrinsics, extrinsic, events, event, logs, check_hash, runtime/metadata, runtime/list, and plugin endpoints. These endpoints are used to perform various operations such as fetching metadata, scanning blocks, extrinsics, events, logs, checking hash, fetching runtime metadata, listing runtimes, and executing plugin operations.", "methods": ["GET", "POST"], "paths": ["/ping", "/api/now", "/api/scan/metadata", "/api/scan/token", "/api/scan/blocks", "/api/scan/block", "/api/scan/extrinsics", "/api/scan/extrinsic", "/api/scan/events", "/api/scan/event", "/api/scan/logs", "/api/scan/check_hash", "/api/scan/runtime/metadata", "/api/scan/runtime/list", "/api/plugin/{plugin_name}/{endpoint}"]}}
{"file": "cloned/subscan-essentials/internal/service/api.go", "endpoints": {"api_summary": "This file defines a set of REST API endpoints for a service that interacts with a blockchain. It includes endpoints for various operations such as pinging the service, fetching metadata, fetching blocks, fetching extrinsics, fetching events, and fetching logs. It also includes endpoints for fetching runtime information and other related operations.", "methods": ["GET", "POST"], "paths": ["/ping", "/metadata", "/blocks/sample", "/blocks/<built-in function id>", "/blocks/hash/<built-in function id>", "/blocks/finalized", "/extrinsics", "/extrinsics/index/<built-in function id>", "/extrinsics/hash/<built-in function id>", "/events", "/events/<built-in function id>", "/events/hash/<built-in function id>", "/logs/<built-in function id>", "/runtime", "/runtime/<built-in function id>"]}}
{"file": "cloned/subscan-essentials/internal/service/substrate.go", "endpoints": {"api_summary": "This file defines a service that interacts with a blockchain network. It provides endpoints for fetching block data, updating chain metadata, and subscribing to new finalized blocks. It also includes a parser for handling messages from the blockchain network.", "methods": ["POST", "GET"], "paths": ["/service/subscribeFetchBlock", "/service/FillBlockData"]}}
{"file": "cloned/subscan-essentials/plugins/evm/dao/api.go", "endpoints": {"api_summary": "This file defines a set of REST API endpoints for interacting with a blockchain data service. It provides endpoints for fetching logs, accounts, transactions, token events, contract source code, contract creation, and other blockchain related data. It also provides endpoints for fetching blocks, transactions, accounts, and contracts.", "methods": ["GET", "POST"], "paths": ["/api/getLogs", "/api/getAccounts", "/api/transactions", "/api/tokenEventRes", "/api/contractSourceCode", "/api/getContractCreation", "/api/contractsByAddr", "/api/getTransactionByHash", "/api/blocks", "/api/blockByNum", "/api/blockByHash", "/api/transactionsJson", "/api/accounts", "/api/contracts", "/api/accountTokens", "/api/collectibles", "/api/tokenList", "/api/tokenTransfers", "/api/tokenHolders"]}}
{"file": "cloned/subscan-essentials/plugins/evm/feature/erc1155/erc1155.go", "endpoints": {"api_summary": "This file defines a set of REST API endpoints for interacting with an ERC1155 token contract. It includes methods for getting the name, symbol, decimals, total supply, balance of an account, whether the contract supports a specific interface, the URI of a token, the balance of an account with a specific token ID, and the balance of multiple accounts with multiple token IDs. These endpoints can be used to interact with the ERC1155 token contract programmatically.", "methods": ["GET", "POST"], "paths": ["/erc1155/name", "/erc1155/symbol", "/erc1155/decimals", "/erc1155/totalSupply", "/erc1155/balanceOf", "/erc1155/supportsInterface", "/erc1155/uri", "/erc1155/balanceOfWithTokenId", "/erc1155/balanceOfBatch"]}}
{"file": "cloned/subscan-essentials/plugins/evm/http/etherscan.go", "endpoints": {"api_summary": "This file defines a set of REST API endpoints for interacting with an Ethereum blockchain. It includes endpoints for fetching logs, transactions, account balances, and contract information. The endpoints are categorized by module (logs, transaction, account, contract) and action (getLogs, getstatus, gettxreceiptstatus, balance, balancemulti, txlist, txlistinternal, tokentx, token1155tx, tokennfttx, getabi, getsourcecode, getcontractcreation, verifysourcecode, checkverifystatus).", "methods": ["GET", "POST"], "paths": ["/logs/getLogs", "/transaction/getstatus", "/transaction/gettxreceiptstatus", "/account/balance", "/account/balancemulti", "/account/txlist", "/account/txlistinternal", "/account/tokentx", "/account/tokennfttx", "/account/token1155tx", "/contract/getabi", "/contract/getsourcecode", "/contract/getcontractcreation", "/contract/verifysourcecode", "/contract/checkverifystatus"]}}
{"file": "cloned/subscan-essentials/plugins/evm/http/http.go", "endpoints": {"api_summary": "This file defines a set of REST API endpoints for interacting with the EVM (Ethereum Virtual Machine) plugin. It includes endpoints for blocks, transactions, accounts, contracts, tokens, and token transfers. It also includes endpoints for getting Solidity compiler versions.", "methods": ["GET", "POST"], "paths": ["/api/plugin/evm/etherscan", "/api/plugin/evm/blocks", "/api/plugin/evm/block", "/api/plugin/evm/transactions", "/api/plugin/evm/transaction", "/api/plugin/evm/accounts", "/api/plugin/evm/contract", "/api/plugin/evm/contracts", "/api/plugin/evm/contract/solcs", "/api/plugin/evm/contract/resolcs", "/api/plugin/evm/token/holder", "/api/plugin/evm/tokens", "/api/plugin/evm/token/transfer", "/api/plugin/evm/token/erc721/collectibles", "/api/plugin/evm/account/tokens"]}}
{"file": "cloned/subscan-essentials/plugins/balance/http/http.go", "endpoints": {"api_summary": "This file defines three REST API endpoints for managing accounts and transfers. The endpoints are used to retrieve account details, list accounts, and list transfers. The endpoints are accessible via HTTP POST methods.", "methods": ["POST"], "paths": ["/api/plugin/balance/accounts", "/api/plugin/balance/account", "/api/plugin/balance/transfer"]}}
{"file": "cloned/subscan-essentials/pkg/go-web3/dto/transaction.go", "endpoints": {"api_summary": "This file contains the definition of various transaction-related data structures and functions. It includes structures for transaction parameters, transaction responses, transaction receipts, transaction logs, and signed transaction parameters. It also includes methods to transform transaction parameters and unmarshal JSON data into these structures.", "methods": [], "paths": []}}
{"file": "cloned/subscan-essentials/pkg/go-web3/eth/eth.go", "endpoints": {"api_summary": "This file defines a set of methods for interacting with the Ethereum blockchain. It includes methods for sending transactions, getting account balances, and more. It also includes methods for interacting with smart contracts.", "methods": ["GET", "POST"], "paths": ["/eth/GetProtocolVersion", "/eth/IsSyncing", "/eth/GetCoinbase", "/eth/IsMining", "/eth/GetHashRate", "/eth/GetGasPrice", "/eth/ListAccounts", "/eth/GetBlockNumber", "/eth/GetBalance", "/eth/DebugTraceTransaction", "/eth/GetTransactionCount", "/eth/GetStorageAt", "/eth/EstimateGas", "/eth/GetTransactionByHash", "/eth/GetTransactionByBlockHashAndIndex", "/eth/GetTransactionByBlockNumberAndIndex", "/eth/SendTransaction", "/eth/SignTransaction", "/eth/Call", "/eth/CompileSolidity", "/eth/GetTransactionReceipt", "/eth/GetBlockByNumber", "/eth/GetBlockTransactionCountByHash", "/eth/GetBlockTransactionCountByNumber", "/eth/GetBlockByHash", "/eth/GetUncleCountByBlockHash", "/eth/GetUncleCountByBlockNumber", "/eth/GetCode", "/eth/MaxPriorityFeePerGas", "/eth/GetChainId"]}}
{"file": "cloned/subscan-essentials/pkg/go-web3/net/net.go", "endpoints": {"api_summary": "This file defines three REST API endpoints for interacting with the Ethereum network. The endpoints allow you to check if the client is actively listening for network connections, get the number of peers currently connected to the client, and get the current network id.", "methods": ["GET"], "paths": ["/net/listening", "/net/peerCount", "/net/version"]}}
{"file": "cloned/subscan-essentials/pkg/go-web3/personal/personal.go", "endpoints": {"api_summary": "This file defines a REST API for interacting with a personal account. It allows users to list, create, send transactions, and unlock their accounts. These endpoints are used to manage the personal accounts of the user.", "methods": ["GET", "POST"], "paths": ["/personal/listAccounts", "/personal/newAccount", "/personal/sendTransaction", "/personal/unlockAccount"]}}
{"file": "cloned/micronaut-microservices-poc/policy-search-service/src/main/java/pl/altkom/asc/lab/micronaut/poc/policy/search/infrastructure/adapters/web/PolicySearchController.java", "endpoints": {"api_summary": "This file defines a REST API endpoint for searching policies. It uses the HTTP GET method to retrieve policy information. The URL path for this endpoint is '/policies'.", "methods": ["GET"], "paths": ["/policies"]}}
{"file": "cloned/micronaut-microservices-poc/policy-search-service/src/test/java/pl/altkom/asc/lab/micronaut/poc/PolicySearchTestClient.java", "endpoints": {"api_summary": "This file defines a REST API client for the policy search service. It provides a single endpoint to search for policies based on a given query text.", "methods": ["GET"], "paths": ["/policy-search-service/policies"]}}
{"file": "cloned/micronaut-microservices-poc/product-service/src/main/java/pl/altkom/asc/lab/micronaut/poc/product/service/infrastructure/adapters/web/ProductsController.java", "endpoints": {"api_summary": "This file defines a REST API controller for products. It provides two endpoints: one to get all products and another to get a specific product by its code. The products are managed by the Products domain object.", "methods": ["GET"], "paths": ["/products", "/products/{productCode}"]}}
{"file": "cloned/micronaut-microservices-poc/web-vue/src/router.js", "endpoints": {"api_summary": "This file defines the routes for a Vue.js application. It includes endpoints for the home page, chat, chatbot, account, products, dashboard, product details, policy creation from offer, policies, and policy details. These endpoints can be used to navigate through different sections of the application.", "methods": ["GET"], "paths": ["/", "/chat", "/chatbot", "/account", "/products", "/dashboard", "/products/:productCode", "/policy/fromOffer/:offerNumber", "/policies", "/policies/:policyNumber"]}}
{"file": "cloned/micronaut-microservices-poc/pricing-service/src/main/java/pl/altkom/asc/lab/micronaut/poc/pricing/intrastructure/adapters/web/PricingController.java", "endpoints": {"api_summary": "The PricingController provides a RESTful API for the pricing service. It allows users to calculate the price of a product. The API uses the HTTP GET method to calculate the price of a product.", "methods": ["GET"], "paths": ["/pricing/calculatePrice"]}}
{"file": "cloned/micronaut-microservices-poc/pricing-service/src/test/java/pl/altkom/asc/lab/micronaut/poc/pricing/PricingTestClient.java", "endpoints": {"api_summary": "The PricingTestClient is a REST API client that interacts with the pricing service. It provides a POST method to calculate the price of a product. The method takes in a CalculatePriceCommand object and returns a CalculatePriceResult object.", "methods": ["POST"], "paths": ["/pricing-service/pricing/calculate"]}}
{"file": "cloned/micronaut-microservices-poc/pricing-service-api/src/main/java/pl/altkom/asc/lab/micronaut/poc/pricing/service/api/v1/PricingOperations.java", "endpoints": {"api_summary": "The PricingOperations interface provides a single endpoint for calculating the price of a product. This endpoint accepts a POST request with a JSON body containing the necessary data to calculate the price.", "methods": ["POST"], "paths": ["/calculate"]}}
{"file": "cloned/micronaut-microservices-poc/policy-service-api/src/main/java/pl/altkom/asc/lab/micronaut/poc/policy/service/api/v1/OfferOperations.java", "endpoints": {"api_summary": "This file defines a REST API endpoint for creating an offer. It uses the POST method to create a new offer. The path for this endpoint is '/'.", "methods": ["POST"], "paths": ["/"]}}
{"file": "cloned/micronaut-microservices-poc/policy-service-api/src/main/java/pl/altkom/asc/lab/micronaut/poc/policy/service/api/v1/PolicyOperations.java", "endpoints": {"api_summary": "This file defines a REST API for managing policies. It provides endpoints for getting policy details, creating new policies, and terminating existing policies. These endpoints are used to interact with the policy service.", "methods": ["GET", "POST"], "paths": ["/{policyNumber}", "/", "/terminate"]}}
{"file": "cloned/micronaut-microservices-poc/dashboard-service-api/src/main/java/pl/altkom/asc/lab/micronaut/poc/dashboard/service/api/v1/DashboardOperations.java", "endpoints": {"api_summary": "This file defines three REST API endpoints for a dashboard service. The first endpoint, '/totalsales', is used to query the total sales of the service. The second endpoint, '/trends', is used to query the sales trends of the service. The last endpoint, '/agentssales', is used to query the sales of agents in the service.", "methods": ["POST"], "paths": ["/totalsales", "/trends", "/agentssales"]}}
{"file": "cloned/micronaut-microservices-poc/dashboard-service/src/main/java/pl/altkom/asc/lab/micronaut/poc/dashboard/infrastructure/adapters/elastic/ElasticHealthCheck.java", "endpoints": {"api_summary": "This file defines a REST API endpoint for checking the health of an Elasticsearch instance. The endpoint is defined using the Micronaut framework, specifically the @Client and @Get annotations. The endpoint is a GET request to the '/health' path.", "methods": ["GET"], "paths": ["/health"]}}
{"file": "cloned/micronaut-microservices-poc/dashboard-service/src/main/java/pl/altkom/asc/lab/micronaut/poc/dashboard/infrastructure/adapters/web/DashboardController.java", "endpoints": {"api_summary": "This file defines a REST API controller for a dashboard service. It provides three endpoints to query total sales, sales trends, and agent sales. These endpoints are used to retrieve data related to the dashboard service.", "methods": ["GET"], "paths": ["/dashboard/queryTotalSales", "/dashboard/querySalesTrends", "/dashboard/queryAgentsSales"]}}
{"file": "cloned/micronaut-microservices-poc/policy-service/src/main/java/pl/altkom/asc/lab/micronaut/poc/policy/infrastructure/adapters/restclient/PricingClient.java", "endpoints": {"api_summary": "The PricingClient is a REST client that interacts with the pricing service. It provides a method to calculate the price of a product.", "methods": ["POST"], "paths": ["/pricing/calculate"]}}
{"file": "cloned/micronaut-microservices-poc/policy-service/src/main/java/pl/altkom/asc/lab/micronaut/poc/policy/infrastructure/adapters/web/PolicyController.java", "endpoints": {"api_summary": "This file defines a REST API for managing policies. It provides endpoints for getting policy details, creating new policies, and terminating existing policies. These endpoints are accessible via HTTP methods such as GET and POST.", "methods": ["GET", "POST"], "paths": ["/policies", "/policies/create", "/policies/terminate"]}}
{"file": "cloned/micronaut-microservices-poc/policy-service/src/main/java/pl/altkom/asc/lab/micronaut/poc/policy/infrastructure/adapters/web/OfferController.java", "endpoints": {"api_summary": "This file defines a REST API endpoint for managing offers. It provides a POST endpoint to create a new offer.", "methods": ["POST"], "paths": ["/offers"]}}
{"file": "cloned/micronaut-microservices-poc/policy-service/src/main/java/pl/altkom/asc/lab/micronaut/poc/policy/infrastructure/adapters/web/HelloController.java", "endpoints": {"api_summary": "This file defines a REST API controller for a simple greeting service. The API has two endpoints, one for a simple greeting and another for checking the version of the service.", "methods": ["GET"], "paths": ["/hello", "/hello/version"]}}
{"file": "cloned/micronaut-microservices-poc/policy-service/src/test/java/pl/altkom/asc/lab/micronaut/poc/policy/HelloTestClient.java", "endpoints": {"api_summary": "The 'HelloTestClient' interface defines two REST API endpoints. The first endpoint is a simple GET request to the root path '/hello', which returns the HTTP status of the request. The second endpoint is a GET request to '/hello/version', which returns a 'Health' object.", "methods": ["GET"], "paths": ["/hello", "/hello/version"]}}
{"file": "cloned/micronaut-microservices-poc/policy-service/src/test/java/pl/altkom/asc/lab/micronaut/poc/policy/PolicyTestClient.java", "endpoints": {"api_summary": "This file defines a REST API client for the policy service. It provides endpoints to get, create, and terminate policies.", "methods": ["GET", "POST"], "paths": ["/policies/{policyNumber}", "/policies/", "/policies/terminate"]}}
{"file": "cloned/micronaut-microservices-poc/product-service-api/src/main/java/pl/altkom/asc/lab/micronaut/poc/product/service/api/v1/ProductOperations.java", "endpoints": {"api_summary": "This file defines two REST API endpoints for a product service. The first endpoint, '/', provides a list of all products. The second endpoint, '/{productCode}', provides a specific product based on its product code.", "methods": ["GET"], "paths": ["/", "/{productCode}"]}}
{"file": "cloned/micronaut-microservices-poc/policy-search-service-api/src/main/java/pl/altkom/asc/lab/micronaut/poc/policy/search/service/api/v1/PolicySearchOperations.java", "endpoints": {"api_summary": "This file defines a REST API endpoint for searching policies. It uses the GET method to retrieve policy data based on a query text. The URL path for this endpoint is '/policies'.", "methods": ["GET"], "paths": ["/policies"]}}
{"file": "cloned/micronaut-microservices-poc/payment-service/src/main/java/pl/altkom/asc/lab/micronaut/poc/payment/infrastructure/adapters/web/PaymentController.java", "endpoints": {"api_summary": "This file defines a REST API controller for managing policy accounts. It provides two endpoints: one to retrieve all policy accounts and another to retrieve the balance of a specific policy account.", "methods": ["GET"], "paths": ["/payment/accounts", "/payment/accountBalance/{accountNumber}"]}}
{"file": "cloned/micronaut-microservices-poc/payment-service-api/src/main/java/pl/altkom/asc/lab/micronaut/poc/payment/service/api/v1/operations/PaymentOperations.java", "endpoints": {"api_summary": "This file defines two REST API endpoints for a payment service. The first endpoint, '/accounts', returns a collection of policy account details. The second endpoint, '/accounts/{accountNumber}', returns the balance of a specific policy account.", "methods": ["GET"], "paths": ["/accounts", "/accounts/{accountNumber}"]}}
{"file": "cloned/micronaut-microservices-poc/agent-portal-gateway/src/main/java/pl/altkom/asc/lab/micronaut/poc/gateway/DashboardGatewayController.java", "endpoints": {"api_summary": "This file defines a REST API gateway for the dashboard service. It provides three endpoints for querying total sales, sales trends, and agent sales. These endpoints are secured and require authentication.", "methods": ["POST"], "paths": ["/api/dashboard/totalsales", "/api/dashboard/trends", "/api/dashboard/agentssales"]}}
{"file": "cloned/micronaut-microservices-poc/agent-portal-gateway/src/main/java/pl/altkom/asc/lab/micronaut/poc/gateway/PaymentGatewayController.java", "endpoints": {"api_summary": "This file defines a REST API endpoint for a payment gateway. It provides a GET endpoint to retrieve a collection of policy accounts.", "methods": ["GET"], "paths": ["/api/payments/accounts"]}}
{"file": "cloned/micronaut-microservices-poc/agent-portal-gateway/src/main/java/pl/altkom/asc/lab/micronaut/poc/gateway/OfferGatewayController.java", "endpoints": {"api_summary": "This file defines a REST API endpoint for creating offers. It uses the POST method to create a new offer. The endpoint is secured with the IS_AUTHENTICATED security rule.", "methods": ["POST"], "paths": ["/api/offers"]}}
{"file": "cloned/micronaut-microservices-poc/agent-portal-gateway/src/main/java/pl/altkom/asc/lab/micronaut/poc/gateway/ProductGatewayController.java", "endpoints": {"api_summary": "This file defines a REST API for managing products. It provides two endpoints: one to get all products and another to get a specific product by its code. The API is secured and requires authentication.", "methods": ["GET"], "paths": ["/api/products", "/api/products/{productCode}"]}}
{"file": "cloned/micronaut-microservices-poc/agent-portal-gateway/src/main/java/pl/altkom/asc/lab/micronaut/poc/gateway/DocumentsGatewayController.java", "endpoints": {"api_summary": "This API provides an interface to interact with documents. It allows users to retrieve documents by their policy number.", "methods": ["GET"], "paths": ["/api/documents/{policyNumber}"]}}
{"file": "cloned/micronaut-microservices-poc/agent-portal-gateway/src/main/java/pl/altkom/asc/lab/micronaut/poc/gateway/PolicyGatewayController.java", "endpoints": {"api_summary": "This file defines a REST API gateway for managing policies. It allows users to search for policies, get details of a specific policy, create a new policy, and terminate an existing policy. The API uses HTTP methods to perform these operations.", "methods": ["GET", "POST"], "paths": ["/api/policies", "/api/policies/{policyNumber}", "/api/policies/create", "/api/policies/terminate"]}}
{"file": "cloned/micronaut-microservices-poc/agent-portal-gateway/src/main/java/pl/altkom/asc/lab/micronaut/poc/gateway/client/v1/PolicySearchGatewayClient.java", "endpoints": {"api_summary": "The PolicySearchGatewayClient is a REST API client that interacts with the policy-search-service. It provides endpoints for searching policies. The client uses the HTTP GET method to retrieve policies and uses a retry mechanism to handle temporary failures.", "methods": ["GET"], "paths": ["/policies"]}}
{"file": "cloned/micronaut-microservices-poc/agent-portal-gateway/src/main/java/pl/altkom/asc/lab/micronaut/poc/gateway/client/v1/ProductGatewayClient.java", "endpoints": {"api_summary": "This file defines a REST API client for the product service. It uses the Micronaut framework to create a client that interacts with the product service. The client is configured to retry failed requests twice with a delay of 2 seconds.", "methods": ["GET"], "paths": ["/products"]}}
{"file": "cloned/micronaut-microservices-poc/agent-portal-gateway/src/main/java/pl/altkom/asc/lab/micronaut/poc/gateway/client/v1/DocumentsGatewayClient.java", "endpoints": {"api_summary": "The DocumentsGatewayClient is a REST API client that interacts with the documents-service. It provides a method to find documents using a policy number.", "methods": ["GET"], "paths": ["/documents/find"]}}
{"file": "cloned/micronaut-microservices-poc/agent-portal-gateway/src/main/java/pl/altkom/asc/lab/micronaut/poc/gateway/client/v1/PaymentGatewayClient.java", "endpoints": {"api_summary": "The PaymentGatewayClient is a REST API client that interacts with the payment-service. It provides endpoints for interacting with the payment service, such as creating, retrieving, updating, and deleting payments. The client uses the HTTP GET, POST, PUT, and DELETE methods to interact with the service.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/payment"]}}
{"file": "cloned/micronaut-microservices-poc/agent-portal-gateway/src/main/java/pl/altkom/asc/lab/micronaut/poc/gateway/client/v1/PolicyGatewayClient.java", "endpoints": {"api_summary": "This file defines a REST API client for the Policy Service. It provides endpoints for creating offers, getting policy details, creating policies, and terminating policies. The client uses the Micronaut HTTP client framework and includes retry logic for failed requests.", "methods": ["GET", "POST"], "paths": ["/offers", "/policies/{policyNumber}", "/policies", "/policies/terminate"]}}
{"file": "cloned/micronaut-microservices-poc/agent-portal-gateway/src/main/java/pl/altkom/asc/lab/micronaut/poc/gateway/client/v1/DashboardGatewayClient.java", "endpoints": {"api_summary": "This file defines a REST API client for the dashboard service. It provides three endpoints for querying total sales, sales trends, and agent sales. The client uses the Micronaut HTTP client framework and includes retry logic for failed requests.", "methods": ["POST"], "paths": ["/dashboard/totalsales", "/dashboard/trends", "/dashboard/agentssales"]}}
{"file": "cloned/opg-use-an-lpa/service-admin/internal/server/server.go", "endpoints": {"api_summary": "This file defines several REST API endpoints for a service admin application. The endpoints include a hello world endpoint, a logout endpoint, a search endpoint, a stats endpoint, a system message endpoint, and a static handler endpoint. The endpoints are protected by authorization middleware and use error handling, JSON logging, and template middleware. The endpoints are used to manage the service admin application, including user authentication, search functionality, statistics display, system message handling, and static file serving.", "methods": ["GET", "POST"], "paths": ["/helloworld", "/logout", "/", "/stats", "/system-message", "/"]}}
{"file": "cloned/opg-use-an-lpa/service-admin/internal/server/handlers/systemmessage.go", "endpoints": {"api_summary": "This file defines a REST API endpoint for system messages. It allows for the retrieval and updating of system messages. The API supports both GET and POST methods. The GET method retrieves the current system messages, while the POST method allows for the updating of these messages. The messages are stored in a map with keys as the path and values as the message.", "methods": ["GET", "POST"], "paths": ["/system-message"]}}
{"file": "cloned/opg-use-an-lpa/service-admin/internal/server/handlers/search.go", "endpoints": {"api_summary": "This file defines a REST API for searching LPA records. It provides endpoints for searching by email, activation code, and LPA number. The API allows users to search for LPA records using these identifiers and retrieve detailed information about the LPA records.", "methods": ["POST"], "paths": ["/search"]}}
{"file": "cloned/zksync/core/tests/ts-tests/tests/api.ts", "endpoints": {"api_summary": "This file contains a set of functions that interact with a REST API. The API endpoints are used to fetch and validate data from a server. The endpoints include status, withdrawal processing time, transaction history, block details, blocks, block transactions, testnet configuration, and transaction details. The fetched data is validated against expected types.", "methods": ["GET"], "paths": ["/api/v0.1/status", "/api/v0.1/withdrawal_processing_time", "/api/v0.1/account/<address>/history/<offset>/<limit>", "/api/v0.1/blocks/<blockNumber>", "/api/v0.1/blocks", "/api/v0.1/blocks/<blockNumber>/transactions", "/api/v0.1/testnet_config", "/api/v0.1/transactions_all/<txHash>"]}}
{"file": "cloned/zksync/core/tests/ts-tests/tests/tester/create2.ts", "endpoints": {"api_summary": "This file defines a set of REST API endpoints for testing the zksync wallet functionality. It includes endpoints for creating and transferring tokens using the CREATE2 method, as well as for testing the failure of these operations.", "methods": ["GET", "POST"], "paths": ["/testCreate2CPKandTransfer", "/testCreate2TxFail", "/testCreate2SignedBatchFail", "/testCreate2BatchFail"]}}
{"file": "cloned/zksync/core/tests/ts-tests/tests/tester/forced-exit-requests.ts", "endpoints": {"api_summary": "This file defines a set of REST API endpoints for interacting with a zkSync network. It includes endpoints for getting the status of forced exit requests, submitting forced exit requests, and getting the full on-chain balance of a user's account.", "methods": ["GET", "POST"], "paths": ["/api/forced_exit_requests/v0.1/status", "/api/forced_exit_requests/v0.1/submit"]}}
{"file": "cloned/zksync/core/tests/ts-tests/tests/tester/batch-builder.ts", "endpoints": {"api_summary": "This file contains a set of tests for a Wallet class, which is used to interact with a blockchain network. The tests cover various scenarios such as changing the public key, withdrawing funds, transferring funds, and more. The tests are designed to be run in a batch, which allows for multiple transactions to be executed in a single transaction on the blockchain.", "methods": ["POST"], "paths": ["/testBatchBuilderInvalidUsage", "/testBatchBuilderChangePubKey", "/testBatchBuilderSignedChangePubKey", "/testBatchBuilderTransfers", "/testBatchBuilderTransfersWithoutSignatures", "/testBatchBuilderPayInDifferentToken", "/testBatchBuilderGenericUsage", "/testBatchBuilderNFT"]}}
{"file": "cloned/zksync/core/tests/ts-tests/tests/suits/basic.ts", "endpoints": {"api_summary": "This file is a test suite for a zkSync integration. It tests the functionality of the system by executing various transactions and operations. It covers both HTTP and REST APIs and ETH and ERC20 tokens.", "methods": [], "paths": []}}
{"file": "cloned/zksync/sdk/zksync.js/src/provider.ts", "endpoints": {"api_summary": "This file defines a REST API for interacting with the zkSync network. It provides methods for submitting transactions, getting transaction status, getting account state, and more. It also provides endpoints for interacting with the Ethereum Proxy, which is used to interact with the Ethereum network.", "methods": ["GET", "POST"], "paths": ["/account_info", "/tx_submit", "/submit_txs_batch", "/contract_address", "/tokens", "/tx_info", "/ethop_info", "/get_confirmations_for_eth_op_amount", "/get_eth_tx_for_withdrawal", "/get_nft", "/get_nft_owner", "/ethop_subscribe", "/tx_subscribe", "/get_tx_fee", "/get_txs_batch_fee_in_wei", "/get_token_price", "/toggle_2fa", "/get_nft_id_by_tx_hash"]}}
{"file": "cloned/zksync/sdk/zksync.js/src/remote-wallet.ts", "endpoints": {"api_summary": "This file defines a RemoteWallet class that interacts with a zkSync network. It provides methods for various operations such as transferring funds, changing public keys, withdrawing funds, and more. It also includes methods for signing transactions and orders.", "methods": ["POST"], "paths": ["/zkSync_signBatch", "/zkSync_signerPubKeyHash"]}}
{"file": "cloned/zksync/sdk/zksync.js/src/rest-provider.ts", "endpoints": {"api_summary": "This file defines a REST API provider for interacting with the zkSync network. It provides endpoints for various operations such as account information, transaction submission, and network status. It also includes methods for getting transaction fees, token information, and more.", "methods": ["GET", "POST"], "paths": ["/accounts/{idOrAddress}/{infoType}", "/accounts/{idOrAddress}", "/transactions/toggle2FA", "/accounts/{idOrAddress}/transactions", "/accounts/{idOrAddress}/transactions/pending", "/blocks", "/blocks/{blockPosition}", "/blocks/{blockPosition}/transactions", "/config", "/fee", "/fee/batch", "/networkStatus", "/tokens", "/tokens/{tokenLike}", "/tokens/{tokenLike}/priceIn/{tokenIdOrUsd}", "/transactions", "/transactions/{txHash}", "/transactions/{txHash}/data", "/transactions/batches", "/transactions/batches/{batchHash}", "/tokens/nft/{id}", "/tokens/nft/{id}/owner", "/tokens/nft_id_by_tx_hash/{txHash}"]}}
{"file": "cloned/zksync/sdk/zksync.js/src/withdraw-helpers.ts", "endpoints": {"api_summary": "This file defines three REST API endpoints for a wallet service. The endpoints allow users to withdraw pending balances, withdraw pending balances for multiple addresses, and withdraw pending NFT balance. The endpoints are used to manage the wallet's balance and NFTs.", "methods": ["GET", "POST"], "paths": ["/withdrawPendingBalance", "/withdrawPendingBalances", "/withdrawPendingNFTBalance"]}}
{"file": "cloned/zksync/sdk/zksync.js/src/signer.ts", "endpoints": {"api_summary": "This file defines a set of REST API endpoints for interacting with a zkSync account. It includes methods for signing transactions, changing public keys, and withdrawing funds. The endpoints are used to interact with the zkSync network, which is a zero-knowledge rollup that allows for private transactions.", "methods": ["GET", "POST"], "paths": ["/signer/fromPrivateKey", "/signer/fromSeed", "/signer/fromETHSignature", "/create2walletsigner", "/no2fawalletsigner", "/unableToSign"]}}
{"file": "cloned/zksync/sdk/zksync.js/src/transport.ts", "endpoints": {"api_summary": "This file defines several classes for interacting with a JSON RPC API. It includes HTTP and WebSocket transports for sending requests to the API, as well as a dummy transport for testing purposes. The HTTP and WebSocket transports support both request and subscription methods, while the dummy transport provides a mocked response for testing purposes.", "methods": ["GET", "POST"], "paths": ["/request", "/subscribe", "/connect", "/getPubKeyHash", "/tokens", "/account_info"]}}
{"file": "cloned/zksync/sdk/zksync.js/src/eth-message-signer.ts", "endpoints": {"api_summary": "This file defines a class named EthMessageSigner which provides methods to sign various types of messages required for zkSync, including transfers, swaps, orders, forced exits, minting of NFTs, withdrawing of NFTs, withdrawing of Ether, and changing of public keys. These methods are used to sign messages that are then sent to the zkSync network for verification.", "methods": ["GET", "POST"], "paths": ["/ethSignTransfer", "/ethSignSwap", "/ethSignOrder", "/ethSignForcedExit", "/ethSignMintNFT", "/ethSignWithdrawNFT", "/ethSignWithdraw", "/ethSignChangePubKey", "/ethSignRegisterFactoryMessage"]}}
{"file": "cloned/zksync/sdk/zksync.js/src/batch-builder.ts", "endpoints": {"api_summary": "This file defines a class for constructing batches of transactions, which can be used to interact with a blockchain network. It provides methods for adding different types of transactions such as withdrawals, minting NFTs, withdrawing NFTs, swapping tokens, transferring tokens, changing public keys, and forcing exits. The build method is used to construct the batch from the given transactions, returning it with the corresponding Ethereum signature and total fee.", "methods": ["POST"], "paths": ["/batch-builder"]}}
{"file": "cloned/profile_service/tests/CRUD.test.js", "endpoints": {"api_summary": "This code defines a set of unit tests for a GraphQL API. It tests the creation, modification, and deletion of various entities such as Organizations, Teams, and Profiles. It also tests the querying of Profiles and Addresses.", "methods": ["GET", "POST"], "paths": ["/profiles", "/addresses"]}}
{"file": "cloned/profile_service/tests/teamAndOrganizationLogic.test.js", "endpoints": {"api_summary": "This file contains a set of tests for a GraphQL API. It defines several test cases for the API, including creating profiles, organizations, teams, and joining teams. It also includes tests for transferring team members to the supervisor's default team when a team is deleted.", "methods": ["GET", "POST"], "paths": ["/graphql"]}}
{"file": "cloned/profile_service/src/Auth/Directives.js", "endpoints": {"api_summary": "This file contains a set of directives for GraphQL, which are used to control access to certain fields in the GraphQL schema. These directives include authentication, authorization, and access control directives.", "methods": [], "paths": []}}
{"file": "cloned/profile_service/src/Resolvers/Query.js", "endpoints": {"api_summary": "This file contains a set of functions that define various endpoints for a REST API. These endpoints include search, profiles, addresses, teams, organizations, approvals, integrationData, and integration. Each endpoint is associated with a specific operation such as searching, fetching profiles, fetching addresses, etc. These endpoints can be used to interact with the system and perform various operations.", "methods": ["GET", "POST"], "paths": ["/search", "/profiles", "/addresses", "/teams", "/organizations", "/approvals", "/integrationData", "/integration"]}}
{"file": "cloned/profile_service/src/Resolvers/Mutations.js", "endpoints": {"api_summary": "This file defines a set of REST API endpoints for interacting with a Prisma database. It includes endpoints for creating, modifying, and deleting profiles, organizations, teams, and approvals. These endpoints are used to perform CRUD operations on the database.", "methods": ["POST", "PUT", "DELETE"], "paths": ["/createProfile", "/modifyProfile", "/deleteProfile", "/createOrganization", "/modifyOrganization", "/deleteOrganization", "/createTeam", "/modifyTeam", "/deleteTeam", "/modifyApproval"]}}
{"file": "cloned/core-server/mockserver/api/urls.py", "endpoints": {"api_summary": "This file defines a single REST API endpoint for fetching mock data. It uses the GET HTTP method and the URL path '/api/fetch_mock'. This endpoint is used to fetch mock data.", "methods": ["GET"], "paths": ["/api/fetch_mock"]}}
{"file": "cloned/core-server/mockserver/api/views.py", "endpoints": {"api_summary": "This file defines a REST API endpoint for fetching mock data. It uses Django's HTTP framework and the rest_framework for defining the API endpoints. The endpoint can handle GET, POST, PUT, PATCH, and DELETE requests.", "methods": ["GET", "POST", "PUT", "PATCH", "DELETE"], "paths": ["/fetch_mock"]}}
{"file": "cloned/core-server/mockserver/api/api_urls.py", "endpoints": {"api_summary": "This file defines several REST API endpoints for managing various entities such as tenants, organizations, mocks, header types, HTTP verbs, categories, and projects. These endpoints can be used to perform CRUD operations on these entities.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/tenants", "/tenants/<built-in function id>", "/organizations", "/organizations/<built-in function id>", "/mocks", "/mocks/<built-in function id>", "/header-types", "/header-types/<built-in function id>", "/http-verbs", "/http-verbs/<built-in function id>", "/categories", "/categories/<built-in function id>", "/projects", "/projects/<built-in function id>"]}}
{"file": "cloned/core-server/mockserver/mocks/views.py", "endpoints": {"api_summary": "This file defines several REST API endpoints for managing mock data, HTTP verbs, categories, and endpoints. It also includes endpoints for managing header types. These endpoints are used to create, retrieve, update, and delete mock data, HTTP verbs, categories, endpoints, and header types.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/mocks", "/mocks/<built-in function id>", "/header_types", "/header_types/<built-in function id>", "/http_verbs", "/http_verbs/<built-in function id>", "/categories", "/categories/<built-in function id>", "/endpoints", "/endpoints/<built-in function id>"]}}
{"file": "cloned/core-server/mockserver/mocks/serializers.py", "endpoints": {"api_summary": "This file defines several REST API endpoints for managing mock data, headers, and endpoints. It includes endpoints for creating, updating, and retrieving mock data, headers, HTTP verbs, header types, categories, and endpoints. It also includes endpoints for managing projects and organizations.", "methods": ["GET", "POST"], "paths": ["/mocks", "/mocks/<built-in function id>", "/headers", "/headers/<built-in function id>", "/http_verbs", "/http_verbs/<built-in function id>", "/header_types", "/header_types/<built-in function id>", "/categories", "/categories/<built-in function id>", "/endpoints", "/endpoints/<built-in function id>", "/projects", "/projects/<built-in function id>", "/organizations", "/organizations/<built-in function id>"]}}
{"file": "cloned/core-server/mockserver/mocks/tests/test_views.py", "endpoints": {"api_summary": "This file defines several REST API endpoints for managing mock data, categories, HTTP verbs, and header types. It includes endpoints for listing, creating, updating, and deleting these resources. The endpoints are secured with authentication tokens and can be filtered by project or organization.", "methods": ["GET", "POST"], "paths": ["/v1/mock/<int:pk>", "/v1/mock", "/v1/category", "/v1/httpverb", "/v1/headertype"]}}
{"file": "cloned/core-server/mockserver/authentication/urls.py", "endpoints": {"api_summary": "This file defines four REST API endpoints for user authentication. The endpoints include login, logout, password reset request, and password reset. These endpoints are used to manage user authentication and password reset processes.", "methods": ["POST"], "paths": ["/login", "/logout", "/password-reset-request", "/password-reset"]}}
{"file": "cloned/core-server/mockserver/authentication/views.py", "endpoints": {"api_summary": "This file defines four REST API endpoints for user authentication. The first endpoint allows users to log in with their email and password. The second endpoint logs out the currently logged in user. The third endpoint sends a password reset request to the user's email. The fourth endpoint allows the user to reset their password.", "methods": ["POST", "POST", "POST", "POST"], "paths": ["/login", "/logout", "/password_reset_request", "/password_reset"]}}
{"file": "cloned/core-server/mockserver/authentication/tests/test_views.py", "endpoints": {"api_summary": "This file defines several REST API endpoints for user authentication and password reset. It includes endpoints for login, logout, password reset request, and password reset. These endpoints are used to manage user authentication and password reset processes.", "methods": ["POST"], "paths": ["/login", "/logout", "/password_reset_request", "/password_reset"]}}
{"file": "cloned/core-server/mockserver/tenants/permissions.py", "endpoints": {"api_summary": "This file contains several classes that define permissions for different types of users in a multi-tenant system. These permissions are used to control access to different parts of the system based on the user's role and the organization they belong to.", "methods": ["GET", "POST"], "paths": ["/users/<built-in function id>", "/organizations/<built-in function id>", "/projects/<built-in function id>"]}}
{"file": "cloned/core-server/mockserver/tenants/views.py", "endpoints": {"api_summary": "This file defines several REST API endpoints for managing tenants, organizations, and projects. It includes endpoints for creating, updating, and deleting tenants, as well as for managing organizations, projects, and their members. It also includes endpoints for inviting, promoting, and demoting members of organizations.", "methods": ["GET", "POST", "PUT", "PATCH", "DELETE"], "paths": ["/tenants/", "/tenants/{id}/", "/projects/", "/projects/{id}/", "/organizations/", "/organizations/{id}/", "/organizations/{id}/member-invite/", "/organizations/{id}/member-promotion/", "/organizations/{id}/member-demotion/", "/organizations/{id}/profile/", "/organizations/{id}/tenants/"]}}
{"file": "cloned/core-server/mockserver/tenants/serializers.py", "endpoints": {"api_summary": "This file defines several REST API endpoints for managing organizations, tenants, and projects. It includes endpoints for creating, updating, and deleting organizations, tenants, and projects. It also includes endpoints for managing organization memberships and invites.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/organizations", "/organizations/<built-in function id>", "/tenants", "/tenants/<built-in function id>", "/projects", "/projects/<built-in function id>", "/organizations/<built-in function id>/memberships", "/organizations/<built-in function id>/invites", "/organizations/<built-in function id>/invites/<built-in function id>", "/organizations/<built-in function id>/promotions", "/organizations/<built-in function id>/demotions"]}}
{"file": "cloned/core-server/mockserver/tenants/tests/test_permissions.py", "endpoints": {"api_summary": "This file defines several REST API endpoints for managing tenants, organizations, and projects. It includes endpoints for creating, updating, and deleting tenants, organizations, and projects. It also includes endpoints for checking permissions of users in organizations and projects.", "methods": ["GET", "POST", "DELETE"], "paths": ["/tenants", "/tenants/<built-in function id>", "/organizations", "/organizations/<built-in function id>", "/projects", "/projects/<built-in function id>", "/permissions/tenant", "/permissions/organization", "/permissions/project"]}}
{"file": "cloned/core-server/mockserver/tenants/tests/test_views.py", "endpoints": {"api_summary": "This file defines a set of REST API endpoints for managing organizations and projects. It includes endpoints for creating, retrieving, updating, and deleting organizations and projects. It also includes endpoints for inviting members, updating profiles, promoting and demoting members, and retrieving organization tenants. All endpoints require authentication and authorization.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/v1/organizations/", "/v1/organizations/<built-in function id>/", "/v1/organizations/<built-in function id>/tenants/", "/v1/organizations/<built-in function id>/member-invite/", "/v1/organizations/<built-in function id>/profile/", "/v1/organizations/<built-in function id>/member-promotion/", "/v1/organizations/<built-in function id>/member-demotion/", "/v1/projects/", "/v1/projects/<built-in function id>/"]}}
{"file": "cloned/neurone/server/documentIndexer/documentRetrieval.js", "endpoints": {"api_summary": "This file defines a DocumentRetrieval class which provides methods for retrieving documents, sorting them, and searching them. It also includes methods for listing all documents and regenerating the index.", "methods": ["GET", "POST"], "paths": ["/getDocument", "/iFuCoSort", "/searchDocument", "/listAllDocuments", "/reindex"]}}
{"file": "cloned/neurone/server/documentIndexer/indexes/solrIndex.js", "endpoints": {"api_summary": "This file defines a SolrIndex class that interacts with a Solr server. It provides methods to load, generate, index, and search documents. The load method checks the connection to the Solr server. The generate method generates a Solr index from documents stored in a MongoDB database. The index method adds a new document to the Solr index. The searchDocuments method searches for documents in the Solr index based on a query object.", "methods": ["GET", "POST"], "paths": ["/load", "/generate", "/index", "/searchDocuments"]}}
{"file": "cloned/neurone/server/api/eventLogs.js", "endpoints": {"api_summary": "This file defines several REST API endpoints for a user interaction tracking system. It includes endpoints for storing user queries, bookmarks, snippets, visited links, session logs, form responses, custom events, and tracking statuses. It also includes a ping endpoint for checking the server status.", "methods": ["POST"], "paths": ["/storeQuery", "/storeBookmark", "/storeSnippet", "/storeVisitedLink", "/storeSessionLog", "/storeFormResponse", "/storeCustomEvent", "/storeTrackingStatus", "/ping"]}}
{"file": "cloned/neurone/server/api/documents.js", "endpoints": {"api_summary": "This file defines several REST API endpoints for a document management system. It includes endpoints for searching documents, fetching documents, previewing documents, listing all documents, and reindexing the document database. These endpoints are used to interact with the document management system.", "methods": ["POST"], "paths": ["/searchDocuments", "/getDocument/<documentName>", "/fetchDocument", "/previewDocument", "/listAllDocuments", "/reindex"]}}
{"file": "cloned/neurone/server/api/informationRetrieval.js", "endpoints": {"api_summary": "This file defines several REST API endpoints for a document management system. It includes methods for retrieving user-specific information such as snippets, bookmarks, and relevant documents. It also includes a method for calculating a bookmark score based on a performance formula. The endpoints are used to interact with the system's database and retrieve or manipulate user-specific data.", "methods": ["GET", "POST"], "paths": ["/getSnippets", "/getBookmarks", "/isBookmark", "/getRelevantDocuments", "/getBookmarkScore", "/userBookmarks", "/userSnippets"]}}
{"file": "cloned/neurone/server/api/evaluationItems.js", "endpoints": {"api_summary": "This file defines several REST API endpoints for a Neurone system. It includes methods for getting and storing forms, synthesis questions, and synthesis answers. These endpoints are used to interact with the system's database, allowing users to create, retrieve, and update forms, synthesis questions, and synthesis answers.", "methods": ["GET", "POST"], "paths": ["/getForm", "/storeFormAnswer", "/getSynthQuestion", "/getSynthesisAnswer", "/storeSynthesisAnswer"]}}
{"file": "cloned/neurone/server/api/configsGetter.js", "endpoints": {"api_summary": "This file defines a set of REST API endpoints for a Meteor application. The endpoints are used to manage user data, user sessions, user configs, and other related operations. The endpoints are used to support user registration, login, and other user-related operations.", "methods": ["GET", "POST"], "paths": ["/userDataFromId", "/userRole", "/userSession", "/userConfigs", "/setSession", "/initialConfigs", "/clientSettings", "/registerUsers", "/registerIdentity", "/getServerStats"]}}
{"file": "cloned/neurone/server/externalServices/api.js", "endpoints": {"api_summary": "This file defines several REST API endpoints for a document management system. It includes endpoints for pinging the server, searching documents, loading documents, and deleting documents. The endpoints are used to interact with the system's database and multimedia objects.", "methods": ["GET", "POST"], "paths": ["/v1/ping", "/v1/xd", "/v1/document/search", "/v1/document/load", "/v1/document/delete"]}}
{"file": "cloned/neurone/imports/components/stages/templates/instructions.js", "endpoints": {"api_summary": "This file defines a single REST API endpoint in an AngularJS application. The endpoint is associated with the 'instructions' component and is accessible at the URL '/instructions?stage'. It is used to handle user interactions and state changes in the application.", "methods": ["GET"], "paths": ["/instructions"]}}
{"file": "cloned/neurone/imports/components/stages/templates/affective.js", "endpoints": {"api_summary": "This file defines a REST API endpoint for the affective questionnaire. It provides endpoints for the affective questionnaire, which allows users to submit their responses. The API uses HTTP methods such as GET and POST to interact with the server.", "methods": ["GET", "POST"], "paths": ["/affective"]}}
{"file": "cloned/neurone/imports/components/stages/templates/taskQuestions.js", "endpoints": {"api_summary": "This file defines a REST API endpoint for the 'taskQuestions' component. The API endpoint is used to manage the form submission process for a specific stage in the application. It includes methods for getting questions and submitting answers.", "methods": ["GET", "POST"], "paths": ["/taskQuestions"]}}
{"file": "cloned/neurone/imports/components/stages/templates/collection.js", "endpoints": {"api_summary": "This file defines a state named 'collection' in the UI Router configuration. This state is associated with a URL of '/collection' and it has several nested views, each with its own template and controller. It also uses Meteor's publish/subscribe mechanism for data synchronization.", "methods": ["GET"], "paths": ["/collection"]}}
{"file": "cloned/neurone/imports/components/stages/templates/stage0.js", "endpoints": {"api_summary": "This file defines a single REST API endpoint for the AngularJS application. The endpoint is associated with the '/stage0' URL and uses the 'stage0' component.", "methods": ["GET"], "paths": ["/stage0"]}}
{"file": "cloned/neurone/imports/components/modules/admin.js", "endpoints": {"api_summary": "This API endpoint is used to manage administrative tasks in the application. It provides access to various administrative features such as user management, content creation, form building, document loading, video loading, book loading, study management, enrollment, and neurone store. It also includes authentication and authorization checks to ensure that only authorized users can access these features.", "methods": ["GET"], "paths": ["/admin"]}}
{"file": "cloned/neurone/imports/components/modules/admin/documentLoader.js", "endpoints": {"api_summary": "This file defines a DocumentLoader class which is a controller for a web application. It handles downloading and previewing documents, and also has methods for evaluating and recommending compatibility with screen readers. It uses axios for HTTP requests to a local server.", "methods": ["GET", "POST"], "paths": ["http://localhost:8000/ping", "http://localhost:8000/petitionEval", "http://localhost:8000/petitionRecom"]}}
{"file": "cloned/neurone/imports/components/modules/admin/documentView.js", "endpoints": {"api_summary": "This file defines a single REST API endpoint for a document view. The endpoint is used to display a document to the user. The endpoint is accessible via a GET request to '/preview/:docName', where ':docName' is a placeholder for the name of the document to be displayed.", "methods": ["GET"], "paths": ["/preview/:docName"]}}
{"file": "cloned/neurone/imports/components/modules/forms/formCtrl.js", "endpoints": {"api_summary": "This file defines a single state in a UI-Router configuration for an AngularJS application. The state is named 'form' and uses the 'formCtrl' component as its template. The state is configured to resolve a userLogged promise before the state is activated, which checks if a user is logged in.", "methods": ["GET"], "paths": ["/form"]}}
{"file": "cloned/neurone/imports/components/app/app.js", "endpoints": {"api_summary": "This application is a web application built with AngularJS and Meteor.js. It uses Meteor's `Meteor.call` method to make server-side calls, which could be considered REST API endpoints if the server-side code is set up to handle such calls.", "methods": ["POST"], "paths": ["/meteor/call"]}}
{"file": "cloned/neurone/imports/components/app/views/start.js", "endpoints": {"api_summary": "This file defines a single state 'start' in the AngularJS router. This state is used to navigate to the start page of the application.", "methods": [], "paths": ["/start"]}}
{"file": "cloned/neurone/test/api.app-test.js", "endpoints": {"api_summary": "This file defines a set of REST API endpoints for a Meteor application. The endpoints are used to store and retrieve various types of data, including bookmarks, snippets, queries, session logs, visited links, and form answers. The endpoints are used to log events related to these actions, such as storing a bookmark, storing a snippet, storing a query, storing a session log, storing a visited link, and storing a form answer.", "methods": ["GET", "POST"], "paths": ["/storeBookmark", "/storeSnippet", "/storeQuery", "/storeSessionLog", "/storeVisitedLink", "/storeFormAnswer"]}}
{"file": "cloned/example-voting-app/vote/app.py", "endpoints": {"api_summary": "This API is a simple voting application. It allows users to vote between two options, either Cats or Dogs. The application uses Flask as the web framework and Redis as the database. The vote is stored in a Redis list named 'votes'.", "methods": ["GET", "POST"], "paths": ["/"]}}
{"file": "cloned/milvus/tests/restful_client_v2/testcases/test_vector_operations.py", "endpoints": {"api_summary": "This file defines a set of REST API endpoints for interacting with a vector database. It includes endpoints for inserting, upserting, searching, querying, deleting, and getting vectors. It also includes endpoints for advanced search and hybrid search. The endpoints are defined in classes, each class representing a different type of operation. The endpoints are defined using the Flask framework and the pytest library for testing.", "methods": ["GET", "POST"], "paths": ["/vector/insert", "/vector/upsert", "/vector/search", "/vector/query", "/vector/delete", "/vector/get", "/vector/advanced_search", "/vector/hybrid_search"]}}
{"file": "cloned/milvus/tests/restful_client_v2/testcases/test_restful_sdk_mix_use_scenario.py", "endpoints": {"api_summary": "This file contains a set of tests for a RESTful API. It defines several endpoints for creating, describing, inserting, searching, querying, and deleting vectors in a collection. It also tests the compatibility between the SDK and RESTful API.", "methods": ["GET", "POST"], "paths": ["/collection/list", "/collection/describe", "/collection/create", "/vector/insert", "/vector/search", "/vector/query", "/vector/delete"]}}
{"file": "cloned/milvus/tests/restful_client_v2/testcases/test_index_operation.py", "endpoints": {"api_summary": "This file contains a set of tests for a REST API. It defines several endpoints for creating and managing collections, indexes, and properties. The endpoints are used to create collections, insert data, create indexes, alter index properties, and drop index properties. The tests cover a variety of scenarios, including creating collections with different schemas, inserting data into collections, creating indexes, altering index properties, and dropping index properties.", "methods": ["POST", "GET", "PUT", "DELETE"], "paths": ["/collection/create", "/vector/insert", "/index/create", "/index/properties/alter", "/index/properties/drop"]}}
{"file": "cloned/milvus/tests/restful_client/testcases/test_restful_sdk_mix_use_scenario.py", "endpoints": {"api_summary": "This file contains a set of tests for a RESTful API. It defines several endpoints for creating, describing, and manipulating collections and vectors in a Milvus database. The endpoints are used to test the compatibility of the SDK with the RESTful API.", "methods": ["GET", "POST"], "paths": ["/collection/list", "/collection/describe", "/collection/create", "/vector/insert", "/vector/search", "/vector/query", "/vector/delete"]}}
{"file": "cloned/milvus/tests/restful_client/api/milvus.py", "endpoints": {"api_summary": "This file defines several REST API endpoints for interacting with a vector database. It includes endpoints for searching, querying, getting, deleting, and inserting vectors, as well as for listing, creating, describing, and dropping collections. These endpoints are used to manage and interact with the vector database.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/vector/search", "/vector/query", "/vector/get", "/vector/delete", "/vector/insert", "/vector/collections", "/vector/collections/create", "/vector/collections/describe", "/vector/collections/drop"]}}
{"file": "cloned/milvus/tests/integration/rbac/privilege_group_test.go", "endpoints": {"api_summary": "This file defines a set of REST API endpoints for managing Role-Based Access Control (RBAC) in a Milvus system. It includes endpoints for creating, dropping, and operating on roles, privilege groups, and privileges. It also includes endpoints for testing the validity of privilege groups and privileges.", "methods": ["GET", "POST"], "paths": ["/create_role", "/drop_role", "/operate_role", "/create_privilege_group", "/drop_privilege_group", "/operate_privilege_group", "/operate_privilege", "/operate_privilege_v2", "/validate_grants", "/marshal_grants"]}}
{"file": "cloned/milvus/tests/integration/rg/resource_group_test.go", "endpoints": {"api_summary": "This file defines a set of REST API endpoints for managing resource groups in a Milvus system. It includes endpoints for creating, updating, and deleting resource groups, as well as for listing and describing resource groups. It also includes endpoints for managing collections and replicas, which are associated with resource groups.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/resource_groups", "/resource_groups/<resource_group_name>", "/collections", "/collections/<collection_name>/replicas"]}}
{"file": "cloned/milvus/tests/integration/hybridsearch/hybridsearch_test.go", "endpoints": {"api_summary": "This file contains a suite of tests for a hybrid search feature in a Milvus-based system. It tests the creation of collections, insertion of data, creation of indexes, loading of collections, and finally, the execution of hybrid search queries. The tests cover different scenarios, including loading collections without index, loading collections with index on partial vector fields, and loading collections with index on all vector fields. The tests also include the execution of hybrid search queries with different rank types, such as RRF and weighted rank.", "methods": [], "paths": []}}
{"file": "cloned/milvus/tests/integration/hellomilvus/hello_milvus_test.go", "endpoints": {"api_summary": "This file defines a set of REST API endpoints for interacting with a Milvus database. It includes endpoints for creating collections, inserting data, flushing data, creating indexes, loading collections, searching data, querying data, and deleting data. It also includes endpoints for releasing and dropping collections.", "methods": ["GET", "POST"], "paths": ["/createCollection", "/insert", "/flush", "/createIndex", "/loadCollection", "/search", "/query", "/delete", "/releaseCollection", "/dropCollection"]}}
{"file": "cloned/milvus/tests/integration/null_data/null_data_test.go", "endpoints": {"api_summary": "This file defines a set of REST API endpoints for interacting with a Milvus database. It includes endpoints for creating, inserting, searching, and deleting data in the database. It also includes endpoints for managing collections, indexes, and loading data into the database.", "methods": ["GET", "POST"], "paths": ["/createCollection", "/insert", "/search", "/delete", "/createIndex", "/loadCollection", "/releaseCollection", "/dropCollection"]}}
{"file": "cloned/milvus/tests/integration/compaction/clustering_compaction_null_data_test.go", "endpoints": {"api_summary": "This file defines a suite of tests for a clustering compaction feature in a Milvus-based system. It tests the functionality of the system when dealing with null data in the compaction process. The tests include creating a collection, inserting data, flushing data, creating an index, loading the collection, manually triggering a compaction, and finally, searching for data. The overall goal of these tests is to ensure the system can handle null data during compaction.", "methods": ["GET", "POST"], "paths": ["/TestClusteringCompactionNullData"]}}
{"file": "cloned/milvus/tests/integration/datanode/datanode_test.go", "endpoints": {"api_summary": "This file defines a set of REST API endpoints for a data node in a distributed system. The endpoints are used to manage collections, insert data, search data, and check the status of collections. The endpoints are used to load, insert, and search data in collections. The endpoints are also used to check the status of collections and to restart the system if necessary.", "methods": ["GET", "POST"], "paths": ["/collections", "/collections/<collection_name>", "/collections/<collection_name>/load", "/collections/<collection_name>/insert", "/collections/<collection_name>/search", "/collections/<collection_name>/status", "/collections/<collection_name>/restart"]}}
{"file": "cloned/milvus/tests/benchmark/milvus_benchmark/client.py", "endpoints": {"api_summary": "This file defines a Python class, MilvusClient, which provides methods for interacting with a Milvus database. It includes methods for creating, inserting, deleting, and querying data, as well as managing collections and indexes. It also includes methods for managing the Milvus server itself.", "methods": ["GET", "POST", "DELETE"], "paths": ["/milvus_client", "/milvus_client/create_collection", "/milvus_client/insert", "/milvus_client/delete", "/milvus_client/query", "/milvus_client/create_index", "/milvus_client/describe_index", "/milvus_client/drop_index", "/milvus_client/count", "/milvus_client/drop", "/milvus_client/get_stats", "/milvus_client/get_info", "/milvus_client/show_collections", "/milvus_client/exists_collection", "/milvus_client/clean_db", "/milvus_client/load_collection", "/milvus_client/release_collection", "/milvus_client/load_partitions", "/milvus_client/release_partitions", "/milvus_client/get_query_segment_info", "/milvus_client/scene_test"]}}
{"file": "cloned/milvus/tests/benchmark/milvus_benchmark/runners/locust_tasks.py", "endpoints": {"api_summary": "This file defines a set of REST API endpoints for interacting with a Milvus database. It includes endpoints for querying, flushing, loading, releasing, inserting, and getting data from the database. It also includes an endpoint for running a scene test.", "methods": ["GET", "POST"], "paths": ["/query", "/flush", "/load", "/release", "/insert", "/get", "/scene_test"]}}
{"file": "cloned/milvus/tests/go_client/testcases/groupby_search_test.go", "endpoints": {"api_summary": "This file contains a set of test cases for the Milvus project. It tests various functionalities of the system, including the creation of collections, insertion of data, index creation, and search operations. It also tests the groupBy functionality, which allows for the grouping of search results based on a specified field.", "methods": ["GET", "POST"], "paths": ["/testcases/TestSearchGroupByFloatDefault", "/testcases/TestSearchGroupByFloatDefaultCosine", "/testcases/TestGroupBySearchSparseVector", "/testcases/TestSearchGroupByBinaryDefault", "/testcases/TestSearchGroupByBinaryGrowing", "/testcases/TestSearchGroupByFloatGrowing", "/testcases/TestSearchGroupByPagination", "/testcases/TestSearchGroupByUnsupportedIndex", "/testcases/TestSearchGroupByUnsupportedDataType", "/testcases/TestSearchGroupByIterator", "/testcases/TestSearchGroupByRangeSearch", "/testcases/TestSearchGroupByHybridSearch"]}}
{"file": "cloned/milvus/tests/go_client/testcases/hybrid_search_test.go", "endpoints": {"api_summary": "This file contains a set of test cases for the Milvus project. It tests various functionalities of the system, including creating collections, inserting data, flushing data, creating indexes, loading data, and performing hybrid searches. It also tests various edge cases and error handling.", "methods": ["GET", "POST"], "paths": ["/milvus/testcases"]}}
{"file": "cloned/milvus/tests/go_client/base/milvus_client.go", "endpoints": {"api_summary": "This file defines a Milvus client that interacts with a Milvus server. It provides a set of methods to interact with the Milvus database, including database operations, collection operations, partition operations, index operations, write operations, read operations, and user and role operations. It also includes methods for managing resources and running analyzers.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/database", "/collection", "/partition", "/index", "/write", "/read", "/user", "/role", "/resource", "/analyzer"]}}
{"file": "cloned/milvus/tests/python_client/conftest.py", "endpoints": {"api_summary": "This file is a PyTest configuration file for testing a Milvus database. It does not define any REST API endpoints.", "methods": [], "paths": []}}
{"file": "cloned/milvus/tests/python_client/text_embedding/test_text_embedding_function.py", "endpoints": {"api_summary": "The provided Python code does not explicitly define any REST API endpoints. It is a collection of classes and methods for testing text embedding functionality using various providers such as OpenAI, Dashscope, VertexAI, VoyageAI, Cohere, SiliconFlow, TEI, and others. It also includes tests for inserting, searching, and deleting data with text embeddings, as well as other functionalities such as multi-language support, multi-provider search, and more.", "methods": [], "paths": []}}
{"file": "cloned/milvus/tests/python_client/testcases/test_delete.py", "endpoints": {"api_summary": "This file contains a set of test cases for the delete operation in a collection. It covers various scenarios such as deleting entities from a collection, deleting from different types of collections (auto_id, string primary key), deleting from different states of data (growing, sealed), deleting with different consistency levels, deleting with different data types (string, integer, float), deleting with different expressions (normal, complex), deleting with different scenarios (multi-threading, delete after handoff, delete after flush, delete after insert), and deleting with different data (duplicate primary keys, different ids, empty ids, etc.). It also includes test cases for delete operations with different data types (string, integer, float, array, json).", "methods": ["GET", "POST", "DELETE"], "paths": ["/delete", "/delete/<id>", "/delete/<id>/<partition_name>"]}}
{"file": "cloned/milvus/tests/python_client/testcases/test_mix_scenes.py", "endpoints": {"api_summary": "This file defines several test cases for a collection of REST API endpoints. The test cases cover various scenarios such as modulo expression, string expression, number operation, integer and varchar operation, array length, count(*) operation, and search operations. The test cases are grouped by the type of index used (NoIndex, Hybrid, Inverted, Bitmap).", "methods": ["GET", "POST"], "paths": ["/test_no_index_dql_expr", "/test_hybrid_index_dql_expr", "/test_inverted_index_dql_expr", "/test_bitmap_index_dql_expr", "/test_bitmap_index_offset_cache", "/test_bitmap_index_mmap", "/test_index_unicode_string", "/test_bitmap_upsert_and_delete", "/test_bitmap_offset_cache_and_mmap", "/test_bitmap_partition_keys", "/test_group_search"]}}
{"file": "cloned/milvus/tests/python_client/testcases/async_milvus_client/test_e2e_async.py", "endpoints": {"api_summary": "This file defines several REST API endpoints for a Milvus-based application. It includes endpoints for creating collections, inserting entities, searching and querying data, and performing various other operations. The endpoints are used to interact with a Milvus database, which is a vector database designed for managing and querying large-scale vector data. The endpoints are asynchronous, meaning they can handle multiple requests simultaneously.", "methods": ["GET", "POST"], "paths": ["/async/test_async_client_default", "/async/test_async_client_partition", "/async/test_async_client_with_schema", "/async/test_async_client_dml", "/async/test_async_client_with_db", "/async/test_async_client_close", "/async/test_async_client_with_token"]}}
{"file": "cloned/milvus/tests/python_client/milvus_client_v2/test_milvus_client_range_search.py", "endpoints": {"api_summary": "This file defines a set of test cases for a range search functionality in a vector database. The tests cover a variety of scenarios including creating collections, inserting data, creating and loading indexes, and performing range searches. The range searches are performed using different metrics and index types, and the results are compared to expected values.", "methods": ["GET", "POST"], "paths": ["/search", "/range_search"]}}
{"file": "cloned/milvus/tests/python_client/milvus_client_v2/test_milvus_client_e2e.py", "endpoints": {"api_summary": "This file defines a set of end-to-end tests for a Milvus client. It tests the high-level API of the client, including creating a collection, inserting data, searching, and querying. The tests cover various scenarios such as enabling/disabling flush, enabling/disabling scalar index, and performing various queries on scalar fields.", "methods": [], "paths": []}}

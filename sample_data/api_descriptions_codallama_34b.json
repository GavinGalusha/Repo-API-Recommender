{"file": "cloned/gotemp/product/server/productSever.go", "endpoints": {"api_summary": "The goTemp product service provides a REST API for managing products. It includes endpoints for creating, reading, updating, and deleting products, as well as endpoints for searching and filtering products.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/products", "/products/<product_id>", "/products/search", "/products/filter"]}}
{"file": "cloned/gotemp/product/client/productClient.go", "endpoints": {"api_summary": "This API provides endpoints for managing products, including creating, updating, and deleting products, as well as retrieving products by ID or search criteria.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/products", "/products/<product_id>", "/products/search"]}}
{"file": "cloned/gotemp/user/server/userServer.go", "endpoints": {"api_summary": "This API is a user service that allows for user authentication and management. It exposes endpoints for creating, reading, updating, and deleting users, as well as for validating user tokens and retrieving user information.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users", "/users/<built-in function id>", "/auth", "/token"]}}
{"file": "cloned/gotemp/user/client/userClient.go", "endpoints": {"api_summary": "This API defines endpoints for creating, updating, retrieving, and deleting users, as well as authenticating and logging in users.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users", "/users/<built-in function id>", "/auth", "/login"]}}
{"file": "cloned/gotemp/promotion/client/promotionClient.go", "endpoints": {"api_summary": "This API defines endpoints for managing promotions, including creating, updating, and deleting promotions, as well as retrieving promotions by ID or search criteria.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/promotions", "/promotions/<promotion_id>"]}}
{"file": "cloned/gotemp/customer/server/customerServer.go", "endpoints": {"api_summary": "The goTemp customer service provides REST API endpoints for managing customer data. It includes endpoints for creating, reading, updating, and deleting customer records, as well as endpoints for authentication and authorization.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/customers", "/customers/<customer_id>", "/auth", "/auth/token"]}}
{"file": "cloned/gotemp/customer/client/customerClient.go", "endpoints": {"api_summary": "This API defines endpoints for managing customers, including creating, retrieving, updating, and deleting customers. It also includes endpoints for authenticating users and retrieving customers based on search criteria.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/customers", "/customers/<customer_id>", "/customers/search"]}}
{"file": "cloned/gotemp/web/sapper/src/globalUtils/addresses.js", "endpoints": {"api_summary": "This API provides endpoints for managing products, customers, users, and promotions. It also includes authentication and authorization endpoints for user management.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/product", "/product/new", "/product/<built-in function id>", "/customer", "/customer/new", "/customer/<built-in function id>", "/user", "/user/new", "/user/<built-in function id>", "/promotion", "/promotion/new", "/promotion/<built-in function id>", "/login", "/register"]}}
{"file": "cloned/bugsnag-js/test/node/features/fixtures/restify/scenarios/app.js", "endpoints": {"api_summary": "This API defines several endpoints for testing error handling and reporting in a RESTful API. It includes endpoints for synchronous and asynchronous errors, as well as endpoints for handling and reporting errors in different scenarios.", "methods": ["GET", "POST"], "paths": ["/", "/sync/:message", "/async", "/next", "/rejection-sync", "/rejection-async", "/unhandled-rejection-async-callback", "/throw-non-error", "/not-found", "/internal", "/handled", "/bodytest"]}}
{"file": "cloned/bugsnag-js/test/node/features/fixtures/express/scenarios/app.js", "endpoints": {"api_summary": "This API defines several endpoints for testing the Bugsnag error reporting library. It includes endpoints for testing various types of errors, such as synchronous and asynchronous errors, as well as endpoints for testing the library's feature flags and breadcrumbs.", "methods": ["GET", "POST"], "paths": ["/", "/sync/:message", "/async", "/next", "/rejection-sync", "/rejection-async", "/unhandled-rejection-async-callback", "/string-as-error", "/throw-non-error", "/oversized", "/handled", "/bodytest", "/features/unhandled", "/features/handled", "/breadcrumbs_a", "/breadcrumbs_b", "/console_breadcrumbs_a", "/console_breadcrumbs_b", "/context-loss"]}}
{"file": "cloned/bugsnag-js/test/aws-lambda/features/fixtures/hono-app/app/app.js", "endpoints": {"api_summary": "This API provides a simple interface for testing error handling in a Hono application. It includes endpoints for handling errors synchronously and asynchronously, as well as for testing promise rejections and throwing non-error objects.", "methods": ["GET"], "paths": ["/", "/handled", "/unhandled", "/unhandled-async", "/promise-rejection", "/throw-non-error"]}}
{"file": "cloned/bugsnag-js/test/aws-lambda/features/fixtures/serverless-express-app/app/app.js", "endpoints": {"api_summary": "This API provides a simple interface for handling errors and exceptions in an Express.js application. It includes endpoints for handling errors, unhandled errors, and promise rejections, as well as a custom error handler that returns JSON responses.", "methods": ["GET", "POST"], "paths": ["/", "/handled", "/unhandled", "/unhandled-async", "/unhandled-next", "/promise-rejection"]}}
{"file": "cloned/bugsnag-js/test/electron/features/support/server.js", "endpoints": {"api_summary": "The MockServer class defines a simple HTTP server that can be used to test the uploading of various types of data (events, sessions, minidumps) to a server. It exposes several endpoints for uploading data, as well as a method for writing the uploaded data to disk for later inspection.", "methods": ["POST", "GET"], "paths": ["/minidump", "/events", "/sessions", "/success"]}}
{"file": "cloned/bugsnag-js/examples/js/restify/app.js", "endpoints": {"api_summary": "This API provides a simple web server that serves a static HTML page and handles errors using Bugsnag. It also includes a few endpoints for testing error handling and user information.", "methods": ["GET", "POST"], "paths": ["/", "/handled", "/unhandled", "/add-info", "/crash", "/static/*"]}}
{"file": "cloned/bugsnag-js/examples/js/nextjs/pages/api/scenario4.js", "endpoints": {"api_summary": "This API scenario 4 is an example of how to use Bugsnag to handle exceptions and record them. It includes a try/catch block to handle an error and notify Bugsnag of the issue.", "methods": ["GET"], "paths": ["/api/scenario4"]}}
{"file": "cloned/bugsnag-js/examples/js/nextjs/pages/api/scenario2.js", "endpoints": {"api_summary": "This API scenario 2 is a top-of-module exception. It has a function called work that throws an error and a handler function that returns a JSON object with a name field.", "methods": ["GET"], "paths": ["/users", "/users/<built-in function id>"]}}
{"file": "cloned/bugsnag-js/examples/js/nextjs/pages/api/scenario1.js", "endpoints": {"api_summary": "This API scenario 1 defines a single endpoint that returns a JSON object with a name field. The endpoint is defined using the serverlessHandler function from the bugsnag library, and it handles a GET request to the /users/<built-in function id> path.", "methods": ["GET"], "paths": ["/users/<built-in function id>"]}}
{"file": "cloned/bugsnag-js/examples/js/koa/app.js", "endpoints": {"api_summary": "This API provides a simple web interface for testing error handling and reporting with Bugsnag. It includes endpoints for crashing the application, handling unhandled errors, and adding user information to error reports.", "methods": ["GET", "POST"], "paths": ["/", "/crash", "/unhandled", "/handled", "/add-info"]}}
{"file": "cloned/bugsnag-js/examples/js/express/app.js", "endpoints": {"api_summary": "This API provides a simple web interface for testing error handling and reporting with Bugsnag. It includes endpoints for crashing the application, handling errors, and adding user information to error reports.", "methods": ["GET", "POST"], "paths": ["/", "/crash", "/unhandled", "/handled", "/add-info"]}}
{"file": "cloned/bugsnag-js/packages/delivery-node/test/delivery.test.ts", "endpoints": {"api_summary": "This API is used for delivering events and sessions to the Bugsnag platform. It includes endpoints for sending events and sessions, as well as handling errors and logging.", "methods": ["POST"], "paths": ["/notify/", "/sessions/"]}}
{"file": "cloned/wazo-auth/integration_tests/assets/saml/webapp/server.py", "endpoints": {"api_summary": "This API provides a simple web interface for displaying a list of users and their associated ACS (Access Control System) information. The API supports GET requests to retrieve the list of users and their ACS information, and POST requests to create new users and their associated ACS information.", "methods": ["GET", "POST"], "paths": ["/", "/postacs.html"]}}
{"file": "cloned/wazo-auth/integration_tests/assets/external_auth/oauth2_synchronization_service/main.py", "endpoints": {"api_summary": "This API provides a websocket connection for authorizing and retrieving a Microsoft token for a given service and state. It also provides a GET endpoint for retrieving the token directly.", "methods": ["GET", "POST", "WS"], "paths": ["/ws/<state>", "/<service>/authorize/<state>", "/<service>/token"]}}
{"file": "cloned/wazo-auth/integration_tests/assets/external_auth/service_plugin/external_auth_service_plugin/plugin.py", "endpoints": {"api_summary": "This API defines endpoints for managing external authentication services for Wazo. It allows for the creation, deletion, and retrieval of external authentication services, as well as the management of user authentication tokens.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users/<uuid:user_uuid>/external/foo", "/users/<uuid:user_uuid>/external/bar"]}}
{"file": "cloned/wazo-auth/integration_tests/suite/test_idp.py", "endpoints": {"api_summary": "This API provides authentication methods for users and tenants, including login and logout endpoints, as well as endpoints for managing authentication methods and tokens.", "methods": ["GET", "POST"], "paths": ["/token", "/login", "/logout", "/idp", "/idp/<idp_name>", "/idp/<idp_name>/<method_name>"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/external_auth/microsoft/plugin.py", "endpoints": {"api_summary": "The MicrosoftPlugin API allows for authentication and authorization of users using Microsoft accounts. It provides a single endpoint for retrieving user information and external authentication tokens.", "methods": ["GET"], "paths": ["/users/<uuid:user_uuid>/external/microsoft"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/external_auth/google/plugin.py", "endpoints": {"api_summary": "The GooglePlugin API allows for authentication and authorization of users using Google OAuth. It provides a single endpoint for authenticating a user and retrieving their Google profile information.", "methods": ["GET"], "paths": ["/users/<uuid:user_uuid>/external/google"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/external_auth/mobile/http.py", "endpoints": {"api_summary": "The API allows for the management of mobile authentication tokens for users. It provides endpoints for creating, reading, updating, and deleting mobile authentication tokens, as well as retrieving the FCM sender ID for a given user.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users/<user_uuid>/external/mobile", "/users/<user_uuid>/external/mobile/sender_id"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/external_auth/mobile/plugin.py", "endpoints": {"api_summary": "The API allows for the management of mobile authentication for users in the Wazo system. It provides endpoints for authenticating users and managing their mobile authentication settings.", "methods": ["GET", "POST"], "paths": ["/users/<uuid:user_uuid>/external/mobile", "/users/<uuid:user_uuid>/external/mobile/sender_id"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/ldap_config/http.py", "endpoints": {"api_summary": "The LDAPConfig API provides endpoints for managing LDAP configurations for Wazo Auth. It allows for retrieving, creating, updating, and deleting LDAP configurations, as well as checking the status of the LDAP service.", "methods": ["GET", "PUT", "DELETE"], "paths": ["/ldap_config", "/ldap_config/<tenant_uuid>"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/ldap_config/plugin.py", "endpoints": {"api_summary": "The API allows for the configuration of LDAP authentication for the Wazo phone system. It provides a single endpoint for retrieving and updating the LDAP configuration.", "methods": ["GET", "POST"], "paths": ["/backends/ldap"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/user_session/http.py", "endpoints": {"api_summary": "The Wazo Auth API provides endpoints for managing user sessions. It allows for listing and deleting user sessions, as well as retrieving information about specific sessions.", "methods": ["GET", "DELETE"], "paths": ["/users/<user_uuid>/sessions", "/users/<user_uuid>/sessions/<session_uuid>"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/user_session/plugin.py", "endpoints": {"api_summary": "The API provides endpoints for managing user sessions, including creating, retrieving, and deleting sessions. The endpoints are accessible at the `/users/<user_uuid>/sessions` and `/users/<user_uuid>/sessions/<session_uuid>` paths.", "methods": ["GET", "POST", "DELETE"], "paths": ["/users/<user_uuid>/sessions", "/users/<user_uuid>/sessions/<session_uuid>"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/user_policy/http.py", "endpoints": {"api_summary": "This API defines endpoints for managing user policies in the Wazo authentication system. It allows for listing, adding, and removing policies for a given user, as well as checking the access control list (ACL) for a policy.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users/<user_uuid>/policies", "/users/<user_uuid>/policies/<policy_uuid>", "/users/<user_uuid>/policies/<policy_slug>"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/user_policy/plugin.py", "endpoints": {"api_summary": "This API provides endpoints for managing user policies in a Wazo system. It allows for the creation, retrieval, update, and deletion of user policies, as well as listing all policies for a given user.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users/<uuid:user_uuid>/policies/<uuid:policy_uuid>", "/users/<uuid:user_uuid>/policies/<string:policy_slug>", "/users/<uuid:user_uuid>/policies"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/policies/http.py", "endpoints": {"api_summary": "This API defines endpoints for managing policies and their access controls. It allows for creating, reading, updating, and deleting policies, as well as adding and removing access controls for policies.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/policies", "/policies/<policy_uuid>", "/policies/<policy_slug>", "/policies/<policy_uuid>/access/<access>", "/policies/<policy_slug>/access/<access>"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/policies/plugin.py", "endpoints": {"api_summary": "The API defined in this file provides endpoints for managing policies and their access control lists. It allows for the creation, retrieval, update, and deletion of policies, as well as the management of access control lists for policies.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/policies", "/policies/<uuid:policy_uuid>", "/policies/<uuid:policy_uuid>/acl/<access>", "/policies/<string:policy_slug>", "/policies/<string:policy_slug>/acl/<access>"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/saml/http.py", "endpoints": {"api_summary": "This API provides endpoints for Single Sign-On (SSO) and Single Logout (SLO) using the SAML protocol. It allows users to authenticate and log out of the system using SAML-compliant identity providers.", "methods": ["POST", "GET"], "paths": ["/saml/acs", "/saml/sso", "/saml/logout", "/saml/sls"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/saml/plugin.py", "endpoints": {"api_summary": "The API provides endpoints for SAML authentication and single logout. It allows users to authenticate and logout using SAML protocol.", "methods": ["GET", "POST"], "paths": ["/saml/acs", "/saml/sso", "/saml/logout", "/saml/sls"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/external/http.py", "endpoints": {"api_summary": "This API defines endpoints for managing external authentication and authorization for Wazo, including listing and configuring external authentication methods, and retrieving information about connected users.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/external", "/external/config", "/external/users"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/external/plugin.py", "endpoints": {"api_summary": "The API provides endpoints for managing external authentication and authorization for users in a Wazo system. It allows for the creation, retrieval, and management of external authentication configurations and users, as well as the ability to retrieve external user information.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users/<uuid:user_uuid>/external", "/external/<string:auth_type>/config", "/external/<string:auth_type>/users"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/tokens/http.py", "endpoints": {"api_summary": "This API provides endpoints for managing tokens and authentication.", "methods": ["GET", "POST", "DELETE"], "paths": ["/tokens", "/tokens/<token_uuid>", "/tokens/scopes/check"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/tokens/plugin.py", "endpoints": {"api_summary": "This API provides endpoints for managing tokens and refresh tokens for users and clients. It allows for the creation, retrieval, and revocation of tokens, as well as the checking of token scopes and the retrieval of user and client refresh tokens.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/token", "/token/<uuid:token_uuid>", "/token/<uuid:token_uuid>/scopes/check", "/tokens", "/users/<uuid:user_uuid>/tokens", "/users/<uuid:user_uuid>/tokens/<string:client_id>", "/users/me/tokens", "/users/me/tokens/<string:client_id>"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/password_reset/plugin.py", "endpoints": {"api_summary": "The API allows users to reset their passwords by sending a password reset request to the server, which will send an email to the user's registered email address with a password reset link. The user can then use the link to reset their password.", "methods": ["POST"], "paths": ["/users/password/reset"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/user_registration/http.py", "endpoints": {"api_summary": "The Register API allows users to create a new account and send a confirmation email to the specified email address.", "methods": ["POST"], "paths": ["/register"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/user_registration/plugin.py", "endpoints": {"api_summary": "The API allows users to register and manage their accounts.", "methods": ["POST"], "paths": ["/users/register"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/saml_config/http.py", "endpoints": {"api_summary": "This API provides endpoints for managing SAML configurations and metadata for the Wazo Auth service.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/saml_config", "/saml_metadata", "/saml_acs_url_template"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/saml_config/plugin.py", "endpoints": {"api_summary": "The Wazo API provides endpoints for managing SAML configurations, including retrieving metadata, setting the ACS URL template, and configuring the SAML backend.", "methods": ["GET", "POST"], "paths": ["/backends/saml", "/backends/saml/metadata", "/backends/saml/acs_url_template"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/config/http.py", "endpoints": {"api_summary": "The Wazo Auth API provides endpoints for managing authentication and authorization for the Wazo platform. It includes endpoints for retrieving and updating configuration, as well as endpoints for managing users and tenants.", "methods": ["GET", "POST", "PATCH"], "paths": ["/auth/config", "/auth/config/<built-in function id>", "/auth/users", "/auth/tenants"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/email_confirm/http.py", "endpoints": {"api_summary": "The EmailConfirm API allows users to confirm their email addresses by sending a confirmation email and updating the email status in the database.", "methods": ["GET", "PUT"], "paths": ["/auth/emails/{email_uuid}/confirm"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/email_confirm/plugin.py", "endpoints": {"api_summary": "The API allows for the confirmation of email addresses by sending a confirmation email to the user. The API endpoint is /emails/<uuid:email_uuid>/confirm and supports the HTTP method POST.", "methods": ["POST"], "paths": ["/emails/<uuid:email_uuid>/confirm"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/user_email/http.py", "endpoints": {"api_summary": "This API provides endpoints for updating and confirming user emails. It also includes endpoints for retrieving user information and sending confirmation emails.", "methods": ["PUT", "GET"], "paths": ["/users/<user_uuid>/emails", "/users/<user_uuid>/emails/<email_uuid>/confirm"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/user_email/plugin.py", "endpoints": {"api_summary": "This API provides endpoints for managing user emails, including confirming email addresses and updating email addresses for users. The API also provides an endpoint for administrators to update email addresses for users.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users/<uuid:user_uuid>/emails/<uuid:email_uuid>/confirm", "/admin/users/<uuid:user_uuid>/emails", "/users/<uuid:user_uuid>/emails"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/idp/http.py", "endpoints": {"api_summary": "This API provides endpoints for managing users and their authentication through various identity providers (IDPs). It allows for adding, removing, and updating users' IDP associations, as well as retrieving a list of available IDPs.", "methods": ["GET", "PUT", "DELETE"], "paths": ["/idp/list", "/idp/{idp_type}/users/{user_uuid}", "/idp/{idp_type}/users"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/idp/plugin.py", "endpoints": {"api_summary": "The API provides endpoints for managing identity providers (IDPs) and users in a Wazo system. It allows for listing, creating, and managing IDPs, as well as retrieving and managing users associated with those IDPs.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/idp", "/idp/<idp_type>/users/<uuid:user_uuid>", "/idp/<idp_type>/users"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/sessions/http.py", "endpoints": {"api_summary": "The Wazo Auth API provides endpoints for managing sessions and authentication. It allows users to create, read, update, and delete sessions, as well as retrieve information about sessions and authenticate users.", "methods": ["GET", "POST", "DELETE"], "paths": ["/sessions", "/sessions/<built-in function id>", "/sessions/<session_uuid>"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/sessions/plugin.py", "endpoints": {"api_summary": "The API provides endpoints for managing sessions, including creating, retrieving, and deleting sessions. The endpoints are accessible at the `/sessions` path and support GET, POST, PUT, and DELETE methods.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/sessions", "/sessions/<uuid:session_uuid>"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/users/http.py", "endpoints": {"api_summary": "The Wazo Auth API provides endpoints for managing users and their authentication methods. It includes endpoints for creating, reading, updating, and deleting users, as well as endpoints for changing user passwords.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users", "/users/<built-in function id>", "/users/password"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/users/plugin.py", "endpoints": {"api_summary": "The API provides endpoints for managing users and their passwords. It allows for the creation, retrieval, update, and deletion of user accounts, as well as the ability to change a user's password.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users", "/users/<uuid:user_uuid>", "/users/<uuid:user_uuid>/password"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/groups/http.py", "endpoints": {"api_summary": "The Wazo Auth API provides endpoints for managing groups and their permissions. It allows for creating, reading, updating, and deleting groups, as well as listing and filtering groups based on various criteria.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/groups", "/groups/<group_uuid>", "/groups/<group_uuid>/permissions"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/groups/plugin.py", "endpoints": {"api_summary": "The API provides endpoints for managing groups and their associated users. It allows for the creation, retrieval, update, and deletion of groups, as well as the addition and removal of users from groups.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/groups", "/groups/<uuid:group_uuid>", "/groups/<uuid:group_uuid>/users", "/groups/<uuid:group_uuid>/users/<uuid:user_uuid>"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/group_policy/http.py", "endpoints": {"api_summary": "This API defines endpoints for managing policies for a group in a multi-tenant system. It allows for adding, removing, and listing policies for a group, as well as retrieving information about the policies.", "methods": ["GET", "PUT", "DELETE"], "paths": ["/groups/<group_uuid>/policies", "/groups/<group_uuid>/policies/<policy_uuid>", "/groups/<group_uuid>/policies/<policy_slug>"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/group_policy/plugin.py", "endpoints": {"api_summary": "This API provides endpoints for managing policies for groups in a Wazo system. It allows for the creation, retrieval, update, and deletion of policies for groups, as well as listing all policies for a given group.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/groups/<uuid:group_uuid>/policies/<uuid:policy_uuid>", "/groups/<uuid:group_uuid>/policies/<string:policy_slug>", "/groups/<uuid:group_uuid>/policies"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/tenants/http.py", "endpoints": {"api_summary": "This API defines endpoints for managing tenants and their domains in a multi-tenant system. It allows for creating, reading, updating, and deleting tenants, as well as listing and managing their domains.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/tenants", "/tenants/<tenant_uuid>", "/tenants/<tenant_uuid>/domains"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/tenants/plugin.py", "endpoints": {"api_summary": "The API allows for the management of tenants and their associated domains. It provides endpoints for creating, retrieving, updating, and deleting tenants and their domains.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/tenants", "/tenants/<uuid:tenant_uuid>", "/tenants/<uuid:tenant_uuid>/domains"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/user_group/http.py", "endpoints": {"api_summary": "This API defines endpoints for managing user groups and their associated users. It allows for creating, reading, updating, and deleting groups and their associated users, as well as listing and filtering groups and users.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/groups", "/groups/<group_uuid>", "/groups/<group_uuid>/users", "/groups/<group_uuid>/users/<user_uuid>", "/users/<user_uuid>/groups"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/user_group/plugin.py", "endpoints": {"api_summary": "The API provides endpoints for managing users and groups in a Wazo system. It allows for the creation, retrieval, update, and deletion of users and groups, as well as the association of users with groups.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/groups/<uuid:group_uuid>/users/<uuid:user_uuid>", "/groups/<uuid:group_uuid>/users", "/users/<uuid:user_uuid>/groups"]}}
{"file": "cloned/wazo-auth/wazo_auth/services/ldap.py", "endpoints": {"api_summary": "The LDAPService API provides endpoints for managing LDAP configurations for Wazo tenants. It allows for creating, updating, and deleting LDAP configurations, as well as retrieving the current configuration for a given tenant.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/ldap_config", "/ldap_config/<tenant_uuid>"]}}
{"file": "cloned/data-act-broker-backend/tests/integration/sqs_work_dispatcher_tests.py", "endpoints": {"task_id": 1234}}
{"file": "cloned/data-act-broker-backend/tests/integration/domain_tests.py", "endpoints": {"api_summary": "This API provides information about agencies and their sub-tiers, including the ability to list all agencies, list all sub-tiers, and retrieve a list of agencies and sub-tiers based on the user's permissions.", "methods": ["GET"], "paths": ["/v1/list_agencies/", "/v1/list_all_agencies/", "/v1/list_sub_tier_agencies/"]}}
{"file": "cloned/data-act-broker-backend/tests/unit/dataactbroker/test_exception_handler.py", "endpoints": {"api_summary": "This API endpoint allows users to test the exception handler for the dataactbroker application. It takes three parameters, param1, param2, and param3, and returns a JSON object with a message indicating whether the input was valid or not.", "methods": ["GET"], "paths": ["/endpoint/"]}}
{"file": "cloned/data-act-broker-backend/tests/unit/dataactbroker/test_login_routes.py", "endpoints": {"api_summary": "This API handles user authentication and session management for the Data Broker application.", "methods": ["GET", "POST"], "paths": ["/login", "/logout", "/proxy_login"]}}
{"file": "cloned/data-act-broker-backend/dataactvalidator/health_check.py", "endpoints": {"api_summary": "The Validator API is a simple Flask application that provides a single endpoint for testing the server's status. The endpoint returns a simple message indicating that the server is running.", "methods": ["GET"], "paths": ["/"]}}
{"file": "cloned/data-act-broker-backend/dataactbroker/app.py", "endpoints": {"api_summary": "The Broker API provides endpoints for user authentication, file management, and data generation. It also includes endpoints for user management and dashboard functionality.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/", "/login", "/logout", "/users", "/users/<built-in function id>", "/files", "/files/<built-in function id>", "/generation", "/generation/<built-in function id>", "/dashboard", "/dashboard/<built-in function id>", "/settings", "/settings/<built-in function id>"]}}
{"file": "cloned/data-act-broker-backend/dataactbroker/routes/settings_routes.py", "endpoints": {"api_summary": "The API allows for the management of rule settings for a specific agency and file type. It provides endpoints for retrieving and updating the rule settings, as well as for saving the rule settings.", "methods": ["GET", "POST"], "paths": ["/v1/rule_settings/", "/v1/save_rule_settings/"]}}
{"file": "cloned/data-act-broker-backend/dataactbroker/routes/file_routes.py", "endpoints": {"api_summary": "This API provides endpoints for managing and validating DABS submissions, including file upload, validation, and publishing.", "methods": ["POST", "GET"], "paths": ["/v1/upload_dabs_files/", "/v1/check_status/", "/v1/submission_metadata/", "/v1/submission_data/", "/v1/revalidation_threshold/", "/v1/latest_publication_period/", "/v1/list_banners/", "/v1/list_submissions/", "/v1/list_latest_published_files/", "/v1/list_history/", "/v1/get_published_file/", "/v1/get_submitted_published_file/", "/v1/check_current_page/", "/v1/get_fabs_meta/", "/v1/upload_fabs_file/", "/v1/publish_fabs_file/", "/v1/get_obligations/", "/v1/get_submission_comments/", "/v1/update_submission_comments/", "/v1/get_comments_file/", "/v1/get_submission_zip/", "/v1/report_url/", "/v1/get_file_url/", "/v1/get_detached_file_url/", "/v1/delete_submission/", "/v1/published_submissions/", "/v1/publish_dabs_submission/", "/v1/certify_dabs_submission/", "/v1/publish_and_certify_dabs_submission/", "/v1/restart_validation/", "/v1/revert_submission/"]}}
{"file": "cloned/data-act-broker-backend/dataactbroker/routes/generation_routes.py", "endpoints": {"api_summary": "This API generates files for the broker, including D1, D2, E, and F files, as well as detached files for specific agencies and time periods.", "methods": ["POST", "GET"], "paths": ["/v1/generate_file/", "/v1/check_generation_status/", "/v1/generate_detached_file/", "/v1/check_detached_generation_status/"]}}
{"file": "cloned/data-act-broker-backend/dataactbroker/routes/domain_routes.py", "endpoints": {"api_summary": "This API provides endpoints for retrieving information about agencies, data sources, and other domain values used in the broker.", "methods": ["GET"], "paths": ["/v1/list_agencies/", "/v1/list_all_agencies/", "/v1/list_sub_tier_agencies/", "/v1/list_data_sources/"]}}
{"file": "cloned/data-act-broker-backend/dataactbroker/routes/dashboard_routes.py", "endpoints": {"api_summary": "This API provides endpoints for retrieving information about the active submission for the agency data dashboard.", "methods": ["GET", "POST"], "paths": ["/v1/get_rule_labels/", "/v1/historic_dabs_graphs/", "/v1/historic_dabs_table/", "/v1/active_submission_overview/", "/v1/get_impact_counts/", "/v1/get_significance_counts/", "/v1/active_submission_table/"]}}
{"file": "cloned/data-act-broker-backend/dataactbroker/routes/login_routes.py", "endpoints": {"api_summary": "The login API provides endpoints for logging in, logging out, and checking the status of the current session. It also provides endpoints for proxy and CAIA logins.", "methods": ["POST", "GET"], "paths": ["/v1/login/", "/v1/proxy_login/", "/v1/caia_login/", "/v1/logout/", "/v1/session/"]}}
{"file": "cloned/data-act-broker-backend/dataactbroker/routes/user_routes.py", "endpoints": {"api_summary": "This API provides endpoints for managing users and their permissions, as well as sending emails to users.", "methods": ["GET", "POST"], "paths": ["/v1/list_user_emails/", "/v1/list_submission_users/", "/v1/active_user/", "/v1/set_skip_guide/"]}}
{"file": "cloned/ccpay-payment-app/gov-pay-client/src/main/java/uk/gov/hmcts/payment/api/external/client/GovPayClient.java", "endpoints": {"api_summary": "The GovPayClient class provides methods for interacting with the GOV.UK Pay API. It includes methods for creating and retrieving payments, cancelling payments, and refunding payments.", "methods": ["GET", "POST"], "paths": ["/govpay/payments", "/govpay/payments/<payment_id>", "/govpay/payments/<payment_id>/cancel", "/govpay/payments/<payment_id>/refund"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/configuration/security/SpringSecurityConfiguration.java", "endpoints": {"api_summary": "This API provides payment-related functionality, including payment processing, refunds, and payment status checks.", "methods": ["GET", "POST", "PATCH", "DELETE"], "paths": ["/payments", "/payments1", "/card-payments/*/status", "/card-payments", "/card-payments/*/cancel", "/card-payments/*/details", "/pba-accounts/*/payments", "/refund-for-payment", "/refund-retro-remission", "/refund/resubmit/*", "/reference-data/**", "/case-payment-orders**", "/api/**", "/payment-failures/**"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/controllers/MaintenanceJobsController.java", "endpoints": {"api_summary": "The MaintenanceJobsController API provides a RESTful interface for updating payment status on all gov pay pending card payments.", "methods": ["PATCH"], "paths": ["/jobs/card-payments-status-update"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/controllers/ReplayCreditAccountPaymentController.java", "endpoints": {"api_summary": "The Replay Credit Account Payment API allows for the replay of credit account payments that have failed. It updates the payment status to 'failed' and adds a payment history comment indicating the failure. If the 'isReplayPBAPayments' parameter is set to true, it also replays the new PBA payment as data provided in the CSV file.", "methods": ["POST"], "paths": ["/replay-credit-account-payments"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/controllers/AccountController.java", "endpoints": {"api_summary": "The AccountController API provides endpoints for retrieving account information and handling errors related to account status.", "methods": ["GET"], "paths": ["/accounts/{accountNumber}"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/controllers/RefundsController.java", "endpoints": {"api_summary": "The RefundsController API provides endpoints for creating, updating, and deleting refunds for payments. It also provides an endpoint for updating the remission amount in the resubmit journey.", "methods": ["POST", "PATCH", "DELETE"], "paths": ["/refund-for-payment", "/refund-retro-remission", "/refund/resubmit/{payment-reference}", "/refund/{refundReference}"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/controllers/PBAController.java", "endpoints": {"api_summary": "The Pay by Account (PBA) API allows users to retrieve payments for a PBA account and get PBA account details from ref data.", "methods": ["GET"], "paths": ["/pba-accounts/{account}/payments", "/pba-accounts"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/controllers/ServiceRequestController.java", "endpoints": {"api_summary": "This API is a RESTful API that allows users to create, retrieve, and update service requests and payments for those requests.", "methods": ["GET", "POST", "PATCH"], "paths": ["/service-request", "/service-request/{service-request-reference}/pba-payments", "/service-request/{service-request-reference}/card-payments", "/card-payments/{internal-reference}/status"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/controllers/FeePayApportionController.java", "endpoints": {"api_summary": "The FeePayApportionController API provides endpoints for retrieving apportionment details for a payment reference.", "methods": ["GET"], "paths": ["/payment-groups/fee-pay-apportion/{paymentreference}"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/controllers/CasePaymentOrdersController.java", "endpoints": {"api_summary": "The Case Payment Orders API allows retrieving payment orders for a case. It takes in a list of case IDs and returns a list of payment orders for those cases.", "methods": ["GET"], "paths": ["/case-payment-orders"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/controllers/PaymentReportController.java", "endpoints": {"api_summary": "The PaymentReportController API provides endpoints for generating and emailing payment reports, as well as for generating reports for payment failures.", "methods": ["POST"], "paths": ["/jobs/email-pay-reports", "/jobs/duplicate-payment-process"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/controllers/PaymentReferenceDataController.java", "endpoints": {"api_summary": "This API provides information about payment reference data, including payment channels, methods, providers, and statuses. It also allows retrieving a list of allowed legacy sites.", "methods": ["GET"], "paths": ["/refdata/channels", "/refdata/methods", "/refdata/providers", "/refdata/status", "/refdata/legacy-sites"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/controllers/ServiceRequestReportController.java", "endpoints": {"api_summary": "The Service Request Report API provides a way to generate and email duplicate service request count CSV reports. The API takes a date parameter in the format YYYY-MM-DD and returns a report with the number of duplicate service requests for that date.", "methods": ["POST"], "paths": ["/jobs/email-duplicate-sr-report"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/controllers/CreditAccountPaymentController.java", "endpoints": {"api_summary": "The Credit Account Payment API allows for the creation, retrieval, and deletion of credit account payments. It also provides a way to retrieve the status of a payment.", "methods": ["POST", "GET", "DELETE"], "paths": ["/credit-account-payments", "/credit-account-payments/{paymentReference}", "/credit-account-payments/{paymentReference}/statuses"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/controllers/PaymentStatusController.java", "endpoints": {"api_summary": "The PaymentStatusController API provides endpoints for managing payment failures and retrieving payment failure reports. It also includes endpoints for updating payment status and generating reports for telephony payments.", "methods": ["GET", "POST", "PATCH", "DELETE"], "paths": ["/payment-failures/bounced-cheque", "/payment-failures/chargeback", "/payment-failures/unprocessed-payment", "/payment-failures/{paymentReference}", "/payment-status-delete/{failureReference}", "/payment-failures/{failureReference}", "/jobs/unprocessed-payment-update", "/payment-failures/failure-report", "/telephony-payments/telephony-payments-report"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/controllers/PaymentController.java", "endpoints": {"api_summary": "This API is used to manage payments for various services in the UK government.", "methods": ["GET", "POST", "PATCH"], "paths": ["/payments", "/payments/{reference}", "/reconciliation-payments", "/payments/{reference}/status/{status}"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/controllers/CaseController.java", "endpoints": {"api_summary": "The CaseController API provides endpoints for retrieving payments and payment groups for a case.", "methods": ["GET"], "paths": ["/cases/{case}/payments", "/cases/{ccdcasenumber}/paymentgroups"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/controllers/FeesController.java", "endpoints": {"api_summary": "The Fees API allows for the deletion of fees by ID. It also handles bad requests and returns a 400 status code if the fee is not found.", "methods": ["DELETE"], "paths": ["/fees/{feeId}"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/controllers/BulkScanningReportController.java", "endpoints": {"api_summary": "The Bulk Scanning Report API provides a way to generate reports for the Bulk Scan Payment System. It allows users to retrieve processed and unallocated reports, as well as surplus and shortfall reports.", "methods": ["GET"], "paths": ["/payment/bulkscan-data-report"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/controllers/RemissionController.java", "endpoints": {"api_summary": "The Remission API allows for the creation of remission records for payments.", "methods": ["POST"], "paths": ["/remissions", "/payment-groups/{payment-group-reference}/fees/{unique_fee_id}/remissions", "/payment-groups/{payment-group-reference}/fees/{unique_fee_id}/retro-remission"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/controllers/PaymentRecordController.java", "endpoints": {"api_summary": "The PaymentRecordController API allows for the recording of payments and their associated fees. It provides a way to create a payment record, retrieve payment records, and update payment status.", "methods": ["POST"], "paths": ["/payment-records"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/controllers/PaymentAllocationController.java", "endpoints": {"api_summary": "The Payment Allocation API allows for the creation of payment allocations for a payment reference. It also allows for retrieving payment allocations for a payment reference.", "methods": ["POST"], "paths": ["/payment-allocations"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/controllers/pcipal/TelephonyController.java", "endpoints": {"api_summary": "The Telephony Payment API allows external systems to update the payment status of a transaction with pci-pal call back response. The API accepts a request in application/x-www-form-urlencoded format and returns a 204 No Content response if the payment status is updated successfully. If the payment is not found, a 404 Not Found response is returned.", "methods": ["POST"], "paths": ["/telephony/callback"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/controllers/mock/MockCallbackControllerForTesting.java", "endpoints": {"api_summary": "The MockCallbackControllerForTesting API provides a mock implementation of a payment callback service. It allows for testing of payment processing and callback functionality without the need for a real payment gateway.", "methods": ["PUT", "GET"], "paths": ["/mock-api/serviceCallback", "/mock-api/serviceCallback/{reference}"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/v1/controllers/PaymentOldController.java", "endpoints": {"api_summary": "The PaymentOld API allows users to create, retrieve, cancel, and refund payments. It also provides endpoints for retrieving payment details and refund amounts.", "methods": ["GET", "POST"], "paths": ["/users/{userId}/payments", "/users/{userId}/payments/{paymentId}", "/users/{userId}/payments/{paymentId}/cancel", "/users/{userId}/payments/{paymentId}/refunds"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/reports/FeesRegisterClient.java", "endpoints": {"api_summary": "The FeesRegisterClient API provides a list of fees data from the fees-register service. It includes a GET endpoint for retrieving all fees data and a default method for retrieving the fees data as a map.", "methods": ["GET"], "paths": ["/fees-register/fees"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/service/IdamServiceImpl.java", "endpoints": {"api_summary": "The IdamServiceImpl class provides methods for retrieving user information from the IDAM service. It defines three endpoints: /details, /o/userinfo, and /api/v1/users.", "methods": ["GET"], "paths": ["/details", "/o/userinfo", "/api/v1/users"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/service/RefundRemissionEnableServiceImpl.java", "endpoints": {"api_summary": "The RefundRemissionEnableServiceImpl class provides methods for checking the eligibility of refunds and remissions for payments and fees. It also includes methods for setting user roles and validating refund roles with service names.", "methods": ["GET", "POST"], "paths": ["/refund"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/service/PaymentRefundsService.java", "endpoints": {"api_summary": "The PaymentRefundsService API provides endpoints for creating, validating, and updating refunds, as well as checking refunds against remission and retrieving refunds approved from the refund service.", "methods": ["POST", "GET", "PUT", "DELETE"], "paths": ["/payment-refunds/create", "/payment-refunds/validate", "/payment-refunds/update", "/payment-refunds/check-remission", "/payment-refunds/get-approved"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/service/IacServiceImpl.java", "endpoints": {"api_summary": "The IacServiceImpl class provides a service to retrieve supplementary information for IAC payments. It exposes a single endpoint that accepts a list of PaymentDto objects and a service name, and returns a SupplementaryPaymentDto object containing the supplementary information for the IAC payments.", "methods": ["POST"], "paths": ["/supplementary-details"]}}
{"file": "cloned/ccpay-payment-app/api/src/contractTest/java/uk/gov/hmcts/payment/api/controllers/consumer/ReferenceDataLocationConsumerTest.java", "endpoints": {"api_summary": "This API provides information about organisational services for a given jurisdiction and case type.", "methods": ["GET"], "paths": ["/refdata/location/orgServices"]}}
{"file": "cloned/ccpay-payment-app/api/src/contractTest/java/uk/gov/hmcts/payment/api/controllers/provider/ServiceRequestProviderTest.java", "endpoints": {"api_summary": "This API allows for the creation of a service request for a valid payload.", "methods": ["POST"], "paths": ["/service-requests"]}}
{"file": "cloned/ccpay-payment-app/api/src/functionalTest/java/uk/gov/hmcts/payment/functional/BulkscanPaymentFunctionalTest.java", "endpoints": {"api_summary": "This API allows for the creation and management of payments for bulk scan cases.", "methods": ["POST", "GET", "DELETE"], "paths": ["/payments", "/payments/<payment_reference>", "/payments/<payment_group_reference>"]}}
{"file": "cloned/ccpay-payment-app/api/src/functionalTest/java/uk/gov/hmcts/payment/functional/PaymentBulkscanPerformanceLiberataTest.java", "endpoints": {"api_summary": "This API is used to create and manage payments for bulk scan cases in the Divorce service.", "methods": ["POST", "GET", "DELETE"], "paths": ["/payments", "/payments/<payment_reference>", "/payments/<payment_group_reference>"]}}
{"file": "cloned/ccpay-payment-app/api/src/functionalTest/java/uk/gov/hmcts/payment/functional/OnlineCardPaymentFunctionalTest.java", "endpoints": {"api_summary": "This API allows users to create and retrieve card payments for various services, including Civil Money Claims, Immigration and Asylum Appeals, Adoption, and Family Private Law.", "methods": ["GET", "POST"], "paths": ["/payments", "/payments/<payment_reference>"]}}
{"file": "cloned/ccpay-payment-app/api/src/functionalTest/java/uk/gov/hmcts/payment/functional/PaymentsSearchFunctionalTest.java", "endpoints": {"api_summary": "This API allows users to search for payments made within a specified date range. It also allows users to create new payments and retrieve information about existing payments.", "methods": ["GET", "POST"], "paths": ["/payments/search", "/payments/create", "/payments/<payment_id>"]}}
{"file": "cloned/ccpay-payment-app/api/src/functionalTest/java/uk/gov/hmcts/payment/functional/TelephonyPaymentsTest.java", "endpoints": {"api_summary": "This API is a test suite for the payment service. It includes tests for creating and retrieving payments, as well as tests for the payment report.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/payments", "/payments/<payment_reference>", "/payments/report"]}}
{"file": "cloned/ccpay-payment-app/api/src/functionalTest/java/uk/gov/hmcts/payment/functional/ServiceRequestPaymentFunctionalTest.java", "endpoints": {"api_summary": "This API allows for the creation and management of service requests and payments for the HMCTS payment system.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/service-requests", "/service-requests/<service_request_reference>", "/service-requests/<service_request_reference>/payments", "/service-requests/<service_request_reference>/payments/<payment_reference>"]}}
{"file": "cloned/ccpay-payment-app/api/src/functionalTest/java/uk/gov/hmcts/payment/functional/RefDataFunctionalTest.java", "endpoints": {"api_summary": "The API provides a list of channels for a given reference data set.", "methods": ["GET"], "paths": ["/refdata/channels"]}}
{"file": "cloned/ccpay-payment-app/api/src/functionalTest/java/uk/gov/hmcts/payment/functional/BarPaymentFunctionalTest.java", "endpoints": {"api_summary": "This API allows for the creation and retrieval of payment records and the search of payments based on various criteria.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/payments", "/payments/<payment_reference>", "/payments/search"]}}
{"file": "cloned/ccpay-payment-app/api/src/functionalTest/java/uk/gov/hmcts/payment/functional/PaymentAmountTest.java", "endpoints": {"api_summary": "This API allows for the creation and management of payments, including card payments, PBA payments, and BAR payments. It also allows for the retrieval of payment information and the deletion of payment records.", "methods": ["POST", "GET", "DELETE"], "paths": ["/payments/card", "/payments/pba", "/payments/bar", "/payments/<payment_reference>", "/payments"]}}
{"file": "cloned/ccpay-payment-app/api/src/functionalTest/java/uk/gov/hmcts/payment/functional/s2s/S2sApi.java", "endpoints": {"api_summary": "The S2sApi interface defines a single REST API endpoint for generating a service token for a microservice. The endpoint accepts a POST request to /lease, with a JSON body containing the microservice name and one-time password. The response is a plain text string representing the service token.", "methods": ["POST"], "paths": ["/lease"]}}
{"file": "cloned/ccpay-payment-app/api/src/functionalTest/java/uk/gov/hmcts/payment/functional/idam/IdamApi.java", "endpoints": {"api_summary": "The IdamApi interface defines a set of REST API endpoints for managing user accounts and authenticating users. It includes endpoints for creating and deleting user accounts, as well as endpoints for authenticating users and exchanging authorization codes for access tokens.", "methods": ["POST", "DELETE", "GET"], "paths": ["/testing-support/accounts", "/oauth2/authorize", "/oauth2/token", "/o/token"]}}
{"file": "cloned/ccpay-payment-app/api/src/functionalTest/java/uk/gov/hmcts/payment/functional/service/RefDataTestService.java", "endpoints": {"api_summary": "The RefDataTestService API provides functionality for working with organisations in the payment system. It includes endpoints for creating, updating, and retrieving organisation information.", "methods": ["POST", "PUT"], "paths": ["/refdata/internal/v1/organisations", "/refdata/internal/v1/organisations/{organisationIdentifier}"]}}
{"file": "cloned/ccpay-payment-app/api/src/functionalTest/java/uk/gov/hmcts/payment/functional/service/ServiceRequestTestService.java", "endpoints": {"api_summary": "The ServiceRequestTestService API provides endpoints for creating and managing service requests, as well as retrieving payment groups and payment statuses.", "methods": ["POST", "GET"], "paths": ["/service-request", "/cases/{ccdcasenumber}/paymentgroups", "/service-request/{serviceRequestReference}/pba-payments", "/service-request/{service-request-reference}/card-payments", "/card-payments/{internal-reference}/status"]}}
{"file": "cloned/ccpay-payment-app/api/src/functionalTest/java/uk/gov/hmcts/payment/functional/service/PBAAccountsTestService.java", "endpoints": {"api_summary": "The PBAAccountsTestService API provides endpoints for retrieving and managing payment accounts for the Public Bank Accounts (PBA) service. It allows users to retrieve a list of their PBA accounts, create new accounts, and update existing accounts.", "methods": ["GET", "POST"], "paths": ["/pba-accounts"]}}
{"file": "cloned/ccpay-payment-app/api/src/functionalTest/java/uk/gov/hmcts/payment/functional/service/CaseTestService.java", "endpoints": {"api_summary": "The CaseTestService API provides endpoints for retrieving payment groups for a case in the CCD system. It uses the SerenityRest library for making HTTP requests and requires authentication using user and service tokens.", "methods": ["GET"], "paths": ["/cases/{ccdcasenumber}/paymentgroups"]}}
{"file": "cloned/ccpay-payment-app/api/src/functionalTest/java/uk/gov/hmcts/payment/functional/dsl/PaymentsTestDsl.java", "endpoints": {"api_summary": "This API provides functionality for managing payments, including creating payment groups, adding fees to payment groups, and retrieving payment information.", "methods": ["GET", "POST", "PUT", "PATCH"], "paths": ["/payment-groups", "/payment-groups/{payment-group-reference}", "/payments/{payment-reference}", "/accounts/{account-number}", "/info"]}}
{"file": "cloned/ccpay-payment-app/api/src/test/java/uk/gov/hmcts/payment/api/componenttests/CreditAccountPaymentControllerMockTest.java", "endpoints": {"api_summary": "The Credit Account Payment API allows for the retrieval and deletion of credit account payments.", "methods": ["GET", "DELETE"], "paths": ["/credit-account-payments/<payment_reference>"]}}
{"file": "cloned/ccpay-payment-app/api/src/test/java/uk/gov/hmcts/payment/api/componenttests/GovPayComponentMockTest.java", "endpoints": {"api_summary": "This API is a component test for the GovPay API. It tests the functionality of the GovPay API by making HTTP requests to the API and verifying the responses.", "methods": ["GET", "POST"], "paths": ["/v1/payments"]}}
{"file": "cloned/ccpay-payment-app/api/src/test/java/uk/gov/hmcts/payment/api/componenttests/serviceanduser/ServiceAndUserTestApplication.java", "endpoints": {"api_summary": "This API provides a test endpoint for the ServiceAndUserDetails authentication mechanism in the HMCTS payment API.", "methods": ["GET"], "paths": ["/test"]}}
{"file": "cloned/ccpay-payment-app/api/src/test/java/uk/gov/hmcts/payment/api/controllers/FeesControllerTest.java", "endpoints": {"api_summary": "This API provides endpoints for managing fees and remissions for the HMCTS payment system.", "methods": ["GET", "POST", "DELETE"], "paths": ["/payment-groups", "/fees/<feeId>", "/remissions"]}}
{"file": "cloned/ccpay-payment-app/api/src/test/java/uk/gov/hmcts/payment/api/v1/componenttests/PaymentsRefDataComponentTest.java", "endpoints": {"api_summary": "The Payments API provides endpoints for retrieving payment channels, methods, providers, and statuses. It allows users to retrieve a list of payment channels, methods, providers, and statuses, and to retrieve specific payment channels, methods, providers, and statuses by ID.", "methods": ["GET"], "paths": ["/refdata/channels", "/refdata/methods", "/refdata/providers", "/refdata/status"]}}
{"file": "cloned/ccpay-payment-app/api/src/test/java/uk/gov/hmcts/payment/api/mapper/ServiceRequestDtoDomainMapperTest.java", "endpoints": {"api_summary": "This API is responsible for mapping service requests to domain objects and creating payment requests for online card payments.", "methods": ["GET", "POST"], "paths": ["/service-requests", "/service-requests/<case_reference>", "/service-requests/<case_reference>/payments"]}}
{"file": "cloned/ccpay-payment-app/model/src/main/java/uk/gov/hmcts/payment/api/service/UserAwareDelegatingCreditAccountPaymentService.java", "endpoints": {"api_summary": "The UserAwareDelegatingCreditAccountPaymentService API provides endpoints for creating, retrieving, and deleting credit account payments, as well as searching for payments by date range.", "methods": ["POST", "GET", "DELETE"], "paths": ["/payments", "/payments/<payment_reference>", "/payments/search"]}}
{"file": "cloned/ccpay-payment-app/model/src/main/java/uk/gov/hmcts/payment/api/service/PaymentGroupServiceImpl.java", "endpoints": {"api_summary": "The PaymentGroupServiceImpl class provides methods for managing payment groups, including adding new fees, payments, and remissions, and searching for payment groups by CCD case number.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/payment-groups", "/payment-groups/<payment_group_reference>", "/payment-groups/<payment_group_reference>/fees", "/payment-groups/<payment_group_reference>/payments", "/payment-groups/<payment_group_reference>/remissions"]}}
{"file": "cloned/ccpay-payment-app/model/src/main/java/uk/gov/hmcts/payment/api/service/ReferenceDataServiceImpl.java", "endpoints": {"api_summary": "The ReferenceDataServiceImpl class provides a service to retrieve site IDs and organisational details from the reference data service. It uses the RestTemplatePaymentGroup to make HTTP requests to the reference data service.", "methods": ["GET"], "paths": ["/refdata/location/orgServices"]}}
{"file": "cloned/ccpay-payment-app/model/src/main/java/uk/gov/hmcts/payment/api/service/govpay/GovPayDelegatingPaymentService.java", "endpoints": {"api_summary": "The GovPayDelegatingPaymentService API allows for the creation, retrieval, and cancellation of payments using the GovPay service.", "methods": ["POST", "GET", "PUT", "DELETE"], "paths": ["/payments", "/payments/<payment_id>", "/payments/<payment_id>/cancel"]}}
{"file": "cloned/ccpay-payment-app/model/src/test/java/uk/gov/hmcts/payment/api/service/UserAwareDelegatingPaymentServiceTest.java", "endpoints": {"api_summary": "This API is responsible for managing payments for the HMCTS payment service. It allows for the creation of payments, retrieval of payment information, and management of payment statuses.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/payments", "/payments/<payment_id>", "/payments/<payment_id>/status"]}}
{"file": "cloned/ccpay-payment-app/reference-data/src/main/java/uk/gov/hmcts/payment/referencedata/controllers/ReferenceDataController.java", "endpoints": {"api_summary": "The Reference Data REST API provides information about allowed sites for payments.", "methods": ["GET"], "paths": ["/reference-data/sites"]}}
{"file": "cloned/ccpay-payment-app/case-payment-orders-client/src/main/java/uk/gov/hmcts/payment/casepaymentorders/client/CpoServiceClient.java", "endpoints": {"api_summary": "The Case Payment Orders API allows retrieving case payment orders by ID, case ID, or page number and size. It also allows creating and updating case payment orders.", "methods": ["GET", "POST", "PUT"], "paths": ["/case-payment-orders", "/case-payment-orders/<id>", "/case-payment-orders/<case_id>", "/case-payment-orders?page=<page_number>&size=<page_size>"]}}
{"file": "cloned/ccpay-payment-app/case-payment-orders-client/src/test/java/uk/gov/hmcts/payment/casepaymentorders/client/CpoServiceClientTest.java", "endpoints": {"api_summary": "The CpoServiceClientTest class provides a REST client for the Case Payment Orders API. It defines methods for retrieving case payment orders by ID or case ID, and for retrieving a list of case payment orders. The client also handles errors and exceptions that may occur during API calls.", "methods": ["GET", "POST"], "paths": ["/case-payment-orders/<id>", "/case-payment-orders?ids=<id>&page=<page>&size=<size>"]}}
{"file": "cloned/php-gaming-website/assets/js/Chat/ChatService.js", "endpoints": {"api_summary": "The ChatService API allows for writing and retrieving messages in a chat room. It provides two endpoints, one for writing a message and one for retrieving all messages in a chat room.", "methods": ["POST", "GET"], "paths": ["/api/chat/chats/<chatId>/write-message", "/api/chat/chats/<chatId>/messages"]}}
{"file": "cloned/php-gaming-website/assets/js/ConnectFour/GameService.js", "endpoints": {"api_summary": "The GameService API provides endpoints for playing a game of Connect Four. It allows users to join, move, resign, and abort games. The API also provides a redirect endpoint to the game page.", "methods": ["GET", "POST"], "paths": ["/game/<gameId>", "/api/connect-four/games/<gameId>/move", "/api/connect-four/games/<gameId>/abort", "/api/connect-four/games/<gameId>/resign", "/api/connect-four/games/<gameId>/join"]}}
{"file": "cloned/saleor/saleor/urls.py", "endpoints": {"api_summary": "This API provides endpoints for handling digital products, plugins, and thumbnails. It also includes a GraphQL endpoint for querying data and a JWKS endpoint for JSON Web Key Sets.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/graphql/", "/digital-download/<token>/", "/plugins/channel/<channel_slug>/<plugin_id>/", "/plugins/global/<plugin_id>/", "/plugins/<plugin_id>/", "/thumbnail/<instance_id>/<size>/<format>/", "/.well-known/jwks.json"]}}
{"file": "cloned/saleor/saleor/product/views.py", "endpoints": {"api_summary": "This API provides a direct download link to digital content if the given token is still valid.", "methods": ["GET"], "paths": ["/digital-product/<token>"]}}
{"file": "cloned/saleor/saleor/webhook/transport/list_stored_payment_methods.py", "endpoints": {"api_summary": "This API defines methods for managing stored payment methods and initializing tokenization sessions for payment gateways.", "methods": ["GET", "POST"], "paths": ["/list-stored-payment-methods", "/payment-gateway-initialize-tokenization", "/payment-method-tokenization"]}}
{"file": "cloned/saleor/saleor/webhook/response_schemas/payment.py", "endpoints": {"api_summary": "This API defines endpoints for managing payment methods and tokenization.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/payment-methods", "/payment-methods/<payment_method_id>", "/payment-methods/<payment_method_id>/tokenize"]}}
{"file": "cloned/saleor/saleor/tests/fixtures.py", "endpoints": {"api_summary": "This file defines several fixtures for testing.", "methods": ["GET", "POST", "PUT", "PATCH", "DELETE"], "paths": ["/api/v1/products/", "/api/v1/products/<int:product_id>/"]}}
{"file": "cloned/saleor/saleor/tests/e2e/product/test_should_create_variants_in_bulk.py", "endpoints": {"api_summary": "This API creates a product with few variants and updates its channel listing, creates variants with attributes, channel listing, and stock in bulk, and checks the product variants.", "methods": ["POST", "PUT", "GET"], "paths": ["/products", "/products/<product_id>/channel-listings", "/products/<product_id>/variants", "/products/<product_id>/variants/bulk"]}}
{"file": "cloned/saleor/saleor/tests/e2e/product/test_create_product_with_all_attributes_types.py", "endpoints": {"api_summary": "This API defines a product creation endpoint that allows users to create a product with various attributes, including dropdown, multiselect, date, datetime, plain text, rich text, numeric, boolean, swatch, reference, and file attributes.", "methods": ["POST"], "paths": ["/products/create"]}}
{"file": "cloned/saleor/saleor/tests/e2e/product/utils/collection.py", "endpoints": {"api_summary": "This API defines a single endpoint for creating a new collection in a GraphQL schema. The endpoint accepts a JSON object with a `name` field and returns a JSON object with the created collection's `id`, `name`, and `slug`.", "methods": ["POST"], "paths": ["/graphql/mutation/collectionCreate"]}}
{"file": "cloned/saleor/saleor/tests/e2e/product/utils/product_update.py", "endpoints": {"api_summary": "This API allows for the updating of product information, including name, product type, category, attributes, collections, and tax class. It also allows for the retrieval of product information.", "methods": ["POST"], "paths": ["/products/<product_id>"]}}
{"file": "cloned/saleor/saleor/tests/e2e/product/utils/category.py", "endpoints": {"api_summary": "This API defines a single endpoint for creating a new category. The endpoint accepts a JSON object with a name field and returns a JSON object with the created category's ID and name.", "methods": ["POST"], "paths": ["/categories"]}}
{"file": "cloned/saleor/saleor/tests/e2e/product/utils/product_variant_bulk_create.py", "endpoints": {"api_summary": "This API allows for the bulk creation of product variants. It takes a product ID and a list of variant inputs, and returns a list of created product variants.", "methods": ["POST"], "paths": ["/product-variants/bulk-create"]}}
{"file": "cloned/saleor/saleor/tests/e2e/product/utils/__init__.py", "endpoints": {"api_summary": "This API defines endpoints for creating and managing products, product types, and product variants. It also includes endpoints for creating and managing digital content, collections, and collection listings.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/categories", "/digital-content", "/product-types", "/products", "/product-variants", "/collections", "/collection-listings"]}}
{"file": "cloned/saleor/saleor/tests/e2e/orders/test_order_fulfill_and_add_tracking.py", "endpoints": {"api_summary": "This API defines endpoints for creating, updating, and fulfilling orders, as well as adding tracking information to orders.", "methods": ["POST", "PUT", "GET"], "paths": ["/orders", "/orders/<order_id>", "/orders/<order_id>/fulfill", "/orders/<order_id>/tracking"]}}
{"file": "cloned/saleor/saleor/tests/e2e/orders/test_order_create_invoice_with_metadata.py", "endpoints": {"api_summary": "This API defines endpoints for creating, updating, and querying orders, as well as creating invoices for fulfilled orders.", "methods": ["POST", "PUT", "GET"], "paths": ["/orders", "/orders/<order_id>", "/orders/<order_id>/invoice"]}}
{"file": "cloned/saleor/saleor/tests/e2e/orders/test_order_in_channel_with_transaction_flow_as_mark_as_paid_strategy.py", "endpoints": {"api_summary": "This API defines a set of endpoints for creating, updating, and querying orders in a shop. It also includes endpoints for marking orders as paid and for retrieving information about orders.", "methods": ["POST", "PUT", "GET"], "paths": ["/orders", "/orders/<order_id>", "/orders/<order_id>/mark-as-paid", "/orders/<order_id>/query"]}}
{"file": "cloned/saleor/saleor/tests/e2e/orders/test_able_to_decide_if_address_is_saved_in_user_address_book.py", "endpoints": {"api_summary": "This API allows you to create, update, and complete orders, as well as manage user addresses.", "methods": ["POST", "PUT", "GET"], "paths": ["/order/create", "/order/update", "/order/complete", "/user/address"]}}
{"file": "cloned/saleor/saleor/tests/e2e/orders/test_able_to_update_draft_order_after_bulk_order_creation_with_line_discount.py", "endpoints": {"api_summary": "This API is used to create and update orders in a shop. It allows for bulk order creation, order updates, and order querying.", "methods": ["POST", "PUT", "GET"], "paths": ["/order/bulk-create", "/order/update/<order_id>", "/order/<order_id>"]}}
{"file": "cloned/saleor/saleor/tests/e2e/orders/test_order_cancel_fulfillment.py", "endpoints": {"api_summary": "This API defines endpoints for creating, updating, and fulfilling orders, as well as marking orders as paid and canceling fulfillments.", "methods": ["POST", "PUT", "GET", "DELETE"], "paths": ["/orders", "/orders/<order_id>", "/orders/<order_id>/fulfillments", "/orders/<order_id>/fulfillments/<fulfillment_id>"]}}
{"file": "cloned/saleor/saleor/tests/e2e/orders/discounts/test_apply_better_promotion_to_product.py", "endpoints": {"api_summary": "This API defines a set of endpoints for creating and managing promotions, including creating promotion rules, assigning products to promotions, and calculating discounts for products.", "methods": ["POST", "GET", "PUT", "DELETE"], "paths": ["/promotions", "/promotions/<promotion_id>", "/promotions/<promotion_id>/rules", "/promotions/<promotion_id>/products"]}}
{"file": "cloned/saleor/saleor/tests/e2e/orders/discounts/test_order_products_on_percentage_sale.py", "endpoints": {"api_summary": "This API defines a set of endpoints for creating, updating, and completing draft orders, as well as adding products and shipping methods to orders.", "methods": ["POST", "PUT", "GET"], "paths": ["/draft-order/create", "/draft-order/update", "/draft-order/complete", "/order/lines/create", "/order/shipping-method/add"]}}
{"file": "cloned/saleor/saleor/tests/e2e/orders/discounts/test_order_product_with_percentage_promotion.py", "endpoints": {"api_summary": "This API defines a set of endpoints for creating, updating, and retrieving orders, including the ability to apply discounts and promotions to orders.", "methods": ["POST", "PUT", "GET"], "paths": ["/orders", "/orders/<order_id>", "/orders/<order_id>/discounts", "/orders/<order_id>/promotions"]}}
{"file": "cloned/saleor/saleor/tests/e2e/orders/discounts/test_order_products_on_fixed_sale.py", "endpoints": {"api_summary": "This API defines a set of endpoints for creating, updating, and completing draft orders, as well as adding products and shipping methods to orders.", "methods": ["POST", "PUT", "GET"], "paths": ["/draft-order/create", "/draft-order/update", "/draft-order/complete", "/order/lines/create", "/order/shipping-method"]}}
{"file": "cloned/saleor/saleor/tests/e2e/orders/discounts/test_gift_promotion_applied_on_draft_order.py", "endpoints": {"api_summary": "This API defines a set of endpoints for creating, updating, and retrieving orders, including order lines, shipping, and taxes.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/orders", "/orders/<order_id>", "/orders/<order_id>/lines", "/orders/<order_id>/shipping", "/orders/<order_id>/taxes"]}}
{"file": "cloned/saleor/saleor/tests/e2e/orders/discounts/test_order_voucher_is_released_when_draft_order_is_deleted.py", "endpoints": {"api_summary": "This API defines a set of endpoints for creating, deleting, and querying draft orders, as well as managing vouchers and their usage.", "methods": ["POST", "DELETE", "GET"], "paths": ["/draft-order/create", "/draft-order/delete", "/draft-order/query", "/voucher/create", "/voucher/delete", "/voucher/query"]}}
{"file": "cloned/saleor/saleor/tests/e2e/orders/discounts/test_order_voucher_free_shipping.py", "endpoints": {"api_summary": "This API defines a draft order with voucher free shipping, including creating a product, warehouse, shipping method, and updating tax configuration. It also includes steps to create a draft order, add order lines, add a shipping method, add a voucher, and complete the draft order.", "methods": ["POST", "PUT", "GET"], "paths": ["/draft-order", "/draft-order/<order_id>", "/draft-order/<order_id>/lines", "/draft-order/<order_id>/shipping", "/draft-order/<order_id>/voucher", "/draft-order/<order_id>/complete"]}}
{"file": "cloned/saleor/saleor/tests/e2e/orders/discounts/test_promotion_applied_on_draft_order_with_specific_total.py", "endpoints": {"api_summary": "This API defines a set of endpoints for creating, updating, and retrieving orders, including order lines, shipping methods, and discounts.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/orders", "/orders/<order_id>", "/orders/<order_id>/lines", "/orders/<order_id>/shipping", "/orders/<order_id>/discounts"]}}
{"file": "cloned/saleor/saleor/tests/e2e/orders/discounts/test_order_products_on_promotion_and_manual_order_discount.py", "endpoints": {"api_summary": "This API defines a set of endpoints for creating, updating, and completing orders, as well as adding discounts to orders. It also includes endpoints for creating and managing promotions and promotion rules.", "methods": ["POST", "PUT", "GET", "DELETE"], "paths": ["/orders", "/orders/<order_id>", "/orders/<order_id>/discounts", "/promotions", "/promotions/<promotion_id>", "/promotions/<promotion_id>/rules"]}}
{"file": "cloned/saleor/saleor/tests/e2e/orders/discounts/test_order_products_on_fixed_promotion.py", "endpoints": {"api_summary": "This API defines a set of endpoints for creating, updating, and retrieving orders, including the ability to apply discounts and promotions to orders.", "methods": ["POST", "PUT", "GET"], "paths": ["/orders", "/orders/<order_id>", "/orders/<order_id>/discounts", "/orders/<order_id>/promotions"]}}
{"file": "cloned/saleor/saleor/tests/e2e/orders/zero_total/test_0_total_order_with_100_percent_manual_discount.py", "endpoints": {"api_summary": "This API is used to create, update, and complete draft orders in a shop. It also allows for adding discounts to orders.", "methods": ["POST", "PUT", "GET"], "paths": ["/orders/draft", "/orders/<order_id>/complete", "/orders/<order_id>/discounts"]}}
{"file": "cloned/saleor/saleor/tests/e2e/orders/taxes/test_order_calculate_simple_taxes_product_type_tax_class.py", "endpoints": {"api_summary": "This API defines a set of endpoints for creating, updating, and retrieving orders in an e-commerce system.", "methods": ["POST", "PUT", "GET"], "paths": ["/orders", "/orders/<order_id>", "/orders/<order_id>/update"]}}
{"file": "cloned/saleor/saleor/tests/e2e/checkout/test_buy_gift_card_in_the_checkout.py", "endpoints": {"api_summary": "This API defines a gift card checkout process, allowing customers to purchase gift cards and complete the checkout process.", "methods": ["GET", "POST"], "paths": ["/checkout", "/checkout/complete", "/checkout/payment", "/orders"]}}
{"file": "cloned/saleor/saleor/tests/e2e/checkout/shipping/test_use_external_shipping_methods_in_checkout.py", "endpoints": {"api_summary": "This API defines a checkout process for a product, including creating a checkout, setting a delivery method, creating a payment, and completing the checkout. The API also includes a webhook for external shipping methods.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/checkout", "/checkout/<checkout_id>", "/checkout/<checkout_id>/delivery-method", "/checkout/<checkout_id>/payment", "/checkout/<checkout_id>/complete"]}}
{"file": "cloned/saleor/saleor/tests/e2e/checkout/utils/checkout_remove_promo_code.py", "endpoints": {"api_summary": "This API allows clients to remove promo codes from a checkout. It takes a checkout ID and a voucher code as input, and returns the updated checkout information, including the total price and any errors that occurred during the removal process.", "methods": ["POST"], "paths": ["/checkout/<checkout_id>/remove-promo-code"]}}
{"file": "cloned/saleor/saleor/tests/e2e/checkout/discounts/sales/test_checkout_custom_price_and_percentage_sale.py", "endpoints": {"api_summary": "This API defines a checkout process for a product, including creating a checkout, setting a delivery method, updating the checkout line with a custom price, creating a payment, and completing the checkout. The API also includes a test for the checkout process.", "methods": ["POST", "PUT", "GET"], "paths": ["/checkout/create", "/checkout/delivery-method", "/checkout/lines", "/checkout/payment", "/checkout/complete"]}}
{"file": "cloned/saleor/saleor/tests/e2e/checkout/discounts/sales/test_checkout_custom_price_and_fixed_sale.py", "endpoints": {"api_summary": "This API defines a checkout process for a product, including creating a checkout, setting a delivery method, updating the checkout line with a custom price, creating a payment, and completing the checkout. The API also includes a test for the checkout process.", "methods": ["POST", "PUT", "GET"], "paths": ["/checkout/create", "/checkout/delivery-method", "/checkout/lines", "/checkout/payment", "/checkout/complete"]}}
{"file": "cloned/saleor/saleor/tests/e2e/checkout/discounts/vouchers/test_checkout_voucher_is_still_active_when_checkout_fails.py", "endpoints": {"api_summary": "This API defines a set of endpoints for creating and managing checkouts, including adding voucher codes and completing the checkout process.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/checkout", "/checkout/<checkout_id>", "/checkout/<checkout_id>/voucher", "/checkout/<checkout_id>/complete"]}}
{"file": "cloned/saleor/saleor/tests/e2e/checkout/discounts/vouchers/test_checkout_with_free_shipping_voucher_with_min_quantity_of_items.py", "endpoints": {"api_summary": "This API defines a checkout process for a product, including adding a voucher code for free shipping, and completing the checkout.", "methods": ["GET", "POST"], "paths": ["/checkout", "/checkout/add-promo-code", "/checkout/complete"]}}
{"file": "cloned/saleor/saleor/tests/e2e/checkout/discounts/vouchers/test_checkout_with_fixed_voucher.py", "endpoints": {"api_summary": "This API defines a checkout process for a fictional e-commerce platform. It includes endpoints for creating a checkout, adding a voucher code, completing the checkout, and creating a payment.", "methods": ["POST", "PUT", "GET"], "paths": ["/checkout/create", "/checkout/add-voucher", "/checkout/complete", "/checkout/payment"]}}
{"file": "cloned/saleor/saleor/tests/e2e/checkout/discounts/vouchers/test_checkout_with_free_shipping_voucher_with_min_spent_amount.py", "endpoints": {"api_summary": "This API defines a checkout process for a product, including adding a voucher code for free shipping, and completing the checkout.", "methods": ["GET", "POST"], "paths": ["/checkout", "/checkout/add-promo-code", "/checkout/complete"]}}
{"file": "cloned/saleor/saleor/tests/e2e/checkout/discounts/vouchers/test_checkout_with_voucher_with_min_item_quantity.py", "endpoints": {"api_summary": "This API defines a checkout process for a store, allowing customers to add items to their cart, apply discounts, and complete their purchase.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/checkout", "/checkout/lines", "/checkout/delivery-method", "/checkout/payment", "/checkout/complete"]}}
{"file": "cloned/saleor/saleor/tests/e2e/checkout/discounts/vouchers/test_checkout_with_voucher_limit_per_customer.py", "endpoints": {"api_summary": "This API defines a checkout process for a customer, allowing them to purchase a product using a voucher code. The API also includes endpoints for creating and managing vouchers.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/checkout", "/vouchers"]}}
{"file": "cloned/saleor/saleor/tests/e2e/checkout/discounts/vouchers/test_checkout_with_fixed_voucher_should_not_result_in_negative_variant_price.py", "endpoints": {"api_summary": "This API defines a checkout process for a product, including adding a voucher code, creating a payment, and completing the checkout.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/checkout", "/checkout/voucher", "/checkout/payment", "/checkout/complete"]}}
{"file": "cloned/saleor/saleor/tests/e2e/checkout/discounts/vouchers/test_checkout_unable_to_use_deleted_voucher_code.py", "endpoints": {"api_summary": "This API defines a set of endpoints for managing vouchers and their codes, as well as creating and manipulating checkouts.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/vouchers", "/vouchers/<voucher_id>", "/vouchers/<voucher_id>/codes", "/checkouts", "/checkouts/<checkout_id>"]}}
{"file": "cloned/saleor/saleor/tests/e2e/checkout/discounts/vouchers/test_checkout_unable_to_use_deleted_voucher.py", "endpoints": {"api_summary": "This API defines a set of endpoints for managing vouchers and discounts in an e-commerce platform.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/vouchers", "/vouchers/<voucher_id>", "/vouchers/<voucher_id>/channel-listings", "/checkouts/<checkout_id>/promo-code"]}}
{"file": "cloned/saleor/saleor/tests/e2e/checkout/discounts/vouchers/test_checkout_unable_to_update_single_use_settings_after_usage.py", "endpoints": {"api_summary": "This API defines a set of endpoints for creating and managing vouchers, as well as endpoints for creating and managing checkouts and payments.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/vouchers", "/vouchers/<voucher_id>", "/checkouts", "/checkouts/<checkout_id>", "/payments", "/payments/<payment_id>"]}}
{"file": "cloned/saleor/saleor/tests/e2e/checkout/discounts/vouchers/test_checkout_unable_to_exceed_voucher_usage_limit.py", "endpoints": {"api_summary": "This API defines a set of endpoints for creating and managing vouchers, as well as endpoints for creating and managing checkouts.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/vouchers", "/vouchers/<voucher_id>", "/checkouts", "/checkouts/<checkout_id>"]}}
{"file": "cloned/saleor/saleor/tests/e2e/checkout/discounts/vouchers/test_checkout_unable_to_use_expired_voucher.py", "endpoints": {"api_summary": "This API defines a set of endpoints for creating and managing checkouts, including adding vouchers and completing payments.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/checkout", "/checkout/<checkout_id>", "/checkout/<checkout_id>/voucher", "/checkout/<checkout_id>/payment"]}}
{"file": "cloned/saleor/saleor/tests/e2e/checkout/discounts/vouchers/test_checkout_use_voucher_for_cheapest_product.py", "endpoints": {"api_summary": "This API defines a set of endpoints for creating and managing checkouts, including adding and removing vouchers, setting delivery methods, and completing checkouts.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/checkout/create", "/checkout/delivery-method", "/checkout/add-voucher", "/checkout/remove-voucher", "/checkout/complete"]}}
{"file": "cloned/saleor/saleor/tests/e2e/checkout/discounts/vouchers/test_checkout_voucher_is_still_active_when_payment_fails.py", "endpoints": {"api_summary": "This API defines a checkout process for a fictional e-commerce platform, including adding a voucher code, setting a delivery method, and creating a payment. The API also checks if the voucher code is still active after a failed payment.", "methods": ["GET", "POST"], "paths": ["/checkout", "/checkout/delivery-method", "/checkout/payment"]}}
{"file": "cloned/saleor/saleor/tests/e2e/checkout/discounts/promotions/test_checkout_custom_price_and_percentage_promotion.py", "endpoints": {"api_summary": "This API defines a checkout process for a product, including creating a checkout, setting a delivery method, updating checkout lines, creating a payment, and completing the checkout. The API also includes a promotion rule for a percentage discount on a product.", "methods": ["POST", "PUT", "GET"], "paths": ["/checkout/create", "/checkout/delivery-method-update", "/checkout/lines-update", "/checkout/dummy-payment-create", "/checkout/complete"]}}
{"file": "cloned/saleor/saleor/tests/e2e/checkout/discounts/promotions/test_checkout_custom_price_and_fixed_promotion.py", "endpoints": {"api_summary": "This API defines a checkout process for a product, including creating a checkout, setting a delivery method, updating the checkout line with a custom price, creating a payment, and completing the checkout. The API also includes a promotion for a fixed discount on a product.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/checkout", "/checkout/delivery-method", "/checkout/lines", "/checkout/payment", "/checkout/complete"]}}
{"file": "cloned/saleor/saleor/tests/e2e/checkout/zero_total/test_0_total_checkout_catalog_promotion_and_shipping_voucher.py", "endpoints": {"api_summary": "This API defines a checkout process for a fictional e-commerce platform, including adding products, applying discounts, and completing the checkout.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/checkout", "/checkout/lines", "/checkout/delivery-method", "/checkout/complete"]}}
{"file": "cloned/saleor/saleor/tests/e2e/checkout/taxes/test_checkout_calculate_simple_taxes_product_type_tax_class.py", "endpoints": {"api_summary": "This API defines a checkout process for a product, including creating a checkout, setting a delivery method, creating a payment, and completing the checkout.", "methods": ["POST", "PUT", "GET"], "paths": ["/checkout", "/checkout/delivery-method", "/checkout/payment", "/checkout/complete"]}}
{"file": "cloned/saleor/saleor/tests/e2e/warehouse/utils/create_warehouse.py", "endpoints": {"api_summary": "This API defines a single endpoint for creating a warehouse, which allows users to create a new warehouse with a unique name, slug, and address. The endpoint returns the created warehouse's ID, name, slug, and shipping zones.", "methods": ["POST"], "paths": ["/warehouse/create"]}}
{"file": "cloned/saleor/saleor/tests/e2e/sales/utils/sale_catalogues_add.py", "endpoints": {"api_summary": "This API defines a mutation for adding a catalogue to a sale. It takes an ID, input, and first as parameters and returns a sale object with errors, channel listings, categories, collections, products, and variants.", "methods": ["POST"], "paths": ["/saleCataloguesAdd"]}}
{"file": "cloned/saleor/saleor/tests/e2e/webhooks/utils.py", "endpoints": {"api_summary": "This API allows for the creation of webhooks, which can be used to trigger events in response to specific actions in the system. The API supports both synchronous and asynchronous event handling, and allows for custom headers to be specified for each webhook.", "methods": ["POST"], "paths": ["/webhook/create"]}}
{"file": "cloned/saleor/saleor/tests/e2e/account/utils/staff_create.py", "endpoints": {"api_summary": "The API allows for the creation of staff members, with the ability to set metadata and private metadata for each user. It also allows for retrieving the details of a specific staff member.", "methods": ["POST"], "paths": ["/staff/create", "/staff/<built-in function id>"]}}
{"file": "cloned/saleor/saleor/tests/e2e/account/utils/create_customer.py", "endpoints": {"api_summary": "This API allows for the creation of a new customer, including their email, metadata, and private metadata. It also allows for the retrieval of customer data by ID.", "methods": ["POST"], "paths": ["/customers/create", "/customers/<built-in function id>"]}}
{"file": "cloned/saleor/saleor/tests/e2e/account/utils/staff_update.py", "endpoints": {"api_summary": "The API allows for the updating of staff information, including metadata and private metadata, and returns the updated user data.", "methods": ["POST"], "paths": ["/staff/<built-in function id>"]}}
{"file": "cloned/saleor/saleor/tests/e2e/account/utils/account_address_delete.py", "endpoints": {"api_summary": "This API allows for the deletion of a user's address. It takes an ID as input and returns the user's ID and any errors that occurred during the deletion process.", "methods": ["POST"], "paths": ["/account/address/delete"]}}
{"file": "cloned/saleor/saleor/tests/e2e/vouchers/utils/voucher_catalogues_add.py", "endpoints": {"api_summary": "This API defines a mutation for adding a catalogue to a voucher. It takes in an ID for the voucher and a list of products to add to the catalogue. The API returns the updated voucher data, including the ID, code, type, discount value type, channel listings, and products.", "methods": ["POST"], "paths": ["/voucherCataloguesAdd"]}}
{"file": "cloned/saleor/saleor/tests/e2e/pages/utils/page_create.py", "endpoints": {"api_summary": "This API defines a single endpoint for creating a new page in a website or application. The endpoint accepts a JSON payload with various fields, including the page title, content, and attributes. The endpoint returns a JSON object with the created page's ID and other metadata.", "methods": ["POST"], "paths": ["/pages/create"]}}
{"file": "cloned/saleor/saleor/tests/e2e/promotions/test_staff_can_create_promotion_for_collections.py", "endpoints": {"api_summary": "This file defines a REST API for creating and managing promotions for a collection of products.", "methods": ["POST", "GET"], "paths": ["/promotions", "/promotions/<promotion_id>", "/promotions/<promotion_id>/rules"]}}
{"file": "cloned/saleor/saleor/tests/e2e/promotions/test_sale_updated_by_promotion_can_not_be_handled_by_sales.py", "endpoints": {"api_summary": "This API defines a set of endpoints for managing sales, including creating, updating, and retrieving sales and their associated data.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/sales", "/sales/<sale_id>", "/sales/<sale_id>/channels", "/sales/<sale_id>/catalogues"]}}
{"file": "cloned/saleor/saleor/tests/e2e/promotions/test_unable_to_query_nor_mutate_sale_updated_by_promotion_translations.py", "endpoints": {"api_summary": "This API defines a set of endpoints for managing sales, including creating, updating, and querying sales. It also includes endpoints for translating sales and updating sale channel listings.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/sales", "/sales/<sale_id>", "/sales/<sale_id>/translations", "/sales/<sale_id>/channel-listings"]}}
{"file": "cloned/saleor/saleor/tests/e2e/promotions/test_staff_can_change_channel_in_promotion_rule.py", "endpoints": {"api_summary": "This API defines a promotion rule for a product, allowing the staff to change the promotion rule's channel and check if the promotion is applied for the product on the second channel.", "methods": ["GET", "POST"], "paths": ["/promotion/<promotion_id>/rule/<promotion_rule_id>", "/product/<product_id>/channel/<channel_id>"]}}
{"file": "cloned/saleor/saleor/tests/e2e/apps/utils/app_create.py", "endpoints": {"api_summary": "The API allows for the creation of new apps, with the ability to retrieve and update app information. It also provides authentication and authorization for app-related operations.", "methods": ["POST"], "paths": ["/apps/create", "/apps/<app_id>"]}}
{"file": "cloned/saleor/saleor/checkout/complete_checkout.py", "endpoints": {"api_summary": "This code defines several endpoints for creating and processing orders in an e-commerce application.", "methods": ["prepare_order_data", "create_order", "complete_checkout", "complete_checkout_with_transaction", "complete_checkout_with_payment", "reserve_stocks_without_availability_check", "complete_checkout_fail_handler"]}}
{"file": "cloned/saleor/saleor/checkout/checkout_cleaner.py", "endpoints": {"api_summary": "This file defines a set of functions for validating and cleaning checkout data before creating an order.", "methods": ["GET", "POST"], "paths": ["/checkout/validate", "/checkout/clean"]}}
{"file": "cloned/saleor/saleor/payment/tests/test_gateway.py", "endpoints": {"api_summary": "This file defines a number of functions related to payment processing, including processing payments, refunding payments, and voiding payments.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/payment/process", "/api/payment/refund", "/api/payment/void"]}}
{"file": "cloned/saleor/saleor/payment/tests/test_payment.py", "endpoints": {"api_summary": "This API defines a payment gateway for the Saleor e-commerce platform. It includes endpoints for creating, capturing, and refunding payments, as well as handling payment errors.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/payments", "/payments/<payment_id>", "/payments/<payment_id>/capture", "/payments/<payment_id>/refund"]}}
{"file": "cloned/saleor/saleor/payment/gateways/authorize_net/plugin.py", "endpoints": {"api_summary": "The Authorize.Net plugin provides payment processing services through the Authorize.Net gateway. It supports various payment methods and can be configured to use the sandbox environment for testing.", "methods": ["GET", "POST"], "paths": ["/authorize-net/authorize", "/authorize-net/capture", "/authorize-net/refund", "/authorize-net/void", "/authorize-net/process-payment", "/authorize-net/list-payment-sources", "/authorize-net/get-supported-currencies", "/authorize-net/get-payment-config"]}}
{"file": "cloned/saleor/saleor/payment/gateways/np_atobarai/__init__.py", "endpoints": {"api_summary": "This API is used to process payments and refunds using the NP Atobarai payment gateway. It supports various payment methods and provides a simple interface for capturing and refunding payments.", "methods": ["POST", "GET"], "paths": ["/process-payment", "/capture", "/void", "/refund"]}}
{"file": "cloned/saleor/saleor/payment/gateways/np_atobarai/api.py", "endpoints": {"api_summary": "This API is responsible for managing transactions with NP Atobarai, including registering, cancelling, and changing transactions, as well as reporting fulfillment.", "methods": ["GET", "POST", "PATCH"], "paths": ["/transactions/register", "/transactions/cancel", "/transactions/update", "/fulfillment/report"]}}
{"file": "cloned/saleor/saleor/payment/gateways/np_atobarai/plugin.py", "endpoints": {"api_summary": "This API provides payment processing for NP\u5f8c\u6255\u3044 transactions. It supports various payment methods and allows for refunds and voids.", "methods": ["GET", "POST"], "paths": ["/np-atobarai/capture", "/np-atobarai/refund", "/np-atobarai/void"]}}
{"file": "cloned/saleor/saleor/payment/gateways/dummy_credit_card/tests/test_dummy_credit_card.py", "endpoints": {"api_summary": "This API defines a payment gateway for the Dummy Credit Card payment method. It includes endpoints for authorizing, capturing, and refunding payments.", "methods": ["GET", "POST"], "paths": ["/authorize", "/capture", "/refund"]}}
{"file": "cloned/saleor/saleor/payment/gateways/adyen/plugin.py", "endpoints": {"api_summary": "This API is used to handle payments with Adyen.", "methods": ["GET", "POST"], "paths": ["/webhooks", "/additional-actions"]}}
{"file": "cloned/saleor/saleor/core/views.py", "endpoints": {"api_summary": "This API provides a homepage for a web application and a JSON Web Key Set (JWKS) endpoint for authentication.", "methods": ["GET", "POST"], "paths": ["/", "/jwks"]}}
{"file": "cloned/saleor/saleor/core/tests/test_core.py", "endpoints": {"api_summary": "This file defines a REST API for creating and managing products, including product types, attributes, and attribute values. It also includes endpoints for creating and managing orders, customers, and gift cards.", "methods": ["GET", "POST", "PUT", "PATCH", "DELETE"], "paths": ["/products", "/products/<product_id>", "/products/<product_id>/types", "/products/<product_id>/attributes", "/products/<product_id>/attributes/<attribute_id>", "/orders", "/orders/<order_id>", "/customers", "/customers/<customer_id>", "/gift-cards", "/gift-cards/<gift_card_id>"]}}
{"file": "cloned/saleor/saleor/core/utils/random_data.py", "endpoints": {"api_summary": "This API defines a set of endpoints for managing products, orders, and customers in an e-commerce store.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/products", "/products/<product_id>", "/orders", "/orders/<order_id>", "/customers", "/customers/<customer_id>"]}}
{"file": "cloned/saleor/saleor/graphql/api.py", "endpoints": {"api_summary": "This API provides a GraphQL interface for interacting with the Saleor e-commerce platform. It includes endpoints for managing accounts, products, orders, and more.", "methods": ["GET", "POST"], "paths": ["/api"]}}
{"file": "cloned/saleor/saleor/graphql/product/resolvers.py", "endpoints": {"api_summary": "This API provides information about products, product types, and product variants, as well as the ability to create, update, and delete products and product variants.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/products", "/product-types", "/product-variants"]}}
{"file": "cloned/saleor/saleor/graphql/product/tests/test_product_filtering_and_sorting_with_channels.py", "endpoints": {"api_summary": "This API defines a set of endpoints for managing products and product variants in an e-commerce application.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/products", "/products/<product_id>", "/products/<product_id>/variants", "/products/<product_id>/variants/<variant_id>"]}}
{"file": "cloned/saleor/saleor/graphql/product/tests/test_bulk_delete.py", "endpoints": {"api_summary": "Bulk delete products, categories, collections, product variants, and product types.", "methods": ["POST"], "endpoints": [{"name": "productBulkDelete", "path": "/api/v1/products/bulk-delete/", "methods": ["POST"], "description": "Bulk delete products."}, {"name": "categoryBulkDelete", "path": "/api/v1/categories/bulk-delete/", "methods": ["POST"], "description": "Bulk delete categories."}, {"name": "collectionBulkDelete", "path": "/api/v1/collections/bulk-delete/", "methods": ["POST"], "description": "Bulk delete collections."}, {"name": "productVariantBulkDelete", "path": "/api/v1/product-variants/bulk-delete/", "methods": ["POST"], "description": "Bulk delete product variants."}, {"name": "productTypeBulkDelete", "path": "/api/v1/product-types/bulk-delete/", "methods": ["POST"], "description": "Bulk delete product types."}]}}
{"file": "cloned/saleor/saleor/graphql/product/tests/deprecated/test_product_sorting.py", "endpoints": {"api_summary": "This API allows for sorting and pagination of products and collections by publication date.", "methods": ["GET"], "paths": ["/products", "/collections"]}}
{"file": "cloned/saleor/saleor/graphql/product/tests/benchmark/test_product_bulk_create.py", "endpoints": {"api_summary": "This API allows for the bulk creation of products, including their attributes, variants, and channel listings. It also supports the creation of products with rich text descriptions.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/product/bulk_mutations/category_bulk_delete.py", "endpoints": {"api_summary": "The API allows for bulk deletion of categories. It takes a list of category IDs as input and deletes the corresponding categories. The API also includes permissions and error handling.", "methods": ["DELETE"], "paths": ["/api/v1/categories/bulk-delete"]}}
{"file": "cloned/saleor/saleor/graphql/product/bulk_mutations/product_variant_stocks_update.py", "endpoints": {"api_summary": "Update stocks for product variant.", "methods": ["POST"], "paths": ["/products/<product_id>/variants/<variant_id>/stocks"]}}
{"file": "cloned/saleor/saleor/graphql/product/bulk_mutations/product_media_bulk_delete.py", "endpoints": {"api_summary": "The ProductMediaBulkDelete API allows for the deletion of product media in bulk. It takes a list of product media IDs as input and returns a list of errors, if any, and the deleted media IDs.", "methods": ["DELETE"], "paths": ["/api/product-media/bulk-delete"]}}
{"file": "cloned/saleor/saleor/graphql/product/mutations/product/product_update.py", "endpoints": {"api_summary": "This API updates an existing product.", "methods": ["PUT"], "paths": ["/products/<product_id>"]}}
{"file": "cloned/saleor/saleor/graphql/product/mutations/product/product_media_create.py", "endpoints": {"api_summary": "This API allows you to create a media object (image or video URL) associated with a product. It also allows you to retrieve information about the media object and the product it is associated with.", "methods": ["POST"], "paths": ["/products/<product_id>/media"]}}
{"file": "cloned/saleor/saleor/graphql/product/mutations/product/product_media_delete.py", "endpoints": {"api_summary": "The ProductMediaDelete API allows for the deletion of a product media. It takes an ID as input and returns the deleted product media object.", "methods": ["DELETE"], "paths": ["/products/<product_id>/media/<media_id>"]}}
{"file": "cloned/saleor/saleor/graphql/product/mutations/category/category_create.py", "endpoints": {"api_summary": "This API defines a mutation for creating a new category. It takes in a category input object, which includes fields for the category name, slug, description, and other metadata. The API also supports uploading a background image for the category.", "methods": ["POST"], "paths": ["/api/category/create"]}}
{"file": "cloned/saleor/saleor/graphql/product/mutations/category/category_delete.py", "endpoints": {"api_summary": "The API allows for the deletion of a category, which is a hierarchical structure used to organize products in an e-commerce system. The API endpoint accepts a category ID as input and deletes the corresponding category, as well as any subcategories it may have.", "methods": ["DELETE"], "paths": ["/api/v1/categories/<built-in function id>"]}}
{"file": "cloned/saleor/saleor/graphql/product/mutations/collection/collection_create.py", "endpoints": {"api_summary": "This API defines a collection of products, including the ability to create, update, and delete collections, as well as retrieve and search for collections.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/collections", "/collections/<collection_id>", "/collections/<collection_id>/products"]}}
{"file": "cloned/saleor/saleor/graphql/product/mutations/collection/collection_reorder_products.py", "endpoints": {"api_summary": "This API allows for the reordering of products within a collection.", "methods": ["POST"], "paths": ["/collections/<collection_id>/reorder-products"]}}
{"file": "cloned/saleor/saleor/graphql/product/mutations/product_variant/product_variant_reorder.py", "endpoints": {"api_summary": "This API allows for the reordering of product variants. It takes a product ID and a list of variant reordering operations as input, and updates the order of the variants accordingly.", "methods": ["POST"], "paths": ["/products/<product_id>/variants/reorder"]}}
{"file": "cloned/saleor/saleor/graphql/product/mutations/product_variant/product_variant_delete.py", "endpoints": {"api_summary": "This API defines a product variant delete endpoint. It allows to delete a product variant by ID, external reference, or SKU. The endpoint returns a success response with the deleted variant data.", "methods": ["DELETE"], "paths": ["/api/v1/products/<product_id>/variants/<variant_id>"]}}
{"file": "cloned/saleor/saleor/graphql/product/types/collections.py", "endpoints": {"api_summary": "This API defines a collection of products, including its name, description, and products it contains. It also provides a way to retrieve the background image of the collection.", "methods": ["GET"], "paths": ["/collections/<collection_id>"]}}
{"file": "cloned/saleor/saleor/graphql/product/types/categories.py", "endpoints": {"api_summary": "This API defines a category of products, including its name, description, and ancestors. It also includes a list of products in the category, which can be filtered and sorted.", "methods": ["GET"], "paths": ["/category"]}}
{"file": "cloned/saleor/saleor/graphql/csv/types.py", "endpoints": {"api_summary": "This API provides information about export files and their associated events.", "methods": ["GET"], "paths": ["/export-files", "/export-files/<export_file_id>", "/export-files/<export_file_id>/events"]}}
{"file": "cloned/saleor/saleor/graphql/csv/schema.py", "endpoints": {"api_summary": "The CSV API provides endpoints for exporting product, gift card, and voucher code data in CSV format. The API allows for filtering and sorting of export files, and provides endpoints for creating and managing export file jobs.", "methods": ["GET", "POST"], "paths": ["/csv/export_file/<id>", "/csv/export_files", "/csv/export_products", "/csv/export_gift_cards", "/csv/export_voucher_codes"]}}
{"file": "cloned/saleor/saleor/graphql/csv/mutations/export_voucher_codes.py", "endpoints": {"api_summary": "This API allows for the export of voucher codes to a CSV or XLSX file.", "methods": ["POST"], "paths": ["/export-voucher-codes"]}}
{"file": "cloned/saleor/saleor/graphql/csv/mutations/export_products.py", "endpoints": {"api_summary": "This API allows for exporting product data to a CSV file.", "methods": ["POST"], "paths": ["/export/products"]}}
{"file": "cloned/saleor/saleor/graphql/shop/schema.py", "endpoints": {"api_summary": "This API defines endpoints for managing shop settings, including gift card settings, order settings, and shop domain and address updates. It also includes endpoints for creating, updating, and deleting staff notification recipients.", "methods": ["POST", "PUT", "DELETE"], "paths": ["/shop/settings", "/shop/domain", "/shop/address", "/shop/order-settings", "/shop/gift-card-settings", "/staff-notification-recipients"]}}
{"file": "cloned/saleor/saleor/graphql/shop/tests/queries/test_shop.py", "endpoints": {"api_summary": "This API allows you to retrieve information about the shop and its settings.", "methods": ["GET"], "paths": ["/shop"]}}
{"file": "cloned/saleor/saleor/graphql/shop/mutations/staff_notification_recipient_update.py", "endpoints": {"api_summary": "The API allows for the creation and update of staff notification recipients. It also provides a way to retrieve information about the recipients and the permissions required to manage them.", "methods": ["POST", "PUT"], "paths": ["/staff-notification-recipient/create", "/staff-notification-recipient/update"]}}
{"file": "cloned/saleor/saleor/graphql/shop/mutations/shop_domain_update.py", "endpoints": {"api_summary": "The ShopDomainUpdate API allows for the update of a shop's domain and name. It requires the MANAGE_SETTINGS permission and returns a Shop object with the updated domain and name.", "methods": ["POST"], "paths": ["/shop/domain/update"]}}
{"file": "cloned/saleor/saleor/graphql/shop/mutations/shop_fetch_tax_rates.py", "endpoints": {"api_summary": "This API fetches tax rates for a shop. It requires the MANAGE_SETTINGS permission and returns a Shop object with the updated tax rates.", "methods": ["GET"], "paths": ["/shop/fetch-tax-rates"]}}
{"file": "cloned/saleor/saleor/graphql/webhook/types.py", "endpoints": {"api_summary": "This API defines webhook endpoints for handling events and event deliveries.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/webhook", "/webhook/<webhook_id>", "/webhook/<webhook_id>/event", "/webhook/<webhook_id>/event/<event_id>", "/webhook/<webhook_id>/event_delivery", "/webhook/<webhook_id>/event_delivery/<event_delivery_id>"]}}
{"file": "cloned/saleor/saleor/graphql/webhook/schema.py", "endpoints": {"api_summary": "This API defines endpoints for managing webhooks and retrieving sample payloads for webhook events.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/webhooks", "/webhooks/<webhook_id>", "/webhooks/<webhook_id>/events", "/webhooks/<webhook_id>/sample_payload"]}}
{"file": "cloned/saleor/saleor/graphql/webhook/tests/queries/test_event_delivery_query.py", "endpoints": {"api_summary": "This API allows for querying event deliveries and their attempts for a given webhook.", "methods": ["POST"], "paths": ["/webhook"]}}
{"file": "cloned/saleor/saleor/graphql/webhook/tests/queries/test_event_delivery_sort.py", "endpoints": {"api_summary": "This API allows for querying and sorting of event deliveries and delivery attempts for a given webhook.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/webhook/tests/mutations/test_delivery_retry.py", "endpoints": {"api_summary": "This API allows for retrying event deliveries that have failed due to a webhook error.", "methods": ["POST"], "paths": ["/api/v1/event-delivery-retry/<delivery_id>"]}}
{"file": "cloned/saleor/saleor/graphql/webhook/tests/mutations/test_webhook_delete.py", "endpoints": {"api_summary": "This API allows you to delete a webhook. You can use this API to remove a webhook that is no longer needed or to clean up your app's webhooks. The API can be accessed by an app or a staff user with the `manage_apps` permission.", "methods": ["POST"], "paths": ["/webhook/delete"]}}
{"file": "cloned/saleor/saleor/graphql/webhook/mutations/webhook_update.py", "endpoints": {"api_summary": "This API allows you to create, update, and delete webhook subscriptions. It also allows you to retrieve information about webhooks and their subscriptions.", "methods": ["POST", "PUT", "DELETE", "GET"], "paths": ["/webhooks", "/webhooks/<webhook_id>", "/webhooks/<webhook_id>/subscriptions"]}}
{"file": "cloned/saleor/saleor/graphql/webhook/mutations/webhook_trigger.py", "endpoints": {"api_summary": "This API defines a mutation for triggering webhooks. It validates the input, retrieves the webhook and event type, and creates an event delivery object with a pending status. If the event type is supported, it generates a deferred payload and schedules a task to generate the payload. Otherwise, it creates deliveries for the subscriptions and schedules a task to send the webhook request.", "methods": ["POST"], "paths": ["/webhook/trigger"]}}
{"file": "cloned/saleor/saleor/graphql/webhook/mutations/event_delivery_retry.py", "endpoints": {"api_summary": "Retries event delivery for a specific event delivery ID. The event delivery is identified by its ID, and the retry is performed by calling the `event_delivery_retry` method on the plugin manager.", "methods": ["POST"], "paths": ["/api/v1/event-delivery/<id>/retry"]}}
{"file": "cloned/saleor/saleor/graphql/webhook/mutations/webhook_dry_run.py", "endpoints": {"api_summary": "This API allows for a dry run of a webhook event, which simulates the sending of a webhook payload to a target URL. The API supports a single event and requires permission relevant to the processed event.", "methods": ["POST"], "paths": ["/webhook/dry-run"]}}
{"file": "cloned/saleor/saleor/graphql/shipping/schema.py", "endpoints": {"api_summary": "This API defines endpoints for managing shipping zones and prices in an e-commerce application. It allows for creating, updating, and deleting shipping zones and prices, as well as excluding products from shipping prices.", "methods": ["POST", "PUT", "DELETE"], "paths": ["/shipping-zones", "/shipping-zones/<id>", "/shipping-prices", "/shipping-prices/<id>"]}}
{"file": "cloned/saleor/saleor/graphql/shipping/tests/queries/test_shipping_zone.py", "endpoints": {"api_summary": "This API defines a shipping zone and its shipping methods, including the postal code rules and channel listings. It also includes a query to retrieve the shipping zone by ID.", "methods": ["GET", "POST"], "paths": ["/shipping-zone/<id>", "/shipping-zone/<id>/shipping-methods"]}}
{"file": "cloned/saleor/saleor/graphql/shipping/tests/mutations/test_shipping_price_delete.py", "endpoints": {"api_summary": "This API defines a mutation for deleting a shipping price, which is a part of the shipping method. The API takes an ID of the shipping price as input and returns the ID of the shipping zone and the shipping method, as well as any errors that occurred during the deletion process.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/shipping/tests/mutations/test_shipping_zone_delete.py", "endpoints": {"api_summary": "This API defines a mutation for deleting a shipping zone, which can be accessed by sending a GraphQL request to the /graphql endpoint. The mutation takes an ID as input and returns a payload with information about the deleted shipping zone and any errors that occurred during the deletion process.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/shipping/bulk_mutations/shipping_zone_bulk_delete.py", "endpoints": {"api_summary": "The ShippingZoneBulkDelete mutation allows for the deletion of multiple shipping zones at once. It takes a list of shipping zone IDs as input and deletes the corresponding zones. The mutation also triggers webhooks for each deleted zone and calls the shipping_zone_deleted event.", "methods": ["DELETE"], "paths": ["/shipping-zones/bulk-delete"]}}
{"file": "cloned/saleor/saleor/graphql/shipping/mutations/shipping_price_delete.py", "endpoints": {"api_summary": "This API defines a mutation for deleting a shipping price. It takes an ID of a shipping price to delete and returns the deleted shipping method and its shipping zone.", "methods": ["DELETE"], "paths": ["/shipping/price/<id>"]}}
{"file": "cloned/saleor/saleor/graphql/checkout/filters.py", "endpoints": {"api_summary": "This API defines a filter for the Checkout model in the Saleor e-commerce platform. It allows filtering by customer, created date, search, channels, metadata, updated at, authorize status, and charge status.", "methods": ["GET"], "paths": ["/checkout/filter"]}}
{"file": "cloned/saleor/saleor/graphql/checkout/schema.py", "endpoints": {"api_summary": "This API defines a set of mutations and queries for managing checkouts in an e-commerce application. It includes endpoints for creating, updating, and retrieving checkout information, as well as endpoints for adding and removing promo codes and updating shipping and billing addresses.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/checkout", "/checkouts", "/checkout/<id>", "/checkout/<id>/lines", "/checkout/<id>/lines/<line_id>", "/checkout/<id>/promo-code", "/checkout/<id>/shipping-address", "/checkout/<id>/billing-address"]}}
{"file": "cloned/saleor/saleor/graphql/checkout/tests/deprecated/test_checkout_promo_codes.py", "endpoints": {"api_summary": "This API allows clients to add or remove promo codes from a checkout.", "methods": ["POST"], "paths": ["/checkout/add-promo-code", "/checkout/remove-promo-code"]}}
{"file": "cloned/saleor/saleor/graphql/checkout/tests/deprecated/test_checkout_lines_update.py", "endpoints": {"api_summary": "Update the quantity of a checkout line.", "methods": ["POST"], "paths": ["/checkout/lines/update"]}}
{"file": "cloned/saleor/saleor/graphql/checkout/tests/deprecated/test_checkout_lines_add.py", "endpoints": {"api_summary": "This API adds lines to a checkout.", "methods": ["POST"], "paths": ["/checkout/lines/add"]}}
{"file": "cloned/saleor/saleor/graphql/checkout/mutations/checkout_line_delete.py", "endpoints": {"api_summary": "This API defines a mutation for deleting a checkout line. It takes the checkout line ID as input and returns the updated checkout.", "methods": ["POST"], "paths": ["/checkout/line/delete"]}}
{"file": "cloned/saleor/saleor/graphql/checkout/mutations/checkout_remove_promo_code.py", "endpoints": {"api_summary": "This API allows you to remove a gift card or a voucher from a checkout.", "methods": ["POST"], "paths": ["/checkout/remove-promo-code"]}}
{"file": "cloned/saleor/saleor/graphql/checkout/mutations/checkout_shipping_address_update.py", "endpoints": {"api_summary": "This API allows you to update the shipping address in an existing checkout.", "methods": ["POST"], "paths": ["/checkout/<checkout_id>/shipping-address"]}}
{"file": "cloned/saleor/saleor/graphql/checkout/mutations/checkout_customer_attach.py", "endpoints": {"api_summary": "The CheckoutCustomerAttach mutation allows you to attach a customer to a checkout. It requires the checkout ID, customer ID, and optionally the user ID. The mutation returns the updated checkout.", "methods": ["POST"], "paths": ["/checkout/<checkout_id>/attach-customer"]}}
{"file": "cloned/saleor/saleor/graphql/checkout/mutations/checkout_billing_address_update.py", "endpoints": {"api_summary": "This API endpoint updates the billing address in an existing checkout.", "methods": ["POST"], "paths": ["/checkout/<checkout_id>/billing-address"]}}
{"file": "cloned/saleor/saleor/graphql/checkout/mutations/order_create_from_checkout.py", "endpoints": {"api_summary": "This API creates a new order from an existing checkout. It requires the AUTHENTICATED_APP and HANDLE_CHECKOUTS permissions.", "methods": ["POST"], "paths": ["/order/create-from-checkout"]}}
{"file": "cloned/saleor/saleor/graphql/checkout/mutations/checkout_add_promo_code.py", "endpoints": {"api_summary": "Adds a gift card or a voucher to a checkout.", "methods": ["POST"], "paths": ["/checkout/add-promo-code"]}}
{"file": "cloned/saleor/saleor/graphql/checkout/mutations/checkout_lines_delete.py", "endpoints": {"api_summary": "This API allows you to delete checkout lines.", "methods": ["DELETE"], "paths": ["/checkout/lines"]}}
{"file": "cloned/saleor/saleor/graphql/payment/schema.py", "endpoints": {"api_summary": "This API provides endpoints for managing payments and transactions, including payment capture, refund, and void, as well as transaction creation, update, and processing. It also includes endpoints for initializing payment gateways and processing stored payment methods.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/payments", "/payments/<payment_id>", "/transactions", "/transactions/<transaction_id>"]}}
{"file": "cloned/saleor/saleor/graphql/payment/tests/queries/test_transaction.py", "endpoints": {"api_summary": "This API allows you to retrieve information about transactions and their events.", "methods": ["GET"], "paths": ["/api/transaction/<id>"]}}
{"file": "cloned/saleor/saleor/graphql/payment/tests/mutations/test_payment_initialize.py", "endpoints": {"api_summary": "This API initializes a payment gateway for a specific channel and payment method. It returns the initialized payment data and any errors that occurred during the initialization process.", "methods": ["POST"], "paths": ["/api/payment/initialize"]}}
{"file": "cloned/saleor/saleor/graphql/payment/tests/mutations/test_payment_void.py", "endpoints": {"api_summary": "This API allows for the voiding of payment transactions. It takes a payment ID as input and returns a response with the updated payment status and any errors that occurred during the voiding process.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/payment/mutations/transaction/transaction_request_action.py", "endpoints": {"api_summary": "This API allows for requesting actions for payment transactions.", "methods": ["POST"], "paths": ["/api/payment/transaction/request-action"]}}
{"file": "cloned/saleor/saleor/graphql/payment/mutations/transaction/transaction_initialize.py", "endpoints": {"api_summary": "This API initializes a transaction session. It triggers the webhook `TRANSACTION_INITIALIZE_SESSION`, to the requested `paymentGateways`. There is a limit of 100 transaction items per checkout / order.", "methods": ["POST"], "paths": ["/api/transaction/initialize"]}}
{"file": "cloned/saleor/saleor/graphql/payment/mutations/transaction/transaction_request_refund_for_granted_refund.py", "endpoints": {"api_summary": "This API allows you to request a refund for a payment transaction based on a granted refund.", "methods": ["POST"], "paths": ["/api/v1/transaction/request-refund-for-granted-refund/"]}}
{"file": "cloned/saleor/saleor/graphql/menu/schema.py", "endpoints": {"api_summary": "This API provides endpoints for creating, reading, updating, and deleting menus and menu items. It also provides endpoints for assigning navigation to menus and translating menu items.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/menus", "/menus/<menu_id>", "/menu-items", "/menu-items/<menu_item_id>"]}}
{"file": "cloned/saleor/saleor/graphql/menu/tests/mutations/test_menu_item_update.py", "endpoints": {"api_summary": "This API allows for updating menu items in a menu. It takes the menu item ID, page ID, and URL as input and returns the updated menu item.", "methods": ["POST"], "paths": ["/api/menu/<menu_id>/items/<menu_item_id>/update"]}}
{"file": "cloned/saleor/saleor/graphql/menu/tests/mutations/test_menu_update.py", "endpoints": {"api_summary": "This API allows for updating menus with a given ID. It takes the menu ID, name, and slug as input and returns the updated menu with the same ID, name, and slug. If the slug already exists, it returns an error.", "methods": ["POST"], "paths": ["/api/menu/<menu_id>/update"]}}
{"file": "cloned/saleor/saleor/graphql/menu/bulk_mutations/menu_bulk_delete.py", "endpoints": {"api_summary": "The API allows for the bulk deletion of menus. It takes a list of menu IDs as input and deletes the corresponding menus. It also triggers webhooks for each deleted menu.", "methods": ["DELETE"], "paths": ["/menus/<built-in function id>"]}}
{"file": "cloned/saleor/saleor/graphql/menu/mutations/menu_delete.py", "endpoints": {"api_summary": "The API allows for the deletion of menus. It takes an ID as input and returns a success response if the menu is deleted successfully. The API also supports webhooks for event tracking.", "methods": ["DELETE"], "paths": ["/api/v1/menus/<id>"]}}
{"file": "cloned/saleor/saleor/graphql/menu/mutations/menu_create.py", "endpoints": {"api_summary": "This API allows you to create a new menu with a name, slug, and list of menu items. It also allows you to retrieve and update existing menus.", "methods": ["POST", "GET", "PUT"], "paths": ["/api/menu/create", "/api/menu/<menu_id>", "/api/menu/<menu_id>/items"]}}
{"file": "cloned/saleor/saleor/graphql/menu/mutations/menu_item_delete.py", "endpoints": {"api_summary": "The API allows for the deletion of menu items. It takes an ID as input and returns a success response if the deletion is successful. The API also supports webhooks for event tracking.", "methods": ["DELETE"], "paths": ["/api/menu/<built-in function id>"]}}
{"file": "cloned/saleor/saleor/graphql/menu/mutations/menu_item_move.py", "endpoints": {"api_summary": "This API allows for moving menu items within a menu.", "methods": ["POST"], "paths": ["/api/menu/move"]}}
{"file": "cloned/saleor/saleor/graphql/menu/mutations/menu_update.py", "endpoints": {"api_summary": "This API allows for the creation, update, and deletion of menus. It also provides endpoints for retrieving menus and their associated data.", "methods": ["POST", "PUT", "DELETE", "GET"], "paths": ["/menus", "/menus/<menu_id>", "/menus/<menu_id>/items", "/menus/<menu_id>/items/<item_id>"]}}
{"file": "cloned/saleor/saleor/graphql/core/connection.py", "endpoints": {"api_summary": "This API endpoint allows users to retrieve a list of users.", "methods": ["GET"], "paths": ["/users"]}}
{"file": "cloned/saleor/saleor/graphql/core/tests/test_pagination.py", "endpoints": {"api_summary": "This API allows clients to retrieve a list of books, with pagination support.", "methods": ["GET"], "paths": ["/books"]}}
{"file": "cloned/saleor/saleor/graphql/core/tests/test_file_upload.py", "endpoints": {"api_summary": "This API allows users to upload files to the server.", "methods": ["POST"], "paths": ["/file_upload"]}}
{"file": "cloned/saleor/saleor/graphql/core/tests/test_core.py", "endpoints": {"api_summary": "This file defines a GraphQL API for a product catalog. It includes mutations for creating, updating, and deleting products, as well as queries for retrieving product information.", "methods": ["GET", "POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/warehouse/schema.py", "endpoints": {"api_summary": "This API provides endpoints for managing warehouses and stocks. It allows for creating, updating, deleting, and listing warehouses, as well as assigning and unassigning warehouses to shipping zones. It also allows for listing and updating stocks.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/warehouses", "/warehouses/<id>", "/stocks", "/stocks/<id>"]}}
{"file": "cloned/saleor/saleor/graphql/warehouse/tests/queries/test_stock.py", "endpoints": {"api_summary": "This API provides information about stocks, including their quantity, quantity allocated, and quantity reserved. It also allows for querying a specific stock by ID.", "methods": ["GET"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/warehouse/mutations/warehouse_shipping_zone_assign.py", "endpoints": {"api_summary": "This API allows you to assign shipping zones to a warehouse. It takes the warehouse ID and a list of shipping zone IDs as input, and returns the updated warehouse object.", "methods": ["POST"], "paths": ["/warehouse/<warehouse_id>/shipping-zones"]}}
{"file": "cloned/saleor/saleor/graphql/warehouse/mutations/warehouse_shipping_zone_unassign.py", "endpoints": {"api_summary": "This API allows for the management of warehouses and their associated shipping zones. It provides endpoints for creating, updating, and deleting warehouses, as well as for assigning and unassigning shipping zones to warehouses.", "methods": ["POST", "PUT", "DELETE"], "paths": ["/warehouses", "/warehouses/<warehouse_id>", "/warehouses/<warehouse_id>/shipping-zones"]}}
{"file": "cloned/saleor/saleor/graphql/plugins/schema.py", "endpoints": {"api_summary": "The Plugins API allows for the management of plugins, including listing, retrieving, and updating plugins. The API also provides a mutation for updating plugins.", "methods": ["GET", "POST"], "paths": ["/plugins", "/plugins/<plugin_id>"]}}
{"file": "cloned/saleor/saleor/graphql/order/tests/queries/test_pagination.py", "endpoints": {"api_summary": "This API defines a set of endpoints for managing orders in an e-commerce application.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/orders", "/orders/<order_id>", "/orders/<order_id>/items", "/orders/<order_id>/items/<item_id>"]}}
{"file": "cloned/saleor/saleor/graphql/order/tests/queries/test_fulfillment.py", "endpoints": {"api_summary": "This API allows for querying fulfillment data for an order, including the fulfillment order, status, tracking number, warehouse, and lines.", "methods": ["GET"], "paths": ["/order/<order_id>/fulfillment"]}}
{"file": "cloned/saleor/saleor/graphql/order/tests/queries/test_order_entity.py", "endpoints": {"api_summary": "This API allows users to query and retrieve information about orders. It includes endpoints for retrieving a single order by ID, retrieving a list of orders, and creating a new order.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/orders/<order_id>", "/orders", "/orders/create"]}}
{"file": "cloned/saleor/saleor/graphql/order/tests/deprecated/test_discount_order.py", "endpoints": {"api_summary": "This API allows you to create, update, and delete discounts for orders. It also allows you to retrieve information about orders and their discounts.", "methods": ["POST"], "paths": ["/order-discount-delete", "/order-discount-update"]}}
{"file": "cloned/saleor/saleor/graphql/order/tests/mutations/test_order_void.py", "endpoints": {"api_summary": "This API allows for voiding an order's payment. It can be used to cancel a payment that has not yet been charged. The API returns the updated payment status and any errors that may have occurred.", "methods": ["POST"], "paths": ["/order/<order_id>/void"]}}
{"file": "cloned/saleor/saleor/graphql/order/tests/mutations/test_order_price_expiration.py", "endpoints": {"api_summary": "This API provides mutations for updating and creating order lines, as well as deleting existing order lines.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/order/tests/integration/test_draft_order.py", "endpoints": {"api_summary": "This API allows for the creation, management, and completion of orders. It also allows for the marking of orders as paid.", "methods": ["POST", "GET"], "paths": ["/order/create", "/order/<order_id>/update", "/order/<order_id>/complete", "/order/<order_id>/mark-as-paid"]}}
{"file": "cloned/saleor/saleor/graphql/order/tests/benchmark/test_order_lines_create.py", "endpoints": {"api_summary": "This API allows for the creation of order lines for an existing order. It takes an order ID and a list of order line input objects, each containing a product variant ID and a quantity. The API returns a list of order line IDs and any errors that occurred during the creation process.", "methods": ["POST"], "paths": ["/order-lines/create"]}}
{"file": "cloned/saleor/saleor/graphql/order/bulk_mutations/draft_orders.py", "endpoints": {"api_summary": "This API allows for the deletion of draft orders and order lines. It also provides a way to get the channel IDs for channel permission accessible check.", "methods": ["DELETE"], "paths": ["/draft-order-bulk-delete", "/draft-order-lines-bulk-delete"]}}
{"file": "cloned/saleor/saleor/graphql/order/mutations/fulfillment_approve.py", "endpoints": {"api_summary": "This API allows for the approval of fulfillments for orders. It can be used to confirm that an order has been fulfilled and that the items have been shipped to the customer.", "methods": ["POST"], "paths": ["/api/orders/<order_id>/fulfillments/<fulfillment_id>/approve"]}}
{"file": "cloned/saleor/saleor/graphql/order/mutations/order_update_shipping.py", "endpoints": {"api_summary": "This API updates the shipping method of an order. It requires the ID of the order and the ID of the shipping method to update. If the shipping method ID is null, the currently assigned shipping method is removed.", "methods": ["POST"], "paths": ["/orders/<order_id>/shipping-method"]}}
{"file": "cloned/saleor/saleor/graphql/order/mutations/draft_order_complete.py", "endpoints": {"api_summary": "This API completes creating an order.", "methods": ["POST"], "paths": ["/draft-order-complete"]}}
{"file": "cloned/saleor/saleor/graphql/order/mutations/fulfillment_refund_products.py", "endpoints": {"api_summary": "This API allows for refunding products in an order. It can be used to refund unfulfilled or fulfilled lines, and includes options for including shipping costs and specifying a manual amount to refund.", "methods": ["POST"], "paths": ["/api/orders/<order_id>/refund-products"]}}
{"file": "cloned/saleor/saleor/graphql/order/mutations/order_lines_create.py", "endpoints": {"api_summary": "This API defines endpoints for creating and managing order lines in an e-commerce platform.", "methods": ["POST"], "paths": ["/order/lines/create"]}}
{"file": "cloned/saleor/saleor/graphql/order/mutations/fulfillment_cancel.py", "endpoints": {"api_summary": "This API allows for the cancellation of fulfillments and the restocking of items.", "methods": ["POST"], "paths": ["/api/v1/orders/<order_id>/fulfillments/<fulfillment_id>/cancel"]}}
{"file": "cloned/saleor/saleor/graphql/order/mutations/order_line_update.py", "endpoints": {"api_summary": "This API allows for the updating of order lines for an order. It takes in an order line ID and a quantity, and updates the order line with the new quantity. It also invalidates the order prices and recalculates the order weight.", "methods": ["PUT"], "paths": ["/orders/<order_id>/lines/<order_line_id>"]}}
{"file": "cloned/saleor/saleor/graphql/order/mutations/fulfillment_return_products.py", "endpoints": {"api_summary": "This API allows for the creation of fulfillments for returned products.", "methods": ["POST"], "paths": ["/api/orders/<order_id>/fulfillments/return/"]}}
{"file": "cloned/saleor/saleor/graphql/order/mutations/order_mark_as_paid.py", "endpoints": {"api_summary": "This API allows you to mark an order as paid. It takes an order ID and an optional transaction reference as input, and returns the updated order.", "methods": ["POST"], "paths": ["/orders/<order_id>/mark-as-paid"]}}
{"file": "cloned/saleor/saleor/graphql/meta/tests/queries/test_warehouse.py", "endpoints": {"api_summary": "This API provides endpoints for querying metadata for warehouses. It allows users to query public and private metadata for warehouses, with different levels of access based on user permissions.", "methods": ["POST"], "paths": ["/warehouse/<id>/metadata/public", "/warehouse/<id>/metadata/private"]}}
{"file": "cloned/saleor/saleor/graphql/meta/tests/queries/test_channel.py", "endpoints": {"api_summary": "This API allows for querying private and public metadata for a channel.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/meta/tests/queries/test_order.py", "endpoints": {"api_summary": "This API defines a GraphQL schema for querying and manipulating orders, order items, and transactions.", "methods": ["GET", "POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/meta/tests/mutations/test_delete_private_metadata.py", "endpoints": {"api_summary": "This API allows for the deletion of private metadata for a given item. It takes the item ID and a list of keys to delete as input, and returns the updated item with the deleted metadata.", "methods": ["DELETE"], "paths": ["/api/private-metadata/<item_id>/delete"]}}
{"file": "cloned/saleor/saleor/graphql/meta/mutations/update_metadata.py", "endpoints": {"api_summary": "This API updates metadata of an object. It takes an ID or token of an object and a list of metadata fields to update. The API returns a success response if the metadata is updated successfully.", "methods": ["POST"], "paths": ["/update-metadata"]}}
{"file": "cloned/saleor/saleor/graphql/meta/mutations/delete_metadata.py", "endpoints": {"api_summary": "This API allows for the deletion of metadata for an object. The API takes an ID or token for the object to update, and a list of metadata keys to delete. The API returns a success response if the metadata is successfully deleted.", "methods": ["DELETE"], "paths": ["/api/delete-metadata/<id>"]}}
{"file": "cloned/saleor/saleor/graphql/meta/mutations/update_private_metadata.py", "endpoints": {"api_summary": "This API endpoint updates the private metadata of an object. It takes an ID or token of an object and a list of metadata fields to update. The metadata is stored in the private metadata of the object.", "methods": ["POST"], "paths": ["/update-private-metadata/<object_id>"]}}
{"file": "cloned/saleor/saleor/graphql/meta/mutations/delete_private_metadata.py", "endpoints": {"api_summary": "This API allows authenticated staff users or apps to delete private metadata for an object. The API takes an ID or token for the object and a list of metadata keys to delete. The API returns a success response if the metadata is deleted successfully.", "methods": ["DELETE"], "paths": ["/api/private-metadata/<id>/<keys>"]}}
{"file": "cloned/saleor/saleor/graphql/attribute/schema.py", "endpoints": {"api_summary": "This API defines a set of endpoints for managing attributes and their values. It allows for creating, updating, deleting, and translating attributes and their values, as well as reordering attribute values.", "methods": ["POST", "GET", "PUT", "DELETE"], "paths": ["/attributes", "/attributes/<attribute_id>", "/attributes/<attribute_id>/values", "/attributes/<attribute_id>/values/<value_id>"]}}
{"file": "cloned/saleor/saleor/graphql/attribute/tests/queries/test_attributes_sort.py", "endpoints": {"api_summary": "This API allows for sorting attributes and attribute choices by slug or name.", "methods": ["GET"], "paths": ["/attributes", "/attributes/<slug>/choices"]}}
{"file": "cloned/saleor/saleor/graphql/attribute/tests/mutations/test_attribute_delete.py", "endpoints": {"api_summary": "This API allows you to delete an attribute by its ID or external reference.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/attribute/mutations/attribute_update.py", "endpoints": {"api_summary": "This API updates an attribute.", "methods": ["POST"], "paths": ["/attributes/<id>/update"]}}
{"file": "cloned/saleor/saleor/graphql/attribute/mutations/attribute_create.py", "endpoints": {"api_summary": "This API defines a mutation for creating an attribute, which is a key-value pair that can be used to describe a product or other entity in an e-commerce system.", "methods": ["POST"], "paths": ["/api/v1/attributes/"]}}
{"file": "cloned/saleor/saleor/graphql/tax/schema.py", "endpoints": {"api_summary": "This API provides tax-related functionality, including tax configurations, tax classes, and tax exemptions.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/tax/configurations", "/api/tax/classes", "/api/tax/exemptions"]}}
{"file": "cloned/saleor/saleor/graphql/tax/tests/queries/test_tax_class.py", "endpoints": {"api_summary": "This API defines a tax class query that allows retrieving a tax class by its ID. It also includes a private metadata query that requires the manage taxes permission.", "methods": ["GET"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/tax/tests/mutations/test_tax_class_update.py", "endpoints": {"api_summary": "This API defines a mutation for updating a tax class, including its name and country rates. It also allows for removing country rates.", "methods": ["POST"], "paths": ["/api/tax-class/update"]}}
{"file": "cloned/saleor/saleor/graphql/tax/mutations/tax_class_delete.py", "endpoints": {"api_summary": "The API allows for the deletion of tax classes, which can be used to update products, product types, and shipping methods using the default tax class.", "methods": ["DELETE"], "paths": ["/api/tax-classes/<built-in function id>"]}}
{"file": "cloned/saleor/saleor/graphql/tax/mutations/tax_country_configuration_delete.py", "endpoints": {"api_summary": "This API allows for the management of tax class rates for a specific country. It includes endpoints for creating, updating, and deleting tax class rates, as well as retrieving information about the tax class rates for a given country.", "methods": ["POST", "PUT", "DELETE"], "paths": ["/tax-country-configuration", "/tax-country-configuration/<country_code>"]}}
{"file": "cloned/saleor/saleor/graphql/tax/mutations/tax_exemption_manage.py", "endpoints": {"api_summary": "This API allows you to manage tax exemptions for Checkouts and Orders. It provides a way to enable or disable tax exemptions for these objects, and returns information about the taxable object.", "methods": ["POST"], "paths": ["/checkout/<id>/tax-exemption", "/order/<id>/tax-exemption"]}}
{"file": "cloned/saleor/saleor/graphql/tax/mutations/tax_class_update.py", "endpoints": {"api_summary": "This API defines a tax class update endpoint that allows users to update the name and country-specific tax rates for a tax class.", "methods": ["POST"], "paths": ["/api/tax-classes/<id>/update"]}}
{"file": "cloned/saleor/saleor/graphql/discount/filters.py", "endpoints": {"api_summary": "This API defines filters for vouchers and sales, as well as a where input for discounted objects.", "methods": ["GET", "POST"], "paths": ["/vouchers", "/sales", "/discounted-objects"]}}
{"file": "cloned/saleor/saleor/graphql/discount/schema.py", "endpoints": {"api_summary": "This API defines endpoints for managing discounts, including promotions, sales, and vouchers. It allows for creating, updating, and deleting discounts, as well as retrieving and searching for discounts.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/discounts", "/discounts/<id>", "/sales", "/sales/<id>", "/vouchers", "/vouchers/<id>"]}}
{"file": "cloned/saleor/saleor/graphql/discount/sorters.py", "endpoints": {"api_summary": "This file defines the sorting fields for sales, vouchers, and promotions. It also defines the sorting input types for each of these entities.", "methods": ["GET"], "paths": ["/sales", "/vouchers", "/promotions"]}}
{"file": "cloned/saleor/saleor/graphql/discount/tests/queries/test_sales.py", "endpoints": {"api_summary": "This API provides a query for sales, which can be filtered by channel and paginated. It also provides a query for channel listings, which can be filtered by channel and paginated.", "methods": ["GET"], "paths": ["/sales", "/sales/<sale_id>/channel_listings"]}}
{"file": "cloned/saleor/saleor/graphql/discount/tests/queries/test_promotions.py", "endpoints": {"api_summary": "This API allows for querying promotions by staff users, app, and customers. It also allows for querying promotions with pagination.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/discount/tests/queries/test_sales_sorting.py", "endpoints": {"api_summary": "This API allows for the management of sales and vouchers, including creating, updating, and deleting sales and vouchers, as well as retrieving and filtering sales and vouchers.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/sales", "/sales/<sale_id>", "/vouchers", "/vouchers/<voucher_id>"]}}
{"file": "cloned/saleor/saleor/graphql/discount/tests/deprecated/test_voucher_update.py", "endpoints": {"api_summary": "This API updates a voucher with a new code, discount value type, apply once per order, and minimum checkout items quantity. It also triggers a webhook when the voucher is updated.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/discount/tests/deprecated/test_discount.py", "endpoints": {"api_summary": "This API defines a set of endpoints for managing sales and vouchers. It allows for querying and filtering sales and vouchers, as well as creating and updating them.", "methods": ["GET", "POST"], "paths": ["/sales", "/vouchers"]}}
{"file": "cloned/saleor/saleor/graphql/discount/tests/mutations/test_voucher_code_bulk_delete.py", "endpoints": {"api_summary": "This API allows for the bulk deletion of voucher codes. It takes a list of voucher code IDs as input and returns the number of deleted codes.", "methods": ["POST"], "paths": ["/voucher-code-bulk-delete"]}}
{"file": "cloned/saleor/saleor/graphql/discount/tests/mutations/test_promotion_rule_delete.py", "endpoints": {"api_summary": "This API defines a mutation for deleting a promotion rule. It takes an ID as input and returns the deleted rule and any errors that occurred during the deletion process.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/discount/tests/mutations/test_voucher_delete.py", "endpoints": {"api_summary": "This API defines a mutation for deleting a voucher, which is a discount code that can be used by customers during checkout. The mutation takes an ID as input and returns the deleted voucher's name and ID, as well as any errors that occurred during the deletion process.", "methods": ["POST"], "paths": ["/voucher/delete"]}}
{"file": "cloned/saleor/saleor/graphql/discount/tests/benchmark/test_promotion_rule_create.py", "endpoints": {"api_summary": "This API defines a mutation for creating a promotion rule, which can be used to apply discounts or gifts to orders based on certain conditions.", "methods": ["POST"], "paths": ["/promotion-rule-create"]}}
{"file": "cloned/saleor/saleor/graphql/discount/mutations/bulk_mutations.py", "endpoints": {"api_summary": "This API defines endpoints for managing sales and vouchers. It allows for bulk deletion of sales and vouchers, as well as retrieving information about sales and vouchers.", "methods": ["GET", "POST", "DELETE"], "paths": ["/sales", "/sales/<sale_id>", "/vouchers", "/vouchers/<voucher_id>"]}}
{"file": "cloned/saleor/saleor/graphql/discount/mutations/sale/sale_delete.py", "endpoints": {"api_summary": "This API defines a mutation for deleting a sale. It takes an ID of a sale to delete and returns a response with the deleted sale and any errors that occurred during the deletion process.", "methods": ["DELETE"], "paths": ["/sale/<id>"]}}
{"file": "cloned/saleor/saleor/graphql/discount/mutations/sale/sale_create.py", "endpoints": {"api_summary": "This API defines a mutation for creating a new sale with a specified name, type, value, products, variants, categories, collections, and start and end dates. The API also includes a predicate for creating a catalogue promotion rule and sending notifications for the sale.", "methods": ["POST"], "paths": ["/sale/create"]}}
{"file": "cloned/saleor/saleor/graphql/discount/mutations/voucher/voucher_add_catalogues.py", "endpoints": {"api_summary": "This API allows you to add products, categories, and collections to a voucher.", "methods": ["POST"], "paths": ["/voucher/add-catalogues"]}}
{"file": "cloned/saleor/saleor/graphql/discount/mutations/promotion/promotion_rule_update.py", "endpoints": {"api_summary": "This API defines a promotion rule update endpoint for updating an existing promotion rule.", "methods": ["PUT"], "paths": ["/api/v1/promotion-rule/<id>"]}}
{"file": "cloned/saleor/saleor/graphql/discount/mutations/promotion/promotion_rule_create.py", "endpoints": {"api_summary": "This API defines a mutation for creating a new promotion rule. It takes a promotion rule input and returns a promotion rule object. The API also includes validation and error handling for the input data.", "methods": ["POST"], "paths": ["/api/promotion/rule/create"]}}
{"file": "cloned/saleor/saleor/graphql/discount/mutations/promotion/promotion_update.py", "endpoints": {"api_summary": "This API updates an existing promotion.", "methods": ["PUT"], "paths": ["/api/v1/promotion/<id>"]}}
{"file": "cloned/saleor/saleor/graphql/discount/types/promotion_events.py", "endpoints": {"api_summary": "This API provides a way to manage promotion events and rules, including creating, updating, and deleting events and rules, as well as retrieving information about them.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/promotion-events", "/promotion-events/<event_id>", "/promotion-rules", "/promotion-rules/<rule_id>"]}}
{"file": "cloned/saleor/saleor/graphql/discount/types/vouchers.py", "endpoints": {"api_summary": "This API defines a voucher system for a store, allowing customers to redeem discounts on their purchases.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/vouchers", "/vouchers/<voucher_id>", "/vouchers/<voucher_id>/codes", "/vouchers/<voucher_id>/codes/<code_id>"]}}
{"file": "cloned/saleor/saleor/graphql/discount/types/promotions.py", "endpoints": {"api_summary": "This API defines the Promotion and PromotionRule types, which are used to create and manage promotions and promotion rules in the system.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/promotions", "/promotions/<promotion_id>", "/promotion_rules", "/promotion_rules/<promotion_rule_id>"]}}
{"file": "cloned/saleor/saleor/graphql/discount/types/sales.py", "endpoints": {"api_summary": "This API defines a Sale object, which represents a discount for categories, collections, or products. It also defines a SaleChannelListing object, which represents a sale in a specific channel.", "methods": ["GET", "POST"], "paths": ["/sales", "/sales/<sale_id>", "/sales/<sale_id>/channel_listings"]}}
{"file": "cloned/saleor/saleor/graphql/account/tests/queries/test_address.py", "endpoints": {"api_summary": "This API allows users to query and retrieve information about addresses.", "methods": ["GET", "POST"], "paths": ["/address", "/address/<id>"]}}
{"file": "cloned/saleor/saleor/graphql/account/tests/queries/test_staff_users_filtering.py", "endpoints": {"api_summary": "This API allows for querying and managing staff users. It includes endpoints for retrieving a list of staff users, creating a new staff user, updating an existing staff user, and deleting a staff user.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/staff-users", "/staff-users/<user_id>"]}}
{"file": "cloned/saleor/saleor/graphql/account/tests/queries/test_address_validation_rules.py", "endpoints": {"api_summary": "This API provides information about address validation rules for different countries and regions. It allows clients to retrieve information about the required and allowed fields for a given country and region, as well as examples of postal codes and the format for the address.", "methods": ["GET"], "paths": ["/address-validation-rules"]}}
{"file": "cloned/saleor/saleor/graphql/account/tests/queries/test_customers_filtering.py", "endpoints": {"api_summary": "This API defines a GraphQL schema for querying and managing customers. It includes endpoints for retrieving customer information, creating and updating customers, and searching for customers.", "methods": ["GET", "POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/account/tests/mutations/staff/test_user_avatar_update.py", "endpoints": {"api_summary": "This API allows users to update their avatar image. It takes an image file as input and returns the URL of the updated avatar.", "methods": ["POST"], "paths": ["/user/avatar"]}}
{"file": "cloned/saleor/saleor/graphql/account/tests/mutations/permission_group/test_permission_group_create.py", "endpoints": {"api_summary": "This API defines a permission group creation endpoint.", "methods": ["POST"], "paths": ["/api/permission-group/create"]}}
{"file": "cloned/saleor/saleor/graphql/account/tests/mutations/authentication/test_set_password.py", "endpoints": {"api_summary": "This API allows users to set their password after a password reset request. It takes an email, token, and new password as input and returns a user object and a token.", "methods": ["POST"], "paths": ["/set-password"]}}
{"file": "cloned/saleor/saleor/graphql/account/tests/mutations/authentication/test_token_verify.py", "endpoints": {"api_summary": "This API verifies access tokens for users and apps, and returns information about the token and the user it belongs to.", "methods": ["POST"], "paths": ["/token/verify"]}}
{"file": "cloned/saleor/saleor/graphql/account/tests/mutations/authentication/test_token_refresh.py", "endpoints": {"api_summary": "This file defines a GraphQL API for refreshing JWT tokens. It includes mutations for refreshing tokens from cookies or input, and errors for invalid or expired tokens.", "methods": ["POST"], "paths": ["/api/token-refresh"]}}
{"file": "cloned/saleor/saleor/graphql/account/tests/mutations/authentication/test_external_obtain_access_tokens.py", "endpoints": {"api_summary": "This API allows external services to obtain access tokens for a user, which can be used to authenticate and access the user's data.", "methods": ["POST"], "paths": ["/external/obtain-access-tokens"]}}
{"file": "cloned/saleor/saleor/graphql/account/bulk_mutations/user_bulk_set_active.py", "endpoints": {"api_summary": "The UserBulkSetActive API allows administrators to activate or deactivate multiple user accounts in bulk. The API takes a list of user IDs and a boolean value indicating whether the users should be activated or deactivated. The API returns a list of errors if any occurred during the update process.", "methods": ["POST"], "paths": ["/users/bulk-set-active"]}}
{"file": "cloned/saleor/saleor/graphql/account/bulk_mutations/customer_bulk_delete.py", "endpoints": {"api_summary": "The API allows for the deletion of customer accounts. It takes a list of user IDs as input and returns the number of deleted accounts and any errors that occurred during the deletion process.", "methods": ["DELETE"], "paths": ["/customers/<built-in function id>"]}}
{"file": "cloned/saleor/saleor/graphql/account/mutations/staff/user_avatar_delete.py", "endpoints": {"api_summary": "The API allows staff members to delete a user's avatar. It takes a user ID as input and returns an updated user instance.", "methods": ["DELETE"], "paths": ["/users/<built-in function id>/avatar"]}}
{"file": "cloned/saleor/saleor/graphql/account/mutations/staff/user_avatar_update.py", "endpoints": {"api_summary": "The UserAvatarUpdate API allows staff members to update the avatar of a user. The API accepts a multipart request with an image file and returns the updated user instance.", "methods": ["POST"], "paths": ["/users/<built-in function id>/avatar"]}}
{"file": "cloned/saleor/saleor/graphql/account/mutations/staff/address_delete.py", "endpoints": {"api_summary": "The AddressDelete API endpoint allows users to delete an address. It takes an address ID as input and returns a success message if the deletion is successful.", "methods": ["DELETE"], "paths": ["/users/<built-in function id>/addresses/<address_id>"]}}
{"file": "cloned/saleor/saleor/graphql/account/mutations/staff/staff_update.py", "endpoints": {"api_summary": "This API allows for the creation and management of staff users. It includes endpoints for creating, updating, and deleting staff users, as well as for managing their permissions and groups.", "methods": ["POST", "PUT", "DELETE"], "paths": ["/staff/create", "/staff/update", "/staff/delete", "/staff/permissions", "/staff/groups"]}}
{"file": "cloned/saleor/saleor/graphql/account/mutations/staff/customer_create.py", "endpoints": {"api_summary": "Creates a new customer account.", "methods": ["POST"], "paths": ["/customers/create"]}}
{"file": "cloned/saleor/saleor/graphql/account/mutations/staff/staff_delete.py", "endpoints": {"api_summary": "The StaffDelete API allows you to delete a staff user. It takes an ID as input and returns a success response with the deleted staff user's ID.", "methods": ["DELETE"], "paths": ["/staff/<id>"]}}
{"file": "cloned/saleor/saleor/graphql/account/mutations/permission_group/permission_group_delete.py", "endpoints": {"api_summary": "This API defines a mutation for deleting a permission group. It requires the `MANAGE_STAFF` permission and allows only superusers or users with the `MANAGE_STAFF` permission to perform the mutation. The mutation takes an ID of the group to delete as input and returns a `PermissionGroupError` if any errors occur.", "methods": ["DELETE"], "paths": ["/api/v1/permission-groups/<id>"]}}
{"file": "cloned/saleor/saleor/graphql/account/mutations/account/send_confirmation_email.py", "endpoints": {"api_summary": "This API sends a notification confirmation email to a user.", "methods": ["POST"], "paths": ["/send-confirmation-email"]}}
{"file": "cloned/saleor/saleor/graphql/account/mutations/account/account_request_deletion.py", "endpoints": {"api_summary": "The AccountRequestDeletion API allows users to request deletion of their account. It sends an email with an account removal link to the user's email address. The API also supports webhooks for notifications.", "methods": ["POST"], "paths": ["/account/request-deletion"]}}
{"file": "cloned/saleor/saleor/graphql/account/mutations/account/account_address_delete.py", "endpoints": {"api_summary": "The AccountAddressDelete endpoint allows users to delete an address of the logged-in user. It requires one of the following permissions: MANAGE_USERS, IS_OWNER.", "methods": ["DELETE"], "paths": ["/account/address/delete"]}}
{"file": "cloned/saleor/saleor/graphql/account/mutations/account/account_address_create.py", "endpoints": {"api_summary": "This API allows for the creation of a new address for a customer. It also allows for the assignment of a default address for a customer.", "methods": ["POST"], "paths": ["/account/address/create"]}}
{"file": "cloned/saleor/saleor/graphql/account/mutations/account/account_register.py", "endpoints": {"api_summary": "This API defines a mutation for registering a new user, including creating a password and confirming the user's email address.", "methods": ["POST"], "paths": ["/account/register"]}}
{"file": "cloned/saleor/saleor/graphql/account/mutations/authentication/deactivate_all_user_tokens.py", "endpoints": {"api_summary": "The API deactivates all JWT tokens of the currently authenticated user.", "methods": ["POST"], "paths": ["/users/<built-in function id>/deactivate-all-user-tokens"]}}
{"file": "cloned/saleor/saleor/graphql/account/mutations/authentication/verify_token.py", "endpoints": {"api_summary": "The VerifyToken mutation allows clients to verify the validity of a JWT token and retrieve the associated user data. The mutation takes a single argument, the token, and returns a payload object with the user data and a boolean indicating whether the token is valid.", "methods": ["POST"], "paths": ["/verify-token"]}}
{"file": "cloned/saleor/saleor/graphql/account/mutations/authentication/external_logout.py", "endpoints": {"api_summary": "The API allows for logging out a user through a custom authentication plugin. The API takes in the plugin ID and input data required for the logout process, and returns the data returned by the authentication plugin.", "methods": ["POST"], "paths": ["/external-logout"]}}
{"file": "cloned/saleor/saleor/graphql/account/mutations/authentication/refresh_token.py", "endpoints": {"api_summary": "Refresh JWT token. Mutation tries to take refreshToken from the input. If it fails it will try to take `refreshToken` from the http-only cookie `JWT_REFRESH_TOKEN_COOKIE_NAME`. `csrfToken` is required when `refreshToken` is provided as a cookie.", "methods": ["POST"], "paths": ["/refresh-token"]}}
{"file": "cloned/saleor/saleor/graphql/account/mutations/authentication/create_token.py", "endpoints": {"api_summary": "This API authenticates a user and returns a token and user data.", "methods": ["POST"], "paths": ["/create-token"]}}
{"file": "cloned/saleor/saleor/graphql/giftcard/filters.py", "endpoints": {"api_summary": "This API defines a gift card filter and related filters for gift card events and tags.", "methods": ["GET", "POST"], "paths": ["/gift-cards", "/gift-cards/<gift_card_id>", "/gift-cards/<gift_card_id>/events", "/gift-cards/<gift_card_id>/tags"]}}
{"file": "cloned/saleor/saleor/graphql/giftcard/schema.py", "endpoints": {"api_summary": "This API provides endpoints for managing gift cards, including creating, updating, deleting, and resending gift cards. It also provides endpoints for bulk operations on gift cards, such as bulk creation, deletion, activation, and deactivation.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/gift-cards", "/gift-cards/<gift_card_id>", "/gift-cards/bulk"]}}
{"file": "cloned/saleor/saleor/graphql/giftcard/tests/queries/test_gift_card_filtering.py", "endpoints": {"api_summary": "This API allows you to query and filter gift cards based on various criteria such as tags, products, currency, and more. It also allows you to retrieve the current balance and initial balance of a gift card.", "methods": ["GET"], "paths": ["/gift-cards"]}}
{"file": "cloned/saleor/saleor/graphql/giftcard/tests/queries/test_gift_card.py", "endpoints": {"api_summary": "This API defines a single endpoint for querying gift cards.", "methods": ["GET"], "paths": ["/gift-cards/<gift_card_id>"]}}
{"file": "cloned/saleor/saleor/graphql/giftcard/tests/bulk_mutations/test_gift_card_bulk_delete.py", "endpoints": {"api_summary": "This API allows for bulk deletion of gift cards by staff, app, and customers. It takes a list of gift card IDs as input and returns the number of gift cards deleted and any errors that occurred.", "methods": ["POST"], "paths": ["/gift-card/bulk-delete"]}}
{"file": "cloned/saleor/saleor/graphql/giftcard/tests/mutations/test_gift_card_delete.py", "endpoints": {"api_summary": "This API defines a mutation for deleting a gift card. It can be used by staff users with the manage_gift_card permission, and it will delete the gift card with the given ID. The API also supports webhooks and will trigger them when the gift card is deleted.", "methods": ["POST"], "paths": ["/gift-card/delete"]}}
{"file": "cloned/saleor/saleor/graphql/giftcard/bulk_mutations/gift_card_bulk_create.py", "endpoints": {"api_summary": "This API allows you to create multiple gift cards with a single request. It takes a list of gift card details as input and returns a list of created gift cards.", "methods": ["POST"], "paths": ["/gift-cards/bulk-create"]}}
{"file": "cloned/saleor/saleor/graphql/giftcard/bulk_mutations/gift_card_bulk_delete.py", "endpoints": {"api_summary": "The GiftCardBulkDelete API allows for the deletion of multiple gift cards at once. It takes a list of gift card IDs as input and deletes the corresponding gift cards. The API also triggers a webhook event to notify any subscribers that the gift cards have been deleted.", "methods": ["DELETE"], "paths": ["/gift-cards/bulk-delete"]}}
{"file": "cloned/saleor/saleor/graphql/giftcard/mutations/gift_card_update.py", "endpoints": {"api_summary": "This API updates a gift card.", "methods": ["POST"], "paths": ["/gift-card/update"]}}
{"file": "cloned/saleor/saleor/graphql/giftcard/mutations/gift_card_delete.py", "endpoints": {"api_summary": "The API allows for the deletion of gift cards. It takes an ID as input and returns a confirmation of the deletion. The API also supports webhook events for gift card deletion.", "methods": ["DELETE"], "paths": ["/giftcard/<id>"]}}
{"file": "cloned/saleor/saleor/graphql/giftcard/mutations/gift_card_add_note.py", "endpoints": {"api_summary": "This API defines a mutation for adding a note to a gift card. It takes an ID and a message as input, and returns the updated gift card and a gift card event.", "methods": ["POST"], "paths": ["/gift-cards/<gift_card_id>/add-note"]}}
{"file": "cloned/saleor/saleor/graphql/giftcard/mutations/gift_card_resend.py", "endpoints": {"api_summary": "This API allows for resending a gift card to a customer via email. It takes an ID of a gift card and an email address as input, and sends a notification to the customer with the gift card details.", "methods": ["POST"], "paths": ["/gift-cards/<gift_card_id>/resend"]}}
{"file": "cloned/saleor/saleor/graphql/page/bulk_mutations.py", "endpoints": {"api_summary": "This API defines endpoints for managing pages and page types. It allows for bulk deletion and publishing of pages, as well as deleting page types.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/pages", "/pages/<page_id>", "/page-types", "/page-types/<page_type_id>"]}}
{"file": "cloned/saleor/saleor/graphql/page/types.py", "endpoints": {"api_summary": "This API defines a page type and a page. The page type defines the attributes that can be assigned to pages of that type, and the page contains the content and metadata for a specific page.", "methods": ["GET", "POST"], "paths": ["/page-type", "/page"]}}
{"file": "cloned/saleor/saleor/graphql/page/schema.py", "endpoints": {"api_summary": "This API defines endpoints for managing pages and page types, including creating, updating, deleting, and translating pages, as well as reordering attributes and attribute values.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/pages", "/pages/<page_id>", "/page-types", "/page-types/<page_type_id>"]}}
{"file": "cloned/saleor/saleor/graphql/page/mutations/page_create.py", "endpoints": {"api_summary": "This API defines a mutation for creating a new page, with fields for the page's title, content, attributes, and publication date. It also includes validation for the page's slug and attributes, and handles the saving of the page and its attributes.", "methods": ["POST"], "paths": ["/api/pages/create"]}}
{"file": "cloned/saleor/saleor/graphql/translations/schema.py", "endpoints": {"api_summary": "This API provides a way to manage translations for various objects in the system, such as products, categories, and pages.", "methods": ["GET", "POST"], "paths": ["/translations", "/translations/<id>"]}}
{"file": "cloned/saleor/saleor/graphql/translations/tests/deprecated/test_translations.py", "endpoints": {"data": {"translation": {"id": "123", "name": "My Product", "translation": {"name": "Mon Produit"}, "product": {"id": "123", "name": "My Product"}}}}}
{"file": "cloned/saleor/saleor/graphql/translations/tests/mutations/test_product_translate.py", "endpoints": {"api_summary": "This API allows for the translation of product names and slugs for different languages. It also allows for the update of product translations when the slug exists.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/translations/tests/mutations/test_page_translate.py", "endpoints": {"api_summary": "This API allows for the translation of page content into different languages. It includes endpoints for creating, updating, and retrieving page translations.", "methods": ["POST"], "paths": ["/page/<page_id>/translate"]}}
{"file": "cloned/saleor/saleor/graphql/translations/tests/mutations/test_promotion_rule_translate.py", "endpoints": {"api_summary": "This API defines a mutation for translating a promotion rule, which can be used to create or update a translation for a promotion rule in a specific language.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/translations/tests/mutations/test_sale_translate.py", "endpoints": {"api_summary": "This API allows for the translation of sale names into different languages.", "methods": ["POST"], "paths": ["/sale/translate"]}}
{"file": "cloned/saleor/saleor/graphql/translations/tests/mutations/test_collection_translate.py", "endpoints": {"api_summary": "This API allows for the translation of collection names and slugs for different languages.", "methods": ["POST"], "paths": ["/collections/<collection_id>/translate"]}}
{"file": "cloned/saleor/saleor/graphql/translations/mutations/voucher_translate.py", "endpoints": {"api_summary": "The VoucherTranslate API allows for the creation and update of translations for vouchers. It takes an ID, language code, and input fields as arguments and returns a Voucher object with the translated fields.", "methods": ["POST"], "paths": ["/voucher/translate"]}}
{"file": "cloned/saleor/saleor/graphql/translations/mutations/attribute_value_bulk_translate.py", "endpoints": {"api_summary": "This API allows for bulk translation of attribute values. It takes a list of attribute value IDs or external references and a language code, and returns the number of translations created or updated, as well as a list of any errors that occurred.", "methods": ["POST"], "paths": ["/attribute-values/bulk-translate"]}}
{"file": "cloned/saleor/saleor/graphql/translations/mutations/page_translate.py", "endpoints": {"api_summary": "The PageTranslate mutation allows for the creation or update of translations for a page. It takes an ID, language code, and input fields for the translation, and returns a TranslatableContent object. This mutation is only used for pages and requires the MANAGE_TRANSLATIONS permission.", "methods": ["POST"], "paths": ["/page/translate"]}}
{"file": "cloned/saleor/saleor/graphql/translations/mutations/category_translate.py", "endpoints": {"api_summary": "The CategoryTranslate API allows for the creation and update of translations for categories. It takes an ID, language code, and input fields as arguments and returns a TranslationError if any errors occur.", "methods": ["POST"], "paths": ["/category/translate"]}}
{"file": "cloned/saleor/saleor/graphql/translations/mutations/product_variant_bulk_translate.py", "endpoints": {"api_summary": "This API allows for the creation and update of translations for product variants.", "methods": ["POST"], "paths": ["/products/variants/translate"]}}
{"file": "cloned/saleor/saleor/graphql/channel/schema.py", "endpoints": {"api_summary": "This API provides endpoints for managing channels, including creating, updating, deleting, activating, deactivating, and reordering warehouses. It also provides a query to retrieve a single channel by ID or slug, and a query to retrieve a list of all channels.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/channels", "/channels/<built-in function id>", "/channels/<built-in function slug>"]}}
{"file": "cloned/saleor/saleor/graphql/channel/tests/queries/test_channel.py", "endpoints": {"api_summary": "This API allows you to retrieve information about a specific channel.", "methods": ["GET"], "paths": ["/api/v1/channels/<channel_id>"]}}
{"file": "cloned/saleor/saleor/graphql/channel/tests/mutations/test_channel_create.py", "endpoints": {"api_summary": "This API defines a GraphQL schema for creating a new channel in the Saleor e-commerce platform.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/channel/tests/mutations/test_channel_activate.py", "endpoints": {"api_summary": "This API allows for the activation and deactivation of channels.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/channel/mutations/channel_activate.py", "endpoints": {"api_summary": "This API defines a single endpoint for activating a channel. The endpoint accepts a channel ID as input and returns the activated channel object.", "methods": ["POST"], "paths": ["/api/channel/activate"]}}
{"file": "cloned/saleor/saleor/graphql/channel/mutations/channel_delete.py", "endpoints": {"api_summary": "This API allows you to delete a channel and migrate orders to a target channel. It also allows you to delete checkouts and product availability.", "methods": ["DELETE"], "paths": ["/api/v1/channels/<id>"]}}
{"file": "cloned/saleor/saleor/graphql/invoice/mutations/invoice_create.py", "endpoints": {"api_summary": "This API allows you to create a ready to send invoice for an order. It requires the order ID and invoice details as input. The API returns the created invoice object.", "methods": ["POST"], "paths": ["/api/invoice/create"]}}
{"file": "cloned/saleor/saleor/graphql/invoice/mutations/invoice_delete.py", "endpoints": {"api_summary": "The InvoiceDelete API allows for the deletion of an invoice. It takes an ID as input and returns a response indicating the success or failure of the deletion. The API also includes permissions and error handling.", "methods": ["DELETE"], "paths": ["/invoices/<built-in function id>"]}}
{"file": "cloned/saleor/saleor/graphql/invoice/mutations/invoice_update.py", "endpoints": {"api_summary": "This API allows for the updating of invoices, including the ability to set the invoice number and URL, and update the invoice metadata and private metadata.", "methods": ["POST"], "paths": ["/invoices/<id>/update"]}}
{"file": "cloned/saleor/saleor/graphql/app/schema.py", "endpoints": {"api_summary": "This API provides endpoints for managing apps, including creating, updating, and deleting apps, as well as retrieving information about apps and their extensions.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/apps", "/apps/<app_id>", "/apps/<app_id>/extensions", "/apps/<app_id>/extensions/<extension_id>"]}}
{"file": "cloned/saleor/saleor/graphql/app/tests/queries/test_apps_installations.py", "endpoints": {"api_summary": "This API provides information about app installations and their logos.", "methods": ["GET"], "paths": ["/appsInstallations", "/appsInstallations/<id>/brand/logo"]}}
{"file": "cloned/saleor/saleor/graphql/app/tests/mutations/test_app_deactivate.py", "endpoints": {"api_summary": "This API allows you to deactivate an app.", "methods": ["POST"], "paths": ["/app/deactivate"]}}
{"file": "cloned/saleor/saleor/graphql/app/tests/mutations/test_app_delete.py", "endpoints": {"api_summary": "This API allows you to delete an app with a given ID. The app must have the manage_orders permission.", "methods": ["POST"], "paths": ["/app/delete"]}}
{"file": "cloned/saleor/saleor/graphql/app/mutations/app_fetch_manifest.py", "endpoints": {"api_summary": "This API fetches and validates a manifest for an app.", "methods": ["POST"], "paths": ["/api/apps/fetch-manifest/"]}}
{"file": "cloned/saleor/saleor/graphql/app/mutations/app_activate.py", "endpoints": {"api_summary": "The API allows for the activation of apps. It takes an app ID as input and returns a success response if the app was successfully activated. The API also supports webhook events for app status changes.", "methods": ["POST"], "paths": ["/apps/<app_id>/activate"]}}
{"file": "cloned/saleor/saleor/graphql/app/mutations/app_deactivate.py", "endpoints": {"api_summary": "The API deactivates an app.", "methods": ["POST"], "paths": ["/api/v1/app/deactivate"]}}
{"file": "cloned/saleor/saleor/graphql/app/mutations/app_token_create.py", "endpoints": {"api_summary": "This API allows you to create, read, update, and delete authentication tokens for apps. It also allows you to manage the apps themselves, including creating, updating, and deleting them.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/apps", "/apps/<app_id>", "/apps/<app_id>/tokens", "/apps/<app_id>/tokens/<token_id>"]}}
{"file": "cloned/saleor/saleor/graphql/app/mutations/app_delete_failed_installation.py", "endpoints": {"api_summary": "The API allows for the deletion of failed installations of apps. It takes an ID of the failed installation as input and returns an error if the installation status is not failed.", "methods": ["DELETE"], "paths": ["/api/app/installations/<built-in function id>"]}}
{"file": "cloned/saleor/saleor/graphql/app/mutations/app_token_delete.py", "endpoints": {"api_summary": "This API allows for the deletion of authentication tokens assigned to apps.", "methods": ["DELETE"], "paths": ["/api/app/token/<built-in function id>"]}}
{"file": "cloned/saleor/saleor/plugins/views.py", "endpoints": {"api_summary": "This API handles webhooks for plugins in Saleor. It allows for handling webhooks for both global and per-channel plugins, and provides a way to retrieve the webhook endpoint for a given plugin and channel.", "methods": ["GET", "POST"], "paths": ["/plugins/<plugin_id>/webhook", "/plugins/<plugin_id>/webhook/<channel_slug>"]}}
{"file": "cloned/saleor/saleor/plugins/webhook/tests/test_tax_webhook.py", "endpoints": {"api_summary": "This API defines a set of endpoints for calculating taxes for orders and checkouts.", "methods": ["GET", "POST"], "paths": ["/taxes/orders/<order_id>/calculate", "/taxes/checkouts/<checkout_id>/calculate"]}}
{"file": "cloned/saleor/saleor/plugins/webhook/tests/test_payment_webhook.py", "endpoints": {"api_summary": "This API defines a payment gateway for the Saleor e-commerce platform. It handles payment authorization, capture, and refund operations.", "methods": ["POST", "GET"], "paths": ["/payments/authorize", "/payments/capture", "/payments/refund"]}}
{"file": "cloned/saleor/saleor/plugins/admin_email/tests/test_plugin.py", "endpoints": {"api_summary": "This file defines a Django plugin for sending email notifications to staff members. It includes a set of REST API endpoints for configuring and testing the email plugin.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/plugins/admin-email/", "/api/plugins/admin-email/configuration/", "/api/plugins/admin-email/test/"]}}
{"file": "cloned/saleor/saleor/order/tasks.py", "endpoints": {"api_summary": "This file defines a set of tasks for managing orders in an e-commerce application. It includes tasks for expiring orders, deleting expired orders, and recalculating order prices.", "methods": ["GET", "POST"], "paths": ["/orders/expire", "/orders/delete-expired", "/orders/recalculate-prices"]}}
{"file": "cloned/saleor/saleor/order/tests/test_fetch_order_prices.py", "endpoints": {"api_summary": "This file defines a code understanding assistant that reads a single source code file and determines if it defines any REST API endpoints.", "methods": ["GET"], "paths": ["/api/code-understanding-assistant/"]}}
{"file": "cloned/saleor/saleor/order/tests/test_order_utils.py", "endpoints": {"api_summary": "This file defines a set of functions for managing orders in an e-commerce application.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/orders", "/orders/<order_id>", "/orders/<order_id>/lines", "/orders/<order_id>/lines/<line_id>"]}}
{"file": "cloned/saleor/saleor/order/tests/test_tasks.py", "endpoints": {"api_summary": "This API defines a set of endpoints for managing orders in an e-commerce application.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/orders", "/orders/<order_id>", "/orders/<order_id>/events"]}}
{"file": "cloned/saleor/saleor/asgi/tests/test_cors.py", "endpoints": {"api_summary": "This API handles CORS requests for a GraphQL API. It allows for preflight requests and simple requests, and allows for specific origins to be configured.", "methods": ["OPTIONS", "POST"], "paths": ["/", "/<built-in function id>"]}}
{"file": "cloned/saleor/saleor/discount/tests/test_discounts.py", "endpoints": {"api_summary": "This file defines a set of utility functions for working with vouchers and discounts in the Saleor e-commerce platform.", "methods": ["GET", "POST"], "paths": ["/vouchers", "/vouchers/<voucher_id>", "/vouchers/<voucher_id>/codes", "/vouchers/<voucher_id>/codes/<code_id>"]}}
{"file": "cloned/java-microservice/user-service/src/main/java/com/apssouza/controllers/AccountController.java", "endpoints": {"api_summary": "The Account API provides endpoints for managing user accounts, including creating, reading, updating, and deleting accounts. It also provides a search endpoint for finding accounts by email.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/accounts", "/accounts/<id>", "/accounts/search"]}}
{"file": "cloned/java-microservice/remainder-service/src/main/java/com/apssouza/integrations/socket/TodoSocketController.java", "endpoints": {"api_summary": "The TodoSocketController defines a socket endpoint for sending and receiving messages related to to-do items. The endpoint is accessible at /socket-todos and sends messages to the /topic/todos topic.", "methods": ["GET", "POST"], "paths": ["/socket-todos", "/topic/todos"]}}
{"file": "cloned/java-microservice/remainder-service/src/main/java/com/apssouza/controllers/TodoServiceStatisticsController.java", "endpoints": {"api_summary": "The TodoServiceStatisticsController provides a REST API for retrieving statistics about the TodoService. The API includes a single endpoint that returns a JSON object with information about the average, minimum, maximum, and count of durations for the TodoService methods.", "methods": ["GET"], "paths": ["/todo-statistics"]}}
{"file": "cloned/java-microservice/remainder-service/src/main/java/com/apssouza/controllers/TodoChangesController.java", "endpoints": {"api_summary": "The TodoChangesController API provides a RESTful interface for retrieving recent changes made to a to-do list. It exposes a single endpoint, GET /todo-changes, which returns a list of TodoChangedEvent objects representing the recent changes.", "methods": ["GET"], "paths": ["/todo-changes"]}}
{"file": "cloned/java-microservice/remainder-service/src/main/java/com/apssouza/controllers/TodoController.java", "endpoints": {"api_summary": "The TodoController API provides endpoints for managing ToDo items. It allows for creating, reading, updating, and deleting ToDo items, as well as searching and updating the status of ToDo items.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/todos", "/todos/search", "/todos/{id}", "/todos/{id}/status"]}}
{"file": "cloned/java-microservice/mail-service/src/main/java/com/apssouza/mailservice/controllers/NotifyController.java", "endpoints": {"api_summary": "The NotifyController API allows for sending emails. It has a single endpoint, /send/email, which accepts a GET request and returns a Future<String> indicating the success or failure of the email send operation.", "methods": ["GET"], "paths": ["/send/email"]}}
{"file": "cloned/java-microservice/mail-service/src/main/java/com/apssouza/mailservice/controllers/EmailController.java", "endpoints": {"api_summary": "The EmailController API provides a RESTful interface for managing emails. It allows users to retrieve a list of all emails, as well as retrieve, create, update, and delete individual emails.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/emails", "/emails/<built-in function id>"]}}
{"file": "cloned/java-microservice/oauth-server/src/main/java/com/apssouza/clients/UserClient.java", "endpoints": {"api_summary": "The UserClient API provides a way to search for users by email and retrieve their information. It is a part of the larger Apssouza system, which manages user accounts and provides a way to interact with them.", "methods": ["GET"], "paths": ["/accounts/search"]}}
{"file": "cloned/java-microservice/api-gateway/src/main/java/com/apssouza/configuration/OAuth2ResourceServerConfiguration.java", "endpoints": {"api_summary": "This API is a resource server configuration for OAuth2 authentication and authorization. It defines endpoints for managing access to resources and provides a token store for storing and retrieving access tokens.", "methods": ["GET", "POST"], "paths": ["/hystrix.stream", "/todos"]}}
{"file": "cloned/java-microservice/api-gateway/src/main/java/com/apssouza/controllers/UserController.java", "endpoints": {"api_summary": "The UserController API provides endpoints for managing user accounts and their associated todos. It includes endpoints for retrieving all users, retrieving a specific user by email, retrieving all todos for a specific user, and creating a new todo for a specific user.", "methods": ["GET", "POST"], "paths": ["/accounts", "/accounts/me", "/accounts/me/todos"]}}
{"file": "cloned/java-microservice/api-gateway/src/main/java/com/apssouza/controllers/TodoController.java", "endpoints": {"api_summary": "The To Do API allows users to create, read, update, and delete to-do items. It also provides endpoints for retrieving all to-do items and for retrieving a specific to-do item by its ID.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/todos", "/todos/<built-in function id>"]}}
{"file": "cloned/java-microservice/api-gateway/src/main/java/com/apssouza/clients/UserClient.java", "endpoints": {"api_summary": "The UserClient API provides endpoints for managing user accounts and retrieving user information. It includes endpoints for creating new users, retrieving all users, and searching for users by email.", "methods": ["GET", "POST"], "paths": ["/users", "/users/<built-in function id>", "/accounts", "/accounts/search"]}}
{"file": "cloned/java-microservice/api-gateway/src/main/java/com/apssouza/clients/TodoClient.java", "endpoints": {"api_summary": "The Todo API allows users to create, read, update, and delete todo items. It also provides a search function to find todo items by user email.", "methods": ["GET", "POST"], "paths": ["/todos", "/todos/search"]}}
{"file": "cloned/website/authserver/src/main/java/org/flowant/website/OAuth2ServerConfig.java", "endpoints": {"api_summary": "This API is an OAuth2 authorization server that provides authentication and authorization services for a website.", "methods": ["GET", "POST"], "paths": ["/oauth/authorize", "/oauth/token", "/oauth/revoke"]}}
{"file": "cloned/website/authserver/src/main/java/org/flowant/website/controller/JwkSetRest.java", "endpoints": {"api_summary": "The JwkSetRest API provides a JSON Web Key Set (JWKS) endpoint for retrieving the public key of the website's JSON Web Token (JWT) signing key.", "methods": ["GET"], "paths": ["/org.flowant.website.controller.JwkSetRest/.well-known/jwks.json"]}}
{"file": "cloned/website/authserver/src/main/java/org/flowant/website/controller/UserInfoEndpointRest.java", "endpoints": {"api_summary": "The UserInfoEndpointRest API provides a single endpoint for retrieving the current user's information. The endpoint is accessible at /me and returns the user's principal object.", "methods": ["GET"], "paths": ["/me"]}}
{"file": "cloned/website/authserver/src/main/java/org/flowant/website/controller/UserRest.java", "endpoints": {"api_summary": "The UserRest API provides endpoints for retrieving user information and admin information. The user endpoint returns a map of user information, while the admin endpoint returns a map of admin information.", "methods": ["GET"], "paths": ["/user", "/admin"]}}
{"file": "cloned/website/authserver/src/test/java/org/flowant/authserver/OAuth2JwtTokenIssuerTests.java", "endpoints": {"api_summary": "This API is an OAuth2 server that provides endpoints for obtaining access tokens and refresh tokens, as well as a user info endpoint for retrieving user information.", "methods": ["GET", "POST"], "paths": ["/oauth/token", "/oauth/token/refresh", "/user/info"]}}
{"file": "cloned/website/backend/src/main/java/org/flowant/website/BackendSecurityConfiguration.java", "endpoints": {"api_summary": "The BackendSecurityConfiguration API provides security configuration for the website's backend REST API. It defines various endpoints for accessing and manipulating content, reviews, replies, files, and search results, as well as endpoints for user authentication and registration.", "methods": ["GET", "POST"], "paths": ["/content", "/review", "/reply", "/files", "/search", "/website", "/user/signup"]}}
{"file": "cloned/website/backend/src/main/java/org/flowant/website/rest/ReplyRest.java", "endpoints": {"api_summary": "The ReplyRest API provides endpoints for managing replies to comments in a website. It allows users to create, read, update, and delete replies, as well as retrieve popular replies by container ID.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/reply", "/reply/popular", "/reply/{id}/{cid}"]}}
{"file": "cloned/website/backend/src/main/java/org/flowant/website/rest/NotificationRest.java", "endpoints": {"api_summary": "The Notification API allows for the creation, retrieval, and deletion of notifications. It also allows for the addition and removal of subscribers to notifications.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/notification", "/notification/{id}/{cid}", "/notification/{id}/{cid}/{subscriber}"]}}
{"file": "cloned/website/backend/src/main/java/org/flowant/website/rest/RepositoryRest.java", "endpoints": {"api_summary": "The RepositoryRest API provides a set of endpoints for managing entities in a Cassandra database. It includes endpoints for retrieving all entities, creating new entities, updating existing entities, and deleting entities by ID.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/entities", "/entities/<id>"]}}
{"file": "cloned/website/backend/src/main/java/org/flowant/website/rest/PopularRepositoryRest.java", "endpoints": {"api_summary": "The PopularRepositoryRest API provides endpoints for retrieving and managing popular items in a container. It allows users to retrieve a list of popular items by container ID, and also provides endpoints for retrieving all items by container ID and author ID, as well as deleting items by ID.", "methods": ["GET", "POST", "DELETE"], "paths": ["/popular", "/popular/<containerId>", "/popular/<containerId>/<authorId>"]}}
{"file": "cloned/website/backend/src/main/java/org/flowant/website/rest/RelationRest.java", "endpoints": {"api_summary": "The Relation API allows users to manage their relationships with other users. It provides endpoints for creating, reading, updating, and deleting relationships.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/relation", "/relation/{method}/{id}/{followee}"]}}
{"file": "cloned/website/backend/src/main/java/org/flowant/website/rest/WebSiteRest.java", "endpoints": {"api_summary": "The WebSiteRest API provides endpoints for managing website data, including creating, reading, updating, and deleting website objects. The API uses HTTP methods and a UUID for identifying resources.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/website", "/website/<built-in function id>"]}}
{"file": "cloned/website/backend/src/main/java/org/flowant/website/rest/ReviewReputationRest.java", "endpoints": {"api_summary": "The Review Reputation API allows users to create, read, update, and delete review reputations. It also provides a way to retrieve all review reputations and a specific review reputation by ID and CID.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/review_rpt", "/review_rpt/<id>/<cid>"]}}
{"file": "cloned/website/backend/src/main/java/org/flowant/website/rest/CruTimeRepositoryRest.java", "endpoints": {"api_summary": "The API provides CRUD operations for entities with CRU time information, including reading, creating, updating, and deleting entities. The API also provides a method for retrieving all entities and a method for retrieving a specific entity by ID.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/entities", "/entities/<id>"]}}
{"file": "cloned/website/backend/src/main/java/org/flowant/website/rest/ContentRest.java", "endpoints": {"api_summary": "The Content API provides endpoints for managing content in a website, including creating, reading, updating, and deleting content. It also provides an endpoint for getting popular content based on a container ID.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/content", "/content/popular", "/content/{id}/{cid}"]}}
{"file": "cloned/website/backend/src/main/java/org/flowant/website/rest/SearchRest.java", "endpoints": {"api_summary": "The SearchRest API allows users to search for content by tag. It returns a list of content that matches the search query, along with a link to the next page of results if there are more than one page of results.", "methods": ["GET"], "paths": ["/search"]}}
{"file": "cloned/website/backend/src/main/java/org/flowant/website/rest/FileRest.java", "endpoints": {"api_summary": "The FileRest API provides endpoints for managing files, including uploading, downloading, and deleting files. The API also supports caching and returns a list of file references for uploaded files.", "methods": ["GET", "POST", "DELETE"], "paths": ["/files", "/files/{id}", "/files/deletes"]}}
{"file": "cloned/website/backend/src/main/java/org/flowant/website/rest/SubItemRest.java", "endpoints": {"api_summary": "The SubItem API allows for the creation, retrieval, update, and deletion of SubItem resources. It also provides a way to retrieve a SubItem by its ID.", "methods": ["POST", "PUT", "GET", "DELETE"], "paths": ["/subitem", "/subitem/<built-in function id>"]}}
{"file": "cloned/website/backend/src/main/java/org/flowant/website/rest/ContentReputationRest.java", "endpoints": {"api_summary": "The Content Reputation API allows for the management of content reputation data, including getting all content reputation data, creating new content reputation data, updating existing content reputation data, and deleting content reputation data by ID and CID.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/content_rpt", "/content_rpt/<id>/<cid>"]}}
{"file": "cloned/website/backend/src/main/java/org/flowant/website/rest/UserRest.java", "endpoints": {"api_summary": "The UserRest API provides endpoints for managing user accounts, including signup, login, and account deletion. It also provides endpoints for retrieving user information and updating user profiles.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/user", "/user/signup", "/user/{id}"]}}
{"file": "cloned/website/backend/src/main/java/org/flowant/website/rest/ReplyReputationRest.java", "endpoints": {"api_summary": "The ReplyReputation API allows for the management of reply reputations, including getting all reputations, creating a new reputation, updating an existing reputation, getting a specific reputation by ID, and deleting a specific reputation by ID.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/reply_rpt", "/reply_rpt/<id>/<cid>"]}}
{"file": "cloned/website/backend/src/main/java/org/flowant/website/rest/MessageRest.java", "endpoints": {"api_summary": "The MessageRest API provides endpoints for managing messages, including retrieving all messages, retrieving a specific message by ID and CID, creating a new message, updating an existing message, and deleting a message by ID and CID.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/message", "/message/{id}/{cid}"]}}
{"file": "cloned/website/backend/src/main/java/org/flowant/website/rest/ReviewRest.java", "endpoints": {"api_summary": "The Review API allows users to create, read, update, and delete reviews for a given container ID. It also provides endpoints for getting all reviews for a given container ID, as well as getting popular reviews for a given container ID.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/review", "/review/popular", "/review/{id}/{cid}"]}}
{"file": "cloned/website/backend/src/test/java/org/flowant/website/integration/BaseIntegrationTest.java", "endpoints": {"api_summary": "This API defines endpoints for managing content, users, reviews, and replies on a website. It also includes endpoints for managing reputation scores for these entities.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/website", "/subitem", "/user", "/content", "/review", "/reply", "/content_reputation", "/review_reputation", "/reply_reputation"]}}
{"file": "cloned/website/backend/src/test/java/org/flowant/website/rest/FileRestTest.java", "endpoints": {"api_summary": "The FileRest API allows for the management of files, including uploading, retrieving, and deleting files.", "methods": ["POST", "GET", "DELETE"], "paths": ["/files", "/files/<id>", "/files/deletes"]}}
{"file": "cloned/website/backend/src/test/java/org/flowant/website/rest/ContentRestTest.java", "endpoints": {"api_summary": "The ContentRestTest class defines a set of tests for the Content REST API endpoints. The tests cover various aspects of the API, including CRUD operations, pagination, and popular sub-item retrieval.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/content", "/content/<id>", "/content/<id>/<cid>", "/content/<id>/<cid>/<ps>"]}}
{"file": "cloned/website/frontend/src/app/app-routing.module.ts", "endpoints": {"api_summary": "This API provides endpoints for user authentication, content management, and user profile management. It also includes endpoints for searching and viewing content, as well as sending notifications and messages.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/signin", "/signup", "/admin", "/search", "/search/:tag", "/content/edit", "/content/edit/:id/:cid", "/content/view/:id/:cid", "/notification", "/message", "/user/profile", "/user/profile/:id", "/user/content", "/user/content/:id", "/**"]}}
{"file": "cloned/website/common/src/main/java/org/flowant/website/repository/UserRepository.java", "endpoints": {"api_summary": "The UserRepository API provides a reactive interface for managing users in a Cassandra database. It includes methods for creating, reading, updating, and deleting users, as well as querying users by username and last name.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users", "/users/<built-in function id>", "/users/<username>", "/users/<lastname>"]}}
{"file": "cloned/website/common/src/main/java/org/flowant/website/repository/NotificationRepository.java", "endpoints": {"api_summary": "The NotificationRepository API provides a way to manage notifications for a user. It allows for creating, reading, updating, and deleting notifications, as well as retrieving a list of notifications for a given user.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/notifications", "/notifications/<notification_id>", "/notifications/subscriber/<subscriber_id>"]}}
{"file": "cloned/EHR-Route/gateway-service/src/main/java/ehroute/gatewayservice/GatewayServiceApplication.java", "endpoints": {"api_summary": "The GatewayServiceApplication defines a set of routes for the EHRoute system, which allows for the discovery and routing of services in the system. The routes are defined using the Spring Cloud Gateway framework, and are used to direct incoming requests to the appropriate service based on the URL path and HTTP method.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/config/**", "/provider/**", "/patient/**", "/identity/**"]}}
{"file": "cloned/EHR-Route/provider-service/src/main/java/ehroute/providerservice/TestController.java", "endpoints": {"api_summary": "The TestController API provides a simple endpoint for testing purposes. It returns a hardcoded message or a message from the service configuration.", "methods": ["GET"], "paths": ["/test"]}}
{"file": "cloned/EHR-Route/identity-service/src/main/java/ehroute/identityservice/controllers/AccountController.java", "endpoints": {"api_summary": "The Identity Service API provides endpoints for managing user accounts, including creating new accounts, retrieving information about the current user, and logging in and out.", "methods": ["GET", "POST"], "paths": ["/account/current", "/account/register"]}}
{"file": "cloned/EHR-Route/identity-service/src/main/java/ehroute/identityservice/controllers/AuthenticationController.java", "endpoints": {"api_summary": "The AuthenticationController API provides endpoints for handling user authentication and consent. It includes endpoints for login, consent, and error handling.", "methods": ["GET", "POST"], "paths": ["/login", "/consent", "/error"]}}
{"file": "cloned/EHR-Route/identity-service/src/main/java/ehroute/identityservice/handlers/account/CreateAccountHandler.java", "endpoints": {"api_summary": "The CreateAccountHandler API endpoint allows users to create a new account by providing an email address and password. The endpoint returns a JSON response with the created account details, including the account ID, email address, and creation date.", "methods": ["POST"], "paths": ["/accounts"]}}
{"file": "cloned/EHR-Route/identity-service/src/main/java/ehroute/identityservice/utilities/app/ApiEndpoints.java", "endpoints": {"api_summary": "The API endpoints in this file provide authentication and account management functionality, allowing users to log in, register, and manage their accounts. The endpoints are organized into two main categories: authentication and account management.", "methods": ["GET", "POST"], "paths": ["/auth", "/login", "/consent", "/account", "/current", "/register"]}}
{"file": "cloned/daos/site_scons/prereq_tools/base.py", "endpoints": {"api_summary": "This file defines a class for managing external prerequisite components", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/components", "/components/<component_name>", "/components/<component_name>/<component_version>"]}}
{"file": "cloned/daos/src/tests/ftest/control/dmg_system_reformat.py", "endpoints": {"api_summary": "This API is used to test the dmg system reformat functionality. It creates a pool using 90% of the available NVMe capacity, stops the engine instances, performs a system erase, and then performs a storage format. It then checks that the engine starts up again, that the pool list is empty, and that the last created pool is in the list.", "methods": ["GET", "POST"], "paths": ["/dmg/system/reformat"]}}
{"file": "cloned/daos/src/tests/ftest/container/basic_snapshot.py", "endpoints": {"api_summary": "This API is a test for a basic snapshot feature in a DAOS container. It creates a container, writes an object to it, takes a snapshot, and then updates the object 500 times. The test then verifies that the snapshot remains unchanged and that the data in the snapshot is the same as the original data.", "methods": ["GET", "POST"], "paths": ["/container/snapshot"]}}
{"file": "cloned/daos/src/control/server/mgmt_fi.go", "endpoints": {"api_summary": "This file defines a set of fault injection endpoints for the DAOS management service. These endpoints allow for simulating and injecting faults into the system for testing and debugging purposes.", "methods": ["POST"], "paths": ["/fault_inject/report", "/fault_inject/mgmt_pool_fault", "/fault_inject/pool_fault"]}}
{"file": "cloned/daos/src/control/server/mgmt_cont.go", "endpoints": {"api_summary": "The API defines a set of endpoints for managing containers in a DAOS pool. It includes endpoints for listing containers, setting container ownership, and other related operations.", "methods": ["GET", "POST"], "paths": ["/containers", "/containers/<container_id>", "/containers/<container_id>/owner"]}}
{"file": "cloned/daos/src/control/server/ctl_firmware.go", "endpoints": {"api_summary": "This API provides methods for querying and updating firmware on storage devices.", "methods": ["GET", "POST"], "paths": ["/firmware/query", "/firmware/update"]}}
{"file": "cloned/daos/src/control/cmd/dmg/auto_test.go", "endpoints": {"message": "Hello, World!"}}
{"file": "cloned/daos/src/control/lib/control/event.go", "endpoints": {"api_summary": "This file defines an event forwarder and logger for the DAOS system. It includes functions for forwarding events to the Management Service (MS) and logging events to the system log.", "methods": ["POST"], "paths": ["/events"]}}
{"file": "cloned/daos/src/control/lib/control/pool_acl.go", "endpoints": {"api_summary": "This API provides methods for managing the Access Control List (ACL) of a DAOS pool.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/pools/<pool_id>/acl", "/pools/<pool_id>/acl/<principal>"]}}
{"file": "cloned/daos/src/control/vendor/golang.org/x/sys/unix/zerrors_netbsd_386.go", "endpoints": {"api_summary": "No REST API endpoints found in this file", "methods": [], "paths": []}}
{"file": "cloned/daos/src/control/vendor/golang.org/x/sys/unix/zerrors_linux_mips.go", "endpoints": {"api_summary": "This API defines a set of endpoints for managing and interacting with a MIPS CPU.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/cpu", "/cpu/<cpu_id>", "/cpu/<cpu_id>/registers", "/cpu/<cpu_id>/registers/<register_id>", "/cpu/<cpu_id>/memory", "/cpu/<cpu_id>/memory/<memory_id>"]}}
{"file": "cloned/daos/src/control/vendor/golang.org/x/sys/unix/zerrors_zos_s390x.go", "endpoints": {"api_summary": "This file defines a set of constants and variables related to the ZFS file system.", "methods": ["GET", "POST", "PUT", "DELETE", "PATCH"], "paths": ["/zfs", "/zfs/<id>", "/zfs/<id>/<name>", "/zfs/<id>/<name>/<property>"]}}
{"file": "cloned/liberty-bikes/game-service/src/main/java/org/libertybikes/restclient/PlayerService.java", "endpoints": {"api_summary": "The PlayerService API allows clients to retrieve information about players and record game results. It provides endpoints for retrieving a player's information by ID, and for recording a game result for a player.", "methods": ["GET", "POST"], "paths": ["/player/{playerId}", "/rank/{playerId}"]}}
{"file": "cloned/liberty-bikes/game-service/src/main/java/org/libertybikes/game/round/service/GameRoundService.java", "endpoints": {"api_summary": "The GameRoundService API provides endpoints for creating, retrieving, and managing game rounds. It also includes endpoints for checking the availability of rounds and requeuing rounds.", "methods": ["GET", "POST"], "paths": ["/round", "/round/available", "/round/{roundId}", "/round/{roundId}/requeue"]}}
{"file": "cloned/liberty-bikes/game-service/src/main/java/org/libertybikes/game/round/service/GameRoundWebsocket.java", "endpoints": {"api_summary": "This API allows clients to connect to a game round via websocket and receive updates on the game state. It also allows clients to send updates to the game state, such as player movements and game start/stop.", "methods": ["GET", "POST"], "paths": ["/round/ws/{roundId}"]}}
{"file": "cloned/liberty-bikes/game-service/src/main/java/org/libertybikes/game/round/service/PartyService.java", "endpoints": {"api_summary": "The PartyService API provides endpoints for managing parties and their rounds. It also allows clients to join the queue for a party.", "methods": ["GET", "POST"], "paths": ["/party", "/party/describe", "/party/{partyId}", "/party/{partyId}/round", "/party/{partyId}/queue"]}}
{"file": "cloned/liberty-bikes/auth-service/src/main/java/org/libertybikes/auth/service/AuthTypes.java", "endpoints": {"api_summary": "The AuthTypes API provides a list of available authentication types for the Liberty Bikes application.", "methods": ["GET"], "paths": ["/auth-types"]}}
{"file": "cloned/liberty-bikes/auth-service/src/main/java/org/libertybikes/auth/service/google/GoogleAuth.java", "endpoints": {"api_summary": "The GoogleAuth API allows users to authenticate with Google and retrieve their profile information.", "methods": ["GET"], "paths": ["/GoogleAuth", "/GoogleAuth/GoogleCallback"]}}
{"file": "cloned/liberty-bikes/auth-service/src/main/java/org/libertybikes/auth/service/google/GoogleCallback.java", "endpoints": {"api_summary": "The GoogleCallback API endpoint allows users to authenticate with Google and receive a JWT token for accessing protected resources.", "methods": ["GET"], "paths": ["/GoogleCallback"]}}
{"file": "cloned/liberty-bikes/auth-service/src/main/java/org/libertybikes/auth/service/github/GitHubCallback.java", "endpoints": {"api_summary": "This API endpoint is used for GitHub authentication and retrieves the user's email address using the GitHub OAuth API. It also creates a JWT token with the user's email address and redirects the user to the frontend URL with the token.", "methods": ["GET"], "paths": ["/GitHubCallback"]}}
{"file": "cloned/liberty-bikes/auth-service/src/main/java/org/libertybikes/auth/service/github/GitHubUserAPI.java", "endpoints": {"api_summary": "The GitHubUserAPI provides a RESTful interface for retrieving user email addresses from the GitHub API. It uses the javax.ws.rs.GET annotation to define the HTTP GET method and the javax.ws.rs.Path annotation to define the URL path. The API also uses the javax.ws.rs.Produces annotation to specify the media type of the response and the javax.ws.rs.QueryParam annotation to specify the query parameter for the access token.", "methods": ["GET"], "paths": ["/user/emails"]}}
{"file": "cloned/liberty-bikes/auth-service/src/main/java/org/libertybikes/auth/service/github/GitHubOAuthAPI.java", "endpoints": {"api_summary": "The GitHubOAuthAPI provides a REST API for authenticating with GitHub using OAuth. It includes a single endpoint for retrieving an access token, which can be used to access GitHub's API.", "methods": ["GET"], "paths": ["/login/oauth/access_token"]}}
{"file": "cloned/liberty-bikes/auth-service/src/main/java/org/libertybikes/auth/service/github/GitHubAuth.java", "endpoints": {"api_summary": "The GitHubAuth API endpoint allows users to authenticate with GitHub and retrieve an access token for the LibertyBikes application.", "methods": ["GET"], "paths": ["/GitHubAuth"]}}
{"file": "cloned/liberty-bikes/auth-service/src/main/java/org/libertybikes/auth/service/twitter/TwitterAuth.java", "endpoints": {"api_summary": "The TwitterAuth API provides a way for users to authenticate with Twitter using OAuth. It includes a single endpoint that returns a URL for the user to be redirected to for authentication.", "methods": ["GET"], "paths": ["/TwitterAuth"]}}
{"file": "cloned/liberty-bikes/auth-service/src/main/java/org/libertybikes/auth/service/twitter/TwitterCallback.java", "endpoints": {"api_summary": "The TwitterCallback API endpoint allows users to authenticate with Twitter and retrieve their Twitter ID and screen name. The endpoint also creates a JSON Web Token (JWT) with the user's information and redirects the user to the frontend URL with the JWT.", "methods": ["GET"], "paths": ["/TwitterCallback"]}}
{"file": "cloned/liberty-bikes/player-service/src/main/java/org/libertybikes/player/service/PlayerService.java", "endpoints": {"api_summary": "The PlayerService API provides endpoints for managing player information, including creating, retrieving, and updating players. It also provides an endpoint for retrieving information about the current JWT token.", "methods": ["GET", "POST"], "paths": ["/player", "/player/{playerId}", "/player/getJWTInfo"]}}
{"file": "cloned/liberty-bikes/player-service/src/main/java/org/libertybikes/player/service/RankingService.java", "endpoints": {"api_summary": "The RankingService API provides endpoints for retrieving the top N players and recording game results for a player. The API also includes endpoints for creating and updating players.", "methods": ["GET", "POST"], "paths": ["/rank", "/rank/topNPlayers", "/rank/{playerId}"]}}
{"file": "cloned/liberty-bikes/frontend/prebuild/src/app/app-routing.module.ts", "endpoints": {"api_summary": "This API provides endpoints for a game application, allowing users to log in, access the game, and control gameplay.", "methods": ["GET", "POST"], "paths": ["/login", "/login/:jwt", "/game", "/play"]}}
{"file": "cloned/bmo/extensions/BMO/web/js/firefox-crash-table.js", "endpoints": {"api_summary": "This API provides a table of crash data for Firefox bugs, allowing users to view and update status flags for crash reports.", "methods": ["GET"], "paths": ["/crash-stop-addon/sumup.html"]}}
{"file": "cloned/bmo/extensions/ComponentWatching/web/js/overlay.js", "endpoints": {"api_summary": "This API allows users to watch or unwatch components or products in Bugzilla. It provides endpoints for retrieving the current watch list, adding or removing watches, and tracking events.", "methods": ["GET", "POST", "DELETE"], "paths": ["/component-watching", "/component-watching/<watch_id>"]}}
{"file": "cloned/TodoMVC-DDD-CQRS-EventSourcing/src/Web/ClientApp/src/setupProxy.js", "endpoints": {"api_summary": "This API is a proxy server that forwards requests to a target server. It supports HTTP methods GET, POST, PUT, DELETE, and PATCH, and has a single endpoint at /todo.", "methods": ["GET", "POST", "PUT", "DELETE", "PATCH"], "paths": ["/todo"]}}
{"file": "cloned/TodoMVC-DDD-CQRS-EventSourcing/src/Web/ClientApp/src/services/todo-local.js", "endpoints": {"api_summary": "The TodoLocal API allows for the management of todo items, including creating, completing, and removing them. The API also allows for retrieving all todo items and retrieving a single todo item by its ID.", "methods": ["GET", "POST", "DELETE"], "paths": ["/todo/all", "/todo/add", "/todo/complete", "/todo/active", "/todo/remove"]}}
{"file": "cloned/subscan-essentials/docs/api/docs.go", "endpoints": {"api_summary": "This API provides information about the EVM contracts, tokens, and transactions on the Subscan network.", "methods": ["POST"], "paths": ["/api/plugin/evm/contract", "/api/plugin/evm/token", "/api/plugin/evm/transaction"]}}
{"file": "cloned/subscan-essentials/internal/server/http/http_test.go", "endpoints": {"api_summary": "This API provides various endpoints for interacting with the Subscan blockchain explorer, including retrieving metadata, blocks, extrinsics, events, and more. It also includes a runtime metadata endpoint for retrieving metadata about the Subscan runtime.", "methods": ["POST", "GET"], "paths": ["/api/scan/metadata", "/api/scan/blocks", "/api/scan/block", "/api/scan/extrinsics", "/api/scan/extrinsic", "/api/scan/events", "/api/scan/check_hash", "/api/scan/runtime/metadata", "/api/scan/runtime/list", "/api/now", "/ping"]}}
{"file": "cloned/subscan-essentials/internal/server/http/http.go", "endpoints": {"api_summary": "This API provides various endpoints for querying and retrieving data related to the Subscan platform, including blockchain data, metadata, and extrinsic information.", "methods": ["GET", "POST"], "paths": ["/api/now", "/api/scan/metadata", "/api/scan/token", "/api/scan/blocks", "/api/scan/block", "/api/scan/extrinsics", "/api/scan/extrinsic", "/api/scan/events", "/api/scan/event", "/api/scan/logs", "/api/scan/check_hash", "/api/scan/runtime/metadata", "/api/scan/runtime/list"]}}
{"file": "cloned/subscan-essentials/plugins/evm/http/etherscan_test.go", "endpoints": {"api_summary": "The Etherscan API provides information about Ethereum blocks, transactions, and accounts. It also allows users to verify smart contracts and submit them for verification.", "methods": ["GET"], "paths": ["/etherscan?module=logs&action=getLogs&offset=10&page=1", "/etherscan?module=transaction&action=getstatus&txhash=0xa9972c6f84de1e56d924d7cdcfbfc7ba06eba92f1e3823bf6cd7147c4e277621", "/etherscan?module=transaction&action=gettxreceiptstatus&txhash=0xa9972c6f84de1e56d924d7cdcfbfc7ba06eba92f1e3823bf6cd7147c4e277621", "/etherscan?module=account&action=balance&address=0x66b8c60c79dfad02fc04f1f13aab0f6feff8615b", "/etherscan?module=account&action=balancemulti&address=0x66b8c60c79dfad02fc04f1f13aab0f6feff8615b,0xe22d73f5dcccb31a994ad4e7ad265cf69b4e725a", "/etherscan?module=account&action=txlist&address=0x66b8c60c79dfad02fc04f1f13aab0f6feff8615b&startblock=0&endblock=99999999&sort=asc&offset=100", "/etherscan?module=account&action=tokentx&address=0x66b8c60c79dfad02fc04f1f13aab0f6feff8615b&offset=100&page=1", "/etherscan?module=account&action=tokennfttx&address=0x66b8c60c79dfad02fc04f1f13aab0f6feff8615b&offset=100&page=1", "/etherscan?module=account&action=token1155tx&address=0x66b8c60c79dfad02fc04f1f13aab0f6feff8615b&offset=100&page=1", "/etherscan?module=contract&action=getabi&address=0x66b8c60c79dfad02fc04f1f13aab0f6feff8615b", "/etherscan?module=contract&action=getcontractcreation&contractaddresses=0x66b8c60c79dfad02fc04f1f13aab0f6feff8615b", "/etherscan?module=contract&action=checkverifystatus&guid=0x66b8c60c79dfad02fc04f1f13aab0f6feff8615b"]}}
{"file": "cloned/subscan-essentials/plugins/evm/http/http.go", "endpoints": {"api_summary": "This API provides information about Ethereum Virtual Machine (EVM) blocks, transactions, and contracts. It also includes endpoints for retrieving token holder information, token transfer information, and collectibles.", "methods": ["GET", "POST"], "paths": ["/api/plugin/evm/blocks", "/api/plugin/evm/block", "/api/plugin/evm/transaction", "/api/plugin/evm/transactions", "/api/plugin/evm/accounts", "/api/plugin/evm/contract", "/api/plugin/evm/contracts", "/api/plugin/evm/contract/solcs", "/api/plugin/evm/token/holder", "/api/plugin/evm/tokens", "/api/plugin/evm/token/transfer", "/api/plugin/evm/token/erc721/collectibles"]}}
{"file": "cloned/subscan-essentials/plugins/balance/http/http.go", "endpoints": {"api_summary": "This API provides information about accounts and transfers on a blockchain.", "methods": ["POST"], "paths": ["/api/plugin/balance/accounts", "/api/plugin/balance/account", "/api/plugin/balance/transfer"]}}
{"file": "cloned/subscan-essentials/pkg/go-web3/net/net.go", "endpoints": {"api_summary": "The Net Module provides information about the network and its peers. It includes methods to check if the client is listening for network connections, get the number of connected peers, and get the current network id.", "methods": ["GET"], "paths": ["/net/listening", "/net/peerCount", "/net/version"]}}
{"file": "cloned/subscan-essentials/pkg/go-web3/personal/personal.go", "endpoints": {"api_summary": "The Personal Module provides methods for managing accounts and sending transactions.", "methods": ["GET", "POST"], "paths": ["/personal/listAccounts", "/personal/newAccount", "/personal/sendTransaction", "/personal/unlockAccount"]}}
{"file": "cloned/micronaut-microservices-poc/policy-search-service/src/main/java/pl/altkom/asc/lab/micronaut/poc/policy/search/infrastructure/adapters/web/PolicySearchController.java", "endpoints": {"api_summary": "The Policy Search API allows users to search for policies based on a query text. The API returns a list of policies that match the query text.", "methods": ["GET"], "paths": ["/policies"]}}
{"file": "cloned/micronaut-microservices-poc/policy-search-service/src/test/java/pl/altkom/asc/lab/micronaut/poc/PolicySearchTestClient.java", "endpoints": {"api_summary": "The Policy Search Test Client provides a simple interface for searching for policies based on a query text. It returns a list of policies that match the query.", "methods": ["GET"], "paths": ["/policy-search-service/policies"]}}
{"file": "cloned/micronaut-microservices-poc/web-angular/src/app/app-routing.module.ts", "endpoints": {"api_summary": "This API provides endpoints for managing policies, products, and accounts. It includes endpoints for listing, creating, and retrieving policies and products, as well as endpoints for managing user accounts.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/home", "/account", "/products", "/products/:productCode", "/policies", "/policies/:policyNumber", "/policy/fromOffer/:offerNumber"]}}
{"file": "cloned/micronaut-microservices-poc/web-angular/src/app/shared/product-service.ts", "endpoints": {"api_summary": "The ProductService API provides endpoints for retrieving product information from a backend server. It includes endpoints for retrieving a list of all products and retrieving a specific product by its code.", "methods": ["GET"], "paths": ["/products", "/products/<productCode>"]}}
{"file": "cloned/micronaut-microservices-poc/product-service/src/main/java/pl/altkom/asc/lab/micronaut/poc/product/service/infrastructure/adapters/web/ProductsController.java", "endpoints": {"api_summary": "The Products API provides endpoints for retrieving and manipulating product information. It allows for querying and retrieving product details, as well as creating, updating, and deleting products.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/products", "/products/<productCode>"]}}
{"file": "cloned/micronaut-microservices-poc/web-vue/src/router.js", "endpoints": {"api_summary": "This API provides a user interface for interacting with a chatbot, account, products, and policies. It also provides a dashboard for viewing and managing policies.", "methods": ["GET", "POST"], "paths": ["/", "/chat", "/chatbot", "/account", "/products", "/dashboard", "/products/:productCode", "/policy/fromOffer/:offerNumber", "/policies", "/policies/:policyNumber"]}}
{"file": "cloned/micronaut-microservices-poc/pricing-service/src/main/java/pl/altkom/asc/lab/micronaut/poc/pricing/intrastructure/adapters/web/PricingController.java", "endpoints": {"api_summary": "The Pricing API provides a single endpoint for calculating prices for insurance policies. The endpoint accepts a CalculatePriceCommand object as input and returns a CalculatePriceResult object as output.", "methods": ["POST"], "paths": ["/pricing/calculate-price"]}}
{"file": "cloned/micronaut-microservices-poc/pricing-service/src/test/java/pl/altkom/asc/lab/micronaut/poc/pricing/PricingTestClient.java", "endpoints": {"api_summary": "The Pricing Test Client API allows clients to calculate prices for various products and services. It provides a single endpoint for calculating prices, which accepts a JSON payload containing the necessary information to perform the calculation.", "methods": ["POST"], "paths": ["/pricing-service/pricing/calculate"]}}
{"file": "cloned/micronaut-microservices-poc/pricing-service-api/src/main/java/pl/altkom/asc/lab/micronaut/poc/pricing/service/api/v1/PricingOperations.java", "endpoints": {"api_summary": "The PricingOperations API provides a single endpoint for calculating prices for insurance policies. The API accepts a CalculatePriceCommand object as the request body and returns a CalculatePriceResult object as the response.", "methods": ["POST"], "paths": ["/calculate"]}}
{"file": "cloned/micronaut-microservices-poc/policy-service-api/src/main/java/pl/altkom/asc/lab/micronaut/poc/policy/service/api/v1/OfferOperations.java", "endpoints": {"api_summary": "The OfferOperations API provides a single endpoint for creating a new offer. The API accepts a CreateOfferCommand object as the request body and returns a CreateOfferResult object as the response.", "methods": ["POST"], "paths": ["/v1/offer"]}}
{"file": "cloned/micronaut-microservices-poc/policy-service-api/src/main/java/pl/altkom/asc/lab/micronaut/poc/policy/service/api/v1/PolicyOperations.java", "endpoints": {"api_summary": "The PolicyOperations API provides endpoints for creating, retrieving, and terminating policies. It also provides a query endpoint for retrieving policy details.", "methods": ["GET", "POST"], "paths": ["/policy/{policyNumber}", "/policy/create", "/policy/terminate"]}}
{"file": "cloned/micronaut-microservices-poc/dashboard-service-api/src/main/java/pl/altkom/asc/lab/micronaut/poc/dashboard/service/api/v1/DashboardOperations.java", "endpoints": {"api_summary": "The DashboardOperations API provides endpoints for querying sales data, including total sales, sales trends, and agent sales. The API accepts queries as JSON bodies and returns results in JSON format.", "methods": ["POST"], "paths": ["/totalsales", "/trends", "/agentssales"]}}
{"file": "cloned/micronaut-microservices-poc/dashboard-service/src/main/java/pl/altkom/asc/lab/micronaut/poc/dashboard/infrastructure/adapters/elastic/ElasticHealthCheck.java", "endpoints": {"api_summary": "The Elastic Health Check API provides a simple health check endpoint for Elasticsearch clusters. It returns a JSON object with the health status of the cluster and any relevant details.", "methods": ["GET"], "paths": ["/health"]}}
{"file": "cloned/micronaut-microservices-poc/dashboard-service/src/main/java/pl/altkom/asc/lab/micronaut/poc/dashboard/infrastructure/adapters/web/DashboardController.java", "endpoints": {"api_summary": "The Dashboard API provides endpoints for querying sales data, including total sales, sales trends, and agent sales. The API uses the Command Bus pattern to execute queries and return results.", "methods": ["GET", "POST"], "paths": ["/dashboard/total-sales", "/dashboard/sales-trends", "/dashboard/agents-sales"]}}
{"file": "cloned/micronaut-microservices-poc/chat-service/src/main/java/pl/altkom/asc/lab/micronaut/poc/chat/service/infrastructure/adapters/web/ChatWebSocket.java", "endpoints": {"api_summary": "The ChatWebSocket API allows clients to connect to a chat room and send messages to other clients in the room. The API also allows clients to join and leave the chat room.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/ws/chat/{topic}/{username}"]}}
{"file": "cloned/micronaut-microservices-poc/policy-service/src/main/java/pl/altkom/asc/lab/micronaut/poc/policy/infrastructure/adapters/restclient/PricingClient.java", "endpoints": {"api_summary": "The PricingClient API provides a single endpoint for calculating prices for policies. The API accepts a CalculatePriceCommand and returns a CalculatePriceResult.", "methods": ["POST"], "paths": ["/pricing/calculate"]}}
{"file": "cloned/micronaut-microservices-poc/policy-service/src/main/java/pl/altkom/asc/lab/micronaut/poc/policy/infrastructure/adapters/web/PolicyController.java", "endpoints": {"api_summary": "The Policy API provides endpoints for creating, retrieving, and terminating policies. It also provides a query endpoint for retrieving policy details.", "methods": ["GET", "POST", "DELETE"], "paths": ["/policies", "/policies/<policyNumber>", "/policies/<policyNumber>/terminate"]}}
{"file": "cloned/micronaut-microservices-poc/policy-service/src/main/java/pl/altkom/asc/lab/micronaut/poc/policy/infrastructure/adapters/web/OfferController.java", "endpoints": {"api_summary": "The Offer API provides endpoints for creating and managing offers for insurance policies. It allows users to create new offers, retrieve existing offers, and update or delete them as needed.", "methods": ["POST"], "paths": ["/offers"]}}
{"file": "cloned/micronaut-microservices-poc/policy-service/src/main/java/pl/altkom/asc/lab/micronaut/poc/policy/infrastructure/adapters/web/HelloController.java", "endpoints": {"api_summary": "The HelloController API provides a simple HTTP endpoint for checking the health of the service. It returns a JSON object with the service version and status.", "methods": ["GET"], "paths": ["/hello", "/hello/version"]}}
{"file": "cloned/micronaut-microservices-poc/policy-service/src/test/java/pl/altkom/asc/lab/micronaut/poc/policy/HelloTestClient.java", "endpoints": {"api_summary": "The HelloTestClient API provides a simple interface for retrieving the version of the policy service and checking its health.", "methods": ["GET"], "paths": ["/hello", "/hello/version"]}}
{"file": "cloned/micronaut-microservices-poc/policy-service/src/test/java/pl/altkom/asc/lab/micronaut/poc/policy/PolicyTestClient.java", "endpoints": {"api_summary": "The Policy Test Client API provides endpoints for creating, retrieving, and terminating policies. It also provides a query endpoint for retrieving policy details.", "methods": ["GET", "POST", "POST"], "paths": ["/policy-service/policies/{policyNumber}", "/policy-service/policies/", "/policy-service/policies/terminate"]}}
{"file": "cloned/micronaut-microservices-poc/product-service-api/src/main/java/pl/altkom/asc/lab/micronaut/poc/product/service/api/v1/ProductOperations.java", "endpoints": {"api_summary": "The ProductOperations API provides endpoints for retrieving information about products. It allows users to retrieve a list of all products or a specific product by its code.", "methods": ["GET"], "paths": ["/products", "/products/{productCode}"]}}
{"file": "cloned/micronaut-microservices-poc/policy-search-service-api/src/main/java/pl/altkom/asc/lab/micronaut/poc/policy/search/service/api/v1/PolicySearchOperations.java", "endpoints": {"api_summary": "The Policy Search API allows users to search for policies based on a query text. The API returns a list of policies that match the query.", "methods": ["GET"], "paths": ["/policies?q=<queryText>"]}}
{"file": "cloned/micronaut-microservices-poc/payment-service/src/main/java/pl/altkom/asc/lab/micronaut/poc/payment/infrastructure/adapters/web/PaymentController.java", "endpoints": {"api_summary": "The Payment API provides endpoints for managing policy accounts and retrieving account balances. It also includes endpoints for handling payment operations.", "methods": ["GET", "POST"], "paths": ["/payment/accounts", "/payment/accountBalance/<accountNumber>"]}}
{"file": "cloned/micronaut-microservices-poc/payment-service-api/src/main/java/pl/altkom/asc/lab/micronaut/poc/payment/service/api/v1/operations/PaymentOperations.java", "endpoints": {"api_summary": "The PaymentOperations API provides endpoints for retrieving information about policy accounts and their balances. The API allows users to retrieve a list of all policy accounts and retrieve the balance for a specific account by account number.", "methods": ["GET"], "paths": ["/accounts", "/accounts/{accountNumber}"]}}
{"file": "cloned/micronaut-microservices-poc/agent-portal-gateway/src/main/java/pl/altkom/asc/lab/micronaut/poc/gateway/DashboardGatewayController.java", "endpoints": {"api_summary": "The DashboardGatewayController API provides endpoints for querying sales data, including total sales, sales trends, and agent sales. The API is secured with authentication and can be accessed at the /api/dashboard endpoint.", "methods": ["POST"], "paths": ["/api/dashboard/totalsales", "/api/dashboard/trends", "/api/dashboard/agentssales"]}}
{"file": "cloned/micronaut-microservices-poc/agent-portal-gateway/src/main/java/pl/altkom/asc/lab/micronaut/poc/gateway/PaymentGatewayController.java", "endpoints": {"api_summary": "The PaymentGatewayController API provides endpoints for managing payments and accounts. It allows for retrieving a list of accounts and performing various payment-related operations.", "methods": ["GET"], "paths": ["/api/payments/accounts"]}}
{"file": "cloned/micronaut-microservices-poc/agent-portal-gateway/src/main/java/pl/altkom/asc/lab/micronaut/poc/gateway/OfferGatewayController.java", "endpoints": {"api_summary": "The OfferGatewayController API provides a single endpoint for creating a new offer. The endpoint accepts a JSON payload containing the offer details and returns a JSON object with the result of the offer creation.", "methods": ["POST"], "paths": ["/api/offers"]}}
{"file": "cloned/micronaut-microservices-poc/agent-portal-gateway/src/main/java/pl/altkom/asc/lab/micronaut/poc/gateway/ProductGatewayController.java", "endpoints": {"api_summary": "The ProductGatewayController API provides endpoints for retrieving product information from the ProductGatewayClient. The API allows for retrieving all products or a specific product by product code.", "methods": ["GET"], "paths": ["/api/products", "/api/products/{productCode}"]}}
{"file": "cloned/micronaut-microservices-poc/agent-portal-gateway/src/main/java/pl/altkom/asc/lab/micronaut/poc/gateway/DocumentsGatewayController.java", "endpoints": {"api_summary": "The DocumentsGatewayController API provides a single endpoint for retrieving documents for a given policy number. The endpoint is protected by authentication and returns a list of documents for the specified policy.", "methods": ["GET"], "paths": ["/api/documents/{policyNumber}"]}}
{"file": "cloned/micronaut-microservices-poc/agent-portal-gateway/src/main/java/pl/altkom/asc/lab/micronaut/poc/gateway/PolicyGatewayController.java", "endpoints": {"api_summary": "The Policy Gateway API provides endpoints for creating, retrieving, and terminating policies. It also allows for searching for policies based on a query.", "methods": ["GET", "POST"], "paths": ["/api/policies", "/api/policies/{policyNumber}", "/api/policies/create", "/api/policies/terminate"]}}
{"file": "cloned/micronaut-microservices-poc/agent-portal-gateway/src/main/java/pl/altkom/asc/lab/micronaut/poc/gateway/client/v1/PolicySearchGatewayClient.java", "endpoints": {"api_summary": "The Policy Search Gateway Client provides a RESTful API for searching and retrieving policy information. It allows clients to search for policies based on various criteria, such as policy number, policyholder name, and policy status. The API also provides endpoints for retrieving detailed policy information and updating policy status.", "methods": ["GET", "POST"], "paths": ["/policies", "/policies/<policy_number>", "/policies/<policy_number>/status"]}}
{"file": "cloned/micronaut-microservices-poc/agent-portal-gateway/src/main/java/pl/altkom/asc/lab/micronaut/poc/gateway/client/v1/ProductGatewayClient.java", "endpoints": {"api_summary": "The ProductGatewayClient API provides a client interface for interacting with the Product Service, which manages product information. The API includes a single endpoint for retrieving product details by product code.", "methods": ["GET"], "paths": ["/products/<productCode>"]}}
{"file": "cloned/micronaut-microservices-poc/agent-portal-gateway/src/main/java/pl/altkom/asc/lab/micronaut/poc/gateway/client/v1/DocumentsGatewayClient.java", "endpoints": {"api_summary": "The DocumentsGatewayClient API provides a client interface for interacting with the Documents Service, which manages the storage and retrieval of documents. The API includes a single endpoint for finding documents by policy number.", "methods": ["GET"], "paths": ["/documents/find"]}}
{"file": "cloned/micronaut-microservices-poc/agent-portal-gateway/src/main/java/pl/altkom/asc/lab/micronaut/poc/gateway/client/v1/PaymentGatewayClient.java", "endpoints": {"api_summary": "The Payment Gateway Client API provides a simple interface for interacting with the Payment Service. It allows for creating, retrieving, and updating payments, as well as retrieving payment information.", "methods": ["GET", "POST", "PUT"], "paths": ["/payment", "/payment/<payment_id>", "/payment/<payment_id>/info"]}}
{"file": "cloned/micronaut-microservices-poc/agent-portal-gateway/src/main/java/pl/altkom/asc/lab/micronaut/poc/gateway/client/v1/PolicyGatewayClient.java", "endpoints": {"api_summary": "The PolicyGatewayClient API provides endpoints for creating, retrieving, and terminating policies, as well as creating offers. It also provides a query endpoint for retrieving policy details.", "methods": ["GET", "POST"], "paths": ["/offers", "/policies", "/policies/<policyNumber>", "/policies/terminate"]}}
{"file": "cloned/micronaut-microservices-poc/agent-portal-gateway/src/main/java/pl/altkom/asc/lab/micronaut/poc/gateway/client/v1/DashboardGatewayClient.java", "endpoints": {"api_summary": "The DashboardGatewayClient API provides endpoints for querying sales data, including total sales, sales trends, and agent sales. The API is designed to be used by clients that need to retrieve and display sales data in a dashboard or report.", "methods": ["POST"], "paths": ["/dashboard/totalsales", "/dashboard/trends", "/dashboard/agentssales"]}}
{"file": "cloned/opg-use-an-lpa/service-admin/internal/server/server.go", "endpoints": {"api_summary": "This API provides a search functionality for users to search for LPA accounts and view statistics. It also provides a system message functionality for admins to send messages to users.", "methods": ["GET", "POST"], "paths": ["/helloworld", "/logout", "/", "/stats", "/system-message"]}}
{"file": "cloned/opg-use-an-lpa/service-admin/internal/server/handlers/search.go", "endpoints": {"api_summary": "This API allows users to search for LPA information by email, activation code, or LPA number. It also provides information about the added by and activation key for a given LPA.", "methods": ["GET", "POST"], "paths": ["/search"]}}
{"file": "cloned/opg-use-an-lpa/scripts/call-api-gateway/call_api_gateway.py", "endpoints": {"api_summary": "This API allows for the lookup of LPA IDs on the Sirius API Gateway. It provides a single endpoint for GET requests to retrieve LPA data by ID.", "methods": ["GET"], "paths": ["/v1/use-an-lpa/lpas/<lpa_id>"]}}
{"file": "cloned/zksync/core/tests/ts-tests/tests/suits/no2fa.ts", "endpoints": {"api_summary": "This file defines a set of tests for a No2FA account in the zkSync library. The tests cover various operations such as transfers, batch transfers, swaps, and withdrawals. The tests also cover the enabling and disabling of 2FA for the account.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/no2fa/transfers", "/no2fa/batch", "/no2fa/swaps", "/no2fa/withdrawals"]}}
{"file": "cloned/zksync/sdk/zksync.js/src/rest-provider.ts", "endpoints": {"api_summary": "This API provides information about the zkSync network, including account information, transaction history, and network status.", "methods": ["GET", "POST"], "paths": ["/accounts/<idOrAddress>/<infoType>", "/accounts/<idOrAddress>", "/blocks/<blockPosition>", "/blocks", "/config", "/fee", "/fee/batch", "/networkStatus", "/tokens", "/tokens/<tokenLike>", "/tokens/<tokenLike>/priceIn/<tokenIdOrUsd>", "/transactions", "/transactions/<txHash>", "/transactions/batches/<batchHash>", "/tokens/nft/<id>", "/tokens/nft/<id>/owner", "/tokens/nft_id_by_tx_hash/<txHash>"]}}
{"file": "cloned/zksync/sdk/zksync.js/src/typechain/ZkSyncNFTFactoryFactory.ts", "endpoints": {"api_summary": "This file defines a smart contract for a non-fungible token (NFT) factory on the Ethereum blockchain. It includes functions for creating and managing NFTs, as well as functions for minting and transferring NFTs.", "methods": ["GET", "POST"], "paths": ["/nft/create", "/nft/mint", "/nft/transfer"]}}
{"file": "cloned/profile_service/tests/CRUD.test.js", "endpoints": {"api_summary": "This API provides endpoints for creating, modifying, and deleting profiles, teams, and organizations. It also provides a query endpoint for retrieving all profiles in the system.", "methods": ["POST", "PUT", "DELETE"], "paths": ["/profiles", "/teams", "/organizations", "/queryProfiles"]}}
{"file": "cloned/profile_service/tests/teamAndOrganizationLogic.test.js", "endpoints": {"api_summary": "This API is a GraphQL API that allows for querying and mutating data related to organizations, profiles, and teams. It provides endpoints for creating, modifying, and deleting organizations, profiles, and teams, as well as for querying the relationships between them.", "methods": ["GET", "POST"], "paths": ["/organizations", "/profiles", "/teams"]}}
{"file": "cloned/profile_service/src/index.js", "endpoints": {"api_summary": "This API provides endpoints for managing profiles, teams, and organizations, as well as for authentication and authorization. It also includes endpoints for introspecting tokens and retrieving default values.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/profile", "/profile/<id>", "/team", "/team/<id>", "/organization", "/organization/<id>", "/auth", "/introspect", "/defaults"]}}
{"file": "cloned/profile_service/src/Resolvers/Query.js", "endpoints": {"api_summary": "This API provides search functionality for profiles, addresses, teams, organizations, and approvals. It also provides an integration endpoint for retrieving information from an external data source.", "methods": ["GET", "POST"], "paths": ["/search", "/profiles", "/addresses", "/teams", "/organizations", "/approvals", "/integration"]}}
{"file": "cloned/core-server/mockserver/api/urls.py", "endpoints": {"api_summary": "This API provides a single endpoint for fetching mock data from a Django application.", "methods": ["GET"], "paths": ["/api/fetch_mock"]}}
{"file": "cloned/core-server/mockserver/api/views.py", "endpoints": {"api_summary": "This API allows users to fetch mock data for a given endpoint and method. The API uses a combination of query parameters and request body to retrieve the mock data. The API also supports multiple HTTP methods, including GET, POST, PUT, PATCH, and DELETE.", "methods": ["GET", "POST", "PUT", "PATCH", "DELETE"], "paths": ["/fetch_mock"]}}
{"file": "cloned/core-server/mockserver/api/api_urls.py", "endpoints": {"api_summary": "The API provides endpoints for managing tenants, organizations, and projects, as well as mocks, header types, HTTP verbs, and categories. It also includes endpoints for retrieving and manipulating data related to these entities.", "methods": ["GET", "POST", "PUT", "PATCH", "DELETE"], "paths": ["/api/tenants", "/api/organizations", "/api/projects", "/api/mocks", "/api/header-types", "/api/http-verbs", "/api/categories"]}}
{"file": "cloned/core-server/mockserver/mocks/views.py", "endpoints": {"api_summary": "The API allows for the management of mocks, header types, HTTP verbs, categories, and endpoints. It provides endpoints for creating, retrieving, updating, and deleting these resources, as well as endpoints for listing and filtering them.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/mocks", "/mocks/<mock_id>", "/header_types", "/header_types/<header_type_id>", "/http_verbs", "/http_verbs/<http_verb_id>", "/categories", "/categories/<category_id>", "/endpoints", "/endpoints/<endpoint_id>"]}}
{"file": "cloned/core-server/mockserver/mocks/serializers.py", "endpoints": {"api_summary": "This API defines a set of endpoints for managing mocks, headers, and HTTP verbs. It allows users to create, read, update, and delete mocks, as well as retrieve information about HTTP verbs and headers.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/mocks", "/mocks/<mock_id>", "/headers", "/headers/<header_id>", "/verbs", "/verbs/<verb_id>"]}}
{"file": "cloned/core-server/mockserver/authentication/urls.py", "endpoints": {"api_summary": "The authentication API provides endpoints for user login, logout, password reset request, and password reset. These endpoints allow users to authenticate and manage their account information.", "methods": ["POST", "GET"], "paths": ["/login", "/logout", "/password-reset-request", "/password-reset"]}}
{"file": "cloned/core-server/mockserver/authentication/views.py", "endpoints": {"api_summary": "This API provides endpoints for user authentication, password reset, and logout.", "methods": ["POST", "GET"], "paths": ["/login", "/logout", "/password_reset"]}}
{"file": "cloned/core-server/mockserver/authentication/serializers.py", "endpoints": {"api_summary": "This API provides endpoints for user authentication, including login, password reset, and user information retrieval. The endpoints are designed to be used in conjunction with a frontend application that handles user input and displays the results to the user.", "methods": ["GET", "POST", "PUT"], "paths": ["/users", "/users/<built-in function id>", "/login", "/password_reset", "/password_reset/<built-in function id>"]}}
{"file": "cloned/core-server/mockserver/mockserver/urls.py", "endpoints": {"api_summary": "The Mocks project API provides a RESTful interface for managing mock data. It includes endpoints for creating, reading, updating, and deleting mock data, as well as endpoints for retrieving OpenAPI schema documentation.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/v1/", "/openapi/", "/"]}}
{"file": "cloned/core-server/mockserver/tenants/views.py", "endpoints": {"api_summary": "This API provides endpoints for managing tenants, organizations, and projects. It allows for creating, updating, and deleting tenants, as well as retrieving information about organizations and projects.", "methods": ["GET", "POST", "PUT", "PATCH", "DELETE"], "paths": ["/tenants", "/organizations", "/projects"]}}
{"file": "cloned/core-server/mockserver/tenants/serializers.py", "endpoints": {"api_summary": "This API defines endpoints for managing organizations, projects, and tenants in a multi-tenant system. It includes endpoints for creating, reading, updating, and deleting organizations, projects, and tenants, as well as endpoints for managing membership and invitations.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/organizations", "/organizations/<id>", "/projects", "/projects/<id>", "/tenants", "/tenants/<id>"]}}
{"file": "cloned/neurone/server/multimediaIndexer/multimediaDownloader.js", "endpoints": {"api_summary": "The MultimediaDownloader class provides methods for downloading and indexing multimedia files, such as books and videos. It also provides a method for previewing the files before downloading them.", "methods": ["GET", "POST"], "paths": ["/download", "/index", "/preview"]}}
{"file": "cloned/neurone/server/api/informationRetrieval.js", "endpoints": {"api_summary": "The API provides methods for retrieving information on document, bookmark, and snippet status for the user, as well as for getting bookmark and snippet scores based on iFuCo's Performance Formula.", "methods": ["GET", "POST"], "paths": ["/snippets", "/bookmarks", "/documents", "/relevantDocuments", "/bookmarkScore"]}}
{"file": "cloned/neurone/server/api/inputTracking.js", "endpoints": {"api_summary": "The NEURONE API: Input Tracking provides methods for storing input tracking data from keyboard and mouse. It includes endpoints for storing keystrokes, mouse clicks, mouse coordinates, and scroll moves.", "methods": ["storeKeystroke", "storeMouseClick", "storeMouseCoordinate", "storeScrollMove"], "paths": ["/storeKeystroke", "/storeMouseClick", "/storeMouseCoordinate", "/storeScrollMove"]}}
{"file": "cloned/neurone/server/api/evaluationItems.js", "endpoints": {"api_summary": "This API provides methods for saving and loading forms, synthesis and answers. It also provides methods for getting synthesis questions and answers, and for saving synthesis answers in the database.", "methods": ["GET", "POST"], "paths": ["/forms", "/synthesis", "/synthesis/answers"]}}
{"file": "cloned/neurone/server/api/configsGetter.js", "endpoints": {"api_summary": "This API provides methods for getting and setting user data, configs, and session variables, as well as registering users and getting server statistics.", "methods": ["GET", "POST"], "paths": ["/userDataFromId", "/userRole", "/userSession", "/userConfigs", "/setSession", "/initialConfigs", "/clientSettings", "/registerUsers", "/registerIdentity", "/getServerStats"]}}
{"file": "cloned/neurone/server/externalServices/api.js", "endpoints": {"api_summary": "This API provides endpoints for searching and managing documents, including books and videos, and deleting documents.", "methods": ["GET", "POST", "DELETE"], "paths": ["/v1/ping", "/v1/xd", "/v1/document/search", "/v1/document/load", "/v1/document/delete"]}}
{"file": "cloned/neurone/imports/components/modules/admin/documentView.js", "endpoints": {"api_summary": "The DocumentView component is a UI router state that provides a preview of a document. It requires the user to be logged in and have the 'researcher' role. It also has a 'previousState' binding that allows the user to navigate back to the previous state.", "methods": ["GET"], "paths": ["/preview/:docName"]}}
{"file": "cloned/neurone/imports/components/app/auth/logout.js", "endpoints": {"api_summary": "The Logout API provides a way for users to log out of the system and end their session.", "methods": ["GET", "POST"], "paths": ["/logout"]}}
{"file": "cloned/neurone/imports/components/app/auth/password.js", "endpoints": {"api_summary": "This API allows users to reset their passwords by providing their email address and receiving a password reset link.", "methods": ["POST"], "paths": ["/password"]}}
{"file": "cloned/example-voting-app/vote/app.py", "endpoints": {"api_summary": "This API allows users to vote on their preferred option, either Cats or Dogs. The API also provides a simple web interface for users to view the current vote tally.", "methods": ["POST", "GET"], "paths": ["/", "/votes"]}}
{"file": "cloned/milvus/tests/restful_client/api/milvus.py", "endpoints": {"api_summary": "The Vector API provides methods for searching, querying, getting, deleting, inserting, and listing vectors, as well as creating and dropping collections.", "methods": ["POST", "GET"], "paths": ["/vector/search", "/vector/query", "/vector/get", "/vector/delete", "/vector/insert", "/vector/collections", "/vector/collections/create", "/vector/collections/describe", "/vector/collections/drop"]}}
{"file": "cloned/milvus/tests/benchmark/milvus_benchmark/runners/locust_file.py", "endpoints": {"api_summary": "This API allows users to search for vectors in a collection using the /collections/<collection_name>/vectors endpoint. The API accepts a JSON payload with the search parameters and returns the search results in JSON format.", "methods": ["PUT"], "paths": ["/collections/<collection_name>/vectors"]}}
{"file": "cloned/milvus/tests/python_client/milvus_client_v2/test_milvus_client_search_invalid.py", "endpoints": {"api_summary": "Test case of search interface", "methods": ["GET", "POST"], "paths": ["/search", "/search/<collection_name>"], "description": "Test case of search interface"}}
{"file": "cloned/milvus/tests/python_client/milvus_client/test_milvus_client_collection.py", "endpoints": {"api_summary": "Test case of create collection interface", "methods": ["POST"], "paths": ["/collections"]}}
{"file": "cloned/milvus/tests/python_client/chaos/scripts/hello_milvus.py", "endpoints": {"api_summary": "This file defines a Python script that connects to a Milvus database and performs various operations such as creating a collection, inserting data, creating an index, and searching for data.", "methods": ["GET", "POST"], "paths": ["/hello_milvus"]}}
{"file": "cloned/milvus/internal/util/idalloc/allocator.go", "endpoints": {"api_summary": "This file defines a TSO (Timestamp Oracle) allocator, which is responsible for allocating timestamps for transactions in a distributed database system. The allocator uses a combination of local and remote allocators to ensure that timestamps are unique and consistent across the system.", "methods": ["GET", "POST"], "paths": ["/allocate", "/barrier"]}}
{"file": "cloned/milvus/internal/allocator/id_allocator.go", "endpoints": {"api_summary": "This file defines an IDAllocator that allocates unique and monotonically increasing IDs from Root Coord. It also batch allocates for less root coord server access.", "methods": ["GET", "POST"], "paths": ["/id/alloc"]}}
{"file": "cloned/milvus/internal/proxy/http_req_impl_test.go", "endpoints": {"api_summary": "This file defines several REST API endpoints for the Milvus proxy service, including getConfigs, getClusterInfo, getConnectedClients, getDependencies, buildReqParams, getQueryComponentMetrics, listCollection, describeCollection, listDatabase, and describeDatabase.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/configs", "/cluster", "/clients", "/dependencies", "/query", "/collections", "/collections/<collection_name>", "/databases", "/databases/<db_name>"]}}
{"file": "cloned/milvus/internal/http/router.go", "endpoints": {"api_summary": "This API provides a set of endpoints for managing and monitoring a Milvus cluster, including query coordination, data coordination, and data node management.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/healthz", "/log/level", "/eventlog", "/expr", "/static/", "/metrics", "/metrics_default", "/management/stop", "/management/check/ready", "/webui/", "/management/datacoord/garbage_collection/pause", "/management/datacoord/garbage_collection/resume", "/management/querycoord/balance/suspend", "/management/querycoord/balance/resume", "/management/querycoord/balance/status", "/management/querycoord/transfer/segment", "/management/querycoord/transfer/channel", "/management/querycoord/node/suspend", "/management/querycoord/node/resume", "/management/querycoord/node/list", "/management/querycoord/distribution/get", "/management/querycoord/distribution/check", "/_cluster/info", "/_cluster/configs", "/_cluster/clients", "/_cluster/dependencies", "/_hook/configs", "/_cluster/slow_query", "/_qc/dist", "/_qc/target", "/_qc/replica", "/_qc/resource_group", "/_qc/tasks", "/_qc/segments", "/_qn/segments", "/_qn/channels", "/_dc/dist", "/_dc/tasks/import", "/_dc/tasks/compaction", "/_dc/tasks/build_index", "/_dc/segments", "/_dn/tasks/sync", "/_dn/segments", "/_dn/channels", "/_db/list", "/_db/desc", "/_collection/list", "/_collection/desc", "/_index/list"]}}
{"file": "cloned/milvus/internal/http/healthz/healthz_handler.go", "endpoints": {"api_summary": "The Healthz API provides a way to check the health of a Milvus instance. It returns a JSON object with information about the health of the instance, including the state of various components and the number of unhealthy components.", "methods": ["GET"], "paths": ["/healthz"]}}
{"file": "cloned/milvus/internal/parser/planparserv2/generated/plan_lexer.go", "endpoints": {"api_summary": "This API provides a way to generate a plan for a given set of inputs.", "methods": ["GET", "POST"], "paths": ["/plan"]}}
{"file": "cloned/milvus/internal/distributed/proxy/httpserver/resource_group_handler_v2.go", "endpoints": {"api_summary": "This API defines the endpoints for creating, dropping, listing, describing, and updating resource groups, as well as transferring replicas between resource groups.", "methods": ["POST", "DELETE", "GET", "PUT", "PATCH"], "paths": ["/milvus.proto.milvus.MilvusService/CreateResourceGroup", "/milvus.proto.milvus.MilvusService/DropResourceGroup", "/milvus.proto.milvus.MilvusService/ListResourceGroups", "/milvus.proto.milvus.MilvusService/DescribeResourceGroup", "/milvus.proto.milvus.MilvusService/UpdateResourceGroups", "/milvus.proto.milvus.MilvusService/TransferReplica"]}}
{"file": "cloned/milvus/internal/distributed/proxy/httpserver/timeout_middleware.go", "endpoints": {"api_summary": "This file defines a timeout middleware for a Gin HTTP server, which handles requests and responses and provides a buffer pool for writing response data.", "methods": ["GET", "POST"], "paths": ["/"]}}
{"file": "cloned/milvus/internal/distributed/streamingnode/service.go", "endpoints": {"api_summary": "This API allows users to perform CRUD operations on users.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users", "/users/<user_id>", "/users/<user_id>/posts"]}}
{"file": "cloned/milvus/client/milvusclient/alias_example_test.go", "endpoints": {"api_summary": "This API defines endpoints for creating, listing, describing, altering, and dropping aliases for Milvus.", "methods": ["POST", "GET", "DESCRIBE", "ALTER", "DROP"], "paths": ["/aliases", "/aliases/<alias_name>", "/aliases/<alias_name>/describe", "/aliases/<alias_name>/alter", "/aliases/<alias_name>/drop"]}}
{"file": "cloned/milvus/client/milvusclient/collection.go", "endpoints": {"api_summary": "This API defines the methods for creating, listing, describing, and dropping collections in Milvus.", "methods": ["POST", "GET", "DELETE"], "paths": ["/collections", "/collections/<collection_name>", "/collections/<collection_name>/stats"]}}
{"file": "cloned/milvus/pkg/proto/proxypb/proxy.pb.go", "endpoints": {"api_summary": "Invalidate collection meta cache, invalidate shard leader cache, invalidate credential cache, update credential cache, refresh policy info cache, get proxy metrics, set rates, list client infos, import v2, get import progress, list imports, invalidate shard leader cache, get segments info, get quota metrics", "methods": ["GET", "POST", "PUT", "DELETE", "PATCH"], "paths": ["/invalidate_coll_meta_cache", "/invalidate_shard_leader_cache", "/invalidate_cred_cache", "/update_cred_cache", "/refresh_policy_info_cache", "/get_proxy_metrics", "/set_rates", "/list_client_infos", "/import_v2", "/get_import_progress", "/list_imports", "/invalidate_shard_leader_cache", "/get_segments_info", "/get_quota_metrics"]}}
{"file": "cloned/milvus/pkg/mq/msgstream/msg_for_index.go", "endpoints": {"api_summary": "This file defines three message packs for creating, altering, and dropping indexes in a Milvus database.", "methods": ["POST", "PUT", "DELETE"], "paths": ["/index/create", "/index/alter", "/index/drop"]}}
{"file": "cloned/OpenDSA/app.py", "endpoints": {"api_summary": "This API provides endpoints for configuring, running, and analyzing OpenDSA, a tool for generating and analyzing digital simulations.", "methods": ["POST"], "paths": ["/api/configure/", "/api/simple2full/", "/api/irtcurve/", "/deforms/api/deformsfeedback/"]}}
{"file": "cloned/OpenDSA/DataStructures/Bintree.js", "endpoints": {"api_summary": "This file defines a visualization data structure for a binary tree, including methods for inserting and removing points, and a leaf node class for storing points.", "methods": ["insert", "remove"], "paths": ["/bintree"]}}
{"file": "cloned/OpenDSA/lib/odsaAV.js", "endpoints": {"api_summary": "This file defines a JavaScript library for creating and interacting with animations and visualizations in OpenDSA.", "methods": ["GET", "POST"], "paths": ["/odsaUtils.js"]}}
{"file": "cloned/OpenDSA/lib/CodeMirror-5.5.0/mode/asterisk/asterisk.js", "endpoints": {"api_summary": "This file defines a CodeMirror mode for Asterisk dialplan, which is a programming language used to configure the Asterisk open-source PBX. The mode includes syntax highlighting and code completion for Asterisk-specific keywords and functions.", "methods": ["GET", "POST"], "paths": ["/asterisk/asterisk.js"]}}
{"file": "cloned/OpenDSA/lib/CodeMirror-5.5.0/mode/mumps/mumps.js", "endpoints": {"api_summary": "This MUMPS Language script defines a CodeMirror mode for MUMPS programming language.", "methods": ["GET", "POST"], "paths": ["/mumps"]}}
{"file": "cloned/OpenDSA/lib/CodeMirror-5.5.0/mode/soy/soy.js", "endpoints": {"api_summary": "This file defines a Soy mode for CodeMirror, which is a text editor that supports syntax highlighting and code folding for Soy templates.", "methods": ["GET", "POST"], "paths": ["/users", "/users/<built-in function id>"]}}
{"file": "cloned/OpenDSA/lib/CodeMirror-5.5.0/mode/gherkin/gherkin.js", "endpoints": {"api_summary": "This file defines a Gherkin language mode for CodeMirror, a web-based text editor.", "methods": ["GET", "POST"], "paths": ["/gherkin"]}}
{"file": "cloned/OpenDSA/AV/Obsolete/FLA/resources/FA.js", "endpoints": {"api_summary": "This API allows users to perform CRUD operations on a Finite Automaton.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/fa/<id>", "/fa/<id>/nodes", "/fa/<id>/edges"]}}
{"file": "cloned/OpenDSA/AV/WuChen/PairToSortCONPI.js", "endpoints": {"api_summary": "This API defines a pairing problem and a sorting problem, and shows how the pairing problem can be reduced to the sorting problem.", "methods": ["GET", "POST"], "paths": ["/pairing", "/sorting"]}}
{"file": "cloned/OpenDSA/AV/WuChen/TwoMulExample.js", "endpoints": {"api_summary": "This file defines a simple polygon problem and shows how it can be reduced to the sorting problem. The lower bound theorem is used to show that the simple polygon problem is at least \u03a9(nlogn).", "methods": ["GET", "POST"], "paths": ["/sorting", "/simple-polygon"]}}
{"file": "cloned/OpenDSA/AV/Development/formal_language/CYKParser.js", "endpoints": {"api_summary": "This file defines a CYK parser for a context-free grammar. It allows the user to input a string and check if it is accepted by the grammar.", "methods": ["GET", "POST"], "paths": ["/cykparser"]}}
{"file": "cloned/OpenDSA/AV/Development/TopSort/dijkstraAV.js", "endpoints": {"api_summary": "This file defines a REST API for a graph data structure, including endpoints for creating, reading, updating, and deleting nodes and edges, as well as for performing graph traversals and searching.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/graph", "/graph/nodes", "/graph/edges", "/graph/traverse", "/graph/search"]}}
{"file": "cloned/OpenDSA/AV/Database/ChenVsCrossFootRelations1M.js", "endpoints": {"api_summary": "This file defines a single endpoint for a REST API, which is used to retrieve a list of all students and their corresponding courses.", "methods": ["GET"], "paths": ["/students"]}}
{"file": "cloned/OpenDSA/AV/Database/ChenVsCrossFootRelationsM1.js", "endpoints": {"api_summary": "This file defines a single endpoint for a REST API, which is used to retrieve a list of all students and their corresponding courses.", "methods": ["GET"], "paths": ["/students"]}}
{"file": "cloned/OpenDSA/AV/Database/TernaryRelationship.js", "endpoints": {"api_summary": "This file defines a REST API with the following endpoints:", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users", "/users/<built-in function id>", "/users/<built-in function id>/<built-in function id>"]}}
{"file": "cloned/OpenDSA/AV/Database/ChenVsCrossFootRelationsMM.js", "endpoints": {"api_summary": "This file defines a single endpoint for a student registration system, which allows users to register for courses.", "methods": ["GET", "POST"], "paths": ["/register"]}}
{"file": "cloned/OpenDSA/AV/Database/MgrOneVsManyRel.js", "endpoints": {"api_summary": "This file defines a REST API for managing a simple database of employees and projects.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/employees", "/employees/<employee_id>", "/projects", "/projects/<project_id>"]}}
{"file": "cloned/OpenDSA/AV/Database/Participation.js", "endpoints": {"api_summary": "This API defines a RESTful interface for managing a user's participation in a relationship.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/participation", "/participation/<id>", "/participation/<id>/<entity>"]}}
{"file": "cloned/OpenDSA/AV/Database/Cardinality.js", "endpoints": {"api_summary": "This file defines a REST API for managing a card game.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/games", "/games/<game_id>", "/games/<game_id>/players", "/games/<game_id>/players/<player_id>", "/games/<game_id>/cards", "/games/<game_id>/cards/<card_id>"]}}
{"file": "cloned/OpenDSA/AV/Database/ManyToManyUnaryRelation.js", "endpoints": {"api_summary": "This API is a logical ERD of the relation between employee and supervisor entities.", "methods": ["GET", "POST"], "paths": ["/employee", "/supervisor"]}}
{"file": "cloned/OpenDSA/AV/Database/ChenVsCrossFoot.js", "endpoints": {"api_summary": "This API defines a relation between a student and the courses they have registered for, with the student being the primary key and the courses being the foreign key.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/students", "/students/<built-in function id>", "/courses", "/courses/<built-in function id>"]}}
{"file": "cloned/OpenDSA/AV/Database/ChenVsCrossFootRelations.js", "endpoints": {"api_summary": "This API defines a set of endpoints for managing a student's course registration.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/students", "/students/<student_id>", "/courses", "/courses/<course_id>", "/register", "/register/<student_id>/<course_id>"]}}
{"file": "cloned/OpenDSA/AV/Database/WeakEntity.js", "endpoints": {"api_summary": "This API defines a weak entity called Child, which is related to a strong entity called Employee through a has-a relationship. The Child entity does not have a primary key of its own, but instead uses a combination of its partial key (CH-name) and the foreign key (E-id) of the Employee entity to uniquely identify each child.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/employees", "/employees/<built-in function id>", "/employees/<built-in function id>/children", "/employees/<built-in function id>/children/<built-in function id>"]}}
{"file": "cloned/OpenDSA/AV/PIFLA/LimComp/Unsolve1FS.js", "endpoints": {"api_summary": "This file defines a JavaScript program that demonstrates the concept of uncountability in the context of computer science. It uses a diagram to illustrate the idea of diagonalization and the uncountability of the set of all functions from positive integers to positive integers.", "methods": ["GET"], "paths": ["/"]}}
{"file": "cloned/OpenDSA/AV/CT/Development/iteration5copyCON.js", "endpoints": {"api_summary": "This API is a simple calculator that takes in a list of numbers and returns the average of those numbers.", "methods": ["GET"], "paths": ["/calculator/average"]}}
{"file": "cloned/OpenDSA/AV/CT/Development/iteration5copy2CON.js", "endpoints": {"api_summary": "This API is a simple calculator that allows users to perform basic arithmetic operations on two numbers.", "methods": ["GET", "POST"], "paths": ["/add", "/subtract", "/multiply", "/divide"]}}
{"file": "cloned/OpenDSA/AV/Jsparson/lib/odsaAV-min.js", "endpoints": {"api_summary": "This file defines a JavaScript library for creating and interacting with animations and visualizations in OpenDSA.", "methods": ["GET", "POST"], "paths": ["/odsaUtils.js"]}}
{"file": "cloned/OpenDSA/AV/NP/threeSATtoHCCON.js", "endpoints": {"api_summary": "This API endpoint is a demonstration of a reduction from an instance of the 3-Satisfiability problem to an instance of the Hamiltonian Cycle problem.", "methods": ["GET"], "paths": ["/threeSATtoHCCON"]}}
{"file": "cloned/OpenDSA/AV/NP/circuitSATtoSATCON.js", "endpoints": {"api_summary": "This API provides a slideshow presentation of a reduction of the Circuit Satisfiability problem to the Satisfiability problem in polynomial time.", "methods": ["GET"], "paths": ["/slideshow"]}}
{"file": "cloned/OpenDSA/AV/MemManage/firstFitAV.js", "endpoints": {"api_summary": "This file defines a First Fit Algorithm Visualization, which is a tool for visualizing the First Fit algorithm for memory allocation.", "methods": ["GET", "POST"], "paths": ["/firstfit"]}}
{"file": "cloned/OpenDSA/AV/Juwon/FA.js", "endpoints": {"api_summary": "This code does not define any REST API endpoints.", "methods": [], "paths": []}}
{"file": "cloned/OpenDSA/AV/VisFormalLang/NonReg/Proof1NonRegularCON.js", "endpoints": {"api_summary": "This API is a proof of the Pumping Lemma for regular languages. It takes a string and checks if it is in the language L2, which is defined as {a^nb^n | n > 0}. The API returns a boolean value indicating whether the string is in the language or not.", "methods": ["GET"], "paths": ["/pumping_lemma"]}}
{"file": "cloned/ecommerce-backend/tests/apps/newsletter/test_api.py", "endpoints": {"api_summary": "This API allows users to view and create subscribers for a newsletter. Admins can view all subscribers, while non-admin users can only view their own subscribers. The API also allows for creating new subscribers with valid email addresses.", "methods": ["GET", "POST"], "paths": ["/api/subscribers/", "/api/subscribers/<id>"]}}
{"file": "cloned/ecommerce-backend/src/urls.py", "endpoints": {"api_summary": "This API provides endpoints for managing accounts, products, payments, and newsletter subscribers. It also includes a base HTML template and admin interface.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/accounts/", "/api/products/", "/api/payments/", "/api/subscribers/", "/admin/"]}}
{"file": "cloned/ecommerce-backend/src/apps/newsletter/api/urls.py", "endpoints": {"api_summary": "The API allows for the management of subscribers, including listing, creating, updating, and deleting subscribers.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/subscribers", "/subscribers/<built-in function id>"]}}
{"file": "cloned/ecommerce-backend/src/apps/newsletter/api/views.py", "endpoints": {"api_summary": "The Subscribers API allows users to list all existing subscribers (for admins) and create new ones (for everyone). GET only to users for which user.is_staff returns True.", "methods": ["GET", "POST"], "paths": ["/subscribers"]}}
{"file": "cloned/ecommerce-backend/src/apps/accounts/api/urls.py", "endpoints": {"api_summary": "This API provides authentication and registration endpoints for a Django application using the dj-rest-auth library.", "methods": ["GET", "POST"], "paths": ["/", "/register/"]}}
{"file": "cloned/ecommerce-backend/src/apps/payments/urls.py", "endpoints": {"api_summary": "The API allows for charging a user's account with a specified amount. The API endpoint is accessible at the root URL and accepts a POST request with the necessary parameters.", "methods": ["POST"], "paths": ["/charge_view"]}}
{"file": "cloned/ecommerce-backend/src/apps/payments/views.py", "endpoints": {"api_summary": "This API allows users to make payments using Stripe. It exposes a single endpoint for creating a charge, which accepts an amount, currency, and source (e.g. credit card) as parameters. The endpoint returns a JSON response indicating the status of the transaction.", "methods": ["POST"], "paths": ["/charge"]}}
{"file": "cloned/ecommerce-backend/src/apps/products/api/urls.py", "endpoints": {"api_summary": "The API allows for the management of products, including creating, reading, updating, and deleting products. It also allows for searching and filtering products based on various criteria.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/products", "/products/<product_id>", "/products/search", "/products/filter"]}}
{"file": "cloned/ecommerce-backend/src/apps/products/api/views.py", "endpoints": {"api_summary": "The API provides endpoints for managing categories and products. It allows for CRUD operations on categories and products, as well as searching and filtering of products by category and description.", "methods": ["GET", "POST", "PUT", "PATCH", "DELETE"], "paths": ["/categories", "/categories/<built-in function id>", "/products", "/products/<built-in function id>"]}}
{"file": "cloned/hailstorm-sdk/hailstorm-web-client/src/services/JMeterValidationService.ts", "endpoints": {"api_summary": "The JMeterValidationService API allows for the creation of JMeter file upload states and the ability to validate JMeter files. It also provides a way to retrieve the auto-stop setting for a JMeter file.", "methods": ["POST"], "paths": ["/jmeter_validations"]}}
{"file": "cloned/hailstorm-sdk/hailstorm-web-client/src/services/ProjectService.ts", "endpoints": {"api_summary": "The ProjectService API provides endpoints for managing projects, including listing, retrieving, updating, deleting, and creating projects.", "methods": ["GET", "POST", "PATCH", "DELETE"], "paths": ["/projects", "/projects/<id>", "/projects/<id>/update", "/projects/<id>/delete", "/projects/create"]}}
{"file": "cloned/hailstorm-sdk/hailstorm-web-client/src/services/JtlExportService.ts", "endpoints": {"api_summary": "The JtlExportService API allows for the creation of JTL files for a given project and execution cycle. The API endpoint accepts a project ID and an array of execution cycle IDs, and returns a JTL file with the results of the export.", "methods": ["POST"], "paths": ["/projects/<projectId>/jtl_exports"]}}
{"file": "cloned/hailstorm-sdk/hailstorm-web-client/src/services/JMeterService.ts", "endpoints": {"api_summary": "The JMeterService API provides endpoints for managing JMeter plans in a project. It allows for listing, creating, updating, and deleting JMeter plans.", "methods": ["GET", "POST", "PATCH", "DELETE"], "paths": ["/projects/<projectId>/jmeter_plans", "/projects/<projectId>/jmeter_plans/<jmeterFileId>"]}}
{"file": "cloned/hailstorm-sdk/hailstorm-web-client/src/services/ReportService.ts", "endpoints": {"api_summary": "The ReportService API provides endpoints for listing and creating reports for a given project. The API uses the HTTP methods GET and POST to retrieve and create reports, respectively. The API also uses the URL path /projects/<projectId>/reports to identify the reports for a given project.", "methods": ["GET", "POST"], "paths": ["/projects/<projectId>/reports"]}}
{"file": "cloned/hailstorm-sdk/hailstorm-client-exchange/src/main/java/com/tpg/labs/hailstorm/clientexchange/LogsController.java", "endpoints": {"api_summary": "The LogsController provides a REST API for retrieving log events from the LogsService. The API endpoint is /logs, which returns a Flux of LogEvent objects.", "methods": ["GET"], "paths": ["/logs"]}}
{"file": "cloned/hailstorm-sdk/hailstorm-file-server/src/main/java/com/tpg/labs/hailstormfs/ReportsController.java", "endpoints": {"api_summary": "The ReportsController API allows for the uploading and retrieval of report files. It provides endpoints for uploading a file with a specified prefix, and for retrieving a list of report metadata for a given prefix.", "methods": ["POST", "GET"], "paths": ["/reports", "/reports/{prefix}"]}}
{"file": "cloned/hailstorm-sdk/hailstorm-file-server/src/main/java/com/tpg/labs/hailstormfs/HailstormFsController.java", "endpoints": {"api_summary": "The HailstormFsController API allows for uploading, deleting, and serving files, as well as removing files with a specific prefix.", "methods": ["POST", "DELETE", "GET"], "paths": ["/upload", "/{fileId}", "/{fileId}/{fileName}", "/files/{prefix}"]}}
{"file": "cloned/hailstorm-sdk/hailstorm-file-server/src/test/java/com/tpg/labs/hailstormfs/ReportsControllerTest.java", "endpoints": {"api_summary": "The ReportsControllerTest API allows for the uploading and retrieval of report files. It also provides endpoints for retrieving metadata about reports.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/reports", "/reports/prefix"]}}
{"file": "cloned/microcalc/services/add/index.js", "endpoints": {"api_summary": "This API provides a simple addition service that takes two operands and returns the result of adding them together. The API also includes a status endpoint that returns a JSON object with a 'data' field set to 'OK'.", "methods": ["GET", "POST"], "paths": ["/status", "/add"]}}
{"file": "cloned/microcalc/services/div/main.py", "endpoints": {"api_summary": "The API provides a simple calculator service that allows users to perform division operations on two operands. The API has two endpoints: one for getting the status of the service and another for performing the division operation.", "methods": ["GET", "POST"], "paths": ["/api/v1/status", "/api/v1/div"]}}
{"file": "cloned/microcalc/services/pow/index.js", "endpoints": {"api_summary": "This API provides a single endpoint for calculating the power of a number. It takes two operands and returns the result of the power operation.", "methods": ["POST"], "paths": ["/pow"]}}
{"file": "cloned/microcalc/services/mult/main.go", "endpoints": {"api_summary": "The API provides a simple multiplication service that takes two operands and returns the result of their multiplication. The API also includes a status endpoint that returns a JSON object with a message indicating the service is running.", "methods": ["GET", "POST"], "paths": ["/api/v1/status", "/api/v1/mult"]}}
{"file": "cloned/microcalc/services/parser/src/main/java/me/foly/microcalc/MainVerticle.java", "endpoints": {"api_summary": "The MicroCalc API is a simple calculator service that allows users to perform basic arithmetic operations on numbers. The API supports GET and POST requests and has a single endpoint for calculating the result of an arithmetic expression.", "methods": ["GET", "POST"], "paths": ["/api/v1/calculate"]}}
{"file": "cloned/microcalc/services/parser/src/main/java/me/foly/microcalc/HttpHandler.java", "endpoints": {"api_summary": "The MicroCalc API allows users to perform basic arithmetic operations on numbers. It accepts HTTP POST requests with a JSON body containing the input expression and returns the result as a JSON object.", "methods": ["POST"], "paths": ["/calculate"]}}
{"file": "cloned/microcalc/services/mod/src/main/java/me/foly/microcalc/mod/MainController.java", "endpoints": {"api_summary": "The mod API provides a simple calculator service that performs modulo operations on two integers. The API accepts a JSON request body with two operands and returns a JSON response with the result and the operands used.", "methods": ["GET", "POST"], "paths": ["/api/v1/status", "/api/v1/mod"]}}
{"file": "cloned/izanami/manual/.docusaurus/routes.js", "endpoints": {"api_summary": "Izanami is a feature flipping and A/B testing platform that allows you to manage features and experiments across multiple environments and targets.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/izanami/search", "/izanami/docs", "/izanami/v1", "/izanami/"]}}
{"file": "cloned/izanami/izanami-frontend/tests/contexts.spec.ts", "endpoints": {"api_summary": "This API provides endpoints for managing contexts and features in a project.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/tenants/<tenantName>/projects/<projectName>/contexts", "/tenants/<tenantName>/projects/<projectName>/contexts/<contextName>", "/tenants/<tenantName>/projects/<projectName>/features", "/tenants/<tenantName>/projects/<projectName>/features/<featureName>"]}}
{"file": "cloned/izanami/izanami-frontend/tests/webhooks.spec.ts", "endpoints": {"api_summary": "This API allows for the creation, listing, editing, and deletion of webhooks for a given tenant and project.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/tenants/<tenantName>/webhooks", "/tenants/<tenantName>/webhooks/<webhookName>"]}}
{"file": "cloned/izanami/izanami-frontend/tests/audit.spec.ts", "endpoints": {"api_summary": "This API provides a way to manage and audit features and events for a project.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/tenants/<tenantName>/projects/<projectName>/logs", "/tenants/<tenantName>/projects/<projectName>/features", "/tenants/<tenantName>/projects/<projectName>/events"]}}
{"file": "cloned/autoscaler/autoscale-acceptance-tests/src/test/java/com/github/autoscaler/workload/rabbit/RabbitManagementApiIT.java", "endpoints": {"api_summary": "This API provides methods for managing RabbitMQ queues and messages.", "methods": ["GET", "POST"], "paths": ["/queues", "/queues/<queue_name>", "/messages"]}}
{"file": "cloned/oasis/backend/app.py", "endpoints": {"api_summary": "This API provides a homepage endpoint that serves an HTML template and a REST API for managing NYT Live Counties. The API includes endpoints for creating, reading, updating, and deleting counties, as well as endpoints for retrieving a list of all counties and a specific county by ID.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/", "/api/counties", "/api/counties/<built-in function id>"]}}
{"file": "cloned/oasis/backend/auth/main.py", "endpoints": {"api_summary": "This API is a FastAPI application that provides authentication and authorization for a storytelling platform. It allows users to create and manage their stories, and provides endpoints for retrieving and updating stories.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/auth", "/api/stories", "/api/stories/<story_id>", "/api/users", "/api/users/<user_id>"]}}
{"file": "cloned/oasis/backend/router/likes.py", "endpoints": {"api_summary": "The API allows users to like and dislike my stories, and retrieve the like and dislike counts for a specific my story.", "methods": ["POST", "GET"], "paths": ["/", "/{my_story_id}"]}}
{"file": "cloned/oasis/backend/router/data.py", "endpoints": {"api_summary": "This API provides COVID-19 data for countries, US states, counties, and zip codes. It also provides a way to cluster data based on the number of confirmed cases.", "methods": ["GET"], "paths": ["/county", "/world", "/us-states", "/sd-zip", "/all"]}}
{"file": "cloned/oasis/backend/router/comments.py", "endpoints": {"api_summary": "This API allows users to create, read, update, and delete comments on a story. Users can also like or dislike comments. The API also provides endpoints for retrieving the number of likes on a comment and checking if a user has liked a comment.", "methods": ["POST", "GET", "PUT", "DELETE"], "paths": ["/my_stories/{my_story_id}", "/my_stories/{my_story_id}", "/{comment_id}", "/{comment_id}/like", "/{comment_id}/like"]}}
{"file": "cloned/oasis/backend/router/stories.py", "endpoints": {"api_summary": "This API allows users to create, read, update, and delete stories, as well as search for stories based on keywords and explore nearby stories.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/", "/{story_id}/symptoms", "/{story_id}/travels", "/{story_id}/contacts", "/all", "/{story_id}/my_stories", "/my_stories", "/my_stories/count", "/search", "/explore", "/trending"]}}
{"file": "cloned/oasis/backend/router/api.py", "endpoints": {"api_summary": "This API provides endpoints for managing users, stories, symptoms, data, and likes. It also includes authentication and commenting functionality.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users", "/users/<built-in function id>", "/stories", "/stories/<built-in function id>", "/symptoms", "/symptoms/<built-in function id>", "/data", "/data/<built-in function id>", "/auth", "/comments", "/comments/<built-in function id>"]}}
{"file": "cloned/oasis/backend/router/nyt_live_county.py", "endpoints": {"api_summary": "The API provides a list of county data records based on IDs (FIPS) queried. It also checks if the database needs to be updated and updates it if necessary.", "methods": ["GET"], "paths": ["/NytLiveCounty/{county_ids}"]}}
{"file": "cloned/oasis/backend/router/users.py", "endpoints": {"api_summary": "This API provides endpoints for creating, reading, and managing users in a database. It also provides endpoints for retrieving the count and trend of users in the database.", "methods": ["POST", "GET"], "paths": ["/users/", "/users/me/", "/users/count/", "/users/trend/"]}}
{"file": "cloned/oasis/backend/router/auth.py", "endpoints": {"api_summary": "This API provides endpoints for user authentication and external login using OAuth2. It also includes endpoints for creating and retrieving user information.", "methods": ["POST"], "paths": ["/auth", "/auth/external"]}}
{"file": "cloned/oasis/backend/router/symptoms.py", "endpoints": {"api_summary": "The API provides a list of symptoms and allows users to retrieve them. The API also allows users to create, update, and delete symptoms.", "methods": ["GET"], "paths": ["/stories/symptoms"]}}
{"file": "cloned/oasis/legacy/backend/app.py", "endpoints": {"api_summary": "This API provides endpoints for managing patient data, including registering new patients, logging in, and retrieving patient information. It also provides endpoints for retrieving data on COVID-19 cases and symptoms.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/", "/register", "/login", "/patient", "/getcounty", "/getsdzip"]}}
{"file": "cloned/oasis/frontend/src/actions/symptoms.js", "endpoints": {"api_summary": "This API provides endpoints for fetching and submitting symptoms for a story. It also includes endpoints for starting and ending the fetch and submit processes.", "methods": ["GET", "POST"], "paths": ["/symptoms", "/stories/<storyId>/symptoms"]}}
{"file": "cloned/oasis/frontend/src/actions/story.js", "endpoints": {"api_summary": "This API is responsible for managing stories and their components, such as travels and close contacts. It allows for creating, updating, and retrieving stories, as well as submitting and retrieving travels and close contacts.", "methods": ["GET", "POST", "PUT"], "paths": ["/stories", "/stories/<id>", "/stories/<id>/travels", "/stories/<id>/contacts"]}}
{"file": "cloned/oasis/frontend/src/actions/auth.js", "endpoints": {"api_summary": "This API defines endpoints for user authentication and registration, including sign up and sign in. It also includes endpoints for onboarding and dashboard navigation.", "methods": ["POST", "GET"], "paths": ["/users", "/auth", "/auth/external", "/sign-in", "/onboard", "/dashboard"]}}
{"file": "cloned/oasis/frontend/src/routes/paths.js", "endpoints": {"api_summary": "This API provides endpoints for a health and wellness application, allowing users to track their symptoms, receive alerts, and access their health measurements and story history. The API also includes endpoints for onboarding and authentication.", "methods": ["GET", "POST"], "paths": ["/", "/signin", "/signup", "/onboard", "/alert", "/questions", "/symptoms", "/dashboard", "/confirm", "/measurements", "/mystory", "/storyhistory"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/2.3_The_Router/Songs/test/song-api-spec.test.ts", "endpoints": {"api_summary": "The Songs Server API allows users to retrieve information about songs and their associated metadata. The API supports GET requests to retrieve a song by ID, and returns a JSON object with the song's details.", "methods": ["GET"], "paths": ["/songs?id=<song_id>"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/2.3_The_Router/Songs/src/app.ts", "endpoints": {"api_summary": "This API provides a simple RESTful interface for retrieving and searching songs. It supports GET requests for retrieving songs by ID or searching for songs by query.", "methods": ["GET"], "paths": ["/v1/songs"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/2.3_The_Router/Playlist/test/playlist-api-spec.test.ts", "endpoints": {"api_summary": "The Playlist Server API provides endpoints for managing playlists and their associated songs. It allows for creating, reading, updating, and deleting playlists, as well as adding and removing songs from playlists.", "methods": ["GET", "POST", "DELETE"], "paths": ["/v1/playlists", "/v1/playlists/<playlist_id>", "/v1/playlists/<playlist_id>/songs"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/2.3_The_Router/Playlist/src/app.ts", "endpoints": {"api_summary": "This API provides endpoints for managing playlists and their associated songs. It allows users to create, read, update, and delete playlists, as well as add and remove songs from playlists.", "methods": ["GET", "POST", "DELETE"], "paths": ["/v1/playlists", "/v1/playlists/:id/", "/v1/playlists/:id/"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/2.2_Second_API/Songs/test/song-api-spec.test.ts", "endpoints": {"api_summary": "The Songs Server API allows users to retrieve information about songs and their associated metadata. The API supports GET requests to retrieve a song by ID, and returns a JSON object with the song's details.", "methods": ["GET"], "paths": ["/songs?id=<song_id>"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/2.2_Second_API/Songs/src/app.ts", "endpoints": {"api_summary": "This API provides a simple CRUD interface for managing songs, with endpoints for retrieving a list of songs, retrieving a specific song by ID, and searching for songs by query.", "methods": ["GET", "POST"], "paths": ["/v1/songs", "/v1/songs/<built-in function id>"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/2.2_Second_API/Playlist/test/playlist-api-spec.test.ts", "endpoints": {"api_summary": "The Playlist Server API provides endpoints for managing playlists and their associated songs. It allows for creating, reading, updating, and deleting playlists, as well as adding and removing songs from playlists.", "methods": ["GET", "POST", "DELETE"], "paths": ["/v1/playlists", "/v1/playlists/<playlist_id>", "/v1/playlists/<playlist_id>/songs"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/2.2_Second_API/Playlist/src/app.ts", "endpoints": {"api_summary": "This API provides endpoints for managing playlists, including adding, removing, and retrieving playlists. It also allows for adding and removing songs from playlists.", "methods": ["GET", "POST", "DELETE"], "paths": ["/v1/playlists", "/v1/playlists/:id/", "/v1/playlists/:id/"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/1.4_Testing/test/song-api-spec.test.ts", "endpoints": {"api_summary": "The Songs Server API allows users to retrieve information about songs and their metadata. It provides a simple interface for querying songs by ID and returning a JSON object with the song's details.", "methods": ["GET"], "paths": ["/v1/songs?id=<song_id>"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/1.4_Testing/src/app.ts", "endpoints": {"api_summary": "This API provides a simple CRUD interface for managing songs, with endpoints for retrieving a list of all songs, retrieving a specific song by ID, creating a new song, updating an existing song, and deleting a song.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/v1/songs", "/v1/songs/<built-in function id>"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/1.5_Build/test/song-api-spec.test.ts", "endpoints": {"api_summary": "The Songs Server API allows users to retrieve information about songs and their associated metadata. The API supports GET requests to retrieve a song by ID, and returns a JSON object with the song's details.", "methods": ["GET"], "paths": ["/songs?id=<song_id>"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/1.5_Build/src/app.ts", "endpoints": {"api_summary": "This API provides a simple CRUD interface for managing songs, with endpoints for retrieving a list of all songs, retrieving a specific song by ID, creating a new song, updating an existing song, and deleting a song.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/v1/songs", "/v1/songs/<built-in function id>"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/4.2_Redis/Songs/test/song-api-spec.test.ts", "endpoints": {"api_summary": "The Songs Server API allows users to retrieve information about songs and their associated metadata. The API supports GET requests to retrieve a song by ID, and returns a JSON object with the song's details.", "methods": ["GET"], "paths": ["/songs?id=<song_id>"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/4.2_Redis/Songs/src/app.ts", "endpoints": {"api_summary": "This API provides a simple interface for retrieving song information from a MongoDB database. It supports retrieving all songs, searching for songs by a query, and retrieving a specific song by its ID.", "methods": ["GET"], "paths": ["/v1/songs"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/4.4_Configuration/Songs/test/song-api-spec.test.ts", "endpoints": {"api_summary": "The Songs Server API allows users to retrieve information about songs and their associated metadata. The API supports GET requests to retrieve a song by ID, and returns a JSON object with the song's details.", "methods": ["GET"], "paths": ["/songs?id=<song_id>"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/4.1_Dockerization/Songs/test/song-api-spec.test.ts", "endpoints": {"api_summary": "The Songs Server API allows users to retrieve information about songs and their associated metadata. The API supports GET requests to retrieve a song by ID, and returns a JSON object with the song's details.", "methods": ["GET"], "paths": ["/songs?id=<song_id>"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/4.1_Dockerization/Songs/src/app.ts", "endpoints": {"api_summary": "This API provides a simple RESTful interface for retrieving and manipulating song data. It includes endpoints for retrieving all songs, retrieving a specific song by ID, and searching for songs by query.", "methods": ["GET"], "paths": ["/v1/songs", "/v1/songs?id=<song_id>", "/v1/songs?q=<query>"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/4.1_Dockerization/Playlist/test/playlist-api-spec.test.ts", "endpoints": {"api_summary": "The Playlist Server API allows clients to retrieve playlists by ID. The API returns a JSON object with the playlist information, including the playlist ID, name, and list of tracks.", "methods": ["GET"], "paths": ["/playlists?id=<playlist_id>"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/4.1_Dockerization/Playlist/src/app.ts", "endpoints": {"api_summary": "This API provides endpoints for managing playlists and their associated songs. It allows users to create, read, update, and delete playlists, as well as add and remove songs from playlists.", "methods": ["GET", "POST", "DELETE"], "paths": ["/v1/playlists", "/v1/playlists/:id/", "/v1/playlists/:id/"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/1.2_Basic_boilerplate/src/app.ts", "endpoints": {"api_summary": "This API provides a single endpoint for a hello world message.", "methods": ["GET"], "paths": ["/hello"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/4.3_Service_Discovery/Songs/test/song-api-spec.test.ts", "endpoints": {"api_summary": "The Songs Server API allows users to retrieve information about songs and their associated metadata. The API supports GET requests to retrieve a song by ID, and returns a JSON object with the song's details.", "methods": ["GET"], "paths": ["/songs?id=<song_id>"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/4.3_Service_Discovery/Songs/src/app.ts", "endpoints": {"api_summary": "This API provides a simple interface for retrieving and searching songs, as well as caching the results in Redis.", "methods": ["GET"], "paths": ["/v1/songs"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/2.4_OpenApi3_(Swagger)/Songs/test/song-api-spec.test.ts", "endpoints": {"api_summary": "The Songs Server API allows users to retrieve information about songs and their associated metadata. The API supports GET requests to retrieve a song by ID, and returns a JSON object with the song's details.", "methods": ["GET"], "paths": ["/songs?id=<song_id>"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/2.4_OpenApi3_(Swagger)/Songs/compTests/src/app.js", "endpoints": {"api_summary": "This API provides a single endpoint for retrieving a song by its ID. The endpoint is accessible at /song and accepts a GET request with an id parameter in the query string.", "methods": ["GET"], "paths": ["/song"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/2.4_OpenApi3_(Swagger)/Songs/src/app.ts", "endpoints": {"api_summary": "This API provides a simple RESTful interface for retrieving and searching songs. It supports GET requests for retrieving songs by ID or searching for songs by query.", "methods": ["GET"], "paths": ["/v1/songs"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/2.1_UI_Service/Songs/test/song-api-spec.test.ts", "endpoints": {"api_summary": "The Songs Server API allows users to retrieve information about songs and their associated metadata. The API supports GET requests to retrieve a song by ID, and returns a JSON object with the song's details.", "methods": ["GET"], "paths": ["/songs?id=<song_id>"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/2.1_UI_Service/Songs/src/app.ts", "endpoints": {"api_summary": "This API provides a simple RESTful interface for retrieving and manipulating song data. It includes endpoints for retrieving a list of all songs, retrieving a specific song by ID, and creating a new song.", "methods": ["GET", "POST"], "paths": ["/v1/songs", "/v1/songs/<built-in function id>"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/3.5_DB_Dal/Songs/test/song-api-spec.test.ts", "endpoints": {"api_summary": "The Songs Server API allows users to retrieve information about songs and their associated metadata. The API supports GET requests to retrieve a song by ID, and returns a JSON object with the song's details.", "methods": ["GET"], "paths": ["/songs?id=<song_id>"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/3.5_DB_Dal/Songs/src/app.ts", "endpoints": {"api_summary": "This API provides a simple RESTful interface for retrieving and searching songs. It allows users to retrieve all songs, retrieve a specific song by ID, or search for songs by a query string.", "methods": ["GET"], "paths": ["/v1/songs"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/5.2_User_Authentication/Auth/src/app.ts", "endpoints": {"api_summary": "This API uses Google OAuth2.0 to authenticate users and provides a JWT token for authorized access to the API.", "methods": ["GET", "POST"], "paths": ["/auth/google", "/auth/google/callback"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/5.2_User_Authentication/Songs/test/song-api-spec.test.ts", "endpoints": {"api_summary": "The Songs Server API allows users to retrieve information about songs and their associated metadata. The API supports GET requests to retrieve a song by ID, and returns a JSON object with the song's details.", "methods": ["GET"], "paths": ["/songs?id=<song_id>"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/5.2_User_Authentication/Songs/src/app.ts", "endpoints": {"api_summary": "This API provides a simple RESTful interface for retrieving and searching songs. It supports GET requests for retrieving songs by ID or searching for songs by query, and it uses JSON Web Tokens for authentication.", "methods": ["GET"], "paths": ["/v1/songs"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/5.2_User_Authentication/Playlist/test/playlist-api-spec.test.ts", "endpoints": {"api_summary": "The Playlist Server API allows clients to retrieve playlists by ID. The API returns a JSON object with the playlist information, including the playlist ID, name, and list of tracks.", "methods": ["GET"], "paths": ["/playlists?id=<playlist_id>"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/5.2_User_Authentication/Playlist/src/app.ts", "endpoints": {"api_summary": "This API provides endpoints for managing playlists and their associated songs. It allows users to create, read, update, and delete playlists, as well as add and remove songs from playlists.", "methods": ["GET", "POST", "DELETE"], "paths": ["/v1/playlists", "/v1/playlists/:id/", "/v1/playlists/:id/"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/5.2_User_Authentication/FrontEnd/src/router.ts", "endpoints": {"api_summary": "This API provides a login functionality and a home page for a user. The login endpoint allows users to authenticate and access the home page, which displays information about the user.", "methods": ["GET", "POST"], "paths": ["/", "/home"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/1.3_Choosing_servers/src/app.ts", "endpoints": {"api_summary": "This API provides a simple RESTful interface for retrieving and manipulating song data. It includes endpoints for retrieving a list of all songs, retrieving a specific song by ID, and adding a new song.", "methods": ["GET", "POST"], "paths": ["/v1/songs", "/v1/songs/<built-in function id>"]}}
{"file": "cloned/microservice-monitoring/java/backend/src/main/java/net/xeraa/backend/BackendController.java", "endpoints": {"api_summary": "This API provides a simple RESTful interface for managing a list of people, with endpoints for adding, retrieving, and searching for people.", "methods": ["GET", "POST"], "paths": ["/add", "/all", "/search"]}}
{"file": "cloned/microservice-monitoring/java/frontend/src/main/java/net/xeraa/frontend/FrontendController.java", "endpoints": {"api_summary": "The FrontendController defines several REST API endpoints for interacting with the backend service. The endpoints include /generate, /add, /search, /good, /bad, /null, /call, and /call-bad. These endpoints allow for adding and searching for people, as well as calling other endpoints with a delay.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/generate", "/add", "/search", "/good", "/bad", "/null", "/call", "/call-bad"]}}
{"file": "cloned/ramascene/ramascene/consumers.py", "endpoints": {"api_summary": "This API provides a web socket interface for querying and retrieving data from the RAMaScene database.", "methods": ["GET", "POST"], "paths": ["/ws/ramascene"]}}
{"file": "cloned/ramascene/ramascene/urls.py", "endpoints": {"api_summary": "The API provides a visualization of the Ramascene process, allowing users to interact with the system and receive real-time updates on the status of the process. The API also provides an endpoint for handling AJAX requests.", "methods": ["GET", "POST"], "paths": ["/ramascene/", "/ramascene/ajaxhandling/"]}}
{"file": "cloned/ramascene/ramascene/views.py", "endpoints": {"api_summary": "This API handles AJAX requests for retrieving the results of a job. It takes a job ID as input and returns the results of the job in JSON format.", "methods": ["POST"], "paths": ["/ajaxHandling"]}}
{"file": "cloned/ramascene/ramasceneMasterProject/routing.py", "endpoints": {"api_summary": "The API allows for real-time communication between clients and the server using WebSockets. It provides a single endpoint for the RamasceneConsumer, which handles incoming WebSocket connections and messages.", "methods": ["websocket"], "paths": ["/ramascene/"]}}
{"file": "cloned/ramascene/ramasceneMasterProject/urls.py", "endpoints": {"api_summary": "The ramasceneMasterProject API provides a homepage and includes the ramascene API.", "methods": ["GET"], "paths": ["/", "/ramascene/"]}}
{"file": "cloned/von-bc-registries/data-pipeline/app/ui/start_page.py", "endpoints": {"api_summary": "The start_page API provides a redirect to the data_integration node page.", "methods": ["GET"], "paths": ["/start_page"]}}
{"file": "cloned/von-bc-registries/bcreg-aca/src/app.py", "endpoints": {"api_summary": "This API is a callback endpoint for an Aries agent, handling various topics such as connections, credentials, and presentations. It also includes endpoints for registering the issuer and handling problem reports.", "methods": ["POST"], "paths": ["/api/agentcb/topic/<topic>/"]}}
{"file": "cloned/Twitch_Bot/bot/command_console.py", "endpoints": {"api_summary": "This file defines a websocket client and a terminal UI to interact with it. The client connects to a command server and allows the user to send commands and chat messages to a bot-joined channel. The UI displays the chat messages and allows the user to enter commands and chat messages.", "methods": ["GET", "POST"], "paths": ["/users", "/users/<built-in function id>"]}}
{"file": "cloned/Twitch_Bot/bot/mods/topic.py", "endpoints": {"api_summary": "This API provides a way to manage and retrieve information about a topic, including its current state, goal, and notes. It also allows for setting the topic and its related information.", "methods": ["GET", "POST"], "paths": ["/topic", "/topic/set", "/topic/goal", "/topic/step", "/topic/link", "/topic/reset"]}}
{"file": "cloned/Twitch_Bot/web/main.py", "endpoints": {"api_summary": "This API is a collection of routes that handle various tasks such as announcements, commands, dropbox, polls, sending commands and messages, topics, twitch webhooks, ignoring users, trivia, user management, clips management, auto-ban, discord webhooks, and twitch OAuth.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/announcements", "/commands", "/dropbox", "/polls", "/send_command", "/send_message", "/topic", "/twitch_webhook", "/ignore", "/trivia", "/user_manage", "/clips_manage", "/autoban", "/discord_webhooks", "/twitch_oauth"]}}
{"file": "cloned/Twitch_Bot/web/auth.py", "endpoints": {"api_summary": "This API provides authentication and authorization functionality using JWT tokens. It includes endpoints for logging in, logging out, and refreshing tokens.", "methods": ["POST", "GET", "PUT", "DELETE"], "paths": ["/login", "/logout", "/refresh"]}}
{"file": "cloned/Twitch_Bot/web/routes/user_manage.py", "endpoints": {"api_summary": "This API provides endpoints for managing user authentication and authorization levels, as well as enabling/disabling users.", "methods": ["GET", "POST"], "paths": ["/users", "/users/level", "/users/enable"]}}
{"file": "cloned/Twitch_Bot/web/routes/clips.py", "endpoints": {"api_summary": "This API provides endpoints for managing and retrieving Twitch clips. It includes endpoints for adding, enabling, and disabling clips, as well as retrieving a list of all clips and their details.", "methods": ["GET", "POST"], "paths": ["/clips", "/clips/manage.html", "/clips/manage.js", "/clips/json", "/clips/delete", "/clips/enable", "/clips/add"]}}
{"file": "cloned/Twitch_Bot/web/routes/discord_webhooks.py", "endpoints": {"api_summary": "This API provides endpoints for managing Discord webhooks. It allows administrators to add, update, and delete webhooks, and provides a way to test webhook URLs.", "methods": ["GET", "POST"], "paths": ["/discord/webhook_manage", "/discord/webhook_manage.html", "/discord/webhook_manage.js", "/discord/webhook_manage/save"]}}
{"file": "cloned/Twitch_Bot/web/routes/auto_bahn.py", "endpoints": {"api_summary": "The Autoban API provides endpoints for managing bot regex patterns for auto-banning. It includes endpoints for enabling/disabling patterns, deleting patterns, and retrieving a list of all patterns.", "methods": ["GET", "POST"], "paths": ["/autoban", "/autoban/manage", "/autoban/manage.html", "/autoban/manage.js", "/autoban/manage/enable", "/autoban/manage/delete"]}}
{"file": "cloned/Twitch_Bot/web/routes/trivia.py", "endpoints": {"api_summary": "This API provides endpoints for playing trivia games, managing trivia questions, and displaying trivia results.", "methods": ["GET", "POST"], "paths": ["/trivia/play", "/trivia/play.html", "/trivia/play.js", "/trivia/play.css", "/trivia/sounds/{sound_id}", "/trivia/images/thumb-for-twitch", "/trivia/images/{image_id}", "/trivia/start", "/trivia/end", "/trivia/laptop-background-transparent.png", "/trivia/winners", "/trivia/winners.html", "/trivia/winners.css", "/trivia/winners.js", "/trivia/manage/", "/trivia/manage/upload", "/trivia/manage/download"]}}
{"file": "cloned/Twitch_Bot/web/routes/announcements.py", "endpoints": {"api_summary": "This API provides endpoints for managing announcements, including retrieving a list of announcements, enabling or disabling announcements, and updating the category of an announcement.", "methods": ["GET", "POST"], "paths": ["/announcements", "/announcements/enable", "/announcements/category"]}}
{"file": "cloned/Twitch_Bot/web/routes/docs.py", "endpoints": {"api_summary": "This API provides endpoints for user authentication and authorization, as well as documentation for the API itself.", "methods": ["POST", "GET"], "paths": ["/token", "/logout", "/login", "/openapi.json", "/docs"]}}
{"file": "cloned/Twitch_Bot/web/routes/poll_display.py", "endpoints": {"api_summary": "The API provides a poll display for users with the mod level of authentication. It also serves static files for the poll display, including CSS, JavaScript, and fonts.", "methods": ["GET"], "paths": ["/obs_poll", "/poll-display", "/poll.css", "/poll-mqtt-source.js", "/mononoki-Regular.woff2"]}}
{"file": "cloned/Twitch_Bot/web/routes/twitch_webhook.py", "endpoints": {"api_summary": "This API is a Twitch EventSub API that handles Twitch events such as follows, streams going live or offline, and channel raids. It also handles banning and unbanning users.", "methods": ["POST"], "paths": ["/twitch/eventsub/channel.follow", "/twitch/eventsub/stream.online", "/twitch/eventsub/stream.offline", "/twitch/eventsub/channel.raid", "/twitch/eventsub/channel.unban", "/twitch/eventsub/channel.ban"]}}
{"file": "cloned/Twitch_Bot/web/routes/send_command.py", "endpoints": {"api_summary": "This API allows for sending commands to a Twitch chat bot. It accepts a JSON payload with the command, arguments, and other options, and sends it to the bot for execution. The API also supports authentication and rate limiting.", "methods": ["POST"], "paths": ["/send_command"]}}
{"file": "cloned/Twitch_Bot/web/routes/send_message.py", "endpoints": {"api_summary": "This API endpoint allows for posting messages to a Twitch chat room. The endpoint requires an API key with admin level access and takes a JSON payload with a message field. The message will be sent to the Twitch chat room and the response will indicate whether the message was successfully sent.", "methods": ["POST"], "paths": ["/post_message"]}}
{"file": "cloned/Twitch_Bot/web/routes/dropbox.py", "endpoints": {"api_summary": "This API allows for the integration of Dropbox with the system. It provides endpoints for authenticating with Dropbox and retrieving an access token, as well as endpoints for managing the access token and refreshing it when it expires.", "methods": ["GET", "POST"], "paths": ["/dropbox", "/dropbox-response"]}}
{"file": "cloned/Twitch_Bot/web/routes/commands.py", "endpoints": {"api_summary": "This API provides a list of custom commands for a Twitch bot, along with their responses. It is designed for administrators to manage the bot's functionality.", "methods": ["GET"], "paths": ["/commands"]}}
{"file": "cloned/Twitch_Bot/web/routes/ignore.py", "endpoints": {"api_summary": "The API allows administrators to view and manage the ignore list for the web application. It provides a single endpoint for retrieving the list of ignored patterns, and allows for the creation, update, and deletion of ignore list entries.", "methods": ["GET"], "paths": ["/ignore"]}}
{"file": "cloned/Twitch_Bot/web/routes/topic.py", "endpoints": {"api_summary": "This API allows for the management of a topic in a Twitch chat room. It provides endpoints for retrieving the current topic and updating it with a new message.", "methods": ["GET", "POST"], "paths": ["/topic"]}}
{"file": "cloned/Twitch_Bot/web/routes/twitch_oauth.py", "endpoints": {"api_summary": "This API provides endpoints for managing Twitch OAuth tokens for IRC and PubSub. It includes endpoints for starting the OAuth flow, processing the OAuth response, and saving the tokens to the database.", "methods": ["GET", "POST"], "paths": ["/twitch/oauth", "/twitch/oauth.html", "/twitch/oauth.js", "/twitch/oauth/start/irc", "/twitch/oauth/start/pubsub", "/twitch/oauth/process.html", "/twitch/oauth/process.js", "/twitch/oauth/save"]}}
{"file": "cloned/fullstack-javascript-architecture/backend/api/src/setup/server/endpoint.js", "endpoints": {"api_summary": "This API endpoint allows for the execution of various operations on the server, such as retrieving data, updating data, or performing actions. The endpoint accepts a JSON payload with the operation to be executed, the parameters for the operation, and the authentication credentials. The endpoint returns a JSON response with the result of the operation, including the success status, message, and data.", "methods": ["ALL"], "paths": ["/api/endpoint"]}}
{"file": "cloned/fullstack-javascript-architecture/backend/api/src/setup/server/upload.js", "endpoints": {"api_summary": "This API allows for the uploading of files to the server, with the ability to resize images based on the type of file and the desired dimensions.", "methods": ["POST"], "paths": ["/uploads"]}}
{"file": "cloned/fullstack-javascript-architecture/backend/api/src/modules/note/query.js", "endpoints": {"api_summary": "This API provides endpoints for retrieving and managing notes. It allows users to retrieve a list of all their notes, retrieve a specific note by ID, and create, update, or delete a note.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/notes", "/notes/<noteId>"]}}
{"file": "cloned/fullstack-javascript-architecture/backend/api/src/modules/note/mutation.js", "endpoints": {"api_summary": "This API provides endpoints for creating and deleting notes. Notes are created with a user ID and a note text, and can be deleted by their ID. The API also includes validation rules for the note text and user ID.", "methods": ["POST", "DELETE"], "paths": ["/notes", "/notes/<noteId>"]}}
{"file": "cloned/fullstack-javascript-architecture/backend/api/src/modules/user/query.js", "endpoints": {"api_summary": "This API provides endpoints for user authentication and management, including login, logout, and user management for administrators.", "methods": ["GET", "POST"], "paths": ["/user/login", "/user/logout", "/user/list", "/user/dashboard/count"]}}
{"file": "cloned/fullstack-javascript-architecture/backend/api/src/modules/user/mutation.js", "endpoints": {"api_summary": "This API defines endpoints for user signup, profile update, and image change. It also includes email functionality for sending signup emails.", "methods": ["POST", "PUT", "PATCH"], "paths": ["/user/signup", "/user/profile", "/user/image"]}}
{"file": "cloned/fullstack-javascript-architecture/frontend/app/mobile/src/setup/routes/preLogin/index.js", "endpoints": {"api_summary": "The API provides endpoints for user authentication, including signup, login, and start. The endpoints are defined using the react-navigation-stack library and are used to navigate between different screens in the application.", "methods": ["GET", "POST"], "paths": ["/user/start", "/user/signup", "/user/login"]}}
{"file": "cloned/fullstack-javascript-architecture/frontend/app/mobile/src/setup/routes/postLogin/note.js", "endpoints": {"api_summary": "The Note API provides endpoints for managing notes, including listing, creating, and viewing details of notes. The API also supports pagination and filtering of notes.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/note", "/note/create", "/note/detail"]}}
{"file": "cloned/fullstack-javascript-architecture/frontend/app/mobile/src/setup/routes/postLogin/user.js", "endpoints": {"api_summary": "This API provides endpoints for user profile and help pages. The user profile endpoint allows users to view and edit their profile information, while the help endpoint provides a list of frequently asked questions and their answers.", "methods": ["GET", "POST"], "paths": ["/user", "/help"]}}
{"file": "cloned/fullstack-javascript-architecture/frontend/app/mobile/src/modules/note/api/actions/query.js", "endpoints": {"api_summary": "This API provides a list of notes and a detail view for each note. The API also includes caching and error handling.", "methods": ["GET", "POST"], "paths": ["/notes", "/notes/<noteId>"]}}
{"file": "cloned/fullstack-javascript-architecture/frontend/app/mobile/src/modules/note/api/actions/mutation.js", "endpoints": {"api_summary": "This API allows for the creation and deletion of notes. Notes can be created with the `create` endpoint and deleted with the `remove` endpoint. The API URL is defined in the `API_URL` environment variable.", "methods": ["POST"], "paths": ["/api/notes", "/api/notes/<noteId>"]}}
{"file": "cloned/fullstack-javascript-architecture/frontend/app/mobile/src/modules/user/api/actions/query.js", "endpoints": {"api_summary": "This API provides endpoints for user authentication, user list, and user detail. It also includes caching and error handling.", "methods": ["GET", "POST"], "paths": ["/user/login", "/user/logout", "/user/list", "/user/detail"]}}
{"file": "cloned/fullstack-javascript-architecture/frontend/app/mobile/src/modules/user/api/actions/mutation.js", "endpoints": {"api_summary": "This API provides endpoints for user signup, profile update, and image change. It uses the axios library to make HTTP requests to the API_URL endpoint.", "methods": ["POST"], "paths": ["/users", "/users/<built-in function id>", "/users/image"]}}
{"file": "cloned/fullstack-javascript-architecture/frontend/app/web/src/setup/routes/note.js", "endpoints": {"api_summary": "This API provides endpoints for creating and listing notes. The endpoints are protected by authentication and can be accessed by authorized users only.", "methods": ["GET", "POST"], "paths": ["/note/list", "/note/create"]}}
{"file": "cloned/fullstack-javascript-architecture/frontend/app/web/src/setup/routes/user.js", "endpoints": {"api_summary": "This API provides endpoints for user authentication and profile management. It includes endpoints for logging in, signing up, viewing the user profile, and accessing the user dashboard.", "methods": ["GET", "POST"], "paths": ["/user/login", "/user/signup", "/user/profile", "/user/dashboard"]}}
{"file": "cloned/fullstack-javascript-architecture/frontend/app/web/src/setup/routes/admin/user.js", "endpoints": {"api_summary": "The API provides a list of users for an admin user to view and manage. The API is authenticated and requires the admin role to access.", "methods": ["GET"], "paths": ["/admin/users"]}}
{"file": "cloned/fullstack-javascript-architecture/frontend/app/web/src/setup/routes/admin/dashboard.js", "endpoints": {"api_summary": "The admin dashboard API provides a set of endpoints for managing the admin dashboard, including retrieving the dashboard data and performing actions on the dashboard.", "methods": ["GET"], "paths": ["/admin/dashboard"]}}
{"file": "cloned/fullstack-javascript-architecture/frontend/app/web/src/modules/note/api/actions/query.js", "endpoints": {"api_summary": "This API provides a list of notes and a detail view for each note. The list endpoint returns a list of notes, and the detail endpoint returns a single note with the specified ID.", "methods": ["GET", "POST"], "paths": ["/notes", "/notes/<noteId>"]}}
{"file": "cloned/fullstack-javascript-architecture/frontend/app/web/src/modules/note/api/actions/mutation.js", "endpoints": {"api_summary": "This API allows for the creation and deletion of notes. Notes can be created with the `create` endpoint and deleted with the `remove` endpoint. The API URL is defined in the `API_URL` environment variable.", "methods": ["POST"], "paths": ["/api/notes"]}}
{"file": "cloned/fullstack-javascript-architecture/frontend/app/web/src/modules/user/api/actions/query.js", "endpoints": {"api_summary": "This API provides endpoints for user authentication, user data retrieval, and user data manipulation. It also includes endpoints for caching and local storage management.", "methods": ["GET", "POST"], "paths": ["/users", "/users/<built-in function id>", "/userList", "/userDashboardCount"]}}
{"file": "cloned/fullstack-javascript-architecture/frontend/app/web/src/modules/user/api/actions/mutation.js", "endpoints": {"api_summary": "This API provides endpoints for user signup, creation, updating, and removal. It also includes a helper function for creating or updating a user based on the presence of an ID.", "methods": ["POST"], "paths": ["/users", "/users/<built-in function id>"]}}
{"file": "cloned/Farmbot-Web-App/public/3D/lib/draco_wasm_wrapper.js", "endpoints": {"api_summary": "No REST API endpoints found in the code.", "methods": [], "paths": []}}
{"file": "cloned/Farmbot-Web-App/frontend/internal_urls.ts", "endpoints": {"api_summary": "This API defines a set of endpoints for a web application that allows users to manage their gardens and plants. It includes endpoints for managing plants, weeds, points, curves, sequences, regimens, events, sensors, photos, tools, messages, help, settings, and tours.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/app/designer", "/app/logs", "/app/plants", "/app/weeds", "/app/points", "/app/curves", "/app/sequences", "/app/regimens", "/app/events", "/app/sensors", "/app/photos", "/app/tools", "/app/messages", "/app/help", "/app/settings", "/app/tours"]}}
{"file": "cloned/Farmbot-Web-App/frontend/messages/actions.ts", "endpoints": {"api_summary": "This API provides endpoints for fetching and seeding account information. The fetch endpoint retrieves the current bulletin content for a given slug, while the seed endpoint seeds the account with a new product line.", "methods": ["GET", "POST"], "paths": ["/api/global_bulletin/<slug>", "/api/account/seed"]}}
{"file": "cloned/Farmbot-Web-App/frontend/wizard/data.ts", "endpoints": {"api_summary": "This file defines a set of REST API endpoints for a FarmBot setup wizard.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/v1/setup_wizard"]}}
{"file": "cloned/Farmbot-Web-App/frontend/api/delete_points.ts", "endpoints": {"api_summary": "This API defines endpoints for deleting points in a farmbot system. It allows users to delete points by name or by ID, and provides a progress callback for tracking the deletion process.", "methods": ["DELETE"], "paths": ["/points/search", "/points/<point_id>"]}}
{"file": "cloned/Farmbot-Web-App/frontend/api/api.ts", "endpoints": {"api_summary": "This API defines endpoints for various resources such as users, devices, peripherals, farm events, regimens, sequences, images, points, logs, webcam feed, web app config, firmware config, sensor readings, sensors, farmware envs, pin bindings, saved gardens, plant templates, telemetry, farmware installations, alerts, global bulletins, folders, releases, feedback, ai feedbacks, featured sequences, wizard step results, curves, and AI.", "methods": ["GET", "POST", "PUT", "PATCH", "DELETE"], "paths": ["/api/tokens/", "/api/password_resets/", "/api/device/", "/api/device/seed", "/api/device/reset", "/api/users/", "/api/users/control_certificate", "/api/users/resend_verification", "/api/peripherals/", "/api/farm_events/", "/api/regimens/", "/api/sequences/", "/api/sequence_versions/", "/api/tools/", "/api/images/", "/api/points/", "/api/point_groups/", "/api/points/?filter=all", "/api/points/search", "/api/logs/search", "/api/logs/", "/api/webcam_feeds/", "/api/web_app_config/", "/api/fbos_config/", "/api/firmware_config/", "/api/sensor_readings", "/api/sensors/", "/api/farmware_envs/", "/api/pin_bindings/", "/api/saved_gardens/", "/api/saved_gardens/snapshot", "/api/saved_gardens/:id/apply", "/api/export_data", "/api/plant_templates/", "/api/telemetries/", "/api/farmware_installations/", "/api/first_party_farmwares", "/api/alerts/", "/api/global_bulletins/", "/api/folders/", "/api/releases?platform=", "/api/feedback", "/api/ai_feedbacks", "/api/featured_sequences", "/api/wizard_step_results/", "/api/curves/", "/api/ai"]}}
{"file": "cloned/Farmbot-Web-App/frontend/sequences/actions.ts", "endpoints": {"api_summary": "This file defines a set of functions for working with sequences in a farmbot system. It includes functions for creating, editing, and deleting sequences, as well as functions for managing the active sequence and for publishing, unpublishing, and installing sequences.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/sequences", "/sequences/<sequence_id>", "/sequences/<sequence_id>/publish", "/sequences/<sequence_id>/unpublish", "/sequences/<sequence_id>/install", "/sequences/<sequence_id>/upgrade/<sequence_version_id>"]}}
{"file": "cloned/Farmbot-Web-App/frontend/sequences/__tests__/request_auto_generation_test.ts", "endpoints": {"api_summary": "This API is used for generating Lua code for FarmBot. It provides endpoints for requesting auto-generation of Lua code, retrieving prompts, and extracting Lua code from text.", "methods": ["GET", "POST"], "paths": ["/request_auto_generation", "/retrieve_prompt", "/extract_lua_code"]}}
{"file": "cloned/Farmbot-Web-App/frontend/settings/account/actions.ts", "endpoints": {"api_summary": "This API allows users to delete their account and reset their account information.", "methods": ["DELETE", "POST"], "paths": ["/users", "/account_reset"]}}
{"file": "cloned/Farmbot-Web-App/frontend/saved_gardens/actions.ts", "endpoints": {"api_summary": "This file defines endpoints for saving and applying gardens, as well as creating and copying saved gardens.", "methods": ["POST", "PATCH", "GET"], "paths": ["/snapshotPath", "/applyGardenPath", "/savedGardens", "/plants"]}}
{"file": "cloned/Farmbot-Web-App/frontend/saved_gardens/__tests__/actions_test.ts", "endpoints": {"api_summary": "This file defines endpoints for snapshotting and applying gardens, as well as creating, deleting, and copying saved gardens.", "methods": ["POST", "PATCH"], "paths": ["/api/snapshot", "/api/apply_garden", "/api/saved_gardens", "/api/saved_gardens/<id>", "/api/plant_templates"]}}
{"file": "cloned/GraphQL-Stack/mfe/mod-vue/src/router/index.js", "endpoints": {"api_summary": "This API provides a simple web application with two routes: a home page and an about page. The home page displays a list of users, and the about page provides information about the application.", "methods": ["GET", "POST"], "paths": ["/", "/about"]}}
{"file": "cloned/GraphQL-Stack/mbe/mod-express/src/core/router.js", "endpoints": {"api_summary": "The mod-express API provides a simple endpoint for retrieving a greeting message and a more complex endpoint for interacting with a hello world service.", "methods": ["GET", "POST"], "paths": ["/", "/hello-world"]}}
{"file": "cloned/GraphQL-Stack/mbe/mod-express/src/hello-world/index.js", "endpoints": {"api_summary": "This API provides a simple Hello World message and a method for adding two numbers using WebAssembly.", "methods": ["GET", "GET"], "paths": ["/", "/add"]}}
{"file": "cloned/GraphQL-Stack/mbe/mod-fastify/src/core/router.js", "endpoints": {"api_summary": "This API provides a simple endpoint for retrieving a greeting message and a more complex endpoint for interacting with a hello world service.", "methods": ["GET", "POST"], "paths": ["/", "/hello-world"]}}
{"file": "cloned/GraphQL-Stack/mbe/mod-fastify/src/hello-world/index.js", "endpoints": {"api_summary": "This API provides a simple Hello World message and a method for adding two numbers using WebAssembly.", "methods": ["GET", "GET"], "paths": ["/", "/add"]}}
{"file": "cloned/GraphQL-Stack/mbe/mod-koa/src/core/router.js", "endpoints": {"api_summary": "This API provides a simple endpoint for retrieving a greeting message and a more complex endpoint for managing user accounts.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/", "/hello", "/hello/<built-in function id>"]}}
{"file": "cloned/GraphQL-Stack/mbe/mod-koa/src/hello/index.js", "endpoints": {"api_summary": "This API provides a simple Hello World message and a method for adding two numbers using WebAssembly.", "methods": ["GET", "GET"], "paths": ["/", "/add"]}}
{"file": "cloned/GraphQL-Stack/mbe/mod-nest/src/app.controller.ts", "endpoints": {"api_summary": "The API provides a single endpoint for the root of the application, which returns a string representing the root of the application.", "methods": ["GET"], "paths": ["/"]}}
{"file": "cloned/GraphQL-Stack/mbe/mod-nest/src/hello-world/hello-world.controller.ts", "endpoints": {"api_summary": "The Hello World API provides a simple example of a RESTful API that returns a greeting message and performs a basic arithmetic operation. The API has two endpoints: one for retrieving the greeting message and another for performing the arithmetic operation.", "methods": ["GET", "GET"], "paths": ["/hello-world", "/hello-world/add"]}}
{"file": "cloned/micro-company/authserver/src/main/java/com/idugalic/authserver/AuthserverApplication.java", "endpoints": {"api_summary": "This API is an OAuth2 authorization server that provides authentication and authorization services for a web application. It supports various grant types, including authorization code, refresh token, client credentials, and password. The API also supports token revocation and token introspection.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/oauth/authorize", "/oauth/token", "/oauth/revoke", "/oauth/introspect"]}}
{"file": "cloned/micro-company/query-side-blog/src/main/java/com/idugalic/queryside/blog/repository/BlogPostRepository.java", "endpoints": {"api_summary": "The BlogPostRepository API provides a set of endpoints for querying and retrieving blog posts from a database. It includes endpoints for retrieving all blog posts, retrieving blog posts by category, retrieving blog posts by date, and retrieving a specific blog post by title or public slug.", "methods": ["GET", "POST"], "paths": ["/blogposts", "/blogposts/category", "/blogposts/date", "/blogposts/title", "/blogposts/publicSlug"]}}
{"file": "cloned/micro-company/command-side-project/src/main/java/com/idugalic/commandside/project/web/ProjectController.java", "endpoints": {"api_summary": "The ProjectController API allows for the creation and updating of projects. It accepts JSON requests and returns HTTP status codes to indicate success or failure. The API is secured using Spring Security and requires authentication.", "methods": ["POST", "PUT"], "paths": ["/projectcommands", "/projectcommands/{id}/updatecommand"]}}
{"file": "cloned/micro-company/command-side-blog/src/main/java/com/idugalic/commandside/blog/web/BlogController.java", "endpoints": {"api_summary": "The BlogController API allows for the creation and publishing of blog posts. It also provides endpoints for retrieving and updating blog post information.", "methods": ["POST", "GET", "PUT", "DELETE"], "paths": ["/blogpostcommands", "/blogpostcommands/{id}", "/blogpostcommands/{id}/publishcommand"]}}
{"file": "cloned/micro-company/monolithic/src/main/frontend/src/app/projects/projects-routing.module.ts", "endpoints": {"api_summary": "The Projects API provides endpoints for managing projects and their related data. It includes endpoints for creating, reading, updating, and deleting projects, as well as endpoints for retrieving lists of projects and project details.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/projects", "/projects/<id>", "/projects/action/new"]}}
{"file": "cloned/micro-company/monolithic/src/main/frontend/src/app/projects/shared/projects.service.ts", "endpoints": {"api_summary": "The ProjectsService API provides endpoints for retrieving and manipulating project data. It includes endpoints for getting a list of projects, getting a single project by ID, and adding a new project.", "methods": ["GET", "POST"], "paths": ["/api/projects", "/api/projects/<built-in function id>", "/api/projectcommands"]}}
{"file": "cloned/micro-company/monolithic/src/main/frontend/src/app/blog-posts/blog-posts-routing.module.ts", "endpoints": {"api_summary": "The BlogPosts API provides endpoints for managing blog posts, including listing, viewing, creating, and editing posts.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/blog", "/blog/action/new", "/blog/:id"]}}
{"file": "cloned/micro-company/monolithic/src/main/frontend/src/app/blog-posts/shared/blog-posts.service.ts", "endpoints": {"api_summary": "The BlogPostsService API provides endpoints for retrieving and manipulating blog posts. It includes endpoints for getting a list of all blog posts, getting a single blog post by ID, and adding a new blog post.", "methods": ["GET", "POST"], "paths": ["/api/blogposts", "/api/blogpostcommands"]}}
{"file": "cloned/lando-api/landoapi/dockerflow.py", "endpoints": {"api_summary": "This API provides endpoints for health checks and version information, which are used by the load balancer and other services to monitor the health and version of the application.", "methods": ["GET"], "paths": ["/__heartbeat__", "/__lbheartbeat__", "/__version__"]}}
{"file": "cloned/lando-api/landoapi/api/landing_jobs.py", "endpoints": {"api_summary": "This API provides endpoints for managing landing jobs, including retrieving the status of a landing job and updating the status of a landing job.", "methods": ["GET", "PUT"], "paths": ["/landing_jobs/<landing_job_id>", "/landing_jobs/<landing_job_id>/status"]}}
{"file": "cloned/lando-api/landoapi/api/uplift.py", "endpoints": {"api_summary": "This API allows for the creation and retrieval of uplift requests for a given repository and revision.", "methods": ["GET", "POST"], "paths": ["/uplift/repos", "/uplift/create"]}}
{"file": "cloned/lando-api/landoapi/api/diff_warnings.py", "endpoints": {"api_summary": "This API provides endpoints for creating, retrieving, and archiving warnings related to diffs in a revision.", "methods": ["POST", "GET", "DELETE"], "paths": ["/revisions/<revision_id>/diffs/<diff_id>/warnings", "/revisions/<revision_id>/diffs/<diff_id>/warnings/<pk>"]}}
{"file": "cloned/node-healthchecks-api/test/integration/service.js", "endpoints": {"api_summary": "This API provides endpoints for checking the health of a service and for performing a heavy operation that consumes CPU and memory resources.", "methods": ["GET"], "paths": ["/status", "/make-leak", "/heavy"]}}
{"file": "cloned/4A_ISA_TheCookieFactory/j2e/src/main/java/fr/unice/polytech/isa/tcf/webservice/CustomerCareService.java", "endpoints": {"api_summary": "The Customer Care Service API allows customers to register, track their orders, and list all available recipes. It also provides methods for handling exceptions related to already existing customers and unknown order IDs.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/register", "/track", "/listAllRecipes"]}}
{"file": "cloned/4A_ISA_TheCookieFactory/j2e/src/main/java/fr/unice/polytech/isa/tcf/webservice/CustomerCareServiceImpl.java", "endpoints": {"api_summary": "The Customer Care Service API provides endpoints for customer registration, order tracking, and recipe listing. It allows customers to register and manage their accounts, track the status of their orders, and browse the available recipes.", "methods": ["GET", "POST"], "paths": ["/register", "/track", "/listAllRecipes"]}}
{"file": "cloned/4A_ISA_TheCookieFactory/j2e/src/main/java/fr/unice/polytech/isa/tcf/webservice/CartWebService.java", "endpoints": {"api_summary": "The CartWebService API allows customers to add and remove items from their cart, view the contents of their cart, and validate their cart for payment. It also handles exceptions related to unknown customers, payment issues, and empty carts.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/cart/addItem", "/cart/removeItem", "/cart/getCartContents", "/cart/validate"]}}
{"file": "cloned/wellcomecollection.org/content/webapp/app.ts", "endpoints": {"api_summary": "This API defines a single endpoint for serving a RSS feed of stories from the Wellcome Collection website.", "methods": ["GET"], "paths": ["/rss"]}}
{"file": "cloned/wellcomecollection.org/content/webapp/next.config.js", "endpoints": {"api_summary": "The Content API provides endpoints for managing and retrieving content, including healthchecks, newsletter signups, and image and download management.", "methods": ["GET", "POST"], "paths": ["/content/management/healthcheck", "/newsletter-signup", "/content/management/healthcheck", "/:path*", "/download", "/image"]}}
{"file": "cloned/wellcomecollection.org/content/webapp/pages/api/newsletter-signup.ts", "endpoints": {"api_summary": "This API endpoint allows users to subscribe to the newsletter by providing their email address and marketing preferences. The endpoint also handles resubscription of suppressed email addresses.", "methods": ["POST"], "paths": ["/api/newsletter"]}}
{"file": "cloned/wellcomecollection.org/content/webapp/pages/api/exhibitions-related-content/index.ts", "endpoints": {"api_summary": "This API endpoint retrieves related content for an exhibition based on the provided parameters. It accepts a JSON object with the exhibition ID and returns a JSON object with the related content.", "methods": ["GET"], "paths": ["/exhibitions/<exhibitionId>/related-content"]}}
{"file": "cloned/wellcomecollection.org/content/webapp/pages/api/exhibitions/exhibition.ts", "endpoints": {"api_summary": "This API endpoint allows clients to retrieve information about exhibitions from the Wellcome Collection website. It takes a JSON object as input, containing an ID for the exhibition, and returns a JSON object with the exhibition details.", "methods": ["GET"], "paths": ["/api/exhibitions/<id>"]}}
{"file": "cloned/wellcomecollection.org/content/webapp/pages/api/exhibitions/index.ts", "endpoints": {"api_summary": "This API endpoint allows clients to retrieve information about exhibitions from the Wellcome Collection website. It accepts a JSON object as a query parameter and returns a JSON object with the results of the query.", "methods": ["GET"], "paths": ["/api/exhibitions"]}}
{"file": "cloned/wellcomecollection.org/content/webapp/pages/api/prismic/works.ts", "endpoints": {"api_summary": "The Works API provides a list of works from the Wellcome Collection catalogue, with information on physical description, description, and image URL. The API also includes a custom format for the response to be compatible with Prismic's integration field.", "methods": ["GET"], "paths": ["/works"]}}
{"file": "cloned/wellcomecollection.org/content/webapp/pages/api/events/index.ts", "endpoints": {"api_summary": "This API endpoint allows clients to retrieve a list of events from the Prismic content repository. The endpoint accepts a JSON object as a query parameter, which is used to filter and sort the events. The response is a JSON object containing the list of events, with each event represented as a JSON object with various properties.", "methods": ["GET"], "paths": ["/api/events"]}}
{"file": "cloned/wellcomecollection.org/content/webapp/pages/api/articles/index.ts", "endpoints": {"api_summary": "This API provides a way to fetch articles from a Prismic repository and transform them into a standardized format. It accepts a JSON object as input, which contains the parameters for the query, and returns a JSON object with the transformed articles.", "methods": ["GET"], "paths": ["/api/articles"]}}
{"file": "cloned/wellcomecollection.org/content/webapp/services/prismic/fetch/events.ts", "endpoints": {"api_summary": "This API defines a set of endpoints for fetching events and event-related data from a Prismic repository. It includes endpoints for fetching individual events, event schedules, and event series, as well as a query endpoint for retrieving a list of events based on various filters and parameters.", "methods": ["GET"], "paths": ["/events", "/events/<id>", "/events/schedule", "/events/series"]}}
{"file": "cloned/wellcomecollection.org/content/webapp/services/prismic/fetch/exhibitions.ts", "endpoints": {"api_summary": "This API defines endpoints for fetching exhibitions, exhibition-related content, and related guides.", "methods": ["GET"], "paths": ["/exhibitions", "/exhibitions/<id>", "/exhibitions/related-content"]}}
{"file": "cloned/wellcomecollection.org/content/webapp/services/prismic/fetch/index.ts", "endpoints": {"api_summary": "This file defines a Prismic client for fetching data from the Prismic API. It includes functions for fetching data by ID, type, and UID, as well as a function for fetching data from the client-side API.", "methods": ["GET"], "paths": ["/api/articles", "/api/events", "/api/exhibitions", "/api/books", "/api/articles/<id>", "/api/events/<id>", "/api/exhibitions/<id>", "/api/books/<id>"]}}
{"file": "cloned/wellcomecollection.org/content/webapp/services/prismic/transformers/exhibitions.ts", "endpoints": {"api_summary": "This API defines a set of endpoints for retrieving and manipulating exhibition data, including exhibitions, exhibits, and related content.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/exhibitions", "/exhibitions/<id>", "/exhibits", "/exhibits/<id>", "/related-content", "/related-content/<id>"]}}
{"file": "cloned/wellcomecollection.org/content/webapp/services/wellcome/catalogue/images.ts", "endpoints": {"api_summary": "The API allows for querying and retrieving images from the Wellcome Collection catalogue. It supports various parameters for filtering and including related data, such as subjects, contributors, and languages.", "methods": ["GET"], "paths": ["/images", "/images/<id>"]}}
{"file": "cloned/wellcomecollection.org/content/webapp/services/wellcome/catalogue/works.ts", "endpoints": {"api_summary": "The API defined in this file retrieves information about works from the Wellcome Collection catalogue. It includes endpoints for retrieving a list of works, retrieving a single work by ID, and retrieving the items associated with a work.", "methods": ["GET"], "paths": ["/works", "/works/<id>", "/works/items/<id>"]}}
{"file": "cloned/wellcomecollection.org/content/webapp/services/wellcome/content/events.ts", "endpoints": {"api_summary": "The API provides a list of events from the Wellcome Collection, including details such as the event name, description, and location. It also allows users to search for events by keyword or date.", "methods": ["GET"], "paths": ["/events"]}}
{"file": "cloned/wellcomecollection.org/content/webapp/services/wellcome/content/articles.ts", "endpoints": {"api_summary": "The API provides a list of articles from the Wellcome Collection, with the ability to filter and sort the results.", "methods": ["GET"], "paths": ["/articles"]}}
{"file": "cloned/wellcomecollection.org/content/webapp/services/wellcome/content/article.ts", "endpoints": {"api_summary": "The API provides a single endpoint for retrieving an article by its ID. The endpoint returns an Article object or a WellcomeApiError if the article is not found.", "methods": ["GET"], "paths": ["/articles/<built-in function id>"]}}
{"file": "cloned/wellcomecollection.org/cache/edge_lambdas/src/redirector.test.ts", "endpoints": {"api_summary": "This API handles redirects for the Wellcome Collection website. It can redirect requests for articles, exhibitions, and other pages, and can also redirect requests with specific query parameters.", "methods": ["GET"], "paths": ["/articles/<article_id>", "/exhibitions/<exhibition_id>", "/<page_name>"]}}
{"file": "cloned/wellcomecollection.org/playwright/test/concept.test.ts", "endpoints": {"api_summary": "This API provides information about concepts, including works and images associated with them. It also provides links to filtered searches for works and images.", "methods": ["GET"], "paths": ["/concepts/<concept_id>", "/concepts/<concept_id>/works", "/concepts/<concept_id>/images"]}}
{"file": "cloned/wellcomecollection.org/playwright/test/search-works.test.ts", "endpoints": {"api_summary": "This API is a search engine for works, with filters for formats, dates, and contributors. It also allows for sorting by production dates.", "methods": ["GET", "POST"], "paths": ["/search/works", "/search/works?query=<query>", "/search/works?query=<query>&workType=<workType>", "/search/works?query=<query>&workType=<workType>&page=<page>"]}}
{"file": "cloned/wellcomecollection.org/playwright/test/search-all.test.ts", "endpoints": {"api_summary": "This API allows users to search for works, images, and other content on the website. It also provides functionality for pagination and error handling.", "methods": ["GET", "POST"], "paths": ["/search", "/search/works", "/search/images", "/search/<work_id>", "/search/<image_id>"]}}
{"file": "cloned/wellcomecollection.org/playwright/test/mocks/one-schedule-item.ts", "endpoints": {"api_summary": "This API defines a single endpoint for retrieving a schedule item from a Prismic repository.", "methods": ["GET"], "paths": ["/schedule/<id>"]}}
{"file": "cloned/wellcomecollection.org/updown/updown-checks.ts", "endpoints": {"api_summary": "This API defines a set of endpoints for checking the health of various services, including the Wellcome Collection website and API, as well as third-party services such as DLCS and Wellcome Images.", "methods": ["GET"], "paths": ["/health", "/works/<id>", "/images/<id>", "/catalogue/v2/works/<id>", "/catalogue/v2/images/<id>", "/assets/icons/favicon-16x16.png", "/dlcs/health", "/wellcomeimages/indexplus/image/<id>.html"]}}
{"file": "cloned/wellcomecollection.org/identity/webapp/app.ts", "endpoints": {"api_summary": "This API is a Next.js application that serves a single page application. It has a healthcheck endpoint for the load balancer and a catch-all endpoint for all other requests.", "methods": ["GET", "POST"], "paths": ["/management/healthcheck", "(.*)"]}}
{"file": "cloned/wellcomecollection.org/identity/webapp/hooks/useRequestDelete.ts", "endpoints": {"api_summary": "The API allows users to request their account deletion by providing their password and confirming the request. The API returns a success or error message based on the request.", "methods": ["PUT"], "paths": ["/account/api/users/me/deletion-request"]}}
{"file": "cloned/wellcomecollection.org/identity/webapp/test/mocks/handlers.ts", "endpoints": {"api_summary": "This API provides endpoints for managing user accounts, including creating new users, retrieving user information, updating user details, and deleting user accounts. It also provides endpoints for managing item requests and authentication.", "methods": ["POST", "GET", "PUT", "DELETE"], "paths": ["/account/api/user/create", "/account/api/users/:userId", "/account/api/auth/me", "/account/api/users/:userId/password", "/account/api/users/:userId/deletion-request", "/account/api/users/:userId/item-requests"]}}
{"file": "cloned/wellcomecollection.org/identity/webapp/pages/api/registration.ts", "endpoints": {"api_summary": "This API endpoint is responsible for handling user registration and updating user information. It uses the Auth0 authentication service and the WeCo identity API to manage user accounts and retrieve user data.", "methods": ["POST"], "paths": ["/users/<built-in function id>"]}}
{"file": "cloned/wellcomecollection.org/common/services/prismic/link-resolver.test.ts", "endpoints": {"api_summary": "This API resolves URLs for various types of documents in a Prismic repository, including articles, webcomics, and exhibitions. It also supports highlight tours and related documents.", "methods": ["GET"], "paths": ["/stories/1", "/books/1", "/events/1", "/event-series/1", "/exhibitions/1", "/guides/exhibitions/1", "/guides/exhibitions/1/captions-and-transcripts", "/guides/exhibitions/1/audio-without-descriptions", "/guides/exhibitions/1/bsl", "/exhibitions/1", "/1", "/about-us/1", "/projects/1", "/seasons/1", "/visual-stories/1", "/exhibitions/hard-graft-work-health-and-rights/visual-stories", "/visual-stories/1"]}}
{"file": "cloned/hubcare-api/hubcare/hubcare_api/hubcare_api/urls.py", "endpoints": {"api_summary": "The Hubcare API provides a RESTful interface for retrieving and manipulating data related to GitHub repositories. It allows users to retrieve information about repository indicators, such as the number of stars, forks, and watchers, and provides a way to authenticate requests using a token.", "methods": ["GET"], "paths": ["/hubcare_indicators/<owner>/<repo>/<token_auth>/"]}}
{"file": "cloned/hubcare-api/hubcare/hubcare_api/hubcare_api/views.py", "endpoints": {"api_summary": "This API provides information about a repository's health and activity, including metrics for issues, community, commits, and pull requests. It also provides graphs for commit and pull request activity.", "methods": ["GET", "POST", "PUT"], "paths": ["/<owner>/<repo>/<token_auth>/", "/<owner>/<repo>/<token_auth>/<request_type>"]}}
{"file": "cloned/hubcare-api/hubcare/repository/repository/urls.py", "endpoints": {"api_summary": "The repository API allows users to interact with a repository, including creating, updating, and deleting repository metadata and content. The API also provides endpoints for managing repository permissions and collaborators.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/repository/repository/<str:owner>/<str:repo>/<str:token_auth>/"]}}
{"file": "cloned/hubcare-api/hubcare/repository/repository/views.py", "endpoints": {"api_summary": "The Repository API allows you to check the existence of a repository and the last time it was updated, as well as add, update, and retrieve information about repositories.", "methods": ["GET", "POST", "PUT"], "paths": ["/repositories/<owner>/<repo>", "/repositories"]}}
{"file": "cloned/hubcare-api/hubcare/metrics/pull_request_metrics/pull_request_metrics/urls.py", "endpoints": {"api_summary": "The pull_request_metrics API provides endpoints for managing pull requests and their associated metrics. It includes endpoints for creating, updating, and retrieving pull requests, as well as endpoints for calculating and retrieving metrics related to pull requests.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/pull_request/admin/", "/pull_request/acceptance_quality/"]}}
{"file": "cloned/hubcare-api/hubcare/metrics/pull_request_metrics/acceptance_quality/urls.py", "endpoints": {"api_summary": "This API provides a single endpoint for retrieving the quality of a pull request in a GitHub repository. The endpoint accepts a token authentication parameter and returns a JSON object with the quality score and other relevant information.", "methods": ["GET"], "paths": ["/<owner>/<repo>/<token_auth>/"]}}
{"file": "cloned/hubcare-api/hubcare/metrics/pull_request_metrics/acceptance_quality/views.py", "endpoints": {"api_summary": "This API provides information about the quality of pull requests from a repository.", "methods": ["GET", "POST", "PUT"], "paths": ["/pull_request_quality/<owner>/<repo>/<token_auth>"]}}
{"file": "cloned/hubcare-api/hubcare/metrics/commit_metrics/commit_metrics/urls.py", "endpoints": {"api_summary": "The commits API provides endpoints for managing commits, commit months, and contributors. It includes endpoints for creating, reading, updating, and deleting commits, as well as endpoints for retrieving commit months and contributors.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/commit/admin/", "/commit/commit_month/", "/commit/contributors/"]}}
{"file": "cloned/hubcare-api/hubcare/metrics/commit_metrics/commit_month/urls.py", "endpoints": {"api_summary": "The API allows users to retrieve commit data for a specific repository and owner. It uses a token authentication mechanism to ensure secure access to the data.", "methods": ["GET"], "paths": ["/<owner>/<repo>/<token_auth>"]}}
{"file": "cloned/hubcare-api/hubcare/metrics/commit_metrics/commit_month/views.py", "endpoints": {"api_summary": "The CommitMonth API allows users to retrieve and update the number of commits made to a repository in the last month. It also provides a high-level summary of the API and its endpoints.", "methods": ["GET", "POST", "PUT"], "paths": ["/commit_month/<owner>/<repo>/<token_auth>", "/commit_month/<owner>/<repo>/<token_auth>/commits_by_week"]}}
{"file": "cloned/hubcare-api/hubcare/metrics/commit_metrics/contributors/urls.py", "endpoints": {"api_summary": "The API allows users to retrieve information about the contributors of a specific repository on GitHub. It uses a token authentication mechanism to ensure secure access to the data.", "methods": ["GET"], "paths": ["/<owner>/<repo>/<token_auth>/"]}}
{"file": "cloned/hubcare-api/hubcare/metrics/commit_metrics/contributors/views.py", "endpoints": {"api_summary": "This API endpoint retrieves the number of different authors from a repository using the GitHub API for the last 14 days and returns the total sum. It also allows for creating, updating, and retrieving the data.", "methods": ["GET", "POST", "PUT"], "paths": ["/differents_authors/<owner>/<repo>/<token_auth>"]}}
{"file": "cloned/hubcare-api/hubcare/metrics/issue_metrics/activity_rate/urls.py", "endpoints": {"api_summary": "The API allows users to retrieve and modify activity rate issues for a specific repository. It uses HTTP methods GET and POST to retrieve and update the issues, respectively.", "methods": ["GET", "POST"], "paths": ["/<owner>/<repo>/<token_auth>/"]}}
{"file": "cloned/hubcare-api/hubcare/metrics/issue_metrics/activity_rate/views.py", "endpoints": {"api_summary": "The ActivityRateIssue API allows users to retrieve and update the activity rate of a repository's issues. It also provides a method to calculate the activity rate based on the number of open and active issues.", "methods": ["GET", "POST", "PUT"], "paths": ["/activity_rate/<owner>/<repo>/<token_auth>", "/activity_rate/<owner>/<repo>/<token_auth>/<id>"]}}
{"file": "cloned/hubcare-api/hubcare/metrics/issue_metrics/help_wanted/urls.py", "endpoints": {"api_summary": "The Help Wanted API allows users to create and manage help wanted listings for their repositories. It provides endpoints for creating, updating, and deleting listings, as well as for retrieving and searching for listings.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/help-wanted/<owner>/<repo>/<token_auth>/listings/", "/help-wanted/<owner>/<repo>/<token_auth>/listings/<listing_id>/"]}}
{"file": "cloned/hubcare-api/hubcare/metrics/issue_metrics/help_wanted/views.py", "endpoints": {"api_summary": "The Help Wanted API provides information about the help wanted issue rate for a given repository. It allows users to create, update, and retrieve help wanted objects, which contain information about the total number of issues, the number of help wanted issues, and the help wanted rate.", "methods": ["GET", "POST", "PUT"], "paths": ["/help_wanted/<owner>/<repo>", "/help_wanted/<owner>/<repo>/<id>"]}}
{"file": "cloned/hubcare-api/hubcare/metrics/issue_metrics/good_first_issue/urls.py", "endpoints": {"api_summary": "The Good First Issue API allows users to retrieve a list of good first issues for a given repository. The API takes in the owner, repository, and token_auth as parameters and returns a list of issues that are suitable for new contributors.", "methods": ["GET"], "paths": ["/good_first_issue/<owner>/<repo>/<token_auth>/"]}}
{"file": "cloned/hubcare-api/hubcare/metrics/issue_metrics/good_first_issue/views.py", "endpoints": {"api_summary": "The Good First Issue API provides information about good first issues in a repository, including the total number of issues and the number of issues with the good first issue label.", "methods": ["GET", "POST", "PUT"], "paths": ["/good-first-issue/<owner>/<repo>", "/good-first-issue/<owner>/<repo>/<token_auth>"]}}
{"file": "cloned/hubcare-api/hubcare/metrics/issue_metrics/issue_metrics/urls.py", "endpoints": {"api_summary": "The issue_metrics API provides endpoints for retrieving and manipulating issue metrics for a repository. It includes endpoints for retrieving good first issues, help wanted issues, and activity rates for the repository.", "methods": ["GET", "POST"], "paths": ["/issue/good_first_issue/", "/issue/help_wanted/", "/issue/activity_rate/"]}}
{"file": "cloned/hubcare-api/hubcare/metrics/community_metrics/description/urls.py", "endpoints": {"api_summary": "The API allows users to retrieve information about a repository's description, including the owner, repository name, and token authentication.", "methods": ["GET"], "paths": ["/<owner>/<repo>/<token_auth>/"]}}
{"file": "cloned/hubcare-api/hubcare/metrics/community_metrics/description/views.py", "endpoints": {"api_summary": "This API allows for the management of descriptions for GitHub repositories. It provides endpoints for creating, updating, and retrieving descriptions, as well as checking if a repository has a description.", "methods": ["GET", "POST", "PUT"], "paths": ["/description/<owner>/<repo>", "/description/<owner>/<repo>/<token_auth>"]}}
{"file": "cloned/hubcare-api/hubcare/metrics/community_metrics/readme/urls.py", "endpoints": {"api_summary": "The API allows users to retrieve the README file for a specific repository. The API takes in the owner, repository, and token_auth as parameters and returns the README file in the response.", "methods": ["GET"], "paths": ["/<owner>/<repo>/<token_auth>/"]}}
{"file": "cloned/hubcare-api/hubcare/metrics/community_metrics/readme/views.py", "endpoints": {"api_summary": "The Readme API allows you to create, update, and retrieve readme files for GitHub repositories. It also provides information about whether a repository has a readme file or not.", "methods": ["GET", "POST", "PUT"], "paths": ["/readme/<owner>/<repo>/<token_auth>", "/readme/<owner>/<repo>/<token_auth>/create", "/readme/<owner>/<repo>/<token_auth>/update"]}}
{"file": "cloned/hubcare-api/hubcare/metrics/community_metrics/license/urls.py", "endpoints": {"api_summary": "The API allows users to retrieve information about licenses for a specific repository. It takes in the owner, repository, and token_auth as parameters and returns a JSON object with the license information.", "methods": ["GET"], "paths": ["/<owner>/<repo>/<token_auth>/"]}}
{"file": "cloned/hubcare-api/hubcare/metrics/community_metrics/license/views.py", "endpoints": {"api_summary": "The License API allows you to retrieve and update license information for a specific repository. It also provides a way to create a new license object if one does not exist for the repository.", "methods": ["GET", "POST", "PUT"], "paths": ["/license/<owner>/<repo>", "/license/<owner>/<repo>/<token_auth>"]}}
{"file": "cloned/hubcare-api/hubcare/metrics/community_metrics/contribution_guide/urls.py", "endpoints": {"api_summary": "The Contribution Guide API provides a way for users to access and interact with the contribution guide for a specific repository. It allows users to retrieve the contribution guide for a repository and perform actions such as creating, updating, and deleting contribution guide entries.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/<owner>/<repo>/<token_auth>/contribution-guide/"]}}
{"file": "cloned/hubcare-api/hubcare/metrics/community_metrics/contribution_guide/views.py", "endpoints": {"api_summary": "The Contribution Guide API allows you to retrieve and update the contribution guide for a repository. It also allows you to check if a repository has a contribution guide.", "methods": ["GET", "POST", "PUT"], "paths": ["/contribution-guide/<owner>/<repo>", "/contribution-guide/<owner>/<repo>/<token_auth>"]}}
{"file": "cloned/hubcare-api/hubcare/metrics/community_metrics/community_metrics/urls.py", "endpoints": {"api_summary": "The community_metrics API provides endpoints for managing community metrics, including code of conduct, contribution guide, issue template, license, pull request template, release note, readme, and description.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/community/code_of_conduct/", "/community/contribution_guide/", "/community/issue_template/", "/community/license/", "/community/pull_request_template/", "/community/release_note/", "/community/readme/", "/community/description/"]}}
{"file": "cloned/hubcare-api/hubcare/metrics/community_metrics/release_note/urls.py", "endpoints": {"api_summary": "The API allows users to retrieve release notes for a specific repository. It takes in the owner, repository, and token authentication as parameters and returns the release notes in JSON format.", "methods": ["GET"], "paths": ["/<owner>/<repo>/<token_auth>/"]}}
{"file": "cloned/hubcare-api/hubcare/metrics/community_metrics/release_note/views.py", "endpoints": {"api_summary": "The Release Note API allows you to check if a repository has a release note and retrieve the release note if it exists. You can also create or update a release note for a repository.", "methods": ["GET", "POST", "PUT"], "paths": ["/release-note/<owner>/<repo>/<token_auth>", "/release-note/<owner>/<repo>/<token_auth>/<id>"]}}
{"file": "cloned/hubcare-api/hubcare/metrics/community_metrics/pull_request_template/urls.py", "endpoints": {"api_summary": "The API allows users to retrieve pull request templates for a specific repository. It takes in the owner, repository, and token authentication as parameters and returns the pull request template for the specified repository.", "methods": ["GET"], "paths": ["/<owner>/<repo>/<token_auth>/"]}}
{"file": "cloned/hubcare-api/hubcare/metrics/community_metrics/pull_request_template/views.py", "endpoints": {"api_summary": "This API provides endpoints for managing pull request templates in a GitHub repository. It allows for creating, updating, and retrieving pull request templates, as well as checking the existence of a pull request template in a repository.", "methods": ["GET", "POST", "PUT"], "paths": ["/pull_request_template/<owner>/<repo>/<token_auth>", "/pull_request_template/<owner>/<repo>/<token_auth>/<id>"]}}
{"file": "cloned/hubcare-api/hubcare/metrics/community_metrics/issue_template/urls.py", "endpoints": {"api_summary": "The API allows users to create, read, update, and delete issue templates for their repositories. It also allows users to list all issue templates for a given repository.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/<owner>/<repo>/<token_auth>/issue_templates/", "/<owner>/<repo>/<token_auth>/issue_templates/<template_id>"]}}
{"file": "cloned/hubcare-api/hubcare/metrics/community_metrics/issue_template/views.py", "endpoints": {"api_summary": "The IssueTemplate API allows you to create, update, and retrieve issue templates for GitHub repositories. It also provides a way to check if a repository has an issue template.", "methods": ["GET", "POST", "PUT"], "paths": ["/issue_template/<owner>/<repo>/<token_auth>", "/issue_template/<owner>/<repo>/<token_auth>/create", "/issue_template/<owner>/<repo>/<token_auth>/update"]}}
{"file": "cloned/hubcare-api/hubcare/metrics/community_metrics/code_of_conduct/urls.py", "endpoints": {"api_summary": "The Code of Conduct API provides a way for users to retrieve and manage the code of conduct for their repositories. It allows users to create, update, and delete code of conducts, as well as retrieve the current code of conduct for a repository.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/<owner>/<repo>/<token_auth>/code_of_conduct/"]}}
{"file": "cloned/hubcare-api/hubcare/metrics/community_metrics/code_of_conduct/views.py", "endpoints": {"api_summary": "This API provides information about the code of conduct for a given GitHub repository. It allows for creating, updating, and retrieving code of conduct information for a repository.", "methods": ["GET", "POST", "PUT"], "paths": ["/code_of_conduct/<owner>/<repo>", "/code_of_conduct/<owner>/<repo>/<id>"]}}
{"file": "cloned/million-song-library/server/node_modules/ono/dist/ono.min.js", "endpoints": {"api_summary": "This file defines a REST API endpoint for handling errors.", "methods": ["GET", "POST"], "paths": ["/errors"]}}
{"file": "cloned/million-song-library/server/node_modules/swagger-parser/lib/index.js", "endpoints": {"api_summary": "This file defines a Swagger API parser that can parse, dereference, and validate Swagger API definitions. It also includes methods for traversing and validating the API.", "methods": ["GET", "POST", "PUT", "PATCH", "DELETE"], "paths": ["/users", "/users/<built-in function id>"]}}
{"file": "cloned/million-song-library/docs/styleguide/public/less.js", "endpoints": {"api_summary": "This code defines a REST API with the following endpoints:", "methods": ["GET", "POST"], "paths": ["/users", "/users/<built-in function id>"]}}
{"file": "cloned/million-song-library/docs/esdocs/script/search_index.js", "endpoints": {"api_summary": "This file defines the following REST API endpoints:", "endpoints": [{"path": "/albums", "methods": ["GET", "POST"], "description": "Get a list of all albums or create a new album."}, {"path": "/albums/{id}", "methods": ["GET", "PUT", "DELETE"], "description": "Get, update, or delete an album by ID."}, {"path": "/artists", "methods": ["GET", "POST"], "description": "Get a list of all artists or create a new artist."}, {"path": "/artists/{id}", "methods": ["GET", "PUT", "DELETE"], "description": "Get, update, or delete an artist by ID."}, {"path": "/songs", "methods": ["GET", "POST"], "description": "Get a list of all songs or create a new song."}, {"path": "/songs/{id}", "methods": ["GET", "PUT", "DELETE"], "description": "Get, update, or delete a song by ID."}]}}
{"file": "cloned/multicloud-k8s/kud/tests/generic_simulator/generic_sim.py", "endpoints": {"api_summary": "This API provides a mock implementation of a RESTful API, allowing developers to test their applications without needing to connect to a real API. It supports GET, POST, PUT, DELETE, and PATCH methods and returns a JSON response with a 200 status code.", "methods": ["GET", "POST", "PUT", "DELETE", "PATCH"], "paths": ["/", "/<built-in function id>"]}}
{"file": "cloned/multicloud-k8s/src/dcm/api/api.go", "endpoints": {"api_summary": "This API provides endpoints for managing logical clouds, clusters, user permissions, quotas, and key-value pairs in a multi-cloud environment.", "methods": ["POST", "GET", "PUT", "DELETE"], "paths": ["/v2/projects/{project-name}/logical-clouds", "/v2/projects/{project-name}/logical-clouds/{logical-cloud-name}", "/v2/projects/{project-name}/logical-clouds/{logical-cloud-name}/cluster-references", "/v2/projects/{project-name}/logical-clouds/{logical-cloud-name}/cluster-references/{cluster-reference}", "/v2/projects/{project-name}/logical-clouds/{logical-cloud-name}/cluster-references/{cluster-reference}/kubeconfig", "/v2/projects/{project-name}/logical-clouds/{logical-cloud-name}/user-permissions", "/v2/projects/{project-name}/logical-clouds/{logical-cloud-name}/user-permissions/{permission-name}", "/v2/projects/{project-name}/logical-clouds/{logical-cloud-name}/cluster-quotas", "/v2/projects/{project-name}/logical-clouds/{logical-cloud-name}/cluster-quotas/{quota-name}", "/v2/projects/{project-name}/logical-clouds/{logical-cloud-name}/kv-pairs", "/v2/projects/{project-name}/logical-clouds/{logical-cloud-name}/kv-pairs/{kv-pair-name}"]}}
{"file": "cloned/multicloud-k8s/src/dcm/api/keyValueHandler.go", "endpoints": {"api_summary": "This API provides CRUD operations for key-value pairs in a database.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/v1/projects/{project-name}/logical-clouds/{logical-cloud-name}/kv-pairs", "/api/v1/projects/{project-name}/logical-clouds/{logical-cloud-name}/kv-pairs/{kv-pair-name}"]}}
{"file": "cloned/multicloud-k8s/src/dcm/api/userPermissionsHandler.go", "endpoints": {"api_summary": "The UserPermission API provides endpoints for managing user permissions in a multi-cloud environment. It allows for the creation, retrieval, update, and deletion of user permissions, as well as listing all user permissions for a given project and logical cloud.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/user-permissions", "/user-permissions/<permission-name>", "/user-permissions/<project-name>/<logical-cloud-name>", "/user-permissions/<project-name>/<logical-cloud-name>/<permission-name>"]}}
{"file": "cloned/multicloud-k8s/src/dcm/api/clusterHandler.go", "endpoints": {"api_summary": "The Cluster API provides a way to manage clusters in a logical cloud. It allows for the creation, retrieval, update, and deletion of cluster references, as well as the retrieval of kubeconfig files for clusters.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/cluster", "/cluster/<cluster-reference>", "/cluster/<cluster-reference>/config"]}}
{"file": "cloned/multicloud-k8s/src/dcm/api/quotaHandler.go", "endpoints": {"api_summary": "The API provides CRUD operations for managing quotas in a multi-cloud environment. It allows users to create, retrieve, update, and delete quotas for different projects and logical clouds.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/projects/{project-name}/logical-clouds/{logical-cloud-name}/quotas", "/projects/{project-name}/logical-clouds/{logical-cloud-name}/quotas/{quota-name}"]}}
{"file": "cloned/multicloud-k8s/src/inventory/api/aaipushapi_test.go", "endpoints": {"api_summary": "This API is used to manage vservers and vf-modules in the ONAP inventory. It provides endpoints for creating, updating, and retrieving vservers and vf-modules, as well as endpoints for linking vservers to vf-modules.", "methods": ["PUT", "GET"], "paths": ["/cloud-region/<cloud-owner>/<cloud-region>/tenants/tenant/<tenant-id>/vservers/vserver/<vserver-name>", "/cloud-region/<cloud-owner>/<cloud-region>/tenants/tenant/<tenant-id>/vf-modules/vf-module/<vfm-id>"]}}
{"file": "cloned/multicloud-k8s/src/ncm/api/api.go", "endpoints": {"api_summary": "The API provides endpoints for managing network and provider networks, as well as scheduling and status information for clusters.", "methods": ["POST", "GET", "PUT", "DELETE"], "paths": ["/v2/cluster-providers/{provider-name}/clusters/{cluster-name}/networks", "/v2/cluster-providers/{provider-name}/clusters/{cluster-name}/provider-networks", "/v2/cluster-providers/{cluster-provider}/clusters/{cluster}/apply", "/v2/cluster-providers/{cluster-provider}/clusters/{cluster}/terminate", "/v2/cluster-providers/{cluster-provider}/clusters/{cluster}/status"]}}
{"file": "cloned/multicloud-k8s/src/ncm/api/schedulerhandler.go", "endpoints": {"api_summary": "The API provides endpoints for managing network intents for a cluster, including applying, terminating, and querying the status of network intents.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/clusters/{cluster-provider}/{cluster}/network-intents", "/clusters/{cluster-provider}/{cluster}/network-intents/{intent-name}", "/clusters/{cluster-provider}/{cluster}/network-intents/status"]}}
{"file": "cloned/multicloud-k8s/src/ncm/api/networkhandler.go", "endpoints": {"api_summary": "This API provides CRUD operations for managing network resources in a Kubernetes cluster.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/networks", "/networks/<name>", "/networks/<name>/<provider-name>", "/networks/<name>/<provider-name>/<cluster-name>"]}}
{"file": "cloned/multicloud-k8s/src/tools/emcoui/middle_end/main/main.go", "endpoints": {"api_summary": "The middleend service exposes APIs for managing composite apps, deployment intent groups, and clusters. It also provides authentication and authorization functionality through the authproxy module.", "methods": ["GET", "POST", "DELETE"], "paths": ["/middleend/projects/{project-name}/composite-apps", "/middleend/projects/{project-name}/deployment-intent-groups", "/middleend/clusterproviders/{cluster-provider-name}/clusters", "/login", "/callback", "/auth"]}}
{"file": "cloned/multicloud-k8s/src/tools/emcoui/middle_end/authproxy/authproxy.go", "endpoints": {"api_summary": "This API is a proxy server that handles authentication and authorization for a web application. It defines endpoints for login, callback, and authentication.", "methods": ["GET", "POST"], "paths": ["/login", "/callback", "/auth"]}}
{"file": "cloned/multicloud-k8s/src/tools/emcoui/middle_end/app/projects.go", "endpoints": {"api_summary": "This API is responsible for managing projects and their associated composite applications. It provides endpoints for creating, reading, updating, and deleting projects and composite applications, as well as retrieving information about the project and its composite applications.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/projects", "/projects/<project_name>", "/projects/<project_name>/composite-apps", "/projects/<project_name>/composite-apps/<composite_app_name>", "/projects/<project_name>/composite-apps/<composite_app_name>/<composite_app_version>"]}}
{"file": "cloned/multicloud-k8s/src/tools/emcoui/src/services/apiService.js", "endpoints": {"api_summary": "This API provides endpoints for managing projects, clusters, networks, and controllers in a cloud-native environment.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/v2/projects", "/v2/projects/<projectName>", "/v2/cluster-providers", "/v2/cluster-providers/<providerName>", "/v2/ncm/<providerName>/clusters/<clusterName>/provider-networks", "/v2/ncm/<providerName>/clusters/<clusterName>/networks", "/v2/controllers"]}}
{"file": "cloned/multicloud-k8s/src/orchestrator/api/app_intent_handler.go", "endpoints": {"api_summary": "This API defines the endpoints for managing application intents in the ONAP multicloud K8s orchestrator.", "methods": ["GET", "POST", "DELETE"], "paths": ["/v2/project/{project-name}/composite-apps/{composite-app-name}/{composite-app-version}/deployment-intent-groups/{deployment-intent-group-name}/generic-placement-intent/{intent-name}/app-intents", "/v2/project/{project-name}/composite-apps/{composite-app-name}/{composite-app-version}/deployment-intent-groups/{deployment-intent-group-name}/generic-placement-intent/{intent-name}/app-intents?app-name=<app-name>", "/v2/project/{project-name}/composite-apps/{composite-app-name}/{composite-app-version}/deployment-intent-groups/{deployment-intent-group-name}/generic-placement-intent/{intent-name}/app-intents/{app-intent-name}"]}}
{"file": "cloned/multicloud-k8s/src/orchestrator/api/projecthandler.go", "endpoints": {"api_summary": "The Project API allows for the creation, retrieval, and deletion of Projects, which are used to organize and manage resources in the system.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/projects", "/projects/<project-name>"]}}
{"file": "cloned/multicloud-k8s/src/orchestrator/api/instantiation_handler.go", "endpoints": {"api_summary": "The API provides endpoints for managing the instantiation of composite applications in a multi-cloud environment. It allows for the approval, instantiation, termination, and status of composite applications.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/v1/projects/{project-name}/composite-apps/{composite-app-name}/{composite-app-version}/deployment-intent-groups/{deployment-intent-group-name}/approve", "/api/v1/projects/{project-name}/composite-apps/{composite-app-name}/{composite-app-version}/deployment-intent-groups/{deployment-intent-group-name}/instantiate", "/api/v1/projects/{project-name}/composite-apps/{composite-app-name}/{composite-app-version}/deployment-intent-groups/{deployment-intent-group-name}/terminate", "/api/v1/projects/{project-name}/composite-apps/{composite-app-name}/{composite-app-version}/deployment-intent-groups/{deployment-intent-group-name}/status"]}}
{"file": "cloned/multicloud-k8s/src/orchestrator/api/controllerhandler.go", "endpoints": {"api_summary": "This API defines endpoints for managing controllers in a Kubernetes cluster. It allows for the creation, retrieval, and deletion of controllers, as well as listing all controllers in the cluster.", "methods": ["POST", "GET", "PUT", "DELETE"], "paths": ["/controllers", "/controllers/<controller-name>"]}}
{"file": "cloned/multicloud-k8s/src/orchestrator/api/composite_app_handler.go", "endpoints": {"api_summary": "This API provides CRUD operations for Composite Apps in a project.", "methods": ["GET", "POST", "DELETE"], "paths": ["/projects/{project-name}/composite-apps/{composite-app-name}/{version}", "/projects/{project-name}/composite-apps"]}}
{"file": "cloned/multicloud-k8s/src/orchestrator/api/generic_placement_intent_handler.go", "endpoints": {"api_summary": "This API defines the endpoints for managing generic placement intents in the ONAP multicloud K8s orchestrator.", "methods": ["GET", "POST", "DELETE"], "paths": ["/generic-placement-intent", "/generic-placement-intent/<intent-name>", "/generic-placement-intent/<project-name>/<composite-app-name>/<composite-app-version>/<deployment-intent-group-name>"]}}
{"file": "cloned/multicloud-k8s/src/orchestrator/api/add_intents_handler.go", "endpoints": {"api_summary": "This API defines the endpoints for managing intents in a deployment group. It allows for the creation, retrieval, and deletion of intents, as well as listing all intents in a deployment group.", "methods": ["POST", "GET", "GET", "DELETE"], "paths": ["/v2/projects/{project-name}/composite-apps/{composite-app-name}/{version}/deployment-intent-groups/{deployment-intent-group-name}/intents", "/v2/projects/{project-name}/composite-apps/{composite-app-name}/{version}/deployment-intent-groups/{deployment-intent-group-name}/intents?intent=<intent>", "/v2/projects/{project-name}/composite-apps/{composite-app-name}/{version}/deployment-intent-groups/{deployment-intent-group-name}/intents/{intent-name}"]}}
{"file": "cloned/multicloud-k8s/src/orchestrator/api/composite_profilehandler.go", "endpoints": {"api_summary": "This API defines the CRUD operations for Composite Profiles in the Orchestrator.", "methods": ["GET", "POST", "DELETE"], "paths": ["/composite-profiles", "/composite-profiles/<composite-profile-name>", "/composite-profiles/<project-name>/<composite-app-name>/<composite-app-version>"]}}
{"file": "cloned/multicloud-k8s/src/orchestrator/api/composite_profilehandler_test.go", "endpoints": {"api_summary": "This API defines a composite profile, which is a collection of profiles that define the desired state of a composite application. It includes endpoints for creating, retrieving, and deleting composite profiles.", "methods": ["POST", "GET", "DELETE"], "paths": ["/v2/projects/{project-name}/composite-apps/{composite-app-name}/{version}/composite-profiles"]}}
{"file": "cloned/multicloud-k8s/src/orchestrator/api/deployment_intent_groups_handler.go", "endpoints": {"api_summary": "This API is used to manage DeploymentIntentGroups in the Orchestrator. It allows for the creation, retrieval, and deletion of DeploymentIntentGroups, as well as listing all DeploymentIntentGroups for a given project, composite app, and version.", "methods": ["POST", "GET", "GET", "DELETE"], "paths": ["/deployment-intent-group", "/deployment-intent-group/<deployment-intent-group-name>", "/deployment-intent-group", "/deployment-intent-group"]}}
{"file": "cloned/multicloud-k8s/src/orchestrator/api/apphandler.go", "endpoints": {"api_summary": "This API allows users to create, retrieve, and delete Apps in a composite app.", "methods": ["POST", "GET", "DELETE"], "paths": ["/v2/projects/{project-name}/composite-apps/{composite-app-name}/v1/apps", "/v2/projects/{project-name}/composite-apps/{composite-app-name}/v1/apps/{app-name}"]}}
{"file": "cloned/multicloud-k8s/src/k8splugin/api/configtemplatehandler.go", "endpoints": {"api_summary": "This API provides endpoints for managing resource bundle templates in a database.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/rb/{rbname}/{rbversion}/templates", "/rb/{rbname}/{rbversion}/templates/{tname}"]}}
{"file": "cloned/multicloud-k8s/src/k8splugin/api/statussubhandler.go", "endpoints": {"api_summary": "This API provides endpoints for managing instance status subscriptions in a Kubernetes cluster.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/instances/<instance-id>/status-subscriptions", "/instances/<instance-id>/status-subscriptions/<subscription-id>"]}}
{"file": "cloned/multicloud-k8s/src/k8splugin/api/defhandler.go", "endpoints": {"api_summary": "This API provides CRUD operations for managing bundle definitions in a database.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/rbdefinitions", "/rbdefinitions/<rbname>", "/rbdefinitions/<rbname>/<rbversion>"]}}
{"file": "cloned/multicloud-k8s/src/k8splugin/api/connectionhandler.go", "endpoints": {"api_summary": "This API provides CRUD operations for managing connectivity information in a database.", "methods": ["GET", "POST", "DELETE"], "paths": ["/v1/connectivity-info", "/v1/connectivity-info/<connname>"]}}
{"file": "cloned/multicloud-k8s/src/k8splugin/api/profilehandler.go", "endpoints": {"api_summary": "This API provides CRUD operations for Resource Bundle profiles in the database.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/rb/{rbname}/{rbversion}/profiles", "/rb/{rbname}/{rbversion}/profiles/{prname}"]}}
{"file": "cloned/multicloud-k8s/src/ovnaction/api/api.go", "endpoints": {"api_summary": "This API is responsible for managing network intents and their associated resources in a multi-cloud environment. It provides endpoints for creating, retrieving, updating, and deleting network intents, as well as for managing the relationships between intents and other resources.", "methods": ["POST", "GET", "PUT", "DELETE"], "paths": ["/projects/{project}/composite-apps/{composite-app-name}/{version}/deployment-intent-groups/{deployment-intent-group-name}/network-controller-intent", "/projects/{project}/composite-apps/{composite-app-name}/{version}/deployment-intent-groups/{deployment-intent-group-name}/network-controller-intent/{name}", "/projects/{project}/composite-apps/{composite-app-name}/{version}/deployment-intent-groups/{deployment-intent-group-name}/network-controller-intent/{net-control-intent}/workload-intents", "/projects/{project}/composite-apps/{composite-app-name}/{version}/deployment-intent-groups/{deployment-intent-group-name}/network-controller-intent/{net-control-intent}/workload-intents/{name}", "/projects/{project}/composite-apps/{composite-app-name}/{version}/deployment-intent-groups/{deployment-intent-group-name}/network-controller-intent/{net-control-intent}/workload-intents/{workload-intent}/interfaces", "/projects/{project}/composite-apps/{composite-app-name}/{version}/deployment-intent-groups/{deployment-intent-group-name}/network-controller-intent/{net-control-intent}/workload-intents/{workload-intent}/interfaces/{name}", "/projects/{project}/composite-apps/{composite-app-name}/{version}/deployment-intent-groups/{deployment-intent-group-name}/network-controller-intent/{net-control-intent}/network-chains", "/projects/{project}/composite-apps/{composite-app-name}/{version}/deployment-intent-groups/{deployment-intent-group-name}/network-controller-intent/{net-control-intent}/network-chains/{name}"]}}
{"file": "cloned/multicloud-k8s/src/ovnaction/api/netcontrolintenthandler.go", "endpoints": {"api_summary": "This API provides CRUD operations for NetControlIntent resources.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/netcontrolintents", "/netcontrolintents/{name}"]}}
{"file": "cloned/multicloud-k8s/src/ovnaction/api/workloadintenthandler.go", "endpoints": {"api_summary": "This API defines the endpoints for managing workload intents in the ONAP multicloud K8s platform.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/workloadintents", "/workloadintents/{name}", "/workloadintents/{name}/{project}/{composite-app-name}/{version}/{deployment-intent-group-name}/{net-control-intent}"]}}
{"file": "cloned/multicloud-k8s/src/clm/api/api.go", "endpoints": {"api_summary": "The API provides endpoints for managing clusters and their associated resources, such as labels and key-value pairs. It also provides endpoints for creating and managing cluster providers.", "methods": ["POST", "GET", "DELETE"], "paths": ["/v2/cluster-providers", "/v2/cluster-providers/{name}", "/v2/cluster-providers/{provider-name}/clusters", "/v2/cluster-providers/{provider-name}/clusters/{name}", "/v2/cluster-providers/{provider-name}/clusters/{cluster-name}/labels", "/v2/cluster-providers/{provider-name}/clusters/{cluster-name}/labels/{label}", "/v2/cluster-providers/{provider-name}/clusters/{cluster-name}/kv-pairs", "/v2/cluster-providers/{provider-name}/clusters/{cluster-name}/kv-pairs/{kvpair}"]}}
{"file": "cloned/multicloud-k8s/src/clm/api/clusterhandler_test.go", "endpoints": {"api_summary": "This API provides a way to manage clusters and cluster providers.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/v2/cluster-providers", "/v2/cluster-providers/<provider-name>", "/v2/cluster-providers/<provider-name>/clusters", "/v2/cluster-providers/<provider-name>/clusters/<cluster-name>", "/v2/cluster-providers/<provider-name>/clusters/<cluster-name>/labels", "/v2/cluster-providers/<provider-name>/clusters/<cluster-name>/labels/<label-name>", "/v2/cluster-providers/<provider-name>/clusters/<cluster-name>/kv-pairs", "/v2/cluster-providers/<provider-name>/clusters/<cluster-name>/kv-pairs/<kv-pair-name>"]}}
{"file": "cloned/marathon/tests/system/marathon_pods_tests.py", "endpoints": {"api_summary": "This API defines a set of endpoints for managing pods in a DC/OS cluster.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/v2/pods", "/v2/pods/<pod_id>", "/v2/pods/<pod_id>/::status", "/v2/pods/<pod_id>/::instances/<instance_id>", "/v2/pods/<pod_id>/::versions/<version_id>"]}}
{"file": "cloned/marathon/tests/system/scripts/pinger.py", "endpoints": {"api_summary": "The pinger app responds to /ping and /relay endpoints with pongs and relays, respectively. The /ping endpoint returns a pong message with the Marathon app ID, while the /relay endpoint pings another app and returns its response with a relay message and the Marathon app ID.", "methods": ["GET", "POST"], "paths": ["/ping", "/relay"]}}
{"file": "cloned/marathon/tests/shakedown/shakedown/dcos/zookeeper.py", "endpoints": {"api_summary": "This API provides endpoints for interacting with the ZooKeeper nodes in a DC/OS cluster. It allows for retrieving node data, children, and deleting nodes.", "methods": ["GET", "POST", "DELETE"], "paths": ["/exhibitor/exhibitor/v1/explorer/node-data", "/exhibitor/exhibitor/v1/explorer/node", "/exhibitor/exhibitor/v1/explorer/znode"]}}
{"file": "cloned/marathon/tests/integration/src/test/resources/python/app_mock.py", "endpoints": {"api_summary": "This API provides endpoints for checking the readiness, health, and shared memory usage of an application.", "methods": ["GET", "POST", "DELETE"], "paths": ["/ping", "/ready", "/health", "/ipcshm", "/ipcns", "/cgroup", "/suicide"]}}
{"file": "cloned/platform/hobbit-gui/gui-serverbackend/src/main/java/de/usu/research/hobbit/gui/rest/SystemProviderResources.java", "endpoints": {"api_summary": "This API provides endpoints for managing system registrations for a challenge in a hobbit-based platform.", "methods": ["GET", "PUT"], "paths": ["/system-provider/systems", "/system-provider/challenge-all-registrations/{challengeId}", "/system-provider/challenge-registrations/{challengeId}", "/system-provider/challenge-registrations/{challengeId}/{taskId}"]}}
{"file": "cloned/platform/hobbit-gui/gui-serverbackend/src/main/java/de/usu/research/hobbit/gui/rest/LicenseResources.java", "endpoints": {"api_summary": "This API provides information about the license of a dataset.", "methods": ["GET"], "paths": ["/license"]}}
{"file": "cloned/platform/hobbit-gui/gui-serverbackend/src/main/java/de/usu/research/hobbit/gui/rest/SubmissionsResources.java", "endpoints": {"api_summary": "The SubmissionsResources API allows clients to retrieve details about a specific submission by its ID. The API uses the GET method and the URL path /submissions/{id}.", "methods": ["GET"], "paths": ["/submissions/{id}"]}}
{"file": "cloned/platform/hobbit-gui/gui-serverbackend/src/main/java/de/usu/research/hobbit/gui/rest/InternalResources.java", "endpoints": {"api_summary": "This API provides information about the Keycloak configuration and user information for the Hobbit GUI.", "methods": ["GET"], "paths": ["/internal/keycloak-config", "/internal/user-info"]}}
{"file": "cloned/platform/hobbit-gui/gui-serverbackend/src/main/java/de/usu/research/hobbit/gui/rest/LogsResources.java", "endpoints": {"api_summary": "This API provides access to log data for a specific experiment. It allows users to retrieve logs for a specific experiment, and supports various query parameters to filter and format the logs.", "methods": ["GET"], "paths": ["/logs/benchmark/query", "/logs/system/query", "/logs/query"]}}
{"file": "cloned/platform/hobbit-gui/gui-serverbackend/src/main/java/de/usu/research/hobbit/gui/rest/StatusResources.java", "endpoints": {"api_summary": "The StatusResources API provides information about the status of the platform, including the currently running experiment and the queue of pending experiments.", "methods": ["GET"], "paths": ["/status"]}}
{"file": "cloned/platform/hobbit-gui/gui-serverbackend/src/main/java/de/usu/research/hobbit/gui/rest/ExperimentsResources.java", "endpoints": {"api_summary": "This API provides endpoints for querying and managing experiments, including retrieving experiment results, counting experiments by challenge task IDs, and terminating experiments.", "methods": ["GET", "POST"], "paths": ["/experiments", "/experiments/query", "/experiments/count-by-challenge/{id}", "/experiments/terminate/{id}"]}}
{"file": "cloned/platform/hobbit-gui/gui-serverbackend/src/main/java/de/usu/research/hobbit/gui/rest/ChallengesResources.java", "endpoints": {"api_summary": "This API provides endpoints for managing challenges, including listing, retrieving, adding, updating, and deleting challenges. It also includes endpoints for closing challenges and retrieving information about the challenge.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/challenges", "/challenges/{id}", "/challenges/operation/close/{id}"]}}
{"file": "cloned/platform/hobbit-gui/gui-serverbackend/src/main/java/de/usu/research/hobbit/gui/rest/AnalysisResources.java", "endpoints": {"api_summary": "The API provides a single endpoint for retrieving analysis results for a given benchmark URI. The endpoint returns a list of analysis result sets, each containing information about the analysis results for the benchmark.", "methods": ["GET"], "paths": ["/analysis/{id}"]}}
{"file": "cloned/platform/hobbit-gui/gui-serverbackend/src/main/java/de/usu/research/hobbit/gui/rest/BenchmarksResources.java", "endpoints": {"api_summary": "The BenchmarksResources API provides endpoints for listing and retrieving benchmarks, as well as submitting benchmarks for execution. It also includes endpoints for handling errors and exceptions.", "methods": ["GET", "POST"], "paths": ["/benchmarks", "/benchmarks/{id}", "/submitBenchmark"]}}
{"file": "cloned/platform/hobbit-gui/gui-client/src/app/backend.service.ts", "endpoints": {"api_summary": "The BackendService provides a set of REST API endpoints for interacting with the backend of the system. It includes endpoints for managing users, benchmarks, challenges, experiments, and analysis results. It also includes endpoints for querying and terminating experiments, as well as retrieving system provider systems and log files.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/rest/internal/user-info", "/rest/license", "/rest/status", "/rest/benchmarks", "/rest/benchmarks/<id>", "/rest/challenges", "/rest/challenges/<id>", "/rest/experiments/count-by-challenge/<id>", "/rest/experiments/query", "/rest/experiments/terminate/<id>", "/rest/analysis/<id>", "/rest/system-provider/challenge-all-registrations/<id>", "/rest/system-provider/challenge-registrations/<id>", "/rest/system-provider/challenge-registrations/<id>/<taskId>", "/rest/system-provider/systems", "/rest/logs/<url>&format=<format>"]}}
{"file": "cloned/platform/hobbit-gui/gui-client/src/app/app.module.ts", "endpoints": {"api_summary": "This API provides various endpoints for managing and interacting with benchmarks, challenges, experiments, and reports. It also includes endpoints for authentication and authorization, as well as for handling HTTP requests and responses.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/home", "/upload/benchmarks", "/upload/systems", "/benchmarks", "/benchmarks/status", "/challenges", "/challenges/:id", "/challenges/:id/experiments", "/challenges/:id/experiments/:task", "/challenges/:id/register", "/challenges/:id/registrations", "/challenges/:id/edit/:task", "/challenges/:id/leaderboards", "/challenges/:id/leaderboards/:task", "/experiments", "/experiments/:id", "/experiments/task/:task", "/reports"]}}
{"file": "cloned/platform/platform-controller/src/test/java/org/hobbit/controller/gitlab/GitlabControllerImplTest.java", "endpoints": {"api_summary": "This API is a test suite for the GitlabControllerImpl class, which provides a way to interact with GitLab projects and branches. It includes methods for fetching projects, getting projects of a user, and getting a checked model for a benchmark configuration file.", "methods": ["GET", "POST"], "paths": ["/projects", "/projects/<project_id>", "/projects/<project_id>/branches/<branch_name>", "/projects/<project_id>/branches/<branch_name>/benchmark.ttl"]}}
{"file": "cloned/capstone/capstone/capapi/api_urls.py", "endpoints": {"api_summary": "The CAP API provides access to United States caselaw, including case documents, jurisdictions, courts, volumes, reporters, and bulk exports. It also includes a convenience pattern for citations and a schema for Swagger/OpenAPI/ReDoc.", "methods": ["GET", "POST"], "paths": ["/v1/", "/unstable/", "/v1/cases/<id>/", "/swagger/<format>", "/swagger/", "/redoc/", "/robots.txt", "/"]}}
{"file": "cloned/capstone/capstone/capapi/tests/test_cache.py", "endpoints": {"api_summary": "This API defines endpoints for caching and retrieving case metadata and case documents from the database.", "methods": ["GET", "POST"], "paths": ["/cases/<case_id>/metadata", "/cases/<case_id>/documents"]}}
{"file": "cloned/capstone/capstone/labs/urls.py", "endpoints": {"api_summary": "The API provides a set of endpoints for managing timelines and their associated data. It includes endpoints for creating, retrieving, updating, and deleting timelines, as well as endpoints for adding and updating categories and subobjects within a timeline.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/chronolawgic/", "/chronolawgic/timeline/*", "/chronolawgic/api/create/", "/chronolawgic/api/create/h2o", "/chronolawgic/api/retrieve/", "/chronolawgic/api/retrieve/<str:timeline_uuid>", "/chronolawgic/api/add-update/<str:timeline_uuid>/categories", "/chronolawgic/api/add-update/<str:timeline_uuid>/<str:subobject_type>", "/chronolawgic/api/delete/<str:timeline_uuid>/<str:subobject_type>/<str:subobject_uuid>", "/chronolawgic/api/delete/<str:timeline_uuid>", "/chronolawgic/api/update/<str:timeline_uuid>/metadata", "/chronolawgic/api/update/<str:timeline_uuid>", "/chronolawgic/api/update_admin/<str:timeline_uuid>"]}}
{"file": "cloned/capstone/capstone/labs/views.py", "endpoints": {"api_summary": "The Chronolawgic API provides endpoints for managing timelines and their associated data, including retrieving, creating, updating, and deleting timeline records, as well as importing casebooks from H2O.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/chronolawgic", "/chronolawgic/<timeline_uuid>", "/chronolawgic/<timeline_uuid>/categories", "/chronolawgic/<timeline_uuid>/subobject", "/chronolawgic/<timeline_uuid>/subobject/<subobject_uuid>", "/chronolawgic/<timeline_uuid>/import"]}}
{"file": "cloned/capstone/capstone/config/urls.py", "endpoints": {"api_summary": "The capstone API provides a RESTful interface for managing users and their associated data. It includes endpoints for creating, reading, updating, and deleting users, as well as endpoints for managing user authentication and authorization.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users", "/users/<built-in function id>", "/labs/", "/labs/<built-in function id>"]}}
{"file": "cloned/capstone/capstone/capweb/urls.py", "endpoints": {"api_summary": "This API provides a variety of endpoints for accessing and manipulating data related to legal cases, including search, trends, and bulk download. It also includes endpoints for accessing exhibits and gallery sections, as well as contact and user account management.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/", "/gallery/", "/search/", "/trends/", "/robots.txt", "/fetch/", "/about/", "/tools/", "/terms", "/privacy", "/bulk/download/", "/api/", "/search-docs/", "/trends-docs/", "/action/", "/action/guidelines/", "/action/case-study-nm/", "/action/case-study-ark/", "/action/case-study-canada/", "/bulk/", "/changelog", "/docs/", "/exhibits/wordclouds", "/exhibits/limericks", "/exhibits/witchcraft", "/exhibits/cite-grid", "/gallery/", "/contact/", "/contact-success/", "/maintenance/", "/data/", "/cms_files/", "/screenshot/", "/download/", "/user/login/", "/user/register/", "/user/verify-user/", "/user/reset-api-key/", "/user/details", "/user/history", "/user/resend-verification/", "/user/delete-account", "/user/research/approve/", "/user/research/apply/", "/user/research/apply-success/", "/user/research/harvard-intro/", "/user/research/harvard/", "/user/research/harvard-success/", "/user/research/non-harvard-email/"]}}
{"file": "cloned/capstone/capstone/cite/urls.py", "endpoints": {"api_summary": "This API provides endpoints for accessing and manipulating legal case data, including retrieving case information, setting cookies, and redacting case information.", "methods": ["GET", "POST"], "paths": ["/random/", "/robots.txt", "/set-cookie/", "/cited-by/<int:case_id>/", "/citations/", "/redact/<int:case_id>/", "/pdf/<int:case_id>/<str:pdf_name>", "/image/<str:volume_id>/<str:sequence_number>", "/edit/<int:case_id>/", "/<str:series_slug>/<str:volume_number_slug>/<str:page_number>/<int:case_id>/", "/<str:series_slug>/<str:volume_number_slug>/<str:page_number>/", "/<str:series_slug>/<str:volume_number_slug>/", "/<str:series_slug>/", "/"]}}
{"file": "cloned/capstone/capstone/static/dist/assets/labs-chronolawgic.c571864b.js", "endpoints": {"api_endpoints": []}}
{"file": "cloned/capstone/capstone/static/js/labs/chronolawgic/main.js", "endpoints": {"api_summary": "This API provides a timeline interface for users to view and manage their timelines. It includes endpoints for retrieving timeline data, creating new timelines, and updating existing timelines.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/", "/:timeline", "/:timeline/edit", "/:timeline/delete"]}}
{"file": "cloned/capstone/capstone/static/js/search/router.js", "endpoints": {"api_summary": "This API provides a search functionality for the Vue.js application. It allows users to search for specific data and retrieve the results.", "methods": ["GET"], "paths": ["/search"]}}
{"file": "cloned/grand-challenge.org/app/tests/urls/root.py", "endpoints": {"api_summary": "This API provides endpoints for managing sessions, workstations, and the Knox API root. It includes endpoints for creating, controlling, and retrieving information about sessions, as well as endpoints for interacting with workstations and the Knox API.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/session-control/", "/new-session/", "/new-session/path-param/12345/", "/workstation/", "/knox-api/"]}}
{"file": "cloned/grand-challenge.org/app/tests/knox_tests/test_knox.py", "endpoints": {"api_summary": "This API provides authentication and authorization functionality using JSON Web Tokens (JWT). It allows users to create, refresh, and revoke tokens, as well as retrieve information about their tokens.", "methods": ["POST", "GET", "PUT", "DELETE"], "paths": ["/auth/token", "/auth/token/refresh", "/auth/token/revoke", "/auth/token/info"]}}
{"file": "cloned/grand-challenge.org/app/tests/knox_tests/views.py", "endpoints": {"api_summary": "This API provides a root endpoint for the Grand Challenge API, which returns a simple message indicating the API is running. The API uses token-based authentication and requires the user to be authenticated to access the endpoint.", "methods": ["GET"], "paths": ["/grandchallenge/api/"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/well_known/urls.py", "endpoints": {"api_summary": "This API provides a robots.txt file and a security.txt file for the grandchallenge repository. The robots.txt file specifies which user agents are allowed to crawl the site, while the security.txt file provides contact information for security vulnerability disclosure.", "methods": ["GET"], "paths": ["/well_known/robots.txt", "/well_known/security.txt"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/statistics/urls.py", "endpoints": {"api_summary": "The statistics API provides detailed information about the usage of the Grand Challenge platform, including user activity, resource usage, and system performance. It allows developers to access this data programmatically and integrate it into their own applications.", "methods": ["GET"], "paths": ["/statistics/detail"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/blogs/urls.py", "endpoints": {"api_summary": "The blogs API allows users to create, read, update, and delete blog posts. It also allows users to update the authors and metadata of existing posts.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/blogs/", "/blogs/create/", "/blogs/<slug>/authors/update/", "/blogs/<slug>/", "/blogs/<slug>/metadata-update/", "/blogs/<slug>/content-update/"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/blogs/views.py", "endpoints": {"api_summary": "This API allows users to create, read, update, and delete blog posts. It also allows users to update the metadata of existing posts and manage the authors of a post.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/blogs/create", "/blogs/<slug>", "/blogs/<slug>/update-metadata", "/blogs/<slug>/update-content", "/blogs/<slug>/authors"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/timezones/views.py", "endpoints": {"api_summary": "The Timezone API allows clients to set and retrieve the current timezone for a user session. It uses the PUT HTTP method to update the timezone and the GET method to retrieve the current timezone.", "methods": ["PUT", "GET"], "paths": ["/timezones"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/direct_messages/urls.py", "endpoints": {"api_summary": "This API provides endpoints for creating, reading, updating, and deleting direct messages and conversations between users. It also includes endpoints for muting and unmuting conversations, and for reporting spam messages.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/direct_messages/", "/direct_messages/<uuid:pk>/", "/direct_messages/<uuid:conversation_pk>/messages/<uuid:pk>/delete/", "/direct_messages/<uuid:conversation_pk>/messages/<uuid:pk>/report-spam/"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/flatpages/urls.py", "endpoints": {"api_summary": "The Flatpages API allows for the creation and updating of flat pages, which are pages that are not associated with a specific model or database record. The API provides endpoints for creating and updating flat pages, as well as retrieving and deleting them.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/flatpages/create/", "/flatpages/<int:pk>/update/"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/reader_studies/urls.py", "endpoints": {"api_summary": "This API provides endpoints for managing reader studies, including creating, updating, and deleting reader studies, as well as managing display sets and questions within reader studies.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/reader-studies/", "/reader-studies/create/", "/reader-studies/<slug:slug>/", "/reader-studies/<slug:slug>/update/", "/reader-studies/<slug:slug>/delete/", "/reader-studies/<slug:slug>/leaderboard/", "/reader-studies/<slug:slug>/display-sets/", "/reader-studies/<slug:slug>/statistics/", "/reader-studies/<slug:slug>/copy/", "/reader-studies/<slug:slug>/remove-answers/<username>/", "/reader-studies/<slug:slug>/ground-truth/", "/reader-studies/<slug:slug>/ground-truth/delete/", "/reader-studies/<slug:slug>/ground-truth/csv/create/", "/reader-studies/<slug:slug>/ground-truth/csv/example/", "/reader-studies/<slug:slug>/ground-truth/answers/create/", "/reader-studies/<slug:slug>/answers/ground-truth/create/", "/reader-studies/<slug:slug>/display-sets/create/", "/reader-studies/<slug:slug>/display-sets/delete/", "/reader-studies/<slug:slug>/display-sets/create-single/", "/reader-studies/<slug:slug>/display-sets/<uuid:pk>/", "/reader-studies/<slug:slug>/display-sets/<uuid:pk>/update/", "/reader-studies/<slug>/display-sets/<uuid:pk>/delete/", "/reader-studies/<slug:slug>/display-sets/new/interfaces/create/", "/reader-studies/<slug:slug>/display-sets/<uuid:pk>/interface/create/", "/reader-studies/<slug:slug>/questions/add/", "/reader-studies/<slug:slug>/questions/<uuid:pk>/update/", "/reader-studies/<slug:slug>/questions/<uuid:pk>/delete/", "/reader-studies/<slug:slug>/questions/interfaces/", "/reader-studies/<slug:slug>/questions/widgets/", "/reader-studies/<slug:slug>/questions/interactive-algorithms/", "/reader-studies/<slug:slug>/editors/update/", "/reader-studies/<slug:slug>/readers/update/", "/reader-studies/<slug:slug>/progress/", "/reader-studies/<slug:slug>/permission-requests/", "/reader-studies/<slug:slug>/permission-requests/create/", "/reader-studies/<slug:slug>/permission-requests/<int:pk>/update/"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/reader_studies/serializers.py", "endpoints": {"api_summary": "This API defines endpoints for managing and interacting with reader studies, display sets, and answers in a medical imaging context.", "methods": ["GET", "POST", "PUT", "PATCH", "DELETE"], "paths": ["/api/reader-studies/", "/api/reader-studies/<slug>/", "/api/reader-studies/<slug>/questions/", "/api/reader-studies/<slug>/display-sets/", "/api/reader-studies/<slug>/display-sets/<pk>/", "/api/reader-studies/<slug>/answers/", "/api/reader-studies/<slug>/answers/<pk>/"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/policies/urls.py", "endpoints": {"api_summary": "The policies API provides information about the policies of the grand challenge application. It includes a single endpoint for retrieving the details of a specific policy.", "methods": ["GET"], "paths": ["/policies/<slug>/"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/challenges/urls.py", "endpoints": {"api_summary": "This API provides endpoints for managing challenges, including creating, listing, and updating challenge requests, as well as viewing challenge costs.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/challenges/", "/challenges/my-challenges/", "/challenges/requests/", "/challenges/requests/create/", "/challenges/requests/<pk>/", "/challenges/requests/<pk>/update/status/", "/challenges/requests/<pk>/update/budget/", "/challenges/costs/"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/teams/urls.py", "endpoints": {"api_summary": "The Teams API allows for the creation, retrieval, update, and deletion of teams and team members. It also allows for the creation of team members and the deletion of team members.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/teams/", "/teams/create/", "/teams/<int:pk>/", "/teams/<int:pk>/update/", "/teams/<int:pk>/delete/", "/teams/<int:pk>/create-member/", "/teams/m/<int:pk>/delete/"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/teams/views.py", "endpoints": {"api_summary": "This API allows users to create, read, update, and delete teams and team members for a specific challenge. It also allows users to join and leave teams.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/teams/<challenge_short_name>/", "/teams/<challenge_short_name>/<team_id>/", "/teams/<challenge_short_name>/<team_id>/members/<user_id>/"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/notifications/urls.py", "endpoints": {"api_summary": "The notifications API allows users to manage their notification subscriptions and view their notifications. It includes endpoints for listing, creating, and deleting subscriptions, as well as listing and viewing notifications.", "methods": ["GET", "POST", "DELETE"], "paths": ["/notifications/", "/notifications/subscriptions/", "/notifications/subscriptions/<int:pk>/delete/", "/notifications/subscriptions/create/"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/notifications/views.py", "endpoints": {"api_summary": "This API allows users to manage their notifications and subscriptions. It includes endpoints for retrieving notifications, subscribing to notifications, and deleting subscriptions.", "methods": ["GET", "POST", "DELETE"], "paths": ["/notifications", "/notifications/<notification_id>", "/follows", "/follows/<follow_id>"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/cases/urls.py", "endpoints": {"api_summary": "The cases API provides endpoints for managing image uploads, searching for images, and selecting images for use in a widget. It also provides a list of raw image upload sessions.", "methods": ["GET", "POST"], "paths": ["/cases/uploads/", "/cases/uploads/<uuid:pk>/", "/cases/select-image-widget/", "/cases/images/search/"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/cases/views.py", "endpoints": {"api_summary": "The API allows for the management of image upload sessions, image search, and image selection for use in other applications.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/rawimageuploadsession", "/image", "/image/search", "/image/select"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/cases/serializers.py", "endpoints": {"api_summary": "This API allows for the creation and management of image upload sessions for the purpose of adding images to an archive, archive item, answer, or display set. It also allows for the assignment of images to an answer for a reader study.", "methods": ["POST"], "paths": ["/api/v1/upload-session/"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/participants/admin.py", "endpoints": {"api_summary": "This API provides endpoints for managing registration requests and questions for a challenge. It allows users to submit registration requests and answer questions, and provides endpoints for admins to manage the questions and permissions for the registration process.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/registration-requests", "/registration-requests/<id>", "/registration-questions", "/registration-questions/<id>", "/registration-question-answers", "/registration-question-answers/<id>"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/participants/urls.py", "endpoints": {"api_summary": "This API provides endpoints for managing participants in a challenge, including registration, questions, and requests.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/participants/", "/participants/registration/", "/participants/registration/create/", "/participants/registration/<int:pk>/update/", "/participants/registration/questions/", "/participants/registration/questions/create/", "/participants/registration/questions/<uuid:pk>/update/", "/participants/registration/questions/<uuid:pk>/delete/"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/participants/views.py", "endpoints": {"api_summary": "This API allows users to create, update, and delete registration questions for a challenge. It also allows users to view and manage registration requests for a challenge.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/participants/registration-question-list", "/participants/registration-question-create", "/participants/registration-question-update", "/participants/registration-question-delete", "/participants/registration-request-list", "/participants/registration-request-create", "/participants/registration-request-update"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/components/urls.py", "endpoints": {"api_summary": "This API provides a list of component interfaces for algorithms, archives, reader studies, inputs, and outputs. It also provides endpoints for file upload, file search, and file widget selection.", "methods": ["GET", "POST"], "paths": ["/interfaces/algorithms/", "/interfaces/archives/", "/interfaces/reader-studies/", "/interfaces/inputs/", "/interfaces/outputs/", "/interfaces/autocomplete/", "/interfaces/<interface_slug>/file-upload/", "/select-file-widget/", "/files/search/"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/workstations/urls.py", "endpoints": {"api_summary": "This API provides endpoints for managing workstations, including creating, updating, and deleting workstations, as well as managing workstation images and sessions.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/workstations/", "/workstations/create/", "/workstations/<slug>/", "/workstations/<slug>/update/", "/workstations/<slug>/images/create/", "/workstations/<slug>/images/<uuid:pk>/", "/workstations/<slug>/images/<uuid:pk>/update/", "/workstations/<slug>/images/<uuid:pk>/move/", "/workstations/<slug>/sessions/create/", "/workstations/<slug>/sessions/create/<path:workstation_path>/", "/workstations/<slug>/sessions/debug/create/", "/workstations/<slug>/sessions/debug/create/<path:workstation_path>/", "/workstations/<slug>/editors/update/", "/workstations/<slug>/users/update/"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/workstations/serializers.py", "endpoints": {"api_summary": "The API provides endpoints for managing workstation sessions, feedback, and workstations. It allows users to create, read, update, and delete sessions, feedback, and workstations, and provides endpoints for retrieving information about sessions and workstations.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/workstations/sessions", "/api/workstations/sessions/<built-in function id>", "/api/workstations/feedback", "/api/workstations/feedback/<built-in function id>", "/api/workstations/workstations", "/api/workstations/workstations/<built-in function id>"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/profiles/urls.py", "endpoints": {"api_summary": "This API provides endpoints for managing user profiles, email preferences, and newsletter subscriptions. It also includes an autocomplete feature for user names.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/user-autocomplete/", "/email-preferences/", "/email-preferences/newsletter/unsubscribe/", "/email-preferences/notifications/unsubscribe/", "/profile/", "/profile/edit/", "/<username>/", "/<username>/newsletter-sign-up/"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/invoices/urls.py", "endpoints": {"api_summary": "The invoices API allows users to retrieve a list of invoices and view details about each invoice. The API also supports creating and updating invoices.", "methods": ["GET", "POST"], "paths": ["/invoices", "/invoices/<built-in function id>"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/api/urls.py", "endpoints": {"api_summary": "This API defines endpoints for managing algorithms, archives, cases, challenges, component interfaces, evaluations, notifications, profiles, reader studies, follows, uploads, workstations, and timezone.", "methods": ["GET", "POST", "PUT", "PATCH", "DELETE"], "paths": ["/api/v1/algorithms/images", "/api/v1/algorithms/jobs", "/api/v1/algorithms", "/api/v1/archives/items", "/api/v1/archives", "/api/v1/cases/images", "/api/v1/cases/upload-sessions", "/api/v1/challenges", "/api/v1/components/interfaces", "/api/v1/evaluations", "/api/v1/notifications", "/api/v1/profiles/users", "/api/v1/reader-studies/answers", "/api/v1/reader-studies/questions", "/api/v1/reader-studies/display-sets", "/api/v1/reader-studies", "/api/v1/subscriptions", "/api/v1/uploads", "/api/v1/workstations/configs", "/api/v1/workstations/feedback", "/api/v1/workstations/sessions", "/api/v1/workstations", "/api/v1/timezone"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/api/views.py", "endpoints": {"api_summary": "The Grand Challenge API provides information about the latest and lowest supported versions of the API.", "methods": ["GET"], "paths": ["/grandchallenge/api/version"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/serving/urls.py", "endpoints": {"api_summary": "This API serves images, submissions, and other files for a challenge evaluation system. It includes endpoints for serving images, submissions, and supplementary files, as well as endpoints for serving algorithm images and models.", "methods": ["GET", "POST"], "paths": ["/images/<uuid:pk>/<path:path>", "/images/<prefix:pa>/<prefix:pb>/<uuid:pk>/<path:path>", "/evaluation/<int:challenge_pk>/submissions/<int:creator_pk>/<uuid:submission_pk>/<path:path>", "/evaluation/<int:challenge_pk>/<uuid:submission_pk>/<path:path>", "/components/<prefix:pa>/<prefix:pb>/<int:component_interface_value_pk>/<path:path>", "/challenges/challengerequest/<uuid:challenge_request_pk>/<path:path>", "/docker/images/algorithms/algorithmimage/<uuid:algorithmimage_pk>/<path:path>", "/models/algorithms/algorithmmodel/<uuid:algorithmmodel_pk>/<path:path>", "/session-feedback/<uuid:feedback_pk>/<path:path>"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/serving/views.py", "endpoints": {"api_summary": "This API provides endpoints for serving images, submissions, and other files related to the Grand Challenge platform.", "methods": ["GET"], "paths": ["/images/<pk>/<path>", "/submissions/<submission_pk>", "/submission-supplementary-file/<submission_pk>", "/component-interface-value/<component_interface_value_pk>", "/structured-challenge-submission-form/<challenge_request_pk>", "/session-feedback-screenshot/<feedback_pk>", "/algorithm-images/<algorithmimage_pk>", "/algorithm-models/<algorithmmodel_pk>"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/github/urls.py", "endpoints": {"api_summary": "The GitHub API allows developers to access and manipulate GitHub repositories and their contents. It provides endpoints for creating, updating, and deleting repositories, as well as for managing repository settings and collaborators. Additionally, it provides endpoints for accessing and manipulating repository contents, such as files and commits.", "methods": ["GET", "POST"], "paths": ["/github/install-complete/", "/github/repositories/"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/github/views.py", "endpoints": {"api_summary": "This API allows users to interact with GitHub repositories and installations, and provides a list of repositories accessible to the user's access token.", "methods": ["GET", "POST"], "paths": ["/github/webhook", "/github/installation/repositories"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/documentation/urls.py", "endpoints": {"api_summary": "The documentation API provides endpoints for managing and accessing documentation pages for the grandchallenge project. It allows users to create, read, update, and delete documentation pages, as well as retrieve a list of all documentation pages.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/documentation/", "/documentation/overview/", "/documentation/create/", "/documentation/<slug:slug>/", "/documentation/<slug:slug>/content-update/", "/documentation/<slug:slug>/metadata-update/"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/documentation/views.py", "endpoints": {"api_summary": "This API provides endpoints for managing documentation pages. It allows for creating, updating, and retrieving documentation pages, as well as searching for pages based on keywords.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/documentation/", "/documentation/<slug>", "/documentation/search"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/uploads/views.py", "endpoints": {"api_summary": "The UserUpload API allows for the creation, retrieval, and management of user uploads. It provides endpoints for listing parts, generating presigned URLs, completing multipart uploads, and aborting multipart uploads.", "methods": ["GET", "POST", "PATCH"], "paths": ["/users/<built-in function id>/list-parts", "/users/<built-in function id>/generate-presigned-urls", "/users/<built-in function id>/complete-multipart-upload", "/users/<built-in function id>/abort-multipart-upload"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/uploads/serializers.py", "endpoints": {"api_summary": "This API allows users to upload files to the system using a multipart upload process. The API provides endpoints for creating a new upload, listing parts of an upload, generating presigned URLs for uploading parts, and completing a multipart upload.", "methods": ["POST", "GET", "PUT"], "paths": ["/uploads/", "/uploads/<upload_id>/parts/", "/uploads/<upload_id>/presigned_urls/", "/uploads/<upload_id>/complete/"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/admins/urls.py", "endpoints": {"api_summary": "The Grand Challenge Admins API provides endpoints for managing admins and users in the Grand Challenge system. It includes endpoints for listing admins, updating admin information, and autocompleting user names.", "methods": ["GET", "POST"], "paths": ["/admins/", "/admins/update/", "/admins/users-autocomplete/"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/verifications/urls.py", "endpoints": {"api_summary": "The verifications API allows users to create and manage email verifications for their accounts. It also provides a way to confirm email verifications and retrieve information about the verification status of a user.", "methods": ["GET", "POST"], "paths": ["/verifications/create/", "/verifications/confirm/<token>/", "/verifications/", "/verifications/user-sets/<int:pk>/"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/evaluation/urls.py", "endpoints": {"api_summary": "This API provides endpoints for managing and interacting with evaluation and submission data in a Grand Challenge system.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/evaluation/<uuid:pk>/", "/evaluation/<uuid:pk>/status/", "/evaluation/<uuid:pk>/incomplete-jobs/", "/evaluation/<uuid:pk>/update/", "/phase/create/", "/configure-algorithm-phases/", "/submissions/", "/combined-leaderboards/create/", "/combined-leaderboards/<slug:slug>/", "/combined-leaderboards/<slug:slug>/update/", "/combined-leaderboards/<slug:slug>/delete/", "/<slug:slug>/", "/<slug:slug>/admin/", "/<slug:slug>/algorithms/create/", "/<slug:slug>/interfaces/", "/<slug:slug>/interfaces/create/", "/<slug:slug>/interfaces/<uuid:interface_pk>/delete/", "/<slug:slug>/interfaces/copy/", "/<slug:slug>/linked-archive/", "/<slug:slug>/ground-truths/", "/<slug:slug>/ground-truths/activate/", "/<slug:slug>/ground-truths/create/", "/<slug:slug>/ground-truths/deactivate/", "/<slug:slug>/ground-truths/<uuid:pk>/", "/<slug:slug>/ground-truths/<uuid:pk>/import-status/", "/<slug:slug>/ground-truths/<uuid:pk>/update/", "/<slug:slug>/leaderboard/", "/<slug:slug>/methods/", "/<slug:slug>/methods/create/", "/<slug:slug>/methods/<uuid:pk>/", "/<slug:slug>/methods/<uuid:pk>/import-status/", "/<slug:slug>/methods/<uuid:pk>/update/", "/<slug:slug>/submissions/create/", "/<slug:slug>/submissions/<uuid:pk>/", "/<slug:slug>/submissions/<uuid:pk>/evaluations/create/", "/<slug:slug>/update/", "/<slug:slug>/starter-kit/", "/<slug:slug>/starter-kit/download/", "/results/", "/leaderboard/"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/evaluation/serializers.py", "endpoints": {"api_summary": "This API defines endpoints for managing evaluations, including creating, updating, and retrieving evaluations, as well as filtering and sorting evaluations based on various criteria.", "methods": ["GET", "POST", "PUT", "PATCH", "DELETE"], "paths": ["/evaluations", "/evaluations/<evaluation_id>", "/evaluations/<evaluation_id>/update"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/evaluation/views/api.py", "endpoints": {"api_summary": "This API allows for the management of evaluations, including claiming and updating evaluations.", "methods": ["GET", "PATCH"], "paths": ["/evaluations", "/evaluations/<evaluation_id>", "/evaluations/claimable"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/pages/urls.py", "endpoints": {"api_summary": "This API provides endpoints for managing and interacting with pages in a challenge. It includes endpoints for creating, updating, and deleting pages, as well as endpoints for retrieving page content and metadata.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/pages/", "/pages/create/", "/statistics/", "/", "/<slug>/", "/<slug>/content-update/", "/<slug>/metadata-update/", "/<slug>/delete/"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/workstation_configs/urls.py", "endpoints": {"api_summary": "The workstation-configs API allows users to create, read, update, and delete workstation configurations. It provides endpoints for listing, creating, retrieving, updating, and deleting workstation configurations, as well as endpoints for retrieving the details of a specific workstation configuration.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/workstation-configs/", "/workstation-configs/create/", "/workstation-configs/<slug>/", "/workstation-configs/<slug>/delete/", "/workstation-configs/<slug>/update/"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/workstation_configs/views.py", "endpoints": {"api_summary": "The Workstation Config API allows users to create, read, update, and delete workstation configurations. It also provides a list of all workstation configurations and a detail view for each configuration.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/workstation-configs/", "/workstation-configs/<id>", "/workstation-configs/<id>/detail"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/publications/urls.py", "endpoints": {"api_summary": "The publications API allows for the creation and listing of publications. It provides a list of all publications and allows for the creation of new publications.", "methods": ["GET", "POST"], "paths": ["/publications/", "/publications/create/"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/api_tokens/urls.py", "endpoints": {"api_summary": "The API Tokens API allows users to create, list, and delete API tokens for authentication and authorization purposes. The API endpoints are designed to be RESTful and follow best practices for API design.", "methods": ["GET", "POST", "DELETE"], "paths": ["/api-tokens/", "/api-tokens/create/", "/api-tokens/<token_key>/delete/"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/api_tokens/views.py", "endpoints": {"api_summary": "This API provides endpoints for managing API tokens for the Grand Challenge application. It allows users to create, view, and delete API tokens, and provides a list of all tokens associated with their account.", "methods": ["GET", "POST", "DELETE"], "paths": ["/api-tokens/", "/api-tokens/<token_key>"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/emails/urls.py", "endpoints": {"api_summary": "The emails API provides endpoints for managing email templates and sending emails. It includes endpoints for creating, updating, and retrieving email templates, as well as endpoints for sending emails using the templates.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/emails/", "/emails/create/", "/emails/<int:pk>/", "/emails/<int:pk>/rendered/", "/emails/<int:pk>/metadata-update/", "/emails/<int:pk>/body-update/"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/emails/views.py", "endpoints": {"api_summary": "This API allows for the creation, update, and retrieval of emails. It also provides a rendered preview of the email content.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/emails", "/emails/<id>", "/emails/<id>/rendered"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/organizations/urls.py", "endpoints": {"api_summary": "The Organizations API allows for the management of organizations, including creating, reading, updating, and deleting organizations, as well as managing the members and editors of an organization.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/organizations/", "/organizations/<slug>/", "/organizations/<slug>/update/", "/organizations/<slug>/editors/update/", "/organizations/<slug>/members/update/"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/algorithms/urls.py", "endpoints": {"api_summary": "This API provides endpoints for managing algorithms, including creating, updating, and deleting algorithms, as well as managing algorithm images and models, and creating and managing jobs.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/algorithms/", "/algorithms/create/", "/algorithms/custom-create/", "/algorithms/import/", "/algorithms/<slug>/", "/algorithms/<slug>/statistics/", "/algorithms/<slug>/update/", "/algorithms/<slug>/publish/", "/algorithms/<slug>/description-update/", "/algorithms/<slug>/interfaces/", "/algorithms/<slug>/interfaces/create/", "/algorithms/<slug>/interfaces/<uuid:interface_pk>/delete/", "/algorithms/<slug>/repository/", "/algorithms/<slug>/images/create/", "/algorithms/<slug>/images/<uuid:pk>/", "/algorithms/<slug>/images/<uuid:pk>/import-status/", "/algorithms/<slug>/images/<uuid:pk>/build-status/", "/algorithms/<slug>/images/activate/", "/algorithms/<slug>/images/template/", "/algorithms/<slug>/images/<uuid:pk>/update/", "/algorithms/<slug>/models/<uuid:pk>/", "/algorithms/<slug>/models/<uuid:pk>/import-status/", "/algorithms/<slug>/models/create/", "/algorithms/<slug>/models/activate/", "/algorithms/<slug>/models/deactivate/", "/algorithms/<slug>/models/<uuid:pk>/update/", "/algorithms/<slug>/jobs/", "/algorithms/<slug:slug>/jobs/interface-select/", "/algorithms/<slug:slug>/<uuid:interface_pk>/jobs/create/", "/algorithms/<slug>/jobs/<uuid:pk>/", "/algorithms/<slug>/jobs/<uuid:pk>/status/", "/algorithms/<slug>/jobs/<uuid:pk>/update/", "/algorithms/<slug>/jobs/<uuid:pk>/display-set/create/", "/algorithms/<slug>/jobs/<uuid:pk>/progress/", "/algorithms/<slug>/jobs/<uuid:pk>/viewers/update/", "/algorithms/<slug>/editors/update/", "/algorithms/<slug>/users/update/", "/algorithms/<slug>/permission-requests/", "/algorithms/<slug>/permission-requests/create/", "/algorithms/<slug>/permission-requests/<int:pk>/update/"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/algorithms/views.py", "endpoints": {"api_summary": "This API allows users to create, read, update, and delete algorithms, as well as to perform CRUD operations on related data such as algorithm images and job results.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/algorithms/", "/algorithms/<slug>/", "/algorithms/<slug>/images/", "/algorithms/<slug>/images/<image_id>/", "/algorithms/<slug>/jobs/", "/algorithms/<slug>/jobs/<job_id>/"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/hanging_protocols/urls.py", "endpoints": {"api_summary": "The hanging protocols API allows for the creation, retrieval, and modification of hanging protocols for medical imaging. It provides endpoints for listing, creating, retrieving, and updating hanging protocols, as well as endpoints for retrieving the details of a specific hanging protocol.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/hanging-protocols/", "/hanging-protocols/create/", "/hanging-protocols/<slug>/", "/hanging-protocols/<slug>/update/"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/hanging_protocols/views.py", "endpoints": {"api_summary": "The Hanging Protocol API allows users to create, read, update, and delete hanging protocols. It also provides a list of all hanging protocols and their details.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/hanging-protocols/", "/hanging-protocols/<id>", "/hanging-protocols/<id>/update"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/archives/urls.py", "endpoints": {"api_summary": "The API provides endpoints for managing archives, including creating, updating, and deleting archives, as well as managing items within archives.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/archives/", "/archives/create/", "/archives/<slug>/", "/archives/<slug>/update/", "/archives/<slug>/editors/update/", "/archives/<slug>/uploaders/update/", "/archives/<slug>/users/update/", "/archives/<slug>/permission-requests/", "/archives/<slug>/permission-requests/create/", "/archives/<slug>/permission-requests/<int:pk>/update/", "/archives/<slug>/items/", "/archives/<slug>/items/<uuid:pk>/", "/archives/<slug>/items/create/", "/archives/<slug>/items/delete/", "/archives/<slug>/items/<uuid:pk>/edit/", "/archives/<slug>/items/<uuid:pk>/interface/create/", "/archives/<slug>/cases/add/", "/archives/<slug>/items/reader-study/update/"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/archives/views.py", "endpoints": {"api_summary": "This API allows for the management of archives, including creating, updating, and deleting archives, as well as adding and removing cases and images from archives.", "methods": ["GET", "POST", "PUT", "PATCH", "DELETE"], "paths": ["/archives/", "/archives/<archive_id>/", "/archives/<archive_id>/cases/", "/archives/<archive_id>/cases/<case_id>/", "/archives/<archive_id>/images/", "/archives/<archive_id>/images/<image_id>/"]}}
{"file": "cloned/grand-challenge.org/app/config/urls/rendering_subdomain.py", "endpoints": {"api_summary": "This API provides endpoints for serving images, checking the health of the server, and managing workstation sessions. It also includes a custom converter for handling prefixes in URLs.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/healthcheck/", "/workstations/<slug>/sessions/<uuid:pk>/", "/workstations/<slug>/sessions/<uuid:pk>/<path:path>", "/media/<settings.IMAGE_FILES_SUBDIRECTORY>/<prefix:pa>/<prefix:pb>/<uuid:pk>/<path:path>"]}}
{"file": "cloned/grand-challenge.org/app/config/urls/challenge_subdomain.py", "endpoints": {"api_summary": "This API provides endpoints for managing challenges, including creating, updating, and deleting challenges, as well as endpoints for managing onboarding tasks and invoices.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/challenges/", "/challenges/<challenge_id>/", "/onboarding-tasks/", "/onboarding-tasks/<task_id>/complete/", "/invoices/"]}}
{"file": "cloned/coolstore-microservices/src/bak/web/src/services/CartService.ts", "endpoints": {"api_summary": "This API provides endpoints for managing a user's cart, including getting, creating, updating, and deleting cart items, as well as checking out the cart.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/cart/api/carts", "/cart/api/carts/checkout"]}}
{"file": "cloned/coolstore-microservices/src/bak/web/src/services/SaleService.ts", "endpoints": {"api_summary": "The API allows for the retrieval of orders from the sale/api/orders endpoint. The API uses the GET method and requires a valid access token for authentication.", "methods": ["GET"], "paths": ["/sale/api/orders"]}}
{"file": "cloned/coolstore-microservices/src/bak/web/src/services/ProductService.ts", "endpoints": {"api_summary": "This API provides endpoints for retrieving and searching products, as well as retrieving a single product by ID. The endpoints are protected by an authentication service that requires a valid access token to be included in the request headers.", "methods": ["GET", "POST"], "paths": ["/api-gw/product-catalog/api/products", "/api-gw/product-catalog/api/products/search", "/api-gw/product-catalog/api/products/<id>"]}}
{"file": "cloned/coolstore-microservices/src/web/app/lib/auth.ts", "endpoints": {"api_summary": "The API provides endpoints for searching products, retrieving product details, creating and managing user sessions, and checking out carts.", "methods": ["GET", "POST", "PUT"], "paths": ["/api-gw/product-catalog/api/products", "/api-gw/product-catalog/api/products/search", "/api-gw/shopping-cart/api/carts"]}}
{"file": "cloned/eShopOnContainersDDD/src/Frontend/ClientApp/src/AppRoutes.js", "endpoints": {"api_summary": "This API provides a simple counter and fetch data functionality. The counter endpoint allows users to increment and decrement a counter, while the fetch data endpoint retrieves data from an external API and displays it in a list.", "methods": ["GET", "POST"], "paths": ["/counter", "/fetch-data"]}}
{"file": "cloned/eShopOnContainersDDD/src/Frontend/ClientApp/src/setupProxy.js", "endpoints": {"api_summary": "This API provides a proxy for the ASP.NET Core application running on the local machine. It forwards HTTP requests to the target URL, which is defined by the ASPNETCORE_HTTPS_PORT or ASPNETCORE_URLS environment variables. The API supports GET and POST methods and has a single endpoint for weather forecast data.", "methods": ["GET", "POST"], "paths": ["/weatherforecast"]}}
{"file": "cloned/acropolis/docker/remote.py", "endpoints": {"api_summary": "This API is a simple remote control for Twine, allowing users to update and ingest data. It defines two endpoints: /update and /ingest.", "methods": ["GET", "POST"], "paths": ["/update", "/ingest"]}}
{"file": "cloned/porta/public/javascripts/vendor/colorbox/jquery.colorbox-patched.js", "endpoints": {"api_summary": "This file defines a REST API endpoint for a Colorbox modal.", "methods": ["GET"], "paths": ["/colorbox"]}}
{"file": "cloned/porta/spec/javascripts/Policies/actions/PolicyRegistry.spec.ts", "endpoints": {"api_summary": "The PolicyRegistry API provides endpoints for managing policies in a registry. It includes endpoints for loading the registry, fetching policies, and creating, updating, and deleting policies.", "methods": ["GET", "POST"], "paths": ["/admin/api/policies.json"]}}
{"file": "cloned/porta/spec/javascripts/ActiveDocs/OAS3Autocomplete.spec.ts", "endpoints": {"api_summary": "This API defines a single endpoint for fetching OpenAPI specs and autocompleting fields with x-data-threescale-name property.", "methods": ["GET"], "paths": ["/"]}}
{"file": "cloned/porta/lib/developer_portal/app/assets/javascripts/essential_assets/highlight-7.5.js", "endpoints": {"api_summary": "This file defines a REST API endpoint for retrieving a list of users.", "methods": ["GET"], "paths": ["/users"]}}
{"file": "cloned/porta/app/javascript/src/Stats/provider/stats_response_codes.js", "endpoints": {"api_summary": "This API provides a chart to display the response codes for a given service. It allows users to select different response codes and view the data for each one. The API also includes a menu to select different time periods for the data.", "methods": ["GET"], "paths": ["/stats/api/services/<service_id>/usage_response_code.json"]}}
{"file": "cloned/porta/app/javascript/src/Stats/lib/usage_backend_api_metrics_source.js", "endpoints": {"api_summary": "The StatsUsageBackendApiMetricsSource class defines a REST API endpoint for retrieving usage statistics for a specific backend API. The endpoint is accessed using the GET method and returns a JSON object containing usage data for the specified API.", "methods": ["GET"], "paths": ["/stats/api/backend_apis/<id>/usage.json"]}}
{"file": "cloned/porta/app/javascript/src/Policies/actions/PolicyRegistry.ts", "endpoints": {"api_summary": "The API defined in this file retrieves a list of registry policies from the server and allows for loading the policies into the application. The API endpoints are used to fetch the policies and load them into the application.", "methods": ["GET"], "paths": ["/admin/api/policies.json"]}}
{"file": "cloned/porta/app/javascript/src/utilities/ajax.ts", "endpoints": {"api_summary": "This API provides a paginated list of items, with the ability to search and filter the results. It also supports JSON and form-encoded request bodies.", "methods": ["GET"], "paths": ["/items"]}}
{"file": "cloned/hypertrace/.github/graphql-e2e-tests/src/main/java/org/hypertrace/e2etest/ApiTest.java", "endpoints": {"api_summary": "This API provides a GraphQL interface for querying data from the Hypertrace e2e test environment.", "methods": ["GET", "POST"], "paths": ["/graphql"]}}
{"file": "cloned/lando-ui/landoui/pages.py", "endpoints": {"api_summary": "This API defines endpoints for user authentication and management, as well as a settings endpoint for managing user preferences.", "methods": ["GET", "POST"], "paths": ["/", "/signin", "/signout", "/logout", "/settings"]}}
{"file": "cloned/lando-ui/landoui/dockerflow.py", "endpoints": {"api_summary": "The API defined in this file provides health check endpoints for a load balancer and a service called lando-ui. It also provides a version endpoint that returns version information as defined in the app config.", "methods": ["GET"], "paths": ["/__heartbeat__", "/__lbheartbeat__", "/__version__"]}}
{"file": "cloned/tilegarden/src/tiler/src/api.js", "endpoints": {"api_summary": "This API provides tile-based data access for a variety of map configurations. It supports raster, vector, and UTF grid tiles, as well as filtering and layer selection.", "methods": ["GET"], "paths": ["/tile/{config}/{z}/{x}/{y}", "/grid/{config}/{z}/{x}/{y}", "/vector/{config}/{z}/{x}/{y}", "/"]}}
{"file": "cloned/web-languageforge/next-app/src/routes/projects/[project_code]/activities/+server.ts", "endpoints": {"api_summary": "This API provides a list of activities for a given project, along with information about the user who performed the activity, the date and time of the activity, and any changes made during the activity.", "methods": ["GET"], "paths": ["/activities"]}}
{"file": "cloned/web-languageforge/next-app/src/routes/password/+server.ts", "endpoints": {"api_summary": "This API endpoint allows users to change their password. It takes a JSON object with the new password and password confirmation as input, and returns an empty JSON object if successful.", "methods": ["PUT"], "paths": ["/users/<built-in function id>/change_password"]}}
{"file": "cloned/web-languageforge/next-app/src/routes/password/change/+page.server.ts", "endpoints": {"api_summary": "This API endpoint allows users to change their password. It takes a new password as input and updates the user's password in the database.", "methods": ["POST"], "paths": ["/password/change"]}}
{"file": "cloned/web-languageforge/test/e2e/tests/user-profile.spec.ts", "endpoints": {"api_summary": "This API provides endpoints for managing user profiles, including creating, updating, and deleting user accounts, as well as updating user about me information.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users", "/users/<built-in function id>", "/users/about-me"]}}
{"file": "cloned/web-languageforge/test/e2e/tests/reset-forgotten-password.spec.ts", "endpoints": {"api_summary": "This API allows users to reset their forgotten passwords by requesting a password reset email and then resetting their password using a reset password link sent to their email.", "methods": ["GET", "POST"], "paths": ["/forgot-password", "/reset-password"]}}
{"file": "cloned/web-languageforge/src/angular-app/languageforge/lexicon/core/lexicon-send-receive-api.service.ts", "endpoints": {"api_summary": "The LexiconSendReceiveApiService provides endpoints for managing and interacting with lexicon projects. It allows users to retrieve their projects, receive new projects, and get the status of their projects.", "methods": ["GET", "POST"], "paths": ["/lexiconSendReceive/getUserProjects", "/lexiconSendReceive/receiveProject", "/lexiconSendReceive/getProjectStatus"]}}
{"file": "cloned/web-languageforge/src/angular-app/bellows/core/api/project.service.ts", "endpoints": {"api_summary": "The ProjectService API provides endpoints for managing projects, including creating, joining, and deleting projects, as well as retrieving project information and updating user roles.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/projects", "/projects/<project_id>", "/projects/<project_id>/users", "/projects/<project_id>/users/<user_id>", "/projects/<project_id>/invite_link"]}}
{"file": "cloned/csw/csw-database/src/test/java/csw/database/JDatabaseServiceFactoryTest.java", "endpoints": {"api_summary": "This API provides methods for creating and accessing a database connection, as well as creating a DSL context for querying the database.", "methods": ["GET", "POST"], "paths": ["/database/connection", "/database/dsl"]}}
{"file": "cloned/csw/csw-database/src/test/java/csw/database/JDatabaseServiceTest.java", "endpoints": {"api_summary": "This API provides a database service for storing and retrieving data. It includes endpoints for creating, reading, updating, and deleting records, as well as querying and grouping records using foreign keys.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/films", "/budget"]}}
{"file": "cloned/csw/csw-time/csw-time-scheduler/src/test/java/csw/time/scheduler/api/JTimeServiceSchedulerTest.java", "endpoints": {"api_summary": "This API provides methods for scheduling tasks and messages to be executed at a specific time or periodically. It also provides methods for cancelling scheduled tasks.", "methods": ["GET", "POST"], "paths": ["/schedule/task", "/schedule/message", "/cancel/task"]}}
{"file": "cloned/csw/examples/src/main/java/org/tmt/csw/sample/JSampleHandlersAlarm.java", "endpoints": {"api_summary": "This API is a sample implementation of a component that interacts with a hardware device. It provides a command service to send commands to the device and an event service to receive events from the device.", "methods": ["GET", "POST"], "paths": ["/sample/command", "/sample/event"]}}
{"file": "cloned/csw/examples/src/main/java/org/tmt/csw/sample/JSampleHandlers.java", "endpoints": {"api_summary": "This API is a sample implementation of a component in the TMT Observatory Control System. It demonstrates how to use the Java API to interact with the HCD and send commands to it.", "methods": ["GET", "POST"], "paths": ["/samplehcd/sleep"]}}
{"file": "cloned/csw/examples/src/main/java/org/tmt/csw/samplehcd/JSampleHcdHandlers.java", "endpoints": {"api_summary": "This API provides a simple HCD (Hardware Control Daemon) that can be used to control a hypothetical telescope. It accepts commands to move the telescope to a specific position, and can also be used to query the current position of the telescope.", "methods": ["GET", "POST"], "paths": ["/tmt/csw/samplehcd/move", "/tmt/csw/samplehcd/position"]}}
{"file": "cloned/csw/examples/src/main/java/example/framework/components/hcd/JHcdComponentHandlers.java", "endpoints": {"api_summary": "This API is a HCD component that handles commands and updates the current state of the component.", "methods": ["GET", "POST"], "paths": ["/hcd/command", "/hcd/state"]}}
{"file": "cloned/csw/examples/src/main/java/example/event/JEventSubscribeExamples.java", "endpoints": {"api_summary": "This file defines a Java class that provides examples of how to use the Event Service to subscribe to events from a HCD. It includes methods for subscribing with a callback, async callback, actor ref, and source, as well as an example of how to subscribe to events from a specific subsystem.", "methods": ["GET", "POST"], "paths": ["/subscribe", "/subscribeAsync", "/subscribeActorRef", "/subscribeSource", "/psubscribe"]}}
{"file": "cloned/csw/examples/src/main/java/example/database/JAssemblyComponentHandlers.java", "endpoints": {"api_summary": "This API provides a database service for CSW component developers. It allows for creating, reading, updating, and deleting data in a PostgreSQL database.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/database/create", "/database/read", "/database/update", "/database/delete"]}}
{"file": "cloned/csw/examples/src/main/java/example/tutorial/basic/sampleassembly/JSampleAssemblyHandlersAlarm.java", "endpoints": {"api_summary": "This API is a sample assembly that demonstrates how to use the CSW framework to build a component that interacts with other components and publishes events. It also demonstrates how to use the alarm service to set an alarm severity based on a counter value.", "methods": ["GET", "POST"], "paths": ["/sample_assembly"]}}
{"file": "cloned/csw/examples/src/main/java/example/tutorial/basic/samplehcd/JSampleHcdHandlers.java", "endpoints": {"api_summary": "This API provides a simple HCD (Hardware Control Daemon) that can be used to control a hypothetical hardware device. It supports two commands: `hcdSleep` and `hcdImmediate`, which can be used to put the device to sleep or perform an immediate action, respectively.", "methods": ["GET", "POST"], "paths": ["/hcd/sleep", "/hcd/immediate"]}}
{"file": "cloned/csw/examples/src/test/java/org/tmt/csw/samplehcd/JSampleHcdTest.java", "endpoints": {"api_summary": "This API provides a sample HCD that demonstrates how to use the CSW framework to implement a hardware control device. It includes endpoints for subscribing to events, sending commands, and querying the current state of the HCD.", "methods": ["GET", "POST"], "paths": ["/subscribe", "/command", "/state"]}}
{"file": "cloned/csw/examples/src/test/java/example/config/JConfigClientExample.java", "endpoints": {"api_summary": "This file defines a REST API for managing configuration files in the TMT Observatory. It includes endpoints for creating, updating, deleting, and retrieving configuration files, as well as endpoints for managing the active version of a configuration file.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/config/create", "/config/update", "/config/delete", "/config/get", "/config/active"]}}
{"file": "cloned/csw/examples/src/test/java/example/command/JCommandServiceExample.java", "endpoints": {"api_summary": "This file defines a REST API for a command service example in Java. It includes endpoints for submitting and querying commands, as well as subscribing to current state.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/submit", "/query", "/subscribe"]}}
{"file": "cloned/Phraseanet/Phraseanet-production-client/dist/lightbox.js", "endpoints": {"api_summary": "This code defines a lightbox application for displaying and managing a basket of items.", "methods": ["GET", "POST"], "paths": ["/lightbox/ajax/LOAD_REPORT/", "/lightbox/ajax/SET_ELEMENT_AGREEMENT/", "/lightbox/ajax/SET_RELEASE/", "/lightbox/ajax/GET_ELEMENTS/", "/lightbox/ajax/SET_NOTE/", "/lightbox/ajax/LOAD_BASKET_ELEMENT/"]}}
{"file": "cloned/Phraseanet/Phraseanet-production-client/dist/lightbox.min.js", "endpoints": {"api_summary": "This code defines a lightbox application for displaying and managing a basket of items.", "methods": ["GET", "POST"], "paths": ["/lightbox/ajax/LOAD_REPORT/", "/lightbox/ajax/SET_ELEMENT_AGREEMENT/", "/lightbox/ajax/SET_RELEASE/", "/lightbox/ajax/GET_ELEMENTS/", "/lightbox/ajax/SET_NOTE/", "/lightbox/ajax/LOAD_BASKET_ELEMENT/"]}}
{"file": "cloned/Phraseanet/Phraseanet-production-client/src/components/list/listShare.js", "endpoints": {"api_summary": "This API allows for sharing lists with other users and managing the permissions of those users.", "methods": ["GET", "POST"], "paths": ["/prod/lists/list/<listId>/share/", "/prod/lists/list/<listId>/unshare/<userId>/", "/prod/push/search-user/"]}}
{"file": "cloned/Phraseanet/Phraseanet-production-client/src/components/basket/delete.js", "endpoints": {"api_summary": "This API defines endpoints for deleting baskets and records in a Phraseanet application.", "methods": ["POST"], "paths": ["/prod/baskets/<basketId>/delete/", "/prod/records/delete/what/"]}}
{"file": "cloned/Phraseanet/Phraseanet-production-client/src/components/order/index.js", "endpoints": {"api_summary": "This API is responsible for managing orders and order items. It provides endpoints for creating, reading, updating, and deleting orders and order items, as well as for retrieving order information and performing actions on orders.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/orders", "/orders/<order_id>", "/orders/<order_id>/items", "/orders/<order_id>/items/<item_id>"]}}
{"file": "cloned/Phraseanet/Phraseanet-production-client/src/components/record/recordEditor/presets.js", "endpoints": {"api_summary": "This API defines endpoints for managing presets in a record editor.", "methods": ["GET", "POST", "DELETE"], "paths": ["/prod/records/edit/presets", "/prod/records/edit/presets/<presetId>"]}}
{"file": "cloned/Phraseanet/Phraseanet-production-client/src/components/record/recordEditor/index.js", "endpoints": {"api_summary": "This code defines a REST API for editing records in a database.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/records", "/records/<record_id>", "/records/<record_id>/status"]}}
{"file": "cloned/Phraseanet/Phraseanet-production-client/src/components/story/reorderContent.js", "endpoints": {"api_summary": "This API allows users to reorder the elements in a story.", "methods": ["GET", "POST"], "paths": ["/prod/story/1/62/reorder/"]}}
{"file": "cloned/Phraseanet/www/scripts/apps/admin/tasks-manager/collections/tasks.js", "endpoints": {"api_summary": "The TaskCollection API allows for the management of tasks in the Phraseanet system. It provides endpoints for retrieving, creating, updating, and deleting tasks, as well as endpoints for querying and filtering tasks based on various criteria.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/admin/task-manager/tasks", "/admin/task-manager/tasks/<task_id>"]}}
{"file": "cloned/Phraseanet/resources/www/common/js/components/user.js", "endpoints": {"api_summary": "The API allows for setting user preferences by making a POST request to the /user/preferences/ endpoint with the property name and value in the request body.", "methods": ["POST"], "paths": ["/user/preferences/"]}}
{"file": "cloned/Phraseanet/resources/www/prod/js/jquery.main-prod.js", "endpoints": {"api_summary": "This code defines a REST API with the following endpoints:", "methods": ["GET", "POST"], "paths": ["/prod/query/", "/prod/query/<query>/"]}}
{"file": "cloned/flagr/browser/flagr-ui/src/router/index.js", "endpoints": {"api_summary": "This API provides a simple interface for retrieving and manipulating flag data. It includes endpoints for retrieving a list of all flags, retrieving a single flag by ID, and creating a new flag.", "methods": ["GET", "POST"], "paths": ["/flags", "/flags/:flagId"]}}
{"file": "cloned/flagr/swagger_gen/restapi/embedded_spec.go", "endpoints": {"api_summary": "Flagr is a feature flagging, A/B testing and dynamic configuration microservice. The base path for all the APIs is \"/api/v1\".", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/evaluation", "/evaluation/batch", "/export/eval_cache/json", "/export/sqlite", "/flags", "/flags/entity_types", "/flags/{flagID}", "/flags/{flagID}/enabled", "/flags/{flagID}/restore", "/flags/{flagID}/segments", "/flags/{flagID}/segments/reorder", "/flags/{flagID}/segments/{segmentID}", "/flags/{flagID}/segments/{segmentID}/constraints", "/flags/{flagID}/segments/{segmentID}/constraints/{constraintID}", "/flags/{flagID}/segments/{segmentID}/distributions", "/flags/{flagID}/snapshots", "/flags/{flagID}/tags", "/flags/{flagID}/tags/{tagID}", "/flags/{flagID}/variants", "/flags/{flagID}/variants/{variantID}", "/health", "/tags"]}}
{"file": "cloned/flagr/swagger_gen/restapi/doc.go", "endpoints": {"api_summary": "Flagr is a feature flagging, A/B testing, and dynamic configuration microservice. The base path for all the APIs is '/api/v1'.", "methods": ["GET", "POST"], "paths": ["/api/v1/users", "/api/v1/users/<built-in function id>"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/segment/create_segment_parameters.go", "endpoints": {"api_summary": "This API defines a segment for a flag in Flagr, a feature flag management system.", "methods": ["POST"], "paths": ["/flags/{flagID}/segments"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/segment/put_segment.go", "endpoints": {"api_summary": "The putSegment API is used to update a segment for a feature flag. It takes a flagID and a segmentID as parameters and returns the updated segment.", "methods": ["PUT"], "paths": ["/flags/{flagID}/segments/{segmentID}"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/segment/put_segments_reorder.go", "endpoints": {"api_summary": "The putSegmentsReorder API allows users to reorder the segments of a feature flag. This API is used to change the order in which the segments are evaluated, which can affect the behavior of the feature flag.", "methods": ["PUT"], "paths": ["/flags/{flagID}/segments/reorder"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/segment/put_segment_parameters.go", "endpoints": {"api_summary": "This API allows you to update a segment for a flag in Flagr.", "methods": ["PUT"], "paths": ["/flags/{flagID}/segments/{segmentID}"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/segment/find_segments.go", "endpoints": {"api_summary": "The FindSegments API allows users to retrieve a list of segments for a given flag. The API takes a flag ID as input and returns a list of segments for that flag.", "methods": ["GET"], "paths": ["/flags/{flagID}/segments"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/segment/put_segments_reorder_parameters.go", "endpoints": {"api_summary": "This API allows you to reorder segments for a flag.", "methods": ["PUT"], "paths": ["/flags/{flagID}/segments/reorder"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/segment/create_segment_urlbuilder.go", "endpoints": {"api_summary": "The API allows for the creation of segments for a given flag, and retrieval of information about those segments.", "methods": ["GET", "POST"], "paths": ["/flags/{flagID}/segments"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/segment/put_segments_reorder_urlbuilder.go", "endpoints": {"api_summary": "This API allows for the reordering of segments within a flag in the Feature Flag system.", "methods": ["PUT"], "paths": ["/flags/{flagID}/segments/reorder"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/segment/create_segment.go", "endpoints": {"api_summary": "The API allows for the creation of segments for feature flags. It provides a way to group users based on specific criteria and apply different variations of a feature to each segment.", "methods": ["POST"], "paths": ["/flags/{flagID}/segments"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/segment/delete_segment.go", "endpoints": {"api_summary": "The DeleteSegment API allows you to delete a segment from a feature flag. It takes the flag ID and segment ID as input and returns a response indicating whether the deletion was successful.", "methods": ["DELETE"], "paths": ["/flags/{flagID}/segments/{segmentID}"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/flag/put_flag.go", "endpoints": {"api_summary": "The put flag API allows users to update the status of a flag in the system. The API accepts a flag ID and a status update, and returns the updated flag object.", "methods": ["PUT"], "paths": ["/flags/{flagID}"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/flag/find_flags.go", "endpoints": {"api_summary": "The FindFlags API allows users to search for flags in the system. It takes a query parameter and returns a list of flags that match the query.", "methods": ["GET"], "paths": ["/flags/findFlags"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/flag/set_flag_enabled_parameters.go", "endpoints": {"api_summary": "This API allows you to set the enabled state of a flag in Flagr.", "methods": ["POST"], "paths": ["/flags/{flagID}/enabled"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/flag/get_flag_snapshots_urlbuilder.go", "endpoints": {"api_summary": "This API provides a way to retrieve flag snapshots for a given flag ID. It supports pagination and sorting.", "methods": ["GET"], "paths": ["/flags/{flagID}/snapshots"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/flag/restore_flag.go", "endpoints": {"api_summary": "The RestoreFlag API allows users to restore a flag that has been deleted. The API takes a flag ID as input and restores the flag if it exists and has been deleted.", "methods": ["PUT"], "paths": ["/flags/{flagID}/restore"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/flag/get_flag_entity_types_urlbuilder.go", "endpoints": {"api_summary": "This API provides a list of entity types that can be used to filter flags.", "methods": ["GET"], "paths": ["/flags/entity_types"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/flag/set_flag_enabled.go", "endpoints": {"api_summary": "This API allows for the management of feature flags, including setting the enabled status of a flag.", "methods": ["PUT"], "paths": ["/flags/{flagID}/enabled"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/flag/create_flag.go", "endpoints": {"api_summary": "The CreateFlag API allows users to create new flags in the system. It takes in a flag name, description, and a list of possible values, and returns the created flag object.", "methods": ["POST"], "paths": ["/flags"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/flag/restore_flag_urlbuilder.go", "endpoints": {"api_summary": "The API allows for the restoration of a flag by its ID. The API endpoint is /flags/{flagID}/restore, where {flagID} is the ID of the flag to be restored. The API accepts a GET request and returns a JSON object with the restored flag.", "methods": ["GET"], "paths": ["/flags/{flagID}/restore"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/flag/get_flag_snapshots.go", "endpoints": {"api_summary": "The GetFlagSnapshots API allows users to retrieve a list of snapshots for a given flag. The API takes a flag ID as input and returns a list of snapshots for that flag.", "methods": ["GET"], "paths": ["/flags/{flagID}/snapshots"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/flag/delete_flag.go", "endpoints": {"api_summary": "The DeleteFlag API allows users to delete a flag by its ID. The API takes a single parameter, the flag ID, and returns a 204 No Content response if the flag is successfully deleted.", "methods": ["DELETE"], "paths": ["/flags/{flagID}"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/flag/get_flag_snapshots_responses.go", "endpoints": {"api_summary": "This API provides a list of flag snapshots.", "methods": ["GET"], "paths": ["/flag/snapshots"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/flag/get_flag_entity_types_responses.go", "endpoints": {"api_summary": "This API provides a list of all the FlagEntityTypes in the system.", "methods": ["GET"], "paths": ["/flag/entity_types"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/flag/get_flag_entity_types.go", "endpoints": {"api_summary": "The getFlagEntityTypes API retrieves a list of entity types that can be used to filter flags. The API returns a list of entity types, each with a unique ID and a description of the entity type.", "methods": ["GET"], "paths": ["/flags/entity_types"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/flag/get_flag_snapshots_parameters.go", "endpoints": {"api_summary": "This API allows users to retrieve flag snapshots for a given flag ID. The API returns a list of flag snapshots, each containing information about the flag at a specific point in time.", "methods": ["GET"], "paths": ["/flags/{flagID}/snapshots"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/flag/get_flag.go", "endpoints": {"api_summary": "The GetFlag API allows users to retrieve a flag by its ID. The API takes a single parameter, the flag ID, and returns the flag object if it exists.", "methods": ["GET"], "paths": ["/flags/{flagID}"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/flag/find_flags_urlbuilder.go", "endpoints": {"api_summary": "This API allows users to search for flags based on various criteria, such as description, enabled status, and tags. It also allows users to retrieve a list of all flags, or to retrieve a specific flag by its ID.", "methods": ["GET"], "paths": ["/flags", "/flags/<built-in function id>"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/health/get_health_urlbuilder.go", "endpoints": {"api_summary": "The health API provides a simple endpoint to check the health of the service.", "methods": ["GET"], "paths": ["/health"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/health/get_health.go", "endpoints": {"api_summary": "The Flagr health check API allows you to check if the service is running and responding to requests. It returns a simple JSON object with a status code and a message indicating whether the service is healthy or not.", "methods": ["GET"], "paths": ["/health"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/constraint/create_constraint.go", "endpoints": {"api_summary": "The API allows for the creation of constraints for a given flag and segment in a feature flag system.", "methods": ["POST"], "paths": ["/flags/{flagID}/segments/{segmentID}/constraints"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/constraint/find_constraints.go", "endpoints": {"api_summary": "The FindConstraints API allows users to retrieve a list of constraints for a given flag and segment.", "methods": ["GET"], "paths": ["/flags/{flagID}/segments/{segmentID}/constraints"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/constraint/put_constraint.go", "endpoints": {"api_summary": "The put constraint API allows you to update a constraint for a specific flag and segment in the feature flag system.", "methods": ["PUT"], "paths": ["/flags/{flagID}/segments/{segmentID}/constraints/{constraintID}"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/constraint/find_constraints_urlbuilder.go", "endpoints": {"api_summary": "The API defines a way to retrieve constraints for a given flag and segment in a feature flag system.", "methods": ["GET"], "paths": ["/flags/{flagID}/segments/{segmentID}/constraints"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/constraint/delete_constraint.go", "endpoints": {"api_summary": "The DeleteConstraint API allows you to delete a constraint from a segment in a feature flag. It takes the flag ID, segment ID, and constraint ID as parameters and returns a 204 No Content response if the deletion is successful.", "methods": ["DELETE"], "paths": ["/flags/{flagID}/segments/{segmentID}/constraints/{constraintID}"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/distribution/put_distributions_parameters.go", "endpoints": {"api_summary": "This API allows you to manage distributions for a flag in a segment. It allows you to create, update, and delete distributions, as well as retrieve a list of all distributions for a segment.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/distributions", "/distributions/<distribution_id>"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/distribution/put_distributions.go", "endpoints": {"api_summary": "This API allows for the management of distributions for a given flag and segment. It provides endpoints for creating, updating, and deleting distributions, as well as for retrieving a list of all distributions for a given flag and segment.", "methods": ["PUT"], "paths": ["/flags/{flagID}/segments/{segmentID}/distributions"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/distribution/find_distributions.go", "endpoints": {"api_summary": "The API allows for the retrieval of distributions for a given flag and segment.", "methods": ["GET"], "paths": ["/flags/{flagID}/segments/{segmentID}/distributions"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/evaluation/post_evaluation.go", "endpoints": {"api_summary": "The evaluation API allows users to post evaluations for a given repository. The API returns a list of evaluations for a given repository.", "methods": ["POST"], "paths": ["/evaluation"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/evaluation/post_evaluation_batch.go", "endpoints": {"api_summary": "The evaluation API allows for batch evaluation of multiple models on a single input. It takes a JSON payload containing the input data and the models to evaluate, and returns a JSON object with the evaluation results.", "methods": ["POST"], "paths": ["/evaluation/batch"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/evaluation/post_evaluation_batch_urlbuilder.go", "endpoints": {"api_summary": "The evaluation API allows for batch evaluation of multiple requests in a single call.", "methods": ["POST"], "paths": ["/evaluation/batch"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/tag/delete_tag.go", "endpoints": {"api_summary": "The DeleteTag API allows users to delete a tag from a flag in the system.", "methods": ["DELETE"], "paths": ["/flags/{flagID}/tags/{tagID}"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/tag/find_all_tags.go", "endpoints": {"api_summary": "The FindAllTags API allows users to retrieve a list of all tags in the system.", "methods": ["GET"], "paths": ["/tags"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/tag/find_tags.go", "endpoints": {"api_summary": "The FindTags API allows users to retrieve a list of tags associated with a given flag ID.", "methods": ["GET"], "paths": ["/flags/{flagID}/tags"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/tag/find_all_tags_responses.go", "endpoints": {"api_summary": "This API allows users to retrieve a list of all tags in the system.", "methods": ["GET"], "paths": ["/tags"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/tag/create_tag.go", "endpoints": {"api_summary": "The CreateTag API allows users to create a new tag for a specific flag in the system. The API takes in a flag ID and a tag name as input, and returns the created tag object.", "methods": ["POST"], "paths": ["/flags/{flagID}/tags"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/export/get_export_sqlite.go", "endpoints": {"api_summary": "This API provides a way to export the database in SQLite format, which can be used for backup or transfer to another system.", "methods": ["GET"], "paths": ["/export/sqlite"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/export/get_export_eval_cache_json.go", "endpoints": {"api_summary": "This API provides a way to export the evaluation cache in JSON format.", "methods": ["GET"], "paths": ["/export/eval_cache/json"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/export/get_export_sqlite_urlbuilder.go", "endpoints": {"api_summary": "This API provides a way to export data from the system in SQLite format.", "methods": ["GET"], "paths": ["/export/sqlite"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/export/get_export_eval_cache_json_urlbuilder.go", "endpoints": {"api_summary": "The API provides a single endpoint for retrieving the evaluation cache in JSON format.", "methods": ["GET"], "paths": ["/export/eval_cache/json"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/export/get_export_eval_cache_json_parameters.go", "endpoints": {"api_summary": "This API provides a way to retrieve the evaluation cache for a given export in JSON format.", "methods": ["GET"], "paths": ["/export/eval_cache/<export_id>.json"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/export/get_export_sqlite_responses.go", "endpoints": {"api_summary": "This API allows for the export of data from the system in SQLite format.", "methods": ["GET"], "paths": ["/export/sqlite"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/export/get_export_eval_cache_json_responses.go", "endpoints": {"api_summary": "This API provides a way to export the evaluation cache of a Flagr instance in JSON format.", "methods": ["GET"], "paths": ["/export/eval_cache.json"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/variant/put_variant.go", "endpoints": {"api_summary": "The put variant API allows you to update a variant for a given flag. The API takes in a flag ID and a variant ID, and returns the updated variant.", "methods": ["PUT"], "paths": ["/flags/{flagID}/variants/{variantID}"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/variant/find_variants_responses.go", "endpoints": {"api_summary": "This API defines a set of endpoints for managing variants in a system. It includes endpoints for creating, retrieving, updating, and deleting variants, as well as endpoints for searching and filtering variants.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/variants", "/variants/<variant_id>", "/variants/search", "/variants/filter"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/variant/delete_variant.go", "endpoints": {"api_summary": "The DeleteVariant API allows you to delete a variant from a feature flag. The API takes the flag ID and variant ID as input and returns a response indicating whether the deletion was successful.", "methods": ["DELETE"], "paths": ["/flags/{flagID}/variants/{variantID}"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/variant/find_variants.go", "endpoints": {"api_summary": "The FindVariants API allows users to retrieve a list of variants for a given flag ID. The API takes a flag ID as input and returns a list of variants for that flag.", "methods": ["GET"], "paths": ["/flags/{flagID}/variants"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/variant/create_variant.go", "endpoints": {"api_summary": "The CreateVariant API allows you to create a new variant for a feature flag. The API takes in a flag ID and a variant object, and returns the created variant.", "methods": ["POST"], "paths": ["/flags/{flagID}/variants"]}}
{"file": "cloned/flagr/pkg/handler/handler.go", "endpoints": {"api_summary": "This API defines endpoints for managing and evaluating feature flags. It includes endpoints for creating, retrieving, updating, and deleting flags, as well as endpoints for evaluating the value of a flag for a given entity.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/flags", "/flags/<flag_id>", "/evaluation", "/evaluation/batch"]}}
{"file": "cloned/flagr/pkg/handler/crud_flag_creation.go", "endpoints": {"api_summary": "This API defines a single endpoint for creating a new flag, which is a feature flag that can be used to control the behavior of a system. The endpoint accepts a JSON payload with the flag details and creates a new flag in the system.", "methods": ["POST"], "paths": ["/flags"]}}
{"file": "cloned/flagr/pkg/handler/crud_test.go", "endpoints": {"api_summary": "This API provides CRUD operations for various entities, including flags, segments, constraints, variants, and tags.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/flags", "/flags/{flagID}", "/flags/{flagID}/segments", "/flags/{flagID}/segments/{segmentID}", "/flags/{flagID}/constraints", "/flags/{flagID}/constraints/{constraintID}", "/flags/{flagID}/variants", "/flags/{flagID}/variants/{variantID}", "/flags/{flagID}/tags", "/flags/{flagID}/tags/{tagID}"]}}
{"file": "cloned/ashirt-server/backend/server/shared_routes.go", "endpoints": {"api_summary": "The API provides endpoints for managing operations, tags, and evidence in an Ashirt system. It allows for creating, reading, updating, and deleting operations, as well as creating, reading, and deleting tags and evidence associated with operations.", "methods": ["GET", "POST"], "paths": ["/operations", "/operations/{operation_slug}/tags", "/operations/{operation_slug}/evidence"]}}
{"file": "cloned/ashirt-server/backend/server/api.go", "endpoints": {"api_summary": "The API provides endpoints for managing evidence in an operation, including creating, reading, updating, and deleting evidence, as well as retrieving metadata about the evidence.", "methods": ["GET", "POST", "PUT"], "paths": ["/checkconnection", "/operations/{operation_slug}/evidence/{evidence_uuid}/{type:media|preview}", "/operations/{operation_slug}/evidence", "/operations/{operation_slug}/evidence/{evidence_uuid}/metadata"]}}
{"file": "cloned/ashirt-server/backend/server/web.go", "endpoints": {"api_summary": "This API allows users to perform CRUD operations on users, user groups, and operations.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users", "/usergroups", "/operations"]}}
{"file": "cloned/ashirt-server/backend/bin/api/api.go", "endpoints": {"api_summary": "This API provides a RESTful interface for interacting with a database and a content store. It supports various HTTP methods such as GET, POST, PUT, and DELETE to perform CRUD operations on the data stored in the database and the content store.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/<resource>", "/api/<resource>/<id>", "/api/<resource>/<id>/<subresource>", "/api/<resource>/<id>/<subresource>/<subid>"]}}
{"file": "cloned/ashirt-server/backend/integration/querying_evidence_test.go", "endpoints": {"api_summary": "This API allows users to perform CRUD operations on operations, tags, and evidence in an Ashirt system.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/web/operations", "/web/operations/op/queries", "/web/operations/op/tags", "/web/operations/op/evidence"]}}
{"file": "cloned/ashirt-server/backend/integration/api_test.go", "endpoints": {"api_summary": "This API provides endpoints for managing operations and evidence in an Ashirt system. It allows users to create, read, update, and delete operations and evidence, as well as retrieve information about operations and evidence.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/operations", "/api/operations/<operation_id>", "/api/operations/<operation_id>/evidence", "/api/operations/<operation_id>/evidence/<evidence_id>"]}}
{"file": "cloned/ashirt-server/backend/authschemes/recoveryauth/recovery_auth.go", "endpoints": {"api_summary": "The RecoveryAuthScheme API provides endpoints for generating and managing recovery codes for user authentication. It also includes endpoints for registering new users and logging in with a recovery code.", "methods": ["POST", "GET", "DELETE"], "paths": ["/generate", "/generateemail", "/admin/register", "/login", "/expired", "/metrics"]}}
{"file": "cloned/ashirt-server/backend/authschemes/localauth/local_auth.go", "endpoints": {"api_summary": "This API defines endpoints for user authentication and password management using local authentication.", "methods": ["POST", "GET", "PUT", "DELETE"], "paths": ["/register", "/login", "/login/resetpassword", "/password", "/admin/password", "/admin/register", "/link", "/totp", "/totp/generate", "/totp/totp", "/totp/delete"]}}
{"file": "cloned/ashirt-server/backend/services/api_key.go", "endpoints": {"api_summary": "This API defines endpoints for creating, deleting, and listing API keys for a user.", "methods": ["POST", "DELETE", "GET"], "paths": ["/api/keys", "/api/keys/<access_key>", "/api/keys/<user_slug>"]}}
{"file": "cloned/ashirt-server/frontend/src/authschemes/webauthn/services.ts", "endpoints": {"api_summary": "This API provides endpoints for managing WebAuthN credentials for authentication and authorization. It allows users to register, login, link, and manage their credentials, as well as list and delete existing credentials.", "methods": ["POST", "GET", "PUT", "DELETE"], "paths": ["/auth/webauthn/register/begin", "/auth/webauthn/register/finish", "/auth/webauthn/login/begin", "/auth/webauthn/login/finish", "/auth/webauthn/link/begin", "/auth/webauthn/link/finish", "/auth/webauthn/credential/add/begin", "/auth/webauthn/credential/add/finish", "/auth/webauthn/credentials", "/auth/webauthn/credential/<credentialId>", "/auth/webauthn/credential"]}}
{"file": "cloned/ashirt-server/frontend/src/authschemes/recovery/services.ts", "endpoints": {"api_summary": "The API allows for the generation of recovery emails for users who have forgotten their passwords. It takes in a user's email address as a parameter and sends a recovery email to that address.", "methods": ["POST"], "paths": ["/auth/recovery/generateemail"]}}
{"file": "cloned/ashirt-server/frontend/src/authschemes/local/services.ts", "endpoints": {"api_summary": "This API provides endpoints for user authentication and management, including login, registration, password reset, and two-factor authentication.", "methods": ["POST", "GET", "PUT", "DELETE"], "paths": ["/auth/local/login", "/auth/local/register", "/auth/local/login/resetpassword", "/auth/local/password", "/auth/local/link", "/auth/local/totp", "/auth/local/totp/generate", "/auth/local/totp/set", "/auth/local/totp/delete", "/auth/local/login/totp"]}}
{"file": "cloned/ashirt-server/frontend/src/services/users.ts", "endpoints": {"api_summary": "The API provides endpoints for listing users, listing users for admin view, and listing evidence creators. The endpoints allow for filtering and pagination of results.", "methods": ["GET", "POST"], "paths": ["/users", "/users/<built-in function id>", "/evidence_creators"]}}
{"file": "cloned/ashirt-server/frontend/src/services/api_keys.ts", "endpoints": {"api_summary": "The API allows for the creation, retrieval, and deletion of API keys for users. It also provides a way to list all API keys for a given user.", "methods": ["GET", "POST", "DELETE"], "paths": ["/users/<userSlug>/api-keys", "/users/<userSlug>/api-keys/<accessKey>"]}}
{"file": "cloned/ashirt-server/frontend/src/services/evidence.ts", "endpoints": {"api_summary": "This API provides endpoints for managing evidence in a security operation. It allows for creating, reading, updating, and deleting evidence, as well as running service workers for evidence and managing findings associated with evidence.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/evidence", "/evidence/<evidenceUuid>", "/evidence/<evidenceUuid>/metadata", "/evidence/<evidenceUuid>/service-workers", "/evidence/<evidenceUuid>/findings"]}}
{"file": "cloned/ashirt-server/frontend/src/services/queries.ts", "endpoints": {"api_summary": "This API provides endpoints for managing saved queries for a specific operation. It allows for listing, creating, updating, and deleting saved queries, as well as retrieving a specific saved query by ID.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/saved_queries", "/saved_queries/<operationSlug>", "/saved_queries/<operationSlug>/<queryId>"]}}
{"file": "cloned/ashirt-server/frontend/src/services/findings.ts", "endpoints": {"api_summary": "This API provides endpoints for managing findings and evidence in a security assessment operation. It allows for creating, reading, updating, and deleting findings and evidence, as well as listing and searching for findings.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/findings", "/findings/<findingUuid>", "/findings/<findingUuid>/evidence", "/findings/<findingUuid>/evidence/<evidenceUuid>", "/findingCategories", "/findingCategories/<findingCategoryId>"]}}
{"file": "cloned/ashirt-server/frontend/src/services/user_groups.ts", "endpoints": {"api_summary": "This API provides endpoints for managing user groups, including creating, deleting, and modifying user groups, as well as listing user groups and their associated users.", "methods": ["GET", "POST", "DELETE", "PUT"], "paths": ["/user-groups", "/user-groups/<user-group-slug>", "/user-groups/<user-group-slug>/users"]}}
{"file": "cloned/ashirt-server/frontend/src/services/user.ts", "endpoints": {"api_summary": "This API provides endpoints for managing user profiles, authentication schemes, and recovery codes. It also includes endpoints for creating headless users and retrieving TOTP for users.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users", "/users/<built-in function id>", "/users/<built-in function id>/auth-schemes", "/users/<built-in function id>/recovery-codes", "/users/<built-in function id>/totp"]}}
{"file": "cloned/machine-learning/interface/views_web.py", "endpoints": {"api_summary": "This API provides endpoints for data loading, login, logout, registration, and retrieving collections, models, features, and predictions.", "methods": ["POST", "GET"], "paths": ["/", "/load-data", "/login", "/logout", "/register", "/retrieve-collections", "/retrieve-sv-model", "/retrieve-sv-features", "/retrieve-prediction-titles", "/retrieve-prediction", "/save-prediction"]}}
{"file": "cloned/machine-learning/test/live_server/3_programmatic_interface/dataset_url/pytest_svm_dataset_url.py", "endpoints": {"api_summary": "This API provides a programmatic interface for loading data into a SQL database and generating models using the Support Vector Machine (SVM) algorithm. It also provides a method for making predictions using a trained SVM model.", "methods": ["POST"], "paths": ["/load-data"]}}
{"file": "cloned/machine-learning/test/live_server/3_programmatic_interface/file_upload/pytest_svm_file_upload.py", "endpoints": {"api_summary": "This API provides endpoints for data manipulation and model generation for a machine learning model. It includes endpoints for data upload, data append, model generation, and model prediction.", "methods": ["POST"], "paths": ["/load-data"]}}
{"file": "cloned/machine-learning/test/live_server/3_programmatic_interface/results/pytest_2_svr_prediction.py", "endpoints": {"api_summary": "This API provides endpoints for saving, retrieving, and retrieving titles of SVR predictions. It also includes a method for retrieving a sample JSON dataset.", "methods": ["POST"], "paths": ["/save-prediction", "/retrieve-prediction", "/retrieve-prediction-titles"]}}
{"file": "cloned/machine-learning/test/live_server/3_programmatic_interface/results/pytest_1_svm_prediction.py", "endpoints": {"api_summary": "This API provides endpoints for saving, retrieving, and retrieving titles of SVM predictions.", "methods": ["POST"], "paths": ["/save-prediction", "/retrieve-prediction", "/retrieve-prediction-titles"]}}
{"file": "cloned/Hotmaps-toolbox-service/pytest_suit/routes/uploads/test_exportCsvHectare.py", "endpoints": {"api_summary": "This API allows users to upload and export data in CSV format for specific layers and years. The API also supports the retrieval of information about the industrial database, including emissions, subsector, and excess heat.", "methods": ["POST"], "paths": ["/upload/export/csv/hectare"]}}
{"file": "cloned/Hotmaps-toolbox-service/api/app/api_v1/stats.py", "endpoints": {"api_summary": "This API provides information on statistics for specific layers, area, and year. It also provides information on the energy mix for specific NUTS and LAU.", "methods": ["GET", "POST"], "paths": ["/stats/layers/nuts-lau", "/stats/layers/hectares", "/stats/energy-mix/nuts-lau", "/stats/personal-layers"]}}
{"file": "cloned/Hotmaps-toolbox-service/api/app/api_v1/heat_load_profile.py", "endpoints": {"api_summary": "This API provides information on heat load profiles for different areas and years.", "methods": ["POST"], "paths": ["/heat-load-profile/duration-curve/nuts-lau", "/heat-load-profile/duration-curve/hectares", "/heat-load-profile/hectares", "/heat-load-profile/nuts-lau"]}}
{"file": "cloned/Hotmaps-toolbox-service/api/app/api_v1/snapshot.py", "endpoints": {"api_summary": "This API provides endpoints for managing snapshots for a connected user. It allows for adding, loading, deleting, and updating snapshots, as well as listing all snapshots for a user.", "methods": ["POST", "GET", "DELETE"], "paths": ["/snapshot/add", "/snapshot/load", "/snapshot/delete", "/snapshot/update", "/snapshot/list"]}}
{"file": "cloned/Hotmaps-toolbox-service/api/app/decorators/restplus.py", "endpoints": {"api_summary": "The HotMaps Main API serves data and computations to the app. It handles various types of errors, including RequestException, ParameterException, HugeRequestException, IntersectionException, NotEnoughPointsException, UserExistingException, ActivationException, SnapshotNotExistingException, WrongCredentialException, UserUnidentifiedException, UserDoesntOwnUploadsException, UploadFileNotExistingException, NotEnoughSpaceException, UploadNotExistingException, UserNotActivatedException, and TimeOutException.", "methods": ["GET", "POST"], "paths": ["/users", "/users/<built-in function id>"]}}
{"file": "cloned/kapua/commons-rest/filters/src/main/java/org/eclipse/kapua/commons/rest/filters/CORSResponseFilter.java", "endpoints": {"api_summary": "This API is a CORS (Cross-Origin Resource Sharing) filter implementation that handles CORS requests per-scope basis. It allows GET, POST, DELETE, and PUT methods and allows specific headers. The filter also checks the origin of the request and allows it if it matches at least one defined endpoint.", "methods": ["GET", "POST", "DELETE", "PUT"], "paths": ["/", "/{path}"]}}
{"file": "cloned/kapua/commons-rest/errors/src/main/java/org/eclipse/kapua/commons/rest/errors/KapuaExceptionMapper.java", "endpoints": {"api_summary": "The KapuaExceptionMapper class provides a way to map KapuaExceptions to HTTP responses. It is used to handle exceptions that occur during the execution of REST API endpoints.", "methods": ["GET", "POST", "PUT", "DELETE", "HEAD", "OPTIONS", "TRACE", "CONNECT"], "paths": ["/users", "/users/<built-in function id>", "/users/<built-in function id>/<built-in function id>"]}}
{"file": "cloned/kapua/commons-rest/errors/src/main/java/org/eclipse/kapua/commons/rest/errors/KapuaDuplicatePasswordCredentialExceptionMapper.java", "endpoints": {"api_summary": "The KapuaDuplicatePasswordCredentialExceptionMapper class is an exception mapper that maps DuplicatedPasswordCredentialException to a HTTP response with status code 409 (Conflict) and a JSON body containing information about the exception.", "methods": ["POST"], "paths": ["/users/<built-in function id>"]}}
{"file": "cloned/kapua/plug-ins/sso/openid-connect/provider/src/main/java/org/eclipse/kapua/plugin/sso/openid/provider/OpenIDUtils.java", "endpoints": {"api_summary": "The OpenIDUtils class provides utility methods for retrieving URIs from the Well-Known OpenID Configuration and for retrieving the OpenID Connect discovery endpoint (the provider's Well-Known Configuration Endpoint).", "methods": ["GET"], "paths": ["/openid-configuration"]}}
{"file": "cloned/kapua/plug-ins/sso/openid-connect/api/src/main/java/org/eclipse/kapua/plugin/sso/openid/OpenIDService.java", "endpoints": {"api_summary": "The OpenID Connect Single Sign On service interface provides endpoints for login, logout, and token retrieval. It also provides a method to get the user's information using the access token.", "methods": ["GET", "POST"], "paths": ["/login", "/logout", "/tokens", "/userinfo"]}}
{"file": "cloned/kapua/job-engine/api/src/main/java/org/eclipse/kapua/job/engine/queue/QueuedJobExecutionService.java", "endpoints": {"api_summary": "The QueuedJobExecutionService API provides methods to manage QueuedJobExecution objects, including creating, updating, finding, listing, and deleting them.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/queuedJobExecutions", "/queuedJobExecutions/<id>", "/queuedJobExecutions/query"]}}
{"file": "cloned/kapua/job-engine/jbatch/src/main/java/org/eclipse/kapua/job/engine/queue/jbatch/QueuedJobExecutionServiceImpl.java", "endpoints": {"api_summary": "The QueuedJobExecutionServiceImpl class provides an implementation of the QueuedJobExecutionService interface, which allows for the creation, update, and retrieval of queued job executions. It also provides methods for querying and counting queued job executions, as well as deleting them.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/queuedJobExecutions", "/queuedJobExecutions/<queuedJobExecutionId>", "/queuedJobExecutions/query", "/queuedJobExecutions/count"]}}
{"file": "cloned/kapua/job-engine/app/resources/src/main/java/org/eclipse/kapua/job/engine/app/resources/JobEngineResource.java", "endpoints": {"api_summary": "The JobEngineResource API provides endpoints for managing and executing jobs in the Kapua system.", "methods": ["GET", "POST"], "paths": ["/", "/clean-data/{scopeId}/{jobId}", "/is-running/{scopeId}/{jobId}", "/is-running/{scopeId}", "/resume-execution/{scopeId}/{jobId}/{executionId}", "/start/{scopeId}/{jobId}", "/start-with-options/{scopeId}/{jobId}", "/stop/{scopeId}/{jobId}", "/stop-execution/{scopeId}/{jobId}/{executionId}"]}}
{"file": "cloned/kapua/client/security/src/main/java/org/eclipse/kapua/client/security/ServiceClient.java", "endpoints": {"api_summary": "The Security service provides endpoints for broker connect and disconnect logic, as well as retrieving entity information.", "methods": ["GET", "POST"], "paths": ["/brokerConnect", "/brokerDisconnect", "/getEntity"]}}
{"file": "cloned/kapua/client/security/src/main/java/org/eclipse/kapua/client/security/amqp/ClientAMQP.java", "endpoints": {"api_summary": "The AMQP client implementation provides a way to send and receive messages using the AMQP protocol. It can be used to connect to a message broker and send or receive messages from a queue or topic.", "methods": ["POST", "GET"], "paths": ["/amqp/send", "/amqp/receive"]}}
{"file": "cloned/kapua/transport/mqtt/src/main/java/org/eclipse/kapua/transport/mqtt/MqttResponseCallback.java", "endpoints": {"api_summary": "The MqttResponseCallback class implements the MqttCallback interface and is used in the transport layer of Kapua to receive responses from devices when a request is sent to the device. It offers the capability of receiving one or more responses.", "methods": ["messageArrived", "deliveryComplete", "connectionLost"], "paths": ["/org.eclipse.kapua.transport.mqtt.MqttResponseCallback"]}}
{"file": "cloned/kapua/transport/mqtt/src/main/java/org/eclipse/kapua/transport/mqtt/pooling/PooledMqttClientFactory.java", "endpoints": {"api_summary": "The PooledMqttClientFactory class creates and manages a pool of MQTT clients for the MqttClientPool. It creates new clients and connects them to the MQTT broker, and it also validates and destroys clients in the pool.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/pooledMqttClientFactory", "/pooledMqttClientFactory/create", "/pooledMqttClientFactory/wrap", "/pooledMqttClientFactory/validateObject", "/pooledMqttClientFactory/destroyObject"]}}
{"file": "cloned/kapua/transport/mqtt/src/main/java/org/eclipse/kapua/transport/message/mqtt/MqttMessage.java", "endpoints": {"api_summary": "This API is a message implementation for the MQTT transport protocol. It defines a message object that can be used to send and receive messages over an MQTT connection.", "methods": ["GET", "POST"], "paths": ["/org/eclipse/kapua/transport/message/mqtt/MqttMessage"]}}
{"file": "cloned/kapua/simulator-kura/src/main/java/org/eclipse/kapua/kura/simulator/app/deploy/AbstractDeployApplication.java", "endpoints": {"api_summary": "This API provides endpoints for managing and deploying bundles and packages in a Kura-based system.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/bundles", "/bundles/<bundleId>", "/packages", "/packages/<packageId>"]}}
{"file": "cloned/kapua/translator/kapua/kura/src/main/java/org/eclipse/kapua/translator/kapua/kura/AbstractTranslatorKapuaKura.java", "endpoints": {"api_summary": "This API translates Kapua messages to Kura requests and vice versa.", "methods": ["GET", "POST"], "paths": ["/kapua/kura/translate"]}}
{"file": "cloned/kapua/translator/kapua/kura/src/main/java/org/eclipse/kapua/translator/kapua/kura/TranslatorAppCommandKapuaKura.java", "endpoints": {"api_summary": "This API allows for the management of device commands, including the ability to execute commands, retrieve command status, and manage command settings.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/commands", "/commands/<command_id>", "/commands/<command_id>/status", "/commands/<command_id>/settings"]}}
{"file": "cloned/kapua/translator/kapua/kura/src/main/java/org/eclipse/kapua/translator/kapua/kura/TranslatorAppConfigurationKapuaKura.java", "endpoints": {"api_summary": "This API is responsible for translating device configurations from the Kapua format to the Kura format. It provides endpoints for retrieving and updating device configurations, as well as for retrieving device definitions.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/configurations", "/configurations/<configuration_id>", "/snapshots", "/snapshots/<snapshot_id>"]}}
{"file": "cloned/kapua/translator/kapua/kura/src/main/java/org/eclipse/kapua/translator/kapua/kura/TranslatorAppAssetKapuaKura.java", "endpoints": {"api_summary": "The TranslatorAppAssetKapuaKura class is a translator implementation that converts AssetRequestMessage to KuraRequestMessage. It translates the channel and payload of the AssetRequestMessage to the corresponding KuraRequestChannel and KuraRequestPayload.", "methods": ["GET", "POST"], "paths": ["/assets", "/assets/<asset_id>", "/assets/<asset_id>/channels", "/assets/<asset_id>/channels/<channel_id>"]}}
{"file": "cloned/kapua/translator/kapua/kura/src/main/java/org/eclipse/kapua/translator/kapua/kura/TranslatorAppSnapshotKapuaKura.java", "endpoints": {"api_summary": "This API provides a translator implementation from SnapshotRequestMessage to KuraRequestMessage, which is used to manage snapshots of the application.", "methods": ["GET", "POST", "PUT", "DELETE", "OPTIONS"], "paths": ["/snapshots", "/snapshots/<snapshotId>", "/snapshots/rollback"]}}
{"file": "cloned/kapua/translator/kapua/kura/src/main/java/org/eclipse/kapua/translator/kapua/kura/inventory/TranslatorAppInventoryBundleExecKapuaKura.java", "endpoints": {"api_summary": "This API is responsible for managing device inventory bundles in the Kura application. It allows for starting and stopping inventory bundles, as well as retrieving information about the bundles.", "methods": ["GET", "POST"], "paths": ["/inventory/bundles", "/inventory/bundles/<bundle_id>", "/inventory/bundles/<bundle_id>/start", "/inventory/bundles/<bundle_id>/stop"]}}
{"file": "cloned/kapua/translator/kapua/kura/src/main/java/org/eclipse/kapua/translator/kapua/kura/inventory/TranslatorAppInventoryContainerExecKapuaKura.java", "endpoints": {"api_summary": "This API is responsible for managing the inventory of devices in the system. It allows for the creation, retrieval, update, and deletion of device inventory containers, as well as the execution of inventory container actions.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/inventory/containers", "/inventory/containers/<container_id>", "/inventory/containers/<container_id>/actions/<action_id>"]}}
{"file": "cloned/kapua/translator/kapua/kura/src/main/java/org/eclipse/kapua/translator/kapua/kura/inventory/TranslatorAppInventoryEmptyKapuaKura.java", "endpoints": {"api_summary": "The TranslatorAppInventoryEmptyKapuaKura class is a translator implementation that converts an InventoryEmptyRequestMessage to a KuraRequestMessage. It defines a REST API endpoint for retrieving inventory information for a specific application.", "methods": ["GET"], "paths": ["/inventory/app/<app_id>/<app_version>"]}}
{"file": "cloned/kapua/translator/kapua/kura/src/main/java/org/eclipse/kapua/translator/kapua/kura/keystore/AbstractTranslatorAppKeystoreKapuaKura.java", "endpoints": {"api_summary": "This API provides endpoints for managing keystores and their entries in a Kura application.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/keystores", "/keystores/entries", "/keystores/entries/entry", "/keystores/entries/certificate", "/keystores/entries/keypair", "/keystores/entries/csr"]}}
{"file": "cloned/kapua/translator/kapua/kura/src/main/java/org/eclipse/kapua/translator/kura/kapua/TranslatorAppBundleKuraKapua.java", "endpoints": {"api_summary": "This API translates Kura response messages to Kapua bundle response messages.", "methods": ["GET", "POST"], "paths": ["/bundles"]}}
{"file": "cloned/kapua/translator/kapua/kura/src/main/java/org/eclipse/kapua/translator/kura/kapua/TranslatorAppNotifyKuraKapua.java", "endpoints": {"api_summary": "This API translates Kura notification messages to Kapua notification messages.", "methods": ["GET", "POST"], "paths": ["/kura/kapua"]}}
{"file": "cloned/kapua/translator/kapua/kura/src/main/java/org/eclipse/kapua/translator/kura/kapua/TranslatorAppPackageKuraKapua.java", "endpoints": {"api_summary": "This API is responsible for translating Kura response messages to Kapua package response messages.", "methods": ["GET", "POST"], "paths": ["/kura/kapua/packages"]}}
{"file": "cloned/kapua/translator/kapua/kura/src/main/java/org/eclipse/kapua/translator/kura/kapua/TranslatorLifeBirthKuraKapua.java", "endpoints": {"api_summary": "This API translates Kura birth messages to Kapua birth messages.", "methods": ["POST"], "paths": ["/translator/kura/kapua/birth"]}}
{"file": "cloned/kapua/translator/kapua/kura/src/main/java/org/eclipse/kapua/translator/kura/kapua/TranslatorAppSnapshotKuraKapua.java", "endpoints": {"api_summary": "This API translates Kura snapshot IDs to device snapshots.", "methods": ["GET", "POST"], "paths": ["/snapshots"]}}
{"file": "cloned/kapua/translator/kapua/kura/src/main/java/org/eclipse/kapua/translator/kura/kapua/TranslatorLifeDisconnectKuraKapua.java", "endpoints": {"api_summary": "This API translates Kura disconnect messages to Kapua disconnect messages.", "methods": ["POST"], "paths": ["/kura/disconnect"]}}
{"file": "cloned/kapua/translator/kapua/kura/src/main/java/org/eclipse/kapua/translator/kura/kapua/inventory/TranslatorAppInventoryNoContentKuraKapua.java", "endpoints": {"api_summary": "The TranslatorAppInventoryNoContentKuraKapua API is a RESTful API that allows clients to manage the inventory of devices in a Kura-based system. It provides endpoints for creating, reading, updating, and deleting device inventory records, as well as endpoints for querying and searching the inventory.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/inventory", "/inventory/<device_id>", "/inventory/query", "/inventory/search"]}}
{"file": "cloned/kapua/translator/kapua/kura/src/main/java/org/eclipse/kapua/translator/kura/kapua/keystore/AbstractTranslatorAppKeystoreKuraKapua.java", "endpoints": {"api_summary": "This API provides a way to manage keystores and keystore items for devices in a Kura network.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/keystores", "/keystores/<keystore_id>", "/keystores/<keystore_id>/items", "/keystores/<keystore_id>/items/<item_id>"]}}
{"file": "cloned/kapua/translator/kapua/kura/src/main/java/org/eclipse/kapua/translator/kura/kapua/keystore/TranslatorAppKeystoreCsrKuraKapua.java", "endpoints": {"api_summary": "This API is responsible for managing the keystore of a device. It allows for the creation, retrieval, and deletion of keystore entries, as well as the generation of CSRs (Certificate Signing Requests).", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/keystore/entries", "/keystore/entries/<entry_id>", "/keystore/entries/csr"]}}
{"file": "cloned/kapua/translator/kura/jms/src/main/java/org/eclipse/kapua/translator/jms/kura/event/AbstractTranslatorEventJmsKura.java", "endpoints": {"api_summary": "This API defines a translator for JMS messages to Device Management Event messages.", "methods": ["GET", "POST"], "paths": ["/device-management/events"]}}
{"file": "cloned/kapua/translator/kura/mqtt/src/main/java/org/eclipse/kapua/translator/kura/mqtt/TranslatorRequestKuraMqtt.java", "endpoints": {"api_summary": "This API is a translator implementation from KuraRequestMessage to MqttMessage. It translates KuraRequestMessage to MqttMessage and generates a response MqttTopic for the given KuraRequestChannel.", "methods": ["GET", "POST"], "paths": ["/kura/translator/request/kura/mqtt"]}}
{"file": "cloned/kapua/rest-api/core/src/main/java/org/eclipse/kapua/app/api/core/auth/KapuaTokenAuthenticationFilter.java", "endpoints": {"api_summary": "The KapuaTokenAuthenticationFilter is a Shiro filter that authenticates requests using an access token provided in the Authorization header. It supports OPTIONS requests and returns a 401 Unauthorized response if the token is invalid or expired.", "methods": ["OPTIONS", "GET", "POST", "PUT", "DELETE", "HEAD", "PATCH"], "paths": ["/users", "/users/<built-in function id>"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/Domains.java", "endpoints": {"api_summary": "The Domains API provides endpoints for querying and retrieving information about domains in a scope.", "methods": ["GET", "POST"], "paths": ["/{scopeId}/domains", "/{scopeId}/domains/_query", "/{scopeId}/domains/_count", "/{scopeId}/domains/{domainId}"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/Internal.java", "endpoints": {"api_summary": "The Internal API provides a way to visualize the wiring of the Guice injector in the form of a Graphviz graph.", "methods": ["GET"], "paths": ["/_internal/_wiring"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/Streams.java", "endpoints": {"api_summary": "The Streams API allows clients to publish fire-and-forget messages to a topic composed of the account name, client ID, and semantic parts.", "methods": ["POST"], "paths": ["/{scopeId}/streams/messages"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/JobExecutions.java", "endpoints": {"api_summary": "This API provides endpoints for managing job executions and targets in a Kapua system.", "methods": ["GET", "POST"], "paths": ["/{scopeId}/jobs/{jobId}/executions", "/{scopeId}/jobs/{jobId}/executions/_query", "/{scopeId}/jobs/{jobId}/executions/_count", "/{scopeId}/jobs/{jobId}/executions/{executionId}", "/{scopeId}/jobs/{jobId}/executions/{executionId}/targets"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/JobEngine.java", "endpoints": {"api_summary": "The JobEngine API provides endpoints for starting, stopping, and querying the status of jobs in the Kapua job engine.", "methods": ["POST", "GET"], "paths": ["/{scopeId}/jobs/{jobId}/_start", "/{scopeId}/jobs/{jobId}/_stop", "/{scopeId}/jobs/{jobId}/_isRunning", "/{scopeId}/jobs/_isRunning", "/{scopeId}/jobs/{jobId}/executions/{executionId}/_resume", "/{scopeId}/jobs/{jobId}/executions/{executionId}/_stop"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/DataChannels.java", "endpoints": {"api_summary": "The DataChannels API provides endpoints for querying and retrieving information about channels in a given scope.", "methods": ["GET", "POST"], "paths": ["/{scopeId}/data/channels", "/{scopeId}/data/channels/_query", "/{scopeId}/data/channels/_count", "/{scopeId}/data/channels/{channelInfoId}"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/DataMessages.java", "endpoints": {"api_summary": "This API provides endpoints for querying and storing data messages in a scope.", "methods": ["GET", "POST"], "paths": ["/{scopeId}/data/messages", "/{scopeId}/data/messages/_query", "/{scopeId}/data/messages/_count", "/{scopeId}/data/messages/{datastoreMessageId}"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/DataMetrics.java", "endpoints": {"api_summary": "The DataMetrics API provides endpoints for querying and retrieving metric information in a specific scope.", "methods": ["GET", "POST"], "paths": ["/{scopeId}/data/metrics", "/{scopeId}/data/metrics/_query", "/{scopeId}/data/metrics/_count", "/{scopeId}/data/metrics/{metricInfoId}"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/Accounts.java", "endpoints": {"api_summary": "The Accounts API provides endpoints for managing accounts in the scope. It allows for querying, counting, creating, and deleting accounts.", "methods": ["GET", "POST"], "paths": ["/{scopeId}/accounts", "/{scopeId}/accounts/_query", "/{scopeId}/accounts/_count", "/{scopeId}/accounts/_create"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/UsersCredentials.java", "endpoints": {"api_summary": "The UsersCredentials API provides endpoints for managing user credentials in a scope. It allows for querying, counting, creating, and resetting user credentials.", "methods": ["GET", "POST"], "paths": ["/{scopeId}/user{plural:|s}/{userId}/credentials", "/{scopeId}/user{plural:|s}/{userId}/credentials/_count", "/{scopeId}/user{plural:|s}/{userId}/credentials/_reset"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/DeviceManagementPackages.java", "endpoints": {"api_summary": "The DeviceManagementPackages API provides endpoints for managing device packages, including downloading and uninstalling packages.", "methods": ["GET", "POST"], "paths": ["/{scopeId}/devices/{deviceId}/packages", "/{scopeId}/devices/{deviceId}/packages/_download", "/{scopeId}/devices/{deviceId}/packages/_uninstall"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/Devices.java", "endpoints": {"api_summary": "The Devices API allows you to manage devices in a scope. You can create, read, update, and delete devices, as well as query and count devices.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/{scopeId}/devices", "/{scopeId}/devices/_query", "/{scopeId}/devices/_count", "/{scopeId}/devices/{deviceId}"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/DeviceManagementConfigurations.java", "endpoints": {"api_summary": "The DeviceManagementConfigurations API allows you to manage the configurations of devices in a Kapua system. It provides endpoints for getting and updating device configurations, as well as for getting and updating the settings of the device configuration store.", "methods": ["GET", "PUT"], "paths": ["/{scopeId}/devices/{deviceId}/configurations", "/{scopeId}/devices/{deviceId}/configurations/{componentId}", "/{scopeId}/devices/{deviceId}/configurations/_settings"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/SystemInformation.java", "endpoints": {"api_summary": "The SystemInformation API provides information about the system, including the operating system, hardware, and software versions.", "methods": ["GET"], "paths": ["/sys-info"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/DeviceConnections.java", "endpoints": {"api_summary": "The DeviceConnections API allows you to manage device connections in the scope. You can query, count, and retrieve individual device connections, as well as get a list of available authentication adapters.", "methods": ["GET", "POST"], "paths": ["/{scopeId}/deviceconnections", "/{scopeId}/deviceconnections/_query", "/{scopeId}/deviceconnections/_count", "/{scopeId}/deviceconnections/{deviceConnectionId}", "/{scopeId}/deviceconnections/{deviceConnectionId}/_disconnect", "/{scopeId}/deviceconnections/_availableAuth"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/AccessRoles.java", "endpoints": {"api_summary": "The AccessRoles API provides access to the AccessRole entities in the system, allowing users to create, read, update, and delete them.", "methods": ["GET", "POST", "DELETE"], "paths": ["/{scopeId}/accessinfos/{accessInfoId}/roles", "/{scopeId}/accessinfos/{accessInfoId}/roles/_query", "/{scopeId}/accessinfos/{accessInfoId}/roles/_count", "/{scopeId}/accessinfos/{accessInfoId}/roles/{accessRoleId}"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/Authentication.java", "endpoints": {"api_summary": "The Authentication API provides endpoints for authenticating users and obtaining access tokens, as well as endpoints for refreshing and invalidating access tokens.", "methods": ["POST", "GET"], "paths": ["/authentication/user", "/authentication/mfa", "/authentication/apikey", "/authentication/jwt", "/authentication/logout", "/authentication/refresh", "/authentication/info"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/DeviceManagementRequestsJson.java", "endpoints": {"api_summary": "The DeviceManagementRequestsJson API allows for sending requests to a device, which can be used for remote management of resources attached to the device such as sensors and registries.", "methods": ["POST"], "paths": ["/{scopeId}/devices/{deviceId}/requests"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/RolesPermissions.java", "endpoints": {"api_summary": "This API provides access to role permissions in a scope for a specific role.", "methods": ["GET", "POST", "DELETE"], "paths": ["/{scopeId}/roles/{roleId}/permissions", "/{scopeId}/roles/{roleId}/permissions/_query", "/{scopeId}/roles/{roleId}/permissions/_count", "/{scopeId}/roles/{roleId}/permissions/{rolePermissionId}"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/DeviceManagementCommands.java", "endpoints": {"api_summary": "The DeviceManagementCommands API allows you to execute remote commands on a device and retrieve the command output.", "methods": ["POST"], "paths": ["/{scopeId}/devices/{deviceId}/commands/_execute"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/Authorizations.java", "endpoints": {"api_summary": "The Authorizations API provides a list of user claims in a given scope.", "methods": ["GET"], "paths": ["/authorization/claims"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/DeviceManagementInventory.java", "endpoints": {"api_summary": "The DeviceManagementInventory API provides endpoints for managing the inventory of a device, including bundles, containers, packages, and system packages.", "methods": ["GET", "POST"], "paths": ["/{scopeId}/devices/{deviceId}/inventory", "/{scopeId}/devices/{deviceId}/inventory/bundles", "/{scopeId}/devices/{deviceId}/inventory/bundles/_start", "/{scopeId}/devices/{deviceId}/inventory/bundles/_stop", "/{scopeId}/devices/{deviceId}/inventory/containers", "/{scopeId}/devices/{deviceId}/inventory/containers/_start", "/{scopeId}/devices/{deviceId}/inventory/containers/_stop", "/{scopeId}/devices/{deviceId}/inventory/packages", "/{scopeId}/devices/{deviceId}/inventory/system"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/UserMfa.java", "endpoints": {"api_summary": "The UserMfa API provides endpoints for managing multi-factor authentication (MFA) options for users. It allows for creating, retrieving, and deleting MFA options, as well as disabling trusted machines for a given MFA option.", "methods": ["POST", "GET", "DELETE"], "paths": ["/user/mfa", "/user/mfa/disableTrust"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/DataMessagesJson.java", "endpoints": {"api_summary": "This API provides endpoints for querying and storing data messages in a scope.", "methods": ["GET", "POST"], "paths": ["/{scopeId}/data/messages", "/{scopeId}/data/messages/_query", "/{scopeId}/data/messages/{datastoreMessageId}"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/Jobs.java", "endpoints": {"api_summary": "The Jobs API provides endpoints for managing jobs in the scope. It allows for querying, creating, updating, and deleting jobs, as well as getting a count of the number of jobs that match a given query.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/{scopeId}/jobs", "/{scopeId}/jobs/_query", "/{scopeId}/jobs/_count", "/{scopeId}/jobs/{jobId}"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/Users.java", "endpoints": {"api_summary": "The Users API provides endpoints for managing users in a scope. It allows for querying, creating, updating, and deleting users, as well as retrieving a count of users.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/{scopeId}/users", "/{scopeId}/users/_query", "/{scopeId}/users/_count", "/{scopeId}/users/{userId}"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/UserProfiles.java", "endpoints": {"api_summary": "The UserProfiles API allows for the management of user profiles, including creating, updating, and retrieving user profile information.", "methods": ["GET", "PUT"], "paths": ["/{scopeId}/user/profile"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/DeviceManagementAssets.java", "endpoints": {"api_summary": "The DeviceManagementAssets API provides endpoints for managing assets on a device. It allows for retrieving, reading, writing, and configuring assets, as well as getting and setting application settings.", "methods": ["GET", "POST", "PUT"], "paths": ["/{scopeId}/devices/{deviceId}/assets", "/{scopeId}/devices/{deviceId}/assets/_read", "/{scopeId}/devices/{deviceId}/assets/_write", "/{scopeId}/devices/{deviceId}/assets/_settings"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/EndpointInfos.java", "endpoints": {"api_summary": "The EndpointInfos API provides endpoints for querying, creating, updating, and deleting EndpointInfo objects in the scope.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/{scopeId}/endpointInfos", "/{scopeId}/endpointInfos/_query", "/{scopeId}/endpointInfos/_count", "/{scopeId}/endpointInfos/{endpointInfoId}"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/AccessPermissions.java", "endpoints": {"api_summary": "The AccessPermissions API provides endpoints for managing access permissions for a given scope and access information.", "methods": ["GET", "POST", "DELETE"], "paths": ["/{scopeId}/accessinfos/{accessInfoId}/permissions", "/{scopeId}/accessinfos/{accessInfoId}/permissions/_query", "/{scopeId}/accessinfos/{accessInfoId}/permissions/_count", "/{scopeId}/accessinfos/{accessInfoId}/permissions/{accessPermissionId}"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/DeviceManagementSnapshots.java", "endpoints": {"api_summary": "The DeviceManagementSnapshots API provides endpoints for managing device snapshots and configurations. It allows users to retrieve a list of all snapshots available on a device, update the configuration of a device by rolling back to a specific snapshot, and download the configuration of a device given a snapshot ID.", "methods": ["GET", "POST"], "paths": ["/{scopeId}/devices/{deviceId}/snapshots", "/{scopeId}/devices/{deviceId}/snapshots/{snapshotId}", "/{scopeId}/devices/{deviceId}/snapshots/{snapshotId}/_rollback"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/UserCredentials.java", "endpoints": {"api_summary": "The UserCredentials API provides endpoints for changing and resetting the password of a user credential.", "methods": ["POST"], "paths": ["/{scopeId}/user/credentials/password", "/{scopeId}/user/credentials/{credentialId}/_reset"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/Groups.java", "endpoints": {"api_summary": "The Groups API allows you to manage groups in the scope. You can create, read, update, and delete groups, as well as query and count the groups in the scope.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/{scopeId}/groups", "/{scopeId}/groups/_query", "/{scopeId}/groups/_count", "/{scopeId}/groups/{groupId}"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/DataClients.java", "endpoints": {"api_summary": "The DataClients API provides endpoints for querying and retrieving client information in a specific scope.", "methods": ["GET", "POST"], "paths": ["/{scopeId}/data/clients", "/{scopeId}/data/clients/_query", "/{scopeId}/data/clients/_count", "/{scopeId}/data/clients/{clientInfoId}"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/DeviceConnectionOptions.java", "endpoints": {"api_summary": "The DeviceConnectionOptions API provides endpoints for managing device connection options in the Kapua system.", "methods": ["GET", "PUT"], "paths": ["/{scopeId}/deviceconnections/{connectionId}/options"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/JobSteps.java", "endpoints": {"api_summary": "The JobSteps API allows you to manage job steps in a Kapua system. It provides endpoints for creating, updating, and deleting job steps, as well as querying and counting job steps.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/{scopeId}/jobs/{jobId}/steps", "/{scopeId}/jobs/{jobId}/steps/_query", "/{scopeId}/jobs/{jobId}/steps/_count", "/{scopeId}/jobs/{jobId}/steps/{stepId}"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/UsersMfa.java", "endpoints": {"api_summary": "The UsersMfa API provides endpoints for managing multi-factor authentication (MFA) options for users in a given scope.", "methods": ["POST", "GET", "DELETE"], "paths": ["/{scopeId}/users/{userId}/mfa", "/{scopeId}/users/{userId}/mfa/disableTrust"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/Tags.java", "endpoints": {"api_summary": "The Tags API allows you to create, read, update, and delete tags in a given scope. It also allows you to query and count the tags in a scope.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/{scopeId}/tags", "/{scopeId}/tags/_query", "/{scopeId}/tags/_count", "/{scopeId}/tags/{tagId}"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/DeviceManagementOperationNotifications.java", "endpoints": {"api_summary": "The DeviceManagementOperationNotifications API provides endpoints for managing notifications related to device management operations.", "methods": ["GET", "POST", "DELETE"], "paths": ["/{scopeId}/devices/{deviceId}/operations/{operationId}/notifications", "/{scopeId}/devices/{deviceId}/operations/{operationId}/notifications/_query", "/{scopeId}/devices/{deviceId}/operations/{operationId}/notifications/_count", "/{scopeId}/devices/{deviceId}/operations/{operationId}/notifications/{managementOperationNotificationId}"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/JobTargets.java", "endpoints": {"api_summary": "This API provides endpoints for managing job targets and their executions in a Kapua system.", "methods": ["GET", "POST", "DELETE"], "paths": ["/{scopeId}/jobs/{jobId}/targets", "/{scopeId}/jobs/{jobId}/targets/_query", "/{scopeId}/jobs/{jobId}/targets/_count", "/{scopeId}/jobs/{jobId}/targets/{targetId}", "/{scopeId}/jobs/{jobId}/targets/{targetId}/executions"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/JobTriggersFired.java", "endpoints": {"api_summary": "The JobTriggersFired API provides endpoints for querying and counting fired triggers for a given job and trigger.", "methods": ["GET", "POST"], "paths": ["/{scopeId}/jobs/{jobId}/triggers/{triggerId}/fired", "/{scopeId}/jobs/{jobId}/triggers/{triggerId}/fired/_query", "/{scopeId}/jobs/{jobId}/triggers/{triggerId}/fired/_count"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/Credentials.java", "endpoints": {"api_summary": "The Credentials API provides endpoints for managing credentials in the scope. It allows for querying, creating, updating, and deleting credentials, as well as unlocking credentials that have been locked due to a lockout policy.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/credentials", "/credentials/_query", "/credentials/_count", "/credentials/{credentialId}", "/credentials/{credentialId}/_unlock", "/credentials/_availableCredentials"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/StreamsJson.java", "endpoints": {"api_summary": "The StreamsJson API allows for publishing fire-and-forget messages to a topic composed of the account name, client ID, and semantic parts.", "methods": ["POST"], "paths": ["/{scopeId}/streams/messages"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/ServiceConfigurations.java", "endpoints": {"api_summary": "The ServiceConfigurations API allows for the management of service configurations for a given scope. It provides endpoints for fetching all configurations, updating configurations, and fetching a specific configuration for a given service.", "methods": ["GET", "PUT"], "paths": ["/{scopeId}/serviceConfigurations", "/{scopeId}/serviceConfigurations/{serviceId}"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/DeviceManagementRequests.java", "endpoints": {"api_summary": "The DeviceManagementRequests API allows for the management of requests to devices, such as remote management of resources attached to the device, such as sensors and registries.", "methods": ["POST"], "paths": ["/{scopeId}/devices/{deviceId}/requests"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/AccessInfos.java", "endpoints": {"api_summary": "The AccessInfos API provides endpoints for managing access information in the scope.", "methods": ["GET", "POST", "DELETE"], "paths": ["/{scopeId}/accessinfos", "/{scopeId}/accessinfos/_query", "/{scopeId}/accessinfos/_count", "/{scopeId}/accessinfos/{accessInfoId}"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/Roles.java", "endpoints": {"api_summary": "The Roles API provides endpoints for managing roles in the system, including creating, updating, and deleting roles, as well as querying and counting roles.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/roles", "/roles/_query", "/roles/_count", "/roles/{roleId}", "/roles/{roleId}/users"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/CurrentAccount.java", "endpoints": {"api_summary": "The CurrentAccount API provides endpoints for retrieving and updating the current account information. It uses the AccountService to perform the actual operations.", "methods": ["GET", "PUT"], "paths": ["/account"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/Account.java", "endpoints": {"api_summary": "The Account API provides endpoints for managing accounts in the system. It allows for creating, updating, and deleting accounts, as well as retrieving information about specific accounts.", "methods": ["GET", "PUT", "DELETE"], "paths": ["/{scopeId}/accounts/{accountId}"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/DeviceManagementBundles.java", "endpoints": {"api_summary": "The DeviceManagementBundles API provides endpoints for managing device bundles, including getting a list of all bundles installed on a device, starting a bundle, and stopping a bundle.", "methods": ["GET", "POST"], "paths": ["/{scopeId}/devices/{deviceId}/bundles", "/{scopeId}/devices/{deviceId}/bundles/{bundleId}/_start", "/{scopeId}/devices/{deviceId}/bundles/{bundleId}/_stop"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/DeviceEvents.java", "endpoints": {"api_summary": "This API allows users to perform CRUD operations on device events in a given scope and device.", "methods": ["GET", "POST", "DELETE"], "paths": ["/{scopeId}/devices/{deviceId}/events", "/{scopeId}/devices/{deviceId}/events/_query", "/{scopeId}/devices/{deviceId}/events/_count", "/{scopeId}/devices/{deviceId}/events/{deviceEventId}"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/JobStepDefinitions.java", "endpoints": {"api_summary": "The JobStepDefinitions API provides endpoints for querying and retrieving job step definitions in a Kapua system.", "methods": ["GET", "POST"], "paths": ["/{scopeId}/jobStepDefinitions", "/{scopeId}/jobStepDefinitions/_query", "/{scopeId}/jobStepDefinitions/_count", "/{scopeId}/jobStepDefinitions/{stepDefinitionId}"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/JobTriggerDefinitions.java", "endpoints": {"api_summary": "The JobTriggerDefinitions API provides endpoints for querying and retrieving trigger definitions for a given job.", "methods": ["GET", "POST"], "paths": ["/{scopeId}/triggerDefinitions", "/{scopeId}/triggerDefinitions/_query", "/{scopeId}/triggerDefinitions/_count", "/{scopeId}/triggerDefinitions/{triggerDefinitionId}"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/DeviceManagementOperations.java", "endpoints": {"api_summary": "The DeviceManagementOperations API allows you to manage device management operations in the scope of a specific device.", "methods": ["GET", "POST", "DELETE"], "paths": ["/{scopeId}/devices/{deviceId}/operations", "/{scopeId}/devices/{deviceId}/operations/_query", "/{scopeId}/devices/{deviceId}/operations/_count", "/{scopeId}/devices/{deviceId}/operations/{deviceManagementOperationId}"]}}
{"file": "cloned/kapua/console/core/src/main/java/org/eclipse/kapua/app/console/core/client/ChangePasswordDialog.java", "endpoints": {"api_summary": "The ChangePasswordDialog class is a simple dialog that allows the user to change their password. It has a form with fields for the old password, new password, and confirmation password, as well as a field for the MFA code if MFA is enabled. The submit method calls the changePassword method of the GwtCredentialServiceAsync service to change the password.", "methods": ["POST"], "paths": ["/changePassword"]}}
{"file": "cloned/kapua/console/core/src/main/java/org/eclipse/kapua/app/console/core/client/MfaLoginDialog.java", "endpoints": {"api_summary": "This API is a multi-factor authentication login second step that requires a MFA code and trust this machine request.", "methods": ["POST"], "paths": ["/mfa-login"]}}
{"file": "cloned/kapua/console/core/src/main/java/org/eclipse/kapua/app/console/core/servlet/KapuaErrorHandlerServlet.java", "endpoints": {"api_summary": "The KapuaErrorHandlerServlet provides a centralized error handling mechanism for the Kapua application. It handles HTTP errors and exceptions, and provides a consistent error message format for the user.", "methods": ["GET", "POST"], "paths": ["/httpError", "/throwable"]}}
{"file": "cloned/kapua/console/core/src/main/java/org/eclipse/kapua/app/console/core/servlet/SsoCallbackServlet.java", "endpoints": {"api_summary": "This API is used for single sign-on (SSO) authentication using OpenID Connect. It receives an authorization code from the OpenID Connect provider and exchanges it for an access token and ID token. The API also handles errors and redirects the user to the home page with the tokens as query parameters.", "methods": ["GET"], "paths": ["/sso/callback"]}}
{"file": "cloned/kapua/console/core/src/main/java/org/eclipse/kapua/app/console/core/shared/service/GwtSettingsService.java", "endpoints": {"api_summary": "The GwtSettingsService API provides a subset of configuration values for front-end usage. It includes endpoints for retrieving product information, OpenID login and logout URIs, and the home URI. The API also provides a boolean flag to indicate whether OpenID is enabled.", "methods": ["GET", "POST"], "paths": ["/settings", "/settings/productInformation", "/settings/openIDLoginUri", "/settings/openIDLogoutUri", "/settings/homeUri", "/settings/openIDEnabled"]}}
{"file": "cloned/kapua/console/core/src/main/java/org/eclipse/kapua/app/console/core/shared/service/GwtAuthorizationService.java", "endpoints": {"api_summary": "The GwtAuthorizationService API provides endpoints for authenticating and managing user sessions. It allows clients to login, logout, and retrieve information about the current active session.", "methods": ["POST", "GET", "DELETE"], "paths": ["/auth/login", "/auth/logout", "/auth/session"]}}
{"file": "cloned/kapua/console/module/api/src/main/java/org/eclipse/kapua/app/console/module/api/server/GwtConsoleServiceImpl.java", "endpoints": {"api_summary": "The GwtConsoleServiceImpl class provides a REST API for retrieving and updating configuration values for a given scope and parent scope. It also provides a way to retrieve custom views and tabs for a given view.", "methods": ["GET", "POST"], "paths": ["/org/eclipse/kapua/app/console/module/api/server/GwtConsoleServiceImpl", "/org/eclipse/kapua/app/console/module/api/server/GwtConsoleServiceImpl/getCustomEntityViews", "/org/eclipse/kapua/app/console/module/api/server/GwtConsoleServiceImpl/getCustomTabsForView", "/org/eclipse/kapua/app/console/module/api/server/GwtConsoleServiceImpl/updateComponentConfiguration"]}}
{"file": "cloned/kapua/console/module/api/src/main/java/org/eclipse/kapua/app/console/module/api/client/ui/tab/EntityDescriptionTabItem.java", "endpoints": {"api_summary": "This API provides a description of the entity, including its name and value.", "methods": ["GET"], "paths": ["/entity/description"]}}
{"file": "cloned/kapua/console/module/api/src/main/java/org/eclipse/kapua/app/console/module/api/shared/service/GwtSecurityTokenService.java", "endpoints": {"api_summary": "The GwtSecurityTokenService API provides a method to generate a valid security token for the application.", "methods": ["POST"], "paths": ["/xsrf"]}}
{"file": "cloned/kapua/console/module/api/src/main/java/org/eclipse/kapua/app/console/module/api/shared/service/GwtConsoleService.java", "endpoints": {"api_summary": "The GwtConsoleService API provides methods for retrieving custom entity views, custom tabs for a given view, and updating component configurations. It is used by the Eclipse Kapua Console module to provide a user interface for managing and configuring the console.", "methods": ["GET", "POST"], "paths": ["/console/customEntityViews", "/console/customTabs", "/console/updateComponentConfiguration"]}}
{"file": "cloned/kapua/console/module/job/src/main/java/org/eclipse/kapua/app/console/module/job/server/GwtTriggerDefinitionServiceImpl.java", "endpoints": {"api_summary": "The GwtTriggerDefinitionServiceImpl class provides a REST API for managing trigger definitions in the Kapua scheduler. It allows clients to retrieve a list of all trigger definitions, retrieve a specific trigger definition by ID, and create a new trigger definition.", "methods": ["GET", "POST"], "paths": ["/job/server/GwtTriggerDefinitionServiceImpl/findAll", "/job/server/GwtTriggerDefinitionServiceImpl/find/<gwtTriggerDefinitionId>", "/job/server/GwtTriggerDefinitionServiceImpl/trickGwt"]}}
{"file": "cloned/kapua/console/module/job/src/main/java/org/eclipse/kapua/app/console/module/job/server/GwtJobStepDefinitionServiceImpl.java", "endpoints": {"api_summary": "The GwtJobStepDefinitionServiceImpl class provides a REST API for managing job step definitions in the Kapua system. It allows clients to retrieve a list of all job step definitions, retrieve a specific job step definition by ID, and create, update, or delete job step definitions.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/job/step/definition", "/job/step/definition/<id>"]}}
{"file": "cloned/kapua/console/module/job/src/main/java/org/eclipse/kapua/app/console/module/job/server/GwtJobExecutionServiceImpl.java", "endpoints": {"api_summary": "The GwtJobExecutionServiceImpl provides a REST API for querying job executions in the Kapua system. It allows clients to retrieve job executions by job ID and scope ID, and provides pagination support for large result sets.", "methods": ["GET"], "paths": ["/job/execution/findByJobId"]}}
{"file": "cloned/kapua/console/module/job/src/main/java/org/eclipse/kapua/app/console/module/job/server/GwtJobEngineServiceImpl.java", "endpoints": {"api_summary": "The GwtJobEngineServiceImpl class provides a REST API for starting, stopping, and restarting jobs in the Kapua job engine. It also provides a method for querying job executions.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/job/start", "/job/stop", "/job/restart", "/job/execution"]}}
{"file": "cloned/kapua/console/module/job/src/main/java/org/eclipse/kapua/app/console/module/job/client/JobGrid.java", "endpoints": {"api_summary": "The JobGrid API allows users to view and manage jobs in the console. It includes endpoints for querying, creating, updating, and deleting jobs, as well as endpoints for starting, stopping, and restarting jobs.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/jobs", "/jobs/<job_id>", "/jobs/<job_id>/start", "/jobs/<job_id>/stop", "/jobs/<job_id>/restart"]}}
{"file": "cloned/kapua/console/module/job/src/main/java/org/eclipse/kapua/app/console/module/job/client/JobAddDialog.java", "endpoints": {"api_summary": "The JobAddDialog class is a part of the Eclipse Kapua application and provides a dialog for adding a new job to the system. It includes fields for the job name and description, and provides validation and error handling for these fields.", "methods": ["GET", "POST"], "paths": ["/jobs", "/jobs/<job_id>"]}}
{"file": "cloned/kapua/console/module/job/src/main/java/org/eclipse/kapua/app/console/module/job/client/steps/JobTabStepsGrid.java", "endpoints": {"api_summary": "This API provides a grid for displaying and managing job steps in the console.", "methods": ["GET", "POST"], "paths": ["/jobs/<jobId>/steps"]}}
{"file": "cloned/kapua/console/module/job/src/main/java/org/eclipse/kapua/app/console/module/job/client/schedule/JobTabSchedulesGrid.java", "endpoints": {"api_summary": "This API defines a grid for displaying job schedules in the console.", "methods": ["GET"], "paths": ["/jobs/<jobId>/schedules"]}}
{"file": "cloned/kapua/console/module/job/src/main/java/org/eclipse/kapua/app/console/module/job/client/targets/JobTabTargetsToolbar.java", "endpoints": {"api_summary": "The JobTabTargetsToolbar class is a part of the Eclipse Kapua application and provides a toolbar for managing job targets. It allows users to add, delete, and start job targets, as well as export job targets to CSV.", "methods": ["GET", "POST"], "paths": ["/exporter_job_target"]}}
{"file": "cloned/kapua/console/module/job/src/main/java/org/eclipse/kapua/app/console/module/job/client/targets/JobTargetAddDeviceGrid.java", "endpoints": {"api_summary": "This API allows users to add devices to a job.", "methods": ["GET", "POST"], "paths": ["/jobs/<job_id>/devices"]}}
{"file": "cloned/kapua/console/module/job/src/main/java/org/eclipse/kapua/app/console/module/job/client/targets/JobTargetAddTagGrid.java", "endpoints": {"api_summary": "This API allows users to add tags to a job in the Kapua console.", "methods": ["GET", "POST"], "paths": ["/jobs/<job_id>/tags"]}}
{"file": "cloned/kapua/console/module/job/src/main/java/org/eclipse/kapua/app/console/module/job/client/execution/JobTabExecutionsGrid.java", "endpoints": {"api_summary": "This API provides a grid for displaying job executions for a specific job.", "methods": ["GET"], "paths": ["/jobs/<jobId>/executions"]}}
{"file": "cloned/kapua/console/module/job/src/main/java/org/eclipse/kapua/app/console/module/job/servlet/JobTargetExporterServlet.java", "endpoints": {"api_summary": "The JobTargetExporterServlet provides a REST API for exporting job targets in CSV format. It takes in a scope ID and a job ID as parameters and returns a CSV file containing the job targets that match the given criteria.", "methods": ["GET"], "paths": ["/jobTargetExporter"]}}
{"file": "cloned/kapua/console/module/job/src/main/java/org/eclipse/kapua/app/console/module/job/shared/service/GwtJobEngineService.java", "endpoints": {"api_summary": "The GwtJobEngineService API provides methods for starting, stopping, and restarting jobs in the Kapua application. It also provides methods for stopping job executions and restarting specific job targets.", "methods": ["start", "stop", "stopExecution", "restart"], "paths": ["/jobEngine"]}}
{"file": "cloned/kapua/console/module/job/src/main/java/org/eclipse/kapua/app/console/module/job/shared/service/GwtJobStepService.java", "endpoints": {"api_summary": "The GwtJobStepService API provides methods for querying, creating, updating, and deleting job steps in the Kapua application.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/jobStep", "/jobStep/query", "/jobStep/count", "/jobStep/findByJobId", "/jobStep/create", "/jobStep/find", "/jobStep/delete", "/jobStep/update", "/jobStep/getJobStepPropertyLengthMax"]}}
{"file": "cloned/kapua/console/module/job/src/main/java/org/eclipse/kapua/app/console/module/job/shared/service/GwtJobService.java", "endpoints": {"api_summary": "The GwtJobService API provides endpoints for managing jobs in the Kapua application. It allows for querying, creating, updating, and deleting jobs, as well as retrieving job descriptions.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/job", "/job/<jobId>", "/job/<jobId>/description"]}}
{"file": "cloned/kapua/console/module/job/src/main/java/org/eclipse/kapua/app/console/module/job/shared/service/GwtJobStepDefinitionService.java", "endpoints": {"api_summary": "The GwtJobStepDefinitionService API provides methods for managing job step definitions in the Kapua application. It allows for finding all job step definitions for a given scope, finding a specific job step definition by ID, and retrieving a list of job step properties.", "methods": ["GET", "POST"], "paths": ["/jobStepDefinition", "/jobStepDefinition/<scopeIdString>", "/jobStepDefinition/<scopeIdString>/<jobStepDefinitionId>"]}}
{"file": "cloned/kapua/console/module/job/src/main/java/org/eclipse/kapua/app/console/module/job/shared/service/GwtJobExecutionService.java", "endpoints": {"api_summary": "The GwtJobExecutionService API provides a way to retrieve the list of job executions by their jobId.", "methods": ["GET"], "paths": ["/jobExecution"]}}
{"file": "cloned/kapua/console/module/job/src/main/java/org/eclipse/kapua/app/console/module/job/shared/service/GwtJobTargetService.java", "endpoints": {"api_summary": "The GwtJobTargetService API provides methods for querying, creating, and deleting job targets in the Kapua application.", "methods": ["GET", "POST", "DELETE"], "paths": ["/jobTarget", "/jobTarget/findByJobId", "/jobTarget/create", "/jobTarget/delete"]}}
{"file": "cloned/kapua/console/module/job/src/main/java/org/eclipse/kapua/app/console/module/job/shared/service/GwtTriggerDefinitionService.java", "endpoints": {"api_summary": "The GwtTriggerDefinitionService API provides methods for managing trigger definitions in the Kapua application. It allows for finding all trigger definitions, finding a specific trigger definition by ID, and retrieving a list of all trigger definitions.", "methods": ["GET", "POST"], "paths": ["/triggerDefinition", "/triggerDefinition/<triggerDefinitionId>"]}}
{"file": "cloned/kapua/console/module/job/src/main/java/org/eclipse/kapua/app/console/module/job/shared/service/GwtTriggerService.java", "endpoints": {"api_summary": "The GwtTriggerService API provides methods for managing triggers in the Kapua application. It allows users to create, delete, and validate triggers, as well as retrieve information about triggers.", "methods": ["POST", "GET", "DELETE"], "paths": ["/trigger", "/trigger/create", "/trigger/delete", "/trigger/validate"]}}
{"file": "cloned/kapua/console/module/account/src/main/java/org/eclipse/kapua/app/console/module/account/server/GwtAccountServiceImpl.java", "endpoints": {"api_summary": "This API provides endpoints for managing accounts and their related information.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/accounts", "/accounts/<account_id>", "/accounts/<account_id>/info", "/accounts/<account_id>/children", "/accounts/<account_id>/name", "/accounts/<account_id>/properties"]}}
{"file": "cloned/kapua/console/module/account/src/main/java/org/eclipse/kapua/app/console/module/account/client/AccountDetailsTabDescription.java", "endpoints": {"api_summary": "This API provides information about accounts and allows for editing account details.", "methods": ["GET", "POST"], "paths": ["/accounts", "/accounts/<account_id>"]}}
{"file": "cloned/kapua/console/module/account/src/main/java/org/eclipse/kapua/app/console/module/account/client/cors/CorsGrid.java", "endpoints": {"api_summary": "The CorsGrid API allows users to view and manage CORS (Cross-Origin Resource Sharing) endpoints for a specific account.", "methods": ["GET", "POST"], "paths": ["/account/<account_id>/cors"]}}
{"file": "cloned/kapua/console/module/account/src/main/java/org/eclipse/kapua/app/console/module/account/client/cors/CorsAddDialog.java", "endpoints": {"api_summary": "This API allows for the creation and management of CORS (Cross-Origin Resource Sharing) endpoints for a given account.", "methods": ["POST"], "paths": ["/accounts/<account_id>/cors"]}}
{"file": "cloned/kapua/console/module/account/src/main/java/org/eclipse/kapua/app/console/module/account/client/toolbar/AccountAddDialog.java", "endpoints": {"api_summary": "This API allows users to create a new account and retrieve information about existing accounts.", "methods": ["POST", "GET"], "paths": ["/accounts", "/accounts/<account_id>"]}}
{"file": "cloned/kapua/console/module/account/src/main/java/org/eclipse/kapua/app/console/module/account/shared/service/GwtAccountService.java", "endpoints": {"api_summary": "The GwtAccountService API provides methods for managing accounts, including creating, finding, updating, and deleting accounts. It also provides methods for listing accounts and their children, and for retrieving the configuration of an account.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/account", "/account/<accountId>", "/account/<accountId>/children", "/account/<accountId>/config"]}}
{"file": "cloned/kapua/console/module/authentication/src/main/java/org/eclipse/kapua/app/console/module/authentication/server/GwtMfaCredentialOptionsServiceImpl.java", "endpoints": {"api_summary": "The GwtMfaCredentialOptionsServiceImpl class provides methods for managing MFA credential options in the console application.", "methods": ["GET", "POST", "DELETE"], "paths": ["/users", "/users/<built-in function id>"]}}
{"file": "cloned/kapua/console/module/authentication/src/main/java/org/eclipse/kapua/app/console/module/authentication/client/tabs/credentials/CredentialResetDialog.java", "endpoints": {"api_summary": "This API allows users to reset their passwords for the console application.", "methods": ["POST"], "paths": ["/api/console/resetPassword"]}}
{"file": "cloned/kapua/console/module/authentication/src/main/java/org/eclipse/kapua/app/console/module/authentication/client/tabs/credentials/CredentialEditDialog.java", "endpoints": {"api_summary": "This API allows users to edit their credentials, including their expiration date and status.", "methods": ["GET", "POST"], "paths": ["/users/<built-in function id>/credentials/edit"]}}
{"file": "cloned/kapua/console/module/authentication/src/main/java/org/eclipse/kapua/app/console/module/authentication/shared/service/GwtMfaCredentialOptionsService.java", "endpoints": {"api_summary": "The GwtMfaCredentialOptionsService API provides endpoints for managing multi-factor authentication (MFA) credential options. It allows for creating, finding, deleting, and disabling MFA credential options for a given scope and user.", "methods": ["POST", "GET", "DELETE"], "paths": ["/mfaOptions", "/mfaOptions/<gwtMfaCredentialOptionsId>", "/mfaOptions/<scopeIdStr>/<userIdStr>", "/mfaOptions/<scopeIdStr>/<mfaCredentialOptionsIdStr>/disableTrust"]}}
{"file": "cloned/kapua/console/module/authentication/src/main/java/org/eclipse/kapua/app/console/module/authentication/shared/service/GwtCredentialService.java", "endpoints": {"api_summary": "The GwtCredentialService API provides endpoints for managing credentials in the Kapua application. It allows for querying, creating, updating, deleting, and resetting credentials, as well as changing passwords and unlocking accounts.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/credential", "/credential/query", "/credential/delete", "/credential/create", "/credential/update", "/credential/changePassword", "/credential/resetPassword", "/credential/unlock", "/credential/getMinPasswordLength", "/credential/getAvailableCredentialTypes"]}}
{"file": "cloned/kapua/console/module/user/src/main/java/org/eclipse/kapua/app/console/module/user/server/GwtUserServiceImpl.java", "endpoints": {"api_summary": "This API provides endpoints for managing users and their associated devices and connections in the Kapua system.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users", "/users/<built-in function id>", "/devices", "/devices/<built-in function id>", "/connections", "/connections/<built-in function id>"]}}
{"file": "cloned/kapua/console/module/user/src/main/java/org/eclipse/kapua/app/console/module/user/client/tabs/roles/RoleSubjectGrid.java", "endpoints": {"api_summary": "This API provides a grid for displaying users who have been granted a particular role in the system.", "methods": ["GET"], "paths": ["/users/roles/<role_id>/granted_users"]}}
{"file": "cloned/kapua/console/module/user/src/main/java/org/eclipse/kapua/app/console/module/user/client/dialog/UserAddDialog.java", "endpoints": {"api_summary": "This API defines a user creation dialog for the Eclipse Kapua application. It allows users to create new users with various attributes such as username, password, email, phone number, and status.", "methods": ["POST"], "paths": ["/users"]}}
{"file": "cloned/kapua/console/module/user/src/main/java/org/eclipse/kapua/app/console/module/user/shared/service/GwtUserService.java", "endpoints": {"api_summary": "The GwtUserService API provides endpoints for managing users in the system, including creating, updating, deleting, and querying users.", "methods": ["POST", "PUT", "DELETE", "GET"], "paths": ["/user/create", "/user/update", "/user/delete", "/user/find", "/user/findAll", "/user/query", "/user/getUserDescription", "/user/getUsersForRole", "/user/getUsersForAccount"]}}
{"file": "cloned/kapua/console/module/device/src/main/java/org/eclipse/kapua/app/console/module/device/server/GwtDeviceManagementOperationServiceImpl.java", "endpoints": {"api_summary": "The GwtDeviceManagementOperationServiceImpl class provides a server-side implementation of the GwtDeviceManagementOperationService interface, which is used to manage device management operations in the Kapua application. It defines a REST API for querying and retrieving device management operations, as well as for creating and updating them.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/device/management/operation", "/device/management/operation/<operation_id>", "/device/management/operation/<operation_id>/notification"]}}
{"file": "cloned/kapua/console/module/device/src/main/java/org/eclipse/kapua/app/console/module/device/server/GwtDeviceAssetServiceImpl.java", "endpoints": {"api_summary": "The GwtDeviceAssetServiceImpl class provides a REST API for managing device assets in the Kapua system. It allows for reading, writing, and retrieving device assets, as well as managing asset store settings.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/device/assets", "/device/assets/<assetId>", "/device/assets/store/settings"]}}
{"file": "cloned/kapua/console/module/device/src/main/java/org/eclipse/kapua/app/console/module/device/client/device/DeviceEditDialog.java", "endpoints": {"api_summary": "This API allows users to create, read, update, and delete devices in the system.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/devices", "/devices/<device_id>"]}}
{"file": "cloned/kapua/console/module/device/src/main/java/org/eclipse/kapua/app/console/module/device/client/device/DeviceGridToolbar.java", "endpoints": {"api_summary": "The DeviceGridToolbar class provides a toolbar for the Device Grid, which allows users to add, edit, delete, and export devices.", "methods": ["GET", "POST"], "paths": ["/exporter_device"]}}
{"file": "cloned/kapua/console/module/device/src/main/java/org/eclipse/kapua/app/console/module/device/client/device/DeviceAddDialog.java", "endpoints": {"api_summary": "This API allows users to create a new device and retrieve information about existing devices.", "methods": ["POST", "GET"], "paths": ["/devices", "/devices/<device_id>"]}}
{"file": "cloned/kapua/console/module/device/src/main/java/org/eclipse/kapua/app/console/module/device/client/device/configuration/DeviceTabConfiguration.java", "endpoints": {"api_summary": "The DeviceTabConfiguration class is a part of the Eclipse Kapua application and is responsible for managing the configuration of devices. It provides a tabbed interface for configuring device components and snapshots.", "methods": ["GET", "POST"], "paths": ["/device/configuration", "/device/configuration/components", "/device/configuration/snapshots"]}}
{"file": "cloned/kapua/console/module/device/src/main/java/org/eclipse/kapua/app/console/module/device/client/device/inventory/DeviceTabInventoryTabDeploymentPackages.java", "endpoints": {"api_summary": "This API provides a list of deployment packages for a device, along with the bundles included in each package.", "methods": ["GET"], "paths": ["/devices/{deviceId}/deploymentPackages"]}}
{"file": "cloned/kapua/console/module/device/src/main/java/org/eclipse/kapua/app/console/module/device/client/device/inventory/DeviceTabInventoryTabSystemPackages.java", "endpoints": {"api_summary": "This API provides a list of system packages for a device in the inventory.", "methods": ["GET"], "paths": ["/devices/{deviceId}/system-packages"]}}
{"file": "cloned/kapua/console/module/device/src/main/java/org/eclipse/kapua/app/console/module/device/client/device/inventory/DeviceTabInventoryTabInventory.java", "endpoints": {"api_summary": "This API provides a list of inventory items for a given device, along with information about the device and its inventory.", "methods": ["GET"], "paths": ["/devices/{deviceId}/inventory"]}}
{"file": "cloned/kapua/console/module/device/src/main/java/org/eclipse/kapua/app/console/module/device/client/device/inventory/DeviceTabInventory.java", "endpoints": {"api_summary": "The DeviceTabInventory class is a part of the Eclipse Kapua application and provides a tab panel for displaying information about a device's inventory. It includes several sub-tabs for displaying different types of inventory information, such as installed packages, system packages, and deployment packages.", "methods": ["GET", "POST"], "paths": ["/devices/<device_id>/inventory", "/devices/<device_id>/inventory/bundles", "/devices/<device_id>/inventory/container", "/devices/<device_id>/inventory/system_packages", "/devices/<device_id>/inventory/deployment_packages"]}}
{"file": "cloned/kapua/console/module/device/src/main/java/org/eclipse/kapua/app/console/module/device/client/device/tag/TagSubjectGrid.java", "endpoints": {"api_summary": "This API provides a grid for displaying devices that are assigned to a specific tag.", "methods": ["GET"], "paths": ["/tags/<tag_id>/devices"]}}
{"file": "cloned/kapua/console/module/device/src/main/java/org/eclipse/kapua/app/console/module/device/client/device/tag/DeviceTagAddDialog.java", "endpoints": {"api_summary": "This API allows users to add tags to devices in the system.", "methods": ["POST"], "paths": ["/devices/<device_id>/tags"]}}
{"file": "cloned/kapua/console/module/device/src/main/java/org/eclipse/kapua/app/console/module/device/client/device/group/GroupSubjectGrid.java", "endpoints": {"api_summary": "The GroupSubjectGrid API allows for querying and retrieving information about devices assigned to a specific group.", "methods": ["GET"], "paths": ["/groups/<group_id>/devices"]}}
{"file": "cloned/kapua/console/module/device/src/main/java/org/eclipse/kapua/app/console/module/device/client/device/keystore/dialog/KeystoreItemAddCsrDialog.java", "endpoints": {"api_summary": "This API allows users to create a certificate signing request (CSR) for a specific keystore item on a device.", "methods": ["POST"], "paths": ["/device/keystore/item/addCsr"]}}
{"file": "cloned/kapua/console/module/device/src/main/java/org/eclipse/kapua/app/console/module/device/client/device/keystore/dialog/KeystoreItemAddCertificateRawDialog.java", "endpoints": {"api_summary": "This API allows users to add a new certificate to a device's keystore. The API takes the device ID, keystore ID, alias, and certificate as input and returns a success message if the certificate is added successfully.", "methods": ["POST"], "paths": ["/device/<device_id>/keystore/<keystore_id>/certificate"]}}
{"file": "cloned/kapua/console/module/device/src/main/java/org/eclipse/kapua/app/console/module/device/client/device/keystore/dialog/KeystoreItemAddKeypairDialog.java", "endpoints": {"api_summary": "This API allows you to add a new keypair to a device's keystore.", "methods": ["POST"], "paths": ["/device/keystore/addKeypair"]}}
{"file": "cloned/kapua/console/module/device/src/main/java/org/eclipse/kapua/app/console/module/device/client/device/packages/DeviceTabPackagesInstalled.java", "endpoints": {"api_summary": "This API is a package management system for a device. It allows users to install, uninstall, and manage packages on a device.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/device/packages", "/device/packages/<package_id>", "/device/packages/<package_id>/bundles", "/device/packages/<package_id>/bundles/<bundle_id>"]}}
{"file": "cloned/kapua/console/module/device/src/main/java/org/eclipse/kapua/app/console/module/device/client/device/packages/DeviceTabPackagesInProgress.java", "endpoints": {"api_summary": "This API provides a list of in-progress package download operations for a specific device.", "methods": ["GET"], "paths": ["/devices/{deviceId}/packages/in-progress"]}}
{"file": "cloned/kapua/console/module/device/src/main/java/org/eclipse/kapua/app/console/module/device/client/device/packages/dialog/PackageUninstallDialog.java", "endpoints": {"api_summary": "This API is used to uninstall a package on a device. It allows the user to specify the package name, version, and whether to reboot the device after uninstallation. The API also provides a delay option for the reboot.", "methods": ["POST"], "paths": ["/device/uninstall"]}}
{"file": "cloned/kapua/console/module/device/src/main/java/org/eclipse/kapua/app/console/module/device/client/connection/ConnectionGrid.java", "endpoints": {"api_summary": "The API provides a list of connections and their statuses, along with the ability to filter and sort the connections by various criteria.", "methods": ["GET", "POST"], "paths": ["/connections", "/connections/<connection_id>"]}}
{"file": "cloned/kapua/console/module/device/src/main/java/org/eclipse/kapua/app/console/module/device/servlet/DeviceExporterServlet.java", "endpoints": {"api_summary": "The DeviceExporterServlet provides a REST API for exporting device information in a specific format. It supports querying devices based on various parameters and allows for pagination and sorting of the results.", "methods": ["GET"], "paths": ["/deviceExporter"]}}
{"file": "cloned/kapua/console/module/device/src/main/java/org/eclipse/kapua/app/console/module/device/servlet/DeviceSnapshotsServlet.java", "endpoints": {"api_summary": "The DeviceSnapshotsServlet API allows for the retrieval of device configuration snapshots in XML format.", "methods": ["GET"], "paths": ["/deviceSnapshots"]}}
{"file": "cloned/kapua/console/module/device/src/main/java/org/eclipse/kapua/app/console/module/device/servlet/DeviceEventExporterServlet.java", "endpoints": {"api_summary": "The DeviceEventExporterServlet provides a REST API for exporting device events in CSV format. It allows users to specify the format, scopeId, deviceId, startDate, and endDate as query parameters. The API returns a CSV file containing the device events that match the specified criteria.", "methods": ["GET"], "paths": ["/deviceEventExporter"]}}
{"file": "cloned/kapua/console/module/device/src/main/java/org/eclipse/kapua/app/console/module/device/shared/service/GwtDeviceManagementOperationService.java", "endpoints": {"api_summary": "The GwtDeviceManagementOperationService API provides a way to query and retrieve information about device management operations.", "methods": ["GET"], "paths": ["/deviceManagementOperation"]}}
{"file": "cloned/kapua/console/module/device/src/main/java/org/eclipse/kapua/app/console/module/device/shared/service/GwtDeviceManagementService.java", "endpoints": {"api_summary": "The GwtDeviceManagementService API provides endpoints for managing devices, configurations, snapshots, and bundles. It also allows for executing commands on devices.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/deviceManagement/findDevicePackages", "/deviceManagement/installPackage", "/deviceManagement/getDownloadOperations", "/deviceManagement/uninstallPackage", "/deviceManagement/findDeviceConfigurations", "/deviceManagement/updateComponentConfiguration", "/deviceManagement/isStoreServiceEnabled", "/deviceManagement/getApplicationSettings", "/deviceManagement/setApplicationSettings", "/deviceManagement/findDeviceSnapshots", "/deviceManagement/rollbackDeviceSnapshot", "/deviceManagement/findBundles", "/deviceManagement/startBundle", "/deviceManagement/stopBundle", "/deviceManagement/executeCommand"]}}
{"file": "cloned/kapua/console/module/device/src/main/java/org/eclipse/kapua/app/console/module/device/shared/service/GwtDeviceConnectionService.java", "endpoints": {"api_summary": "The GwtDeviceConnectionService API provides methods for managing device connections in the Kapua application. It allows for querying, retrieving, and disconnecting device connections.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/deviceConnection", "/deviceConnection/<connectionId>", "/deviceConnection/<connectionId>/info"]}}
{"file": "cloned/kapua/console/module/device/src/main/java/org/eclipse/kapua/app/console/module/device/shared/service/GwtDeviceService.java", "endpoints": {"api_summary": "The GwtDeviceService API provides methods for managing devices in an account, including creating, updating, and deleting devices, as well as querying and retrieving device events and profiles.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/device", "/device/<deviceId>", "/device/<deviceId>/events", "/device/<deviceId>/profile"]}}
{"file": "cloned/kapua/console/module/device/src/main/java/org/eclipse/kapua/app/console/module/device/shared/service/GwtDeviceAssetService.java", "endpoints": {"api_summary": "The GwtDeviceAssetService API provides methods for managing device assets in the Kapua application. It allows for reading, writing, and retrieving device assets, as well as checking if the store service is enabled and getting or setting application settings.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/asset", "/asset/read", "/asset/write", "/asset/get", "/asset/isStoreServiceEnabled", "/asset/getApplicationSettings", "/asset/setApplicationSettings"]}}
{"file": "cloned/kapua/console/module/endpoint/src/main/java/org/eclipse/kapua/app/console/module/endpoint/client/EndpointAddDialog.java", "endpoints": {"api_summary": "This API allows users to create and manage endpoints for accessing resources in the system.", "methods": ["POST"], "paths": ["/endpoints"]}}
{"file": "cloned/kapua/console/module/endpoint/src/main/java/org/eclipse/kapua/app/console/module/endpoint/client/EndpointDeleteDialog.java", "endpoints": {"api_summary": "The EndpointDeleteDialog API allows users to delete endpoints from the console. It provides a simple and intuitive interface for users to select the endpoint they want to delete and confirm the deletion. The API also includes error handling and messaging to inform users of the outcome of their actions.", "methods": ["DELETE"], "paths": ["/console/endpoint/delete"]}}
{"file": "cloned/kapua/console/module/endpoint/src/main/java/org/eclipse/kapua/app/console/module/endpoint/client/EndpointFilterPanel.java", "endpoints": {"api_summary": "The EndpointFilterPanel is a filter panel for the EndpointGrid. It allows users to filter endpoints by schema, DNS, port, and security status.", "methods": ["GET", "POST"], "paths": ["/endpoints"]}}
{"file": "cloned/kapua/console/module/endpoint/src/main/java/org/eclipse/kapua/app/console/module/endpoint/client/EndpointGrid.java", "endpoints": {"api_summary": "The EndpointGrid class is a widget that displays a list of endpoints in a grid. It allows users to filter and sort the endpoints based on various criteria, and provides a toolbar with options to create, edit, and delete endpoints.", "methods": ["GET", "POST"], "paths": ["/endpoints", "/endpoints/<endpoint_id>"]}}
{"file": "cloned/kapua/console/module/endpoint/src/main/java/org/eclipse/kapua/app/console/module/endpoint/shared/service/GwtEndpointService.java", "endpoints": {"api_summary": "The GwtEndpointService API provides endpoints for creating, updating, finding, querying, deleting, and parsing endpoint models. It also provides a method for getting a list of grouped NVPairs for a given endpoint.", "methods": ["POST", "PUT", "GET", "DELETE"], "paths": ["/endpoint/create", "/endpoint/update", "/endpoint/find", "/endpoint/query", "/endpoint/delete", "/endpoint/parse"]}}
{"file": "cloned/kapua/console/module/tag/src/main/java/org/eclipse/kapua/app/console/module/tag/client/TagGrid.java", "endpoints": {"api_summary": "The TagGrid API allows users to view and manage tags in the console. It provides a grid interface for displaying and editing tags, as well as a toolbar for creating and deleting tags.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/tags", "/tags/<tag_id>"]}}
{"file": "cloned/kapua/console/module/tag/src/main/java/org/eclipse/kapua/app/console/module/tag/client/TagAddDialog.java", "endpoints": {"api_summary": "The TagAddDialog class is a part of the Eclipse Kapua application and provides a dialog for adding a new tag. It includes fields for the tag name and description, and a method for creating a new tag using the GwtTagService.", "methods": ["POST"], "paths": ["/tags"]}}
{"file": "cloned/kapua/console/module/tag/src/main/java/org/eclipse/kapua/app/console/module/tag/shared/service/GwtTagService.java", "endpoints": {"api_summary": "The GwtTagService API provides endpoints for creating, updating, finding, querying, deleting, and retrieving tag descriptions in the Kapua application.", "methods": ["POST", "PUT", "GET", "DELETE"], "paths": ["/tag", "/tag/<scopeShortId>/<roleShortId>", "/tag/query", "/tag/<scopeId>/<tagId>", "/tag/<scopeShortId>/<tagShortId>/description", "/tag/<scopeId>"]}}
{"file": "cloned/kapua/console/module/data/src/main/java/org/eclipse/kapua/app/console/module/data/client/ChannelTable.java", "endpoints": {"api_summary": "The ChannelTable class provides a table to display and manage channels for a selected device and asset in the console application.", "methods": ["GET", "POST"], "paths": ["/channelTable"]}}
{"file": "cloned/kapua/console/module/data/src/main/java/org/eclipse/kapua/app/console/module/data/client/AssetTable.java", "endpoints": {"api_summary": "The AssetTable class provides a table for displaying and selecting assets in the console application. It uses a GWT DataService to retrieve the assets and displays them in a grid. The class also provides methods for refreshing the table and adding selection changed listeners.", "methods": ["GET"], "paths": ["/assets"]}}
{"file": "cloned/kapua/console/module/data/src/main/java/org/eclipse/kapua/app/console/module/data/servlet/DataExporterServlet.java", "endpoints": {"api_summary": "The DataExporterServlet provides a REST API for exporting data from the Kapua data store. It supports CSV format and allows for filtering by topic, device, asset, and date range. The API also supports sorting and pagination.", "methods": ["GET"], "paths": ["/dataExporter"]}}
{"file": "cloned/kapua/console/module/data/src/main/java/org/eclipse/kapua/app/console/module/data/shared/service/GwtDataService.java", "endpoints": {"api_summary": "The GwtDataService API provides access to data stored in the Kapua system, including topics, devices, assets, and messages. It allows clients to retrieve and manipulate data, as well as to perform queries and searches.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/data/topics", "/data/devices", "/data/assets", "/data/messages"]}}
{"file": "cloned/kapua/console/module/about/src/main/java/org/eclipse/kapua/app/console/module/about/shared/service/GwtAboutService.java", "endpoints": {"api_summary": "The GwtAboutService API provides information about the application and its dependencies for front-end usage.", "methods": ["GET", "POST"], "paths": ["/about"]}}
{"file": "cloned/kapua/console/module/certificate/src/main/java/org/eclipse/kapua/app/console/module/certificate/shared/service/GwtCertificateInfoService.java", "endpoints": {"api_summary": "The GwtCertificateInfoService API provides a way to retrieve a subset of configuration values for front-end usage.", "methods": ["findAll", "isFindSupported"], "paths": ["/certificateInfo"]}}
{"file": "cloned/kapua/console/module/authorization/src/main/java/org/eclipse/kapua/app/console/module/authorization/server/GwtDomainRegistryServiceImpl.java", "endpoints": {"api_summary": "The GwtDomainRegistryServiceImpl provides a REST API for managing domains and their associated actions in the Kapua authorization system.", "methods": ["GET", "POST"], "paths": ["/domains", "/domains/<domain_name>/actions"]}}
{"file": "cloned/kapua/console/module/authorization/src/main/java/org/eclipse/kapua/app/console/module/authorization/server/GwtAccessRoleServiceImpl.java", "endpoints": {"api_summary": "The GwtAccessRoleServiceImpl class provides a REST API for managing access roles in the Kapua system. It allows for creating, deleting, and querying access roles, as well as retrieving information about the roles.", "methods": ["GET", "POST", "DELETE"], "paths": ["/authorization/access/create", "/authorization/access/delete", "/authorization/access/findByUserId"]}}
{"file": "cloned/kapua/console/module/authorization/src/main/java/org/eclipse/kapua/app/console/module/authorization/server/GwtAccessInfoServiceImpl.java", "endpoints": {"api_summary": "The GwtAccessInfoServiceImpl class provides a REST API for managing access information in the Kapua system. It allows for creating, deleting, and finding access information by user ID.", "methods": ["POST", "DELETE", "GET"], "paths": ["/authorization/access/create", "/authorization/access/delete", "/authorization/access/findByUserId"]}}
{"file": "cloned/kapua/console/module/authorization/src/main/java/org/eclipse/kapua/app/console/module/authorization/server/GwtAccessPermissionServiceImpl.java", "endpoints": {"api_summary": "The GwtAccessPermissionServiceImpl class provides a REST API for managing access permissions in the Kapua system. It allows users to create, delete, and query access permissions, as well as retrieve information about existing access permissions.", "methods": ["GET", "POST", "DELETE"], "paths": ["/access-permissions", "/access-permissions/<access-permission-id>"]}}
{"file": "cloned/kapua/console/module/authorization/src/main/java/org/eclipse/kapua/app/console/module/authorization/client/role/RoleGrid.java", "endpoints": {"api_summary": "The RoleGrid API allows users to view and manage roles in the system. It provides a grid interface for listing and editing roles, as well as a toolbar for creating and deleting roles.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/roles", "/roles/<role_id>"]}}
{"file": "cloned/kapua/console/module/authorization/src/main/java/org/eclipse/kapua/app/console/module/authorization/client/role/RolePermissionGrid.java", "endpoints": {"api_summary": "This API defines a grid for displaying and managing role permissions in the console.", "methods": ["GET", "POST"], "paths": ["/roles/<role_id>/permissions"]}}
{"file": "cloned/kapua/console/module/authorization/src/main/java/org/eclipse/kapua/app/console/module/authorization/client/role/dialog/RoleAddDialog.java", "endpoints": {"api_summary": "The RoleAddDialog class is a part of the authorization module in the Eclipse Kapua application. It allows users to create new roles and assign them to users. The class defines a form with fields for the role name and description, and it validates the input before submitting the form to the server.", "methods": ["POST"], "paths": ["/roles"]}}
{"file": "cloned/kapua/console/module/authorization/src/main/java/org/eclipse/kapua/app/console/module/authorization/client/role/dialog/RoleEditDialog.java", "endpoints": {"api_summary": "The RoleEditDialog class is a part of the authorization module in the Eclipse Kapua application. It allows users to edit the name and description of a role in the system.", "methods": ["GET", "POST"], "paths": ["/roles/<role_id>", "/roles/<role_id>/edit"]}}
{"file": "cloned/kapua/console/module/authorization/src/main/java/org/eclipse/kapua/app/console/module/authorization/client/tabs/permission/UserTabPermissionGrid.java", "endpoints": {"api_summary": "This API defines a grid for displaying permissions for a specific user. It allows users to view and manage permissions for a given user.", "methods": ["GET", "POST"], "paths": ["/users/<userId>/permissions"]}}
{"file": "cloned/kapua/console/module/authorization/src/main/java/org/eclipse/kapua/app/console/module/authorization/client/tabs/role/UserTabAccessRoleGrid.java", "endpoints": {"api_summary": "This API provides a grid for displaying and managing access roles for a user in the console.", "methods": ["GET", "POST"], "paths": ["/users/<userId>/roles"]}}
{"file": "cloned/kapua/console/module/authorization/src/main/java/org/eclipse/kapua/app/console/module/authorization/client/tabs/role/AccessRoleAddDialog.java", "endpoints": {"api_summary": "This API defines a dialog for adding a new role to a user in the system.", "methods": ["GET", "POST"], "paths": ["/users/<built-in function id>/roles"]}}
{"file": "cloned/kapua/console/module/authorization/src/main/java/org/eclipse/kapua/app/console/module/authorization/client/group/GroupGrid.java", "endpoints": {"api_summary": "The GroupGrid API allows users to view and manage groups in the system. It provides a grid interface for listing and editing groups, as well as a toolbar for creating and deleting groups.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/groups", "/groups/<group_id>"]}}
{"file": "cloned/kapua/console/module/authorization/src/main/java/org/eclipse/kapua/app/console/module/authorization/client/group/GroupAddDialog.java", "endpoints": {"api_summary": "The GroupAddDialog class is a part of the authorization module in the Eclipse Kapua application. It allows users to create new groups and add them to the system.", "methods": ["POST"], "paths": ["/groups"]}}
{"file": "cloned/kapua/console/module/authorization/src/main/java/org/eclipse/kapua/app/console/module/authorization/shared/service/GwtDomainRegistryService.java", "endpoints": {"api_summary": "The GwtDomainRegistryService API provides methods for retrieving information about domains and their associated actions.", "methods": ["GET", "POST"], "paths": ["/domain", "/domain/actions"]}}
{"file": "cloned/kapua/console/module/authorization/src/main/java/org/eclipse/kapua/app/console/module/authorization/shared/service/GwtAccessInfoService.java", "endpoints": {"api_summary": "The GwtAccessInfoService API provides methods for creating, deleting, and finding access information for users in a specific scope.", "methods": ["POST", "DELETE", "GET"], "paths": ["/accessinfo/create", "/accessinfo/delete", "/accessinfo/findByUserIdOrCreate"]}}
{"file": "cloned/kapua/console/module/authorization/src/main/java/org/eclipse/kapua/app/console/module/authorization/shared/service/GwtAccessRoleService.java", "endpoints": {"api_summary": "The GwtAccessRoleService API provides methods for managing access roles in the Kapua application. It allows for the creation, deletion, and retrieval of access roles, as well as finding access roles by user ID.", "methods": ["POST", "DELETE", "GET"], "paths": ["/accessrole", "/accessrole/<scopeShortId>/<accessRoleShortId>", "/accessrole/<scopeShortId>/<userShortId>"]}}
{"file": "cloned/kapua/console/module/authorization/src/main/java/org/eclipse/kapua/app/console/module/authorization/shared/service/GwtAccessPermissionService.java", "endpoints": {"api_summary": "The GwtAccessPermissionService API provides methods for creating, finding, and deleting access permissions in the Kapua application.", "methods": ["POST", "GET", "DELETE"], "paths": ["/accesspermission", "/accesspermission/findByUserId", "/accesspermission/delete"]}}
{"file": "cloned/kapua/console/module/authorization/src/main/java/org/eclipse/kapua/app/console/module/authorization/shared/service/GwtGroupService.java", "endpoints": {"api_summary": "The GwtGroupService API provides endpoints for creating, updating, querying, and deleting groups, as well as retrieving group descriptions and finding all groups for a given scope.", "methods": ["POST", "PUT", "GET", "DELETE"], "paths": ["/group", "/group/<scopeShortId>/<roleShortId>", "/group/query", "/group/<scopeId>/<groupId>", "/group/<scopeShortId>/<groupShortId>"]}}
{"file": "cloned/kapua/console/module/authorization/src/main/java/org/eclipse/kapua/app/console/module/authorization/shared/service/GwtRoleService.java", "endpoints": {"api_summary": "The GwtRoleService API provides endpoints for managing roles and permissions in the Kapua application. It allows for creating, updating, finding, and deleting roles, as well as querying and retrieving permissions for a given role.", "methods": ["POST", "PUT", "GET", "DELETE"], "paths": ["/role", "/role/<roleShortId>", "/role/<scopeShortId>/<roleShortId>/permissions"]}}
{"file": "cloned/kapua/service/security/test-steps/src/main/java/org/eclipse/kapua/service/authorization/steps/AuthorizationServiceSteps.java", "endpoints": {"api_summary": "This code defines a REST API for managing authorization in a system.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/authorization/roles", "/authorization/roles/{roleId}", "/authorization/roles/{roleId}/permissions", "/authorization/roles/{roleId}/permissions/{permissionId}", "/authorization/groups", "/authorization/groups/{groupId}", "/authorization/groups/{groupId}/roles", "/authorization/groups/{groupId}/roles/{roleId}", "/authorization/users", "/authorization/users/{userId}", "/authorization/users/{userId}/roles", "/authorization/users/{userId}/roles/{roleId}", "/authorization/permissions", "/authorization/permissions/{permissionId}", "/authorization/access", "/authorization/access/{accessId}", "/authorization/access/{accessId}/roles", "/authorization/access/{accessId}/roles/{roleId}", "/authorization/access/{accessId}/permissions", "/authorization/access/{accessId}/permissions/{permissionId}"]}}
{"file": "cloned/kapua/service/security/authentication/api/src/main/java/org/eclipse/kapua/service/authentication/AuthenticationService.java", "endpoints": {"api_summary": "The AuthenticationService API provides endpoints for managing user authentication and access tokens. It allows users to login, logout, and refresh their access tokens.", "methods": ["POST", "GET", "PUT", "DELETE"], "paths": ["/login", "/authenticate", "/verifyCredentials", "/isAuthenticated", "/getLoginInfo", "/logout", "/findAccessToken", "/refreshAccessToken", "/findRefreshableAccessToken"]}}
{"file": "cloned/kapua/service/security/authentication/api/src/main/java/org/eclipse/kapua/service/authentication/user/UserCredentialsService.java", "endpoints": {"api_summary": "The UserCredentialsService API provides endpoints for changing and resetting passwords for authenticated users.", "methods": ["POST"], "paths": ["/users/<built-in function id>/changePassword", "/users/<built-in function id>/resetPassword"]}}
{"file": "cloned/kapua/service/security/authentication/api/src/main/java/org/eclipse/kapua/service/authentication/credential/CredentialService.java", "endpoints": {"api_summary": "The CredentialService API provides endpoints for managing credentials, including creating, updating, and retrieving credentials, as well as resetting passwords and getting available credential types.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/credentials", "/credentials/<credential_id>", "/credentials/reset_password", "/credentials/available_types"]}}
{"file": "cloned/kapua/service/security/authentication/api/src/main/java/org/eclipse/kapua/service/authentication/credential/CredentialRepository.java", "endpoints": {"api_summary": "The CredentialRepository API provides a way to manage credentials for users in the system. It allows for creating, reading, updating, and deleting credentials, as well as retrieving credentials for a specific user.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/credentials", "/credentials/<credential_id>", "/credentials/user/<user_id>"]}}
{"file": "cloned/kapua/service/security/authentication/api/src/main/java/org/eclipse/kapua/service/authentication/credential/mfa/ScratchCodeService.java", "endpoints": {"api_summary": "The ScratchCodeService API provides endpoints for managing scratch codes for multi-factor authentication (MFA) options. It allows for finding scratch codes by MFA option ID and deleting scratch codes by scratch code ID.", "methods": ["GET", "DELETE"], "paths": ["/scratch-codes/find-by-mfa-option-id", "/scratch-codes/delete"]}}
{"file": "cloned/kapua/service/security/authentication/api/src/main/java/org/eclipse/kapua/service/authentication/token/AccessTokenService.java", "endpoints": {"api_summary": "The AccessTokenService API provides endpoints for managing access tokens, allowing users to authenticate and access protected resources.", "methods": ["GET", "POST", "DELETE"], "paths": ["/access-tokens", "/access-tokens/<tokenId>", "/access-tokens/<scopeId>/<userId>"]}}
{"file": "cloned/kapua/service/security/certificate/internal/src/main/java/org/eclipse/kapua/service/certificate/internal/CertificateServiceImpl.java", "endpoints": {"api_summary": "This API provides a single endpoint for creating a JWT certificate for authentication purposes.", "methods": ["POST"], "paths": ["/certificate/create"]}}
{"file": "cloned/kapua/service/security/shiro/src/main/java/org/eclipse/kapua/service/authentication/user/shiro/UserCredentialsServiceImpl.java", "endpoints": {"api_summary": "The UserCredentialsServiceImpl class provides an implementation of the UserCredentialsService interface, which allows for changing and resetting passwords for users in the system.", "methods": ["GET", "POST"], "paths": ["/users/<built-in function id>", "/users/<built-in function id>/password"]}}
{"file": "cloned/kapua/service/security/shiro/src/main/java/org/eclipse/kapua/service/authorization/domain/shiro/DomainRegistryServiceImpl.java", "endpoints": {"api_summary": "The DomainRegistryServiceImpl class provides an implementation of the DomainRegistryService interface, which allows for the creation, deletion, and retrieval of domains. It also provides a method for querying domains and counting the number of domains that match a given query.", "methods": ["GET", "POST", "DELETE"], "paths": ["/domains", "/domains/<domainId>", "/domains/query"]}}
{"file": "cloned/kapua/service/security/shiro/src/main/java/org/eclipse/kapua/service/authorization/group/shiro/GroupServiceImpl.java", "endpoints": {"api_summary": "The GroupServiceImpl class provides a REST API for managing groups in the system. It allows for creating, updating, deleting, and querying groups, as well as handling events from the account service.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/groups", "/groups/<group_id>", "/groups/query", "/groups/count"]}}
{"file": "cloned/kapua/service/security/shiro/src/main/java/org/eclipse/kapua/service/authorization/shiro/KapuaAuthorizingRealm.java", "endpoints": {"api_summary": "This API is responsible for managing user access and permissions for the Kapua application.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users", "/users/<built-in function id>", "/access", "/access/<built-in function id>", "/roles", "/roles/<built-in function id>", "/permissions", "/permissions/<built-in function id>"]}}
{"file": "cloned/kapua/service/security/authorization/api/src/main/java/org/eclipse/kapua/service/authorization/role/RoleService.java", "endpoints": {"api_summary": "The RoleService API provides endpoints for managing roles in a system. It allows for creating, updating, finding, and deleting roles, as well as retrieving the IDs of users who are assigned to a given role.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/roles", "/roles/<roleId>", "/roles/<roleId>/users"]}}
{"file": "cloned/kapua/service/scheduler/api/src/main/java/org/eclipse/kapua/service/scheduler/trigger/fired/FiredTriggerService.java", "endpoints": {"api_summary": "The FiredTriggerService API allows clients to query and retrieve fired triggers from the Kapua scheduler.", "methods": ["GET"], "paths": ["/fired-triggers"]}}
{"file": "cloned/kapua/service/datastore/api/src/main/java/org/eclipse/kapua/service/datastore/MetricInfoFactory.java", "endpoints": {"api_summary": "The MetricInfoFactory API provides a way to create and manage MetricInfo objects, which represent metrics in the system. It allows for querying and retrieving MetricInfo objects based on various criteria, as well as creating and updating them.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/metricinfo", "/metricinfo/<metric_id>", "/metricinfo/query"]}}
{"file": "cloned/kapua/service/datastore/api/src/main/java/org/eclipse/kapua/service/datastore/ChannelInfoFactory.java", "endpoints": {"api_summary": "The ChannelInfoFactory API provides a way to create and manage ChannelInfo objects, which represent a channel of communication between two or more devices. It allows for querying and retrieving ChannelInfo objects based on various criteria, such as the channel's name, ID, or other attributes.", "methods": ["GET", "POST"], "paths": ["/org/eclipse/kapua/service/datastore/ChannelInfoFactory"]}}
{"file": "cloned/kapua/service/datastore/api/src/main/java/org/eclipse/kapua/service/datastore/ChannelInfoRegistryService.java", "endpoints": {"api_summary": "The ChannelInfoRegistryService API provides a way to manage and retrieve information about channels in the Kapua system. It allows for the creation, retrieval, update, and deletion of ChannelInfo objects, as well as querying for specific channels based on criteria.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/channelInfo", "/channelInfo/<id>", "/channelInfo/query"]}}
{"file": "cloned/kapua/service/datastore/api/src/main/java/org/eclipse/kapua/service/datastore/ClientInfoRegistryService.java", "endpoints": {"api_summary": "The ClientInfoRegistryService API provides a way to manage ClientInfo objects, which represent information about clients in the system. It allows for creating, reading, updating, and deleting ClientInfo objects, as well as querying for specific ClientInfo objects based on criteria.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/client-info", "/client-info/<client-info-id>"]}}
{"file": "cloned/kapua/service/datastore/api/src/main/java/org/eclipse/kapua/service/datastore/MetricInfoRegistryService.java", "endpoints": {"api_summary": "The MetricInfoRegistryService API provides a way to manage metric information in the Kapua system. It allows for the creation, retrieval, update, and deletion of metric information, as well as querying for specific metric information.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/metric-info", "/metric-info/<metric-id>", "/metric-info/query"]}}
{"file": "cloned/kapua/service/job/internal/src/main/java/org/eclipse/kapua/service/job/targets/internal/JobTargetServiceImpl.java", "endpoints": {"api_summary": "The JobTargetServiceImpl class provides an implementation of the JobTargetService interface, which defines methods for creating, finding, querying, counting, updating, and deleting job targets. The class uses the JobTargetRepository to interact with the database and the AuthorizationService to check permissions.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/jobTargets", "/jobTargets/<jobTargetId>"]}}
{"file": "cloned/kapua/service/job/internal/src/main/java/org/eclipse/kapua/service/job/execution/internal/JobExecutionQueryImpl.java", "endpoints": {"api_summary": "The JobExecutionQueryImpl class provides an implementation of the JobExecutionQuery interface, which is used to query job executions in the Kapua system. It allows sorting by the startedOn field in descending order by default.", "methods": ["GET"], "paths": ["/jobs/executions"]}}
{"file": "cloned/kapua/service/job/internal/src/main/java/org/eclipse/kapua/service/job/execution/internal/JobExecutionServiceImpl.java", "endpoints": {"api_summary": "The JobExecutionServiceImpl class provides an implementation of the JobExecutionService interface, which allows for the creation, update, and retrieval of job executions. It also provides methods for querying and counting job executions, as well as deleting them.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/jobs/executions", "/jobs/executions/<job_execution_id>", "/jobs/executions/query", "/jobs/executions/count"]}}
{"file": "cloned/kapua/service/job/api/src/main/java/org/eclipse/kapua/service/job/JobService.java", "endpoints": {"api_summary": "The JobService API provides methods to manage Job objects, including creating, updating, finding, listing, and deleting Jobs.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/jobs", "/jobs/<jobId>", "/jobs/<jobId>/forced"]}}
{"file": "cloned/kapua/service/job/api/src/main/java/org/eclipse/kapua/service/job/step/JobStepService.java", "endpoints": {"api_summary": "The JobStepService API provides methods to manage JobStep objects, including creating, updating, finding, listing, and deleting Jobs.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/jobsteps", "/jobsteps/<jobstep_id>", "/jobsteps/<jobstep_id>/properties"]}}
{"file": "cloned/kapua/service/job/api/src/main/java/org/eclipse/kapua/service/job/step/definition/JobStepDefinitionService.java", "endpoints": {"api_summary": "The JobStepDefinitionService API provides methods to manage JobStepDefinition objects, including creating, updating, finding, listing, and deleting Jobs.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/jobs", "/jobs/<job_id>", "/jobs/<job_id>/steps", "/jobs/<job_id>/steps/<step_id>"]}}
{"file": "cloned/kapua/service/job/api/src/main/java/org/eclipse/kapua/service/job/targets/JobTargetService.java", "endpoints": {"api_summary": "The JobTargetService API provides methods to manage JobTarget objects, including creating, updating, finding, listing, and deleting Jobs.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/jobtargets", "/jobtargets/<id>", "/jobtargets/query"]}}
{"file": "cloned/kapua/service/job/api/src/main/java/org/eclipse/kapua/service/job/execution/JobExecutionService.java", "endpoints": {"api_summary": "The JobExecutionService API provides methods to manage JobExecution objects, including creating, updating, finding, listing, and deleting Jobs.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/jobs", "/jobs/<jobId>", "/jobs/<jobId>/executions", "/jobs/<jobId>/executions/<executionId>"]}}
{"file": "cloned/kapua/service/account/api/src/main/java/org/eclipse/kapua/service/account/AccountService.java", "endpoints": {"api_summary": "The AccountService API provides endpoints for managing accounts, including creating, updating, and querying accounts. It also provides endpoints for finding direct children accounts of a given account.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/accounts", "/accounts/<accountId>", "/accounts/<accountId>/children"]}}
{"file": "cloned/kapua/service/user/internal/src/main/java/org/eclipse/kapua/service/user/internal/UserServiceImpl.java", "endpoints": {"api_summary": "This API provides methods for managing users in the system.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users", "/users/{id}", "/users/query"]}}
{"file": "cloned/kapua/service/user/api/src/main/java/org/eclipse/kapua/service/user/UserService.java", "endpoints": {"api_summary": "The UserService API provides endpoints for managing users under an account. It includes endpoints for creating, updating, finding, listing, and deleting users.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users", "/users/<built-in function id>", "/users/<username>", "/users/externalId", "/users/externalUsername"]}}
{"file": "cloned/kapua/service/device/registry/internal/src/main/java/org/eclipse/kapua/service/device/registry/event/internal/DeviceEventServiceImpl.java", "endpoints": {"api_summary": "The DeviceEventServiceImpl class provides a REST API for managing device events in the Kapua system. It allows for creating, retrieving, updating, and deleting device events, as well as querying and counting device events.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/device-events", "/device-events/<device-event-id>"]}}
{"file": "cloned/kapua/service/device/registry/internal/src/main/java/org/eclipse/kapua/service/device/registry/event/internal/DeviceEventImpl.java", "endpoints": {"api_summary": "The DeviceEventImpl class provides a way to represent a device event in the Kapua system. It includes information such as the device ID, the event message, and the response code.", "methods": ["GET", "POST"], "paths": ["/device/event"]}}
{"file": "cloned/kapua/service/device/registry/api/src/main/java/org/eclipse/kapua/service/device/registry/DeviceRegistryService.java", "endpoints": {"api_summary": "The DeviceRegistryService API provides a way to manage devices in a registry. It allows for querying, creating, updating, and deleting devices, as well as finding devices by their client ID.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/devices", "/devices/<device_id>", "/devices/clientId/<client_id>"]}}
{"file": "cloned/kapua/service/device/call/kura/src/main/java/org/eclipse/kapua/service/device/call/kura/model/deploy/PackageMetrics.java", "endpoints": {"api_summary": "The DEPLOY API provides endpoints for managing packages on a device, including downloading, installing, and uninstalling packages.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/deploy/download", "/deploy/install", "/deploy/uninstall"]}}
{"file": "cloned/kapua/service/device/call/kura/src/main/java/org/eclipse/kapua/service/device/call/message/kura/event/configuration/KuraConfigurationEventMessage.java", "endpoints": {"api_summary": "The KuraConfigurationEventMessage is a message sent by a device to notify the platform about a KuraDeviceConfiguration update.", "methods": ["POST"], "paths": ["/kura/device/configuration"]}}
{"file": "cloned/kapua/service/device/call/kura/src/main/java/org/eclipse/kapua/service/device/call/message/kura/lifecycle/KuraAppsChannel.java", "endpoints": {"api_summary": "The KuraAppsChannel API provides a way to manage the lifecycle of Kura apps, including installation, deployment, and removal. It allows for the creation, update, and deletion of app instances, as well as the retrieval of app metadata and the execution of app commands.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/kura/apps", "/kura/apps/<app_id>", "/kura/apps/<app_id>/commands/<command_id>"]}}
{"file": "cloned/kapua/service/device/call/kura/src/main/java/org/eclipse/kapua/service/device/call/message/kura/app/notification/KuraNotifyMessage.java", "endpoints": {"api_summary": "The KuraNotifyMessage API allows devices to notify the platform about the progress of DeviceManagementOperations. It provides a way for devices to send notifications to the platform, which can be used to track the status of operations and provide real-time updates to the user.", "methods": ["POST"], "paths": ["/kura/notify"]}}
{"file": "cloned/kapua/service/device/call/api/src/main/java/org/eclipse/kapua/service/device/call/DeviceCall.java", "endpoints": {"api_summary": "The DeviceCall interface defines a way to send a request message and wait for a response message. It provides methods for performing different types of requests, such as read, create, write, delete, execute, options, submit, and cancel. The interface also provides a method to get the base message class.", "methods": ["GET", "POST", "PUT", "DELETE", "OPTIONS", "SUBMIT", "CANCEL"], "paths": ["/device/call/read", "/device/call/create", "/device/call/write", "/device/call/delete", "/device/call/execute", "/device/call/options", "/device/call/submit", "/device/call/cancel"]}}
{"file": "cloned/kapua/service/device/management/configuration/internal/src/main/java/org/eclipse/kapua/service/device/management/configuration/message/internal/ConfigurationResponsePayload.java", "endpoints": {"api_summary": "The ConfigurationResponsePayload class provides a response payload for the Device Configuration service. It allows reading and writing the Device Configuration from and to the payload body.", "methods": ["GET", "POST"], "paths": ["/device/configuration"]}}
{"file": "cloned/kapua/service/device/management/configuration/internal/src/main/java/org/eclipse/kapua/service/device/management/snapshot/internal/DeviceSnapshotManagementServiceImpl.java", "endpoints": {"api_summary": "The DeviceSnapshotManagementServiceImpl class provides methods for managing device snapshots, including getting and rolling back to a specific snapshot.", "methods": ["GET", "POST"], "paths": ["/snapshots", "/snapshots/<snapshotId>"]}}
{"file": "cloned/kapua/service/device/management/request/internal/src/main/java/org/eclipse/kapua/service/device/management/request/internal/DeviceRequestManagementServiceImpl.java", "endpoints": {"api_summary": "The DeviceRequestManagementServiceImpl class provides a REST API for managing device requests. It allows for the execution of generic requests, which can be used to perform various actions on devices, such as reading or writing device data.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/device/request", "/device/request/<request_id>"]}}
{"file": "cloned/kapua/service/device/management/inventory/internal/src/main/java/org/eclipse/kapua/service/device/management/inventory/internal/message/InventoryResponsePayload.java", "endpoints": {"api_summary": "This API provides endpoints for managing device inventory, including retrieving and updating device information, managing device bundles, and managing device packages.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/device-inventory", "/device-inventory/<device-id>", "/device-inventory/bundles", "/device-inventory/bundles/<bundle-id>", "/device-inventory/packages", "/device-inventory/packages/<package-id>"]}}
{"file": "cloned/kapua/service/device/management/inventory/api/src/main/java/org/eclipse/kapua/service/device/management/inventory/DeviceInventoryManagementService.java", "endpoints": {"api_summary": "The DeviceInventoryManagementService API provides endpoints for managing device inventory, including retrieving inventory information, bundles, containers, and packages.", "methods": ["GET", "POST"], "paths": ["/inventory", "/bundles", "/containers", "/system-packages", "/deployment-packages"]}}
{"file": "cloned/kapua/service/device/management/registry/internal/src/main/java/org/eclipse/kapua/service/device/management/registry/manager/internal/DeviceManagementRegistryManagerServiceImpl.java", "endpoints": {"api_summary": "The DeviceManagementRegistryManagerServiceImpl class provides methods for managing device management operations and notifications. It includes methods for processing operation notifications, storing management notifications, and closing device management operations.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/device-management/registry/manager/operation", "/device-management/registry/manager/notification"]}}
{"file": "cloned/kapua/service/device/management/registry/internal/src/main/java/org/eclipse/kapua/service/device/management/registry/operation/notification/internal/ManagementOperationNotificationImpl.java", "endpoints": {"api_summary": "The Device Management Operation Notification API allows clients to receive notifications about the status of device management operations.", "methods": ["GET", "POST"], "paths": ["/device-management/operation-notification"]}}
{"file": "cloned/kapua/service/device/management/job/api/src/main/java/org/eclipse/kapua/service/device/management/job/JobDeviceManagementOperationService.java", "endpoints": {"api_summary": "The JobDeviceManagementOperationService API exposes endpoints to manage JobDeviceManagementOperation objects. It allows querying for JobDeviceManagementOperation objects using a KapuaQuery object.", "methods": ["GET"], "paths": ["/jobDeviceManagementOperation"]}}
{"file": "cloned/kapua/service/device/management/command/internal/src/main/java/org/eclipse/kapua/service/device/management/command/internal/DeviceCommandManagementServiceImpl.java", "endpoints": {"api_summary": "The DeviceCommandManagementServiceImpl class provides a way to execute commands on a device. It allows you to send a command request to a device and receive a response with the output of the command.", "methods": ["POST"], "paths": ["/device/command"]}}
{"file": "cloned/kapua/service/device/management/keystore/internal/src/main/java/org/eclipse/kapua/service/device/management/keystore/internal/message/request/KeystoreRequestPayload.java", "endpoints": {"api_summary": "The KeystoreRequestPayload class provides a payload implementation for the DeviceKeystore API. It allows for querying, creating, updating, and deleting DeviceKeystore items, as well as retrieving DeviceKeystore certificates and keypairs.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/device/management/keystore/items", "/device/management/keystore/certificates", "/device/management/keystore/keypairs"]}}
{"file": "cloned/kapua/service/device/management/keystore/internal/src/main/java/org/eclipse/kapua/service/device/management/keystore/internal/message/response/KeystoreResponseChannel.java", "endpoints": {"api_summary": "The KeystoreResponseChannel API allows clients to retrieve information about the device keystore, such as the keystore's name and version.", "methods": ["GET"], "paths": ["/device/management/keystore"]}}
{"file": "cloned/kapua/service/device/management/keystore/internal/src/main/java/org/eclipse/kapua/service/device/management/keystore/internal/message/response/KeystoreResponsePayload.java", "endpoints": {"api_summary": "The KeystoreResponsePayload class provides a response payload for the Device Management Service, specifically for keystore-related operations. It allows for reading and writing keystore data, as well as retrieving CSRs (Certificate Signing Requests).", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/keystores", "/keystores/<keystore_id>", "/keystores/<keystore_id>/items", "/keystores/<keystore_id>/items/<item_id>", "/keystores/<keystore_id>/csr"]}}
{"file": "cloned/kapua/service/device/management/packages/internal/src/main/java/org/eclipse/kapua/service/device/management/packages/message/internal/PackageResponsePayload.java", "endpoints": {"api_summary": "This API is responsible for managing device packages, including installing, uninstalling, and downloading packages.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/device/management/packages", "/device/management/packages/<package_id>", "/device/management/packages/download"]}}
{"file": "cloned/kapua/service/device/commons/src/main/java/org/eclipse/kapua/service/device/management/commons/call/DeviceCallExecutor.java", "endpoints": {"api_summary": "This API allows for the management of devices and their connections, including creating, reading, updating, and deleting devices, as well as sending requests to devices and receiving responses.", "methods": ["GET", "POST", "PUT", "DELETE", "OPTIONS", "EXECUTE"], "paths": ["/devices", "/devices/<device_id>", "/devices/<device_id>/requests", "/devices/<device_id>/requests/<request_id>"]}}
{"file": "cloned/kapua/service/endpoint/internal/src/main/java/org/eclipse/kapua/service/endpoint/internal/EndpointInfoImpl.java", "endpoints": {"api_summary": "The EndpointInfoImpl class provides information about an endpoint, including its schema, DNS, port, and security settings. It also includes a set of usages, which are not defined in this file.", "methods": ["GET", "POST"], "paths": ["/endpoint_info"]}}
{"file": "cloned/kapua/service/endpoint/api/src/main/java/org/eclipse/kapua/service/endpoint/EndpointInfoService.java", "endpoints": {"api_summary": "The EndpointInfoService provides a REST API for querying and managing EndpointInfo objects, which represent the information about a specific endpoint in the system.", "methods": ["GET", "POST"], "paths": ["/endpointInfo", "/endpointInfo/<id>"]}}
{"file": "cloned/kapua/service/stream/api/src/main/java/org/eclipse/kapua/service/stream/StreamService.java", "endpoints": {"api_summary": "The StreamService API allows clients to publish data to the Kapua stream service. The publish method takes a KapuaDataMessage and a timeout as input, and returns a KapuaResponseMessage.", "methods": ["POST"], "paths": ["/stream/publish"]}}
{"file": "cloned/kapua/service/tag/internal/src/main/java/org/eclipse/kapua/service/tag/internal/TagServiceImpl.java", "endpoints": {"api_summary": "The TagServiceImpl class provides a REST API for managing tags in the Kapua system. It allows users to create, update, delete, and query tags, as well as retrieve information about specific tags.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/tags", "/tags/<tagId>", "/tags/query"]}}
{"file": "cloned/kapua/service/commons/elasticsearch/client-rest/src/main/java/org/eclipse/kapua/service/elasticsearch/client/rest/ElasticsearchResourcePaths.java", "endpoints": {"api_summary": "The ElasticsearchResourcePaths class provides a set of static methods for generating Elasticsearch REST API resource paths. The methods in this class are used to construct the URLs for various Elasticsearch operations, such as inserting data, searching, and refreshing indexes.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/_bulk", "/_delete_by_query", "/_cat/indices", "/_doc", "/_mapping", "/_search", "/_refresh", "/_update"]}}
{"file": "cloned/kapua/commons/src/main/java/org/eclipse/kapua/commons/configuration/AccountRelativeFinder.java", "endpoints": {"api_summary": "The AccountRelativeFinder service provides endpoints to retrieve relative accounts for a given scope and to find the parent ids of an account.", "methods": ["GET", "POST"], "paths": ["/accounts/children", "/accounts/parents"]}}
{"file": "cloned/kapua/commons/src/main/java/org/eclipse/kapua/commons/service/event/store/internal/EventStoreServiceImpl.java", "endpoints": {"api_summary": "The EventStoreServiceImpl class provides an implementation of the EventStoreService interface, which allows for the creation, update, deletion, and retrieval of EventStoreRecord objects. It also provides a query method to retrieve a list of EventStoreRecord objects based on a given query.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/event-store/create", "/event-store/update", "/event-store/delete", "/event-store/find", "/event-store/query"]}}
{"file": "cloned/kapua/commons/src/main/java/org/eclipse/kapua/commons/service/event/store/api/EventStoreService.java", "endpoints": {"api_summary": "The EventStoreService API provides methods to manage KapuaEvent objects, including creating, updating, finding, listing, and deleting events.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/eventStore/find", "/eventStore/query"]}}
{"file": "cloned/sprout-platform/backend/server/src/main/java/net/savantly/sprout/server/api/MyRestApi.java", "endpoints": {"api_summary": "The MyRestApi endpoint provides CRUD operations for MyEntity resources. It uses the Spring Boot CrudController and exposes the endpoints under the /api/my-example path.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/my-example", "/api/my-example/<built-in function id>"]}}
{"file": "cloned/sprout-platform/backend/core/src/main/java/net/savantly/sprout/core/domain/role/RoleRepository.java", "endpoints": {"api_summary": "The RoleRepository API provides a way to manage roles and their associated privileges in the system. It allows for the creation, retrieval, update, and deletion of roles, as well as the ability to include privileges in the response.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/roles", "/roles/<role_id>", "/roles/<role_id>/privileges"]}}
{"file": "cloned/sprout-platform/backend/core/src/main/java/net/savantly/sprout/core/domain/user/repository/UserRepository.java", "endpoints": {"api_summary": "The UserRepository API provides endpoints for managing user accounts, including creating, reading, updating, and deleting user profiles, as well as retrieving user details by username or email address.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users", "/users/<built-in function id>", "/users/<username>", "/users/<emailAddress>"]}}
{"file": "cloned/sprout-platform/backend/core/src/main/java/net/savantly/sprout/core/domain/tenant/TenantRepository.java", "endpoints": {"api_summary": "The Tenant API provides a way to manage tenants in the system. It allows for the creation, retrieval, update, and deletion of tenants, as well as searching for tenants by alias.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/tenants", "/tenants/<built-in function id>"]}}
{"file": "cloned/sprout-platform/backend/modules/example-panel/src/main/java/net/savantly/sprout/module/example/api/ExamplePanelApi.java", "endpoints": {"api_summary": "The ExamplePanelApi REST API provides a single endpoint for retrieving a message from the Example Panel. The API is accessible at the /api/example-panel path and supports the GET HTTP method.", "methods": ["GET"], "paths": ["/api/example-panel"]}}
{"file": "cloned/sprout-platform/backend/modules/content/src/main/browser/views/Event/index.js", "endpoints": {"api_summary": "The API provides a list of events, allows creating new events, and retrieves details for a specific event.", "methods": ["GET", "POST"], "paths": ["/event", "/event/create", "/event/:eventId"]}}
{"file": "cloned/sprout-platform/backend/modules/content/src/main/browser/views/Event/Item/index.js", "endpoints": {"api_summary": "This API provides endpoints for viewing, editing, and deleting events. It also provides a navigation menu with links to these endpoints.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/event", "/event/<eventId>", "/event/<eventId>/edit", "/event/<eventId>/delete"]}}
{"file": "cloned/sprout-platform/backend/modules/content/src/main/browser/views/Form/index.js", "endpoints": {"api_summary": "The Form API provides endpoints for managing forms and their associated data. It includes endpoints for listing forms, creating new forms, and retrieving and updating individual forms.", "methods": ["GET", "POST", "PUT"], "paths": ["/form", "/form/create", "/form/:formId"]}}
{"file": "cloned/sprout-platform/backend/modules/content/src/main/browser/views/Form/Item/Submission/index.js", "endpoints": {"api_summary": "The Form API allows users to create, read, update, and delete form submissions. It also provides a way to list all form submissions and retrieve a specific submission by ID.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/form/:formId/submission", "/form/:formId/submission/:submissionId"]}}
{"file": "cloned/sprout-platform/backend/modules/content/src/main/browser/views/Form/Item/Submission/Item/index.js", "endpoints": {"api_summary": "This API provides endpoints for viewing, editing, and deleting form submissions. It also includes a navigation menu with links to these endpoints.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/form/:formId/submission/:submissionId", "/form/:formId/submission/:submissionId/edit", "/form/:formId/submission/:submissionId/delete"]}}
{"file": "cloned/sprout-platform/backend/modules/content/src/main/java/net/savantly/sprout/module/content/ContentController.java", "endpoints": {"api_summary": "The Content API provides endpoints for managing content in the Sprout CMS. It includes endpoints for retrieving and manipulating content, as well as endpoints for managing content types and templates.", "methods": ["GET"], "paths": ["/admin/content", "/admin/content/<built-in function id>"]}}
{"file": "cloned/sprout-platform/backend/modules/content/src/main/java/net/savantly/sprout/module/content/SproutContentModuleConfiguration.java", "endpoints": {"api_summary": "The Content API provides endpoints for managing content items, web pages, and related data. It includes endpoints for creating, reading, updating, and deleting content items, as well as endpoints for rendering content items and web pages.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/content/items", "/content/items/<item_id>", "/content/pages", "/content/pages/<page_id>"]}}
{"file": "cloned/sprout-platform/backend/modules/content/src/main/java/net/savantly/sprout/module/content/ContentApi.java", "endpoints": {"api_summary": "The Content API provides endpoints for retrieving and rendering content items and web pages. It also provides a list of available content field types.", "methods": ["GET"], "paths": ["/api/content/fieldTypes", "/api/content/item/{id}", "/api/content/page/{id}", "/api/content/home"]}}
{"file": "cloned/sprout-platform/backend/modules/content/src/main/java/net/savantly/sprout/module/content/model/contentItem/ContentItemRepository.java", "endpoints": {"api_summary": "The ContentItemRepository API provides a set of endpoints for managing content items in the system. It allows for the creation, retrieval, update, and deletion of content items, as well as searching for content items by name or content type.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/contentItems", "/contentItems/<built-in function id>", "/contentItems/findByName"]}}
{"file": "cloned/sprout-platform/backend/modules/content/src/main/java/net/savantly/sprout/module/content/model/webPage/WebPageRepository.java", "endpoints": {"api_summary": "The WebPage API provides endpoints for managing web pages in the system. It allows for the creation, retrieval, update, and deletion of web pages, as well as searching for web pages by name or home page status.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/webPages", "/webPages/<built-in function id>", "/webPages/home"]}}
{"file": "cloned/sprout-platform/backend/modules/content/src/main/java/net/savantly/sprout/module/content/model/contentType/ContentTypeRepository.java", "endpoints": {"api_summary": "The ContentTypeRepository API provides a way to manage content types in the system. It allows for the creation, retrieval, update, and deletion of content types, as well as searching for content types by name.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/contentTypes", "/contentTypes/<built-in function id>", "/contentTypes/search/findByName"]}}
{"file": "cloned/sprout-platform/backend/modules/content/src/main/java/net/savantly/sprout/module/content/model/contentTemplate/ContentTemplateRepository.java", "endpoints": {"api_summary": "The ContentTemplateRepository API provides a way to manage content templates in the system. It allows for the creation, retrieval, update, and deletion of content templates, as well as searching for templates by name.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/contentTemplates", "/contentTemplates/<built-in function id>", "/contentTemplates/search/findByName"]}}
{"file": "cloned/sprout-platform/backend/modules/content/src/main/java/net/savantly/sprout/module/content/model/webPageLayout/WebPageLayoutRepository.java", "endpoints": {"api_summary": "The WebPageLayoutRepository API provides a way to manage web page layouts in the system. It allows for the creation, retrieval, update, and deletion of web page layouts, as well as searching for specific layouts by name.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/webPagesLayouts", "/webPagesLayouts/<id>", "/webPagesLayouts/search/findOneByName"]}}
{"file": "cloned/sprout-platform/backend/modules/content/src/test/java/net/savantly/sprout/module/content/model/contentItem/ContentItemRequestTest.java", "endpoints": {"api_summary": "This API provides a way to retrieve and manipulate content items in a repository. It allows for the creation, retrieval, and deletion of content items, as well as the ability to update the field values of existing content items.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/content/item/<content_item_id>", "/api/repo/contentItems/<content_item_id>"]}}
{"file": "cloned/sprout-platform/backend/modules/openTok/src/main/java/net/savantly/sprout/module/openTok/api/OpenTokApi.java", "endpoints": {"api_summary": "The OpenTok API provides a way to generate tokens for OpenTok sessions. It allows clients to connect to OpenTok sessions and publish or subscribe to streams.", "methods": ["GET"], "paths": ["/openTok/token/{name}"]}}
{"file": "cloned/sprout-platform/backend/modules/wiki/src/main/java/net/savantly/sprout/wiki/WikiController.java", "endpoints": {"api_summary": "The Sprout Wiki API provides endpoints for managing and accessing wiki content. It allows users to create, read, update, and delete wiki pages, as well as retrieve the content of a specific wiki page.", "methods": ["GET", "POST"], "paths": ["/rest/modules/sprout-wiki/", "/rest/modules/sprout-wiki/{id}"]}}
{"file": "cloned/sprout-platform/backend/modules/wiki/src/main/java/net/savantly/sprout/wiki/repository/WikiItemRepository.java", "endpoints": {"api_summary": "The Sprout Wiki API provides a RESTful interface for managing and retrieving wiki items and their content. It allows for paginated retrieval of wiki items with or without content, as well as the ability to retrieve a specific wiki item by its ID.", "methods": ["GET", "POST"], "paths": ["/sprout-wiki", "/sprout-wiki/<id>"]}}
{"file": "cloned/sprout-platform/backend/modules/wiki/src/test/java/net/savantly/sprout/wiki/repository/WikiItemRepositoryTest.java", "endpoints": {"api_summary": "The WikiItemRepositoryTest file defines a REST API for testing the WikiItemRepository. The API includes a GET endpoint for retrieving the content of a wiki item and a GET endpoint for retrieving the list of wiki items.", "methods": ["GET"], "paths": ["/api/"]}}
{"file": "cloned/sprout-platform/backend/modules/example-app/src/main/java/net/savantly/sprout/module/example/api/ExampleAppApi.java", "endpoints": {"api_summary": "The ExampleAppApi REST API provides a single endpoint for retrieving a message from the server.", "methods": ["GET"], "paths": ["/api/example-app"]}}
{"file": "cloned/sprout-platform/backend/modules/forms/src/main/java/net/savantly/sprout/module/forms/FormsApi.java", "endpoints": {"api_summary": "The Forms API provides endpoints for managing form definitions and form data. It allows for creating, reading, updating, and deleting form definitions and form data, as well as retrieving form data by form ID or form path.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/savantly-forms/form", "/api/savantly-forms/form/{id}", "/api/savantly-forms/form/{id}/submission", "/api/savantly-forms/data", "/api/savantly-forms/data/{id}", "/api/savantly-forms/forms/{formPath}", "/api/savantly-forms/forms/{formPath}/submission", "/api/savantly-forms/forms/{formPath}/submission/{id}"]}}
{"file": "cloned/sprout-platform/backend/modules/forms/src/test/java/net/savantly/sprout/module/forms/FormsApiTest.java", "endpoints": {"api_summary": "The Forms API allows for the creation, retrieval, and submission of forms. It also provides endpoints for retrieving form data and settings.", "methods": ["GET", "POST"], "paths": ["/api/savantly-forms/form", "/api/savantly-forms/data"]}}
{"file": "cloned/sprout-platform/backend/modules/forms/src/plugin/pages/form/state/actions.ts", "endpoints": {"api_summary": "This API provides endpoints for managing forms and form submissions. It allows for querying forms and submissions, creating new forms and submissions, updating existing forms and submissions, and deleting forms and submissions.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/form", "/form/<built-in function id>", "/form/<formId>/submission", "/data/<id>", "/forms/<formPath>/submission/<submissionId>"]}}
{"file": "cloned/sprout-platform/backend/starters/sprout-spring-boot-starter/src/main/java/net/savantly/sprout/domain/permissions/PermissionsApi.java", "endpoints": {"api_summary": "The Permissions API provides endpoints for managing roles and privileges in a multi-tenant system. It allows for the creation, update, and deletion of roles and privileges, as well as the assignment and unassignment of privileges to roles.", "methods": ["GET", "PUT", "POST", "DELETE"], "paths": ["/api/permissions/role", "/api/permissions/privilege", "/api/permissions/role/{name}", "/api/permissions/role/{name}/{privilege}"]}}
{"file": "cloned/sprout-platform/backend/starters/sprout-spring-boot-starter/src/main/java/net/savantly/sprout/domain/menu/MenuApi.java", "endpoints": {"api_summary": "The Menu API provides endpoints for managing menus in a web application. It allows for the retrieval of public menus, the creation and deletion of menus, and the updating of menu items.", "methods": ["GET", "POST", "DELETE"], "paths": ["/api/public/menu", "/api/menu", "/api/menu/{id}"]}}
{"file": "cloned/sprout-platform/backend/starters/sprout-spring-boot-starter/src/main/java/net/savantly/sprout/domain/proxy/ProxyApi.java", "endpoints": {"api_summary": "The Proxy API allows for making HTTP requests to external resources and returning the response. It supports GET and POST methods and allows for specifying the request headers and body.", "methods": ["GET", "POST"], "paths": ["/api/proxy", "/api/proxy/"]}}
{"file": "cloned/sprout-platform/backend/starters/sprout-spring-boot-starter/src/main/java/net/savantly/sprout/domain/home/HomePageApi.java", "endpoints": {"api_summary": "The HomePageApi interface defines a REST API for retrieving home page data. The API has a single endpoint, GET /api/home, which returns a HomePageData object.", "methods": ["GET"], "paths": ["/api/home"]}}
{"file": "cloned/sprout-platform/backend/starters/sprout-spring-boot-starter/src/main/java/net/savantly/sprout/domain/uiProperties/UIPropertiesAPI.java", "endpoints": {"api_summary": "The UIPropertiesAPI provides a RESTful API for managing UI properties in the Sprout application. It allows for retrieving a list of all UI properties and retrieving a specific UI property by its ID.", "methods": ["GET"], "paths": ["/api/ui-properties", "/api/ui-properties/<built-in function id>"]}}
{"file": "cloned/sprout-platform/backend/starters/sprout-spring-boot-starter/src/main/java/net/savantly/sprout/domain/uiProperties/UIPropertyRepository.java", "endpoints": {"api_summary": "The UIPropertyRepository API provides a way to manage and retrieve UI properties for the Sprout application. It allows for the creation, retrieval, and deletion of UI properties, as well as searching for properties by name.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/uiProperties", "/uiProperties/<built-in function id>"]}}
{"file": "cloned/sprout-platform/backend/starters/sprout-spring-boot-starter/src/main/java/net/savantly/sprout/domain/dashboard/DashboardsApi.java", "endpoints": {"api_summary": "The Dashboards API provides endpoints for managing and retrieving dashboards in the system. It allows users to create, read, update, and delete dashboards, as well as retrieve a list of dashboards by folder or retrieve the home dashboard.", "methods": ["GET", "POST", "DELETE"], "paths": ["/api/dashboards/folder/", "/api/dashboards/folder/{folder}", "/api/dashboards/home", "/api/dashboards/db", "/api/dashboards/db/set-current/{id}/{version}", "/api/dashboards/uid/{uid}", "/api/dashboards/uid/{uid}"]}}
{"file": "cloned/sprout-platform/backend/starters/sprout-spring-boot-starter/src/main/java/net/savantly/sprout/domain/account/AccountApi.java", "endpoints": {"api_summary": "The Account API provides information about the current user's account, including their name, logout URL, and authorities. It also provides a way to log out the user.", "methods": ["GET"], "paths": ["/api/account"]}}
{"file": "cloned/sprout-platform/backend/starters/sprout-spring-boot-starter/src/main/java/net/savantly/sprout/domain/issue/IssueApi.java", "endpoints": {"api_summary": "The Issue API provides endpoints for managing issues and their comments. It allows users to create, read, update, and delete issues and their comments, as well as retrieve a list of comments for a specific issue.", "methods": ["GET", "POST"], "paths": ["/api/issues/{itemId}/comment"]}}
{"file": "cloned/sprout-platform/backend/starters/sprout-spring-boot-starter/src/main/java/net/savantly/sprout/domain/authentication/LoginApi.java", "endpoints": {"api_summary": "The LoginApi REST API provides endpoints for user authentication, login, and logout. It also provides a list of OAuth clients for implicit flow authentication.", "methods": ["GET", "POST"], "paths": ["/api/authentication/oauth", "/api/login", "/api/logout"]}}
{"file": "cloned/sprout-platform/backend/starters/sprout-spring-boot-starter/src/main/java/net/savantly/sprout/domain/user/admin/UserAdminApi.java", "endpoints": {"api_summary": "The UserAdminApi provides endpoints for managing users in the system. It allows for creating, reading, updating, and deleting users, as well as updating user passwords.", "methods": ["GET", "POST", "PUT"], "paths": ["/api/admin/users", "/api/admin/users/{userid}", "/api/admin/users/{userid}/password"]}}
{"file": "cloned/sprout-platform/backend/starters/sprout-spring-boot-starter/src/main/java/net/savantly/sprout/domain/user/search/UserSearchApi.java", "endpoints": {"api_summary": "The UserSearchApi provides a RESTful API for searching and retrieving user information. It allows clients to retrieve a list of users and their corresponding display names, item IDs, and usernames.", "methods": ["GET"], "paths": ["/api/users"]}}
{"file": "cloned/sprout-platform/backend/starters/sprout-spring-boot-starter/src/main/java/net/savantly/sprout/domain/folder/FolderApi.java", "endpoints": {"api_summary": "The Folder API provides endpoints for managing folders in a repository. It allows for creating, reading, updating, and deleting folders, as well as retrieving a list of all folders.", "methods": ["GET", "POST", "DELETE"], "paths": ["/api/folders", "/api/folders/{id}"]}}
{"file": "cloned/sprout-platform/backend/starters/sprout-spring-boot-starter/src/main/java/net/savantly/sprout/domain/widget/dataSource/WidgetDataSourceApi.java", "endpoints": {"api_summary": "The WidgetDataSourceApi provides a RESTful API for managing widget data sources. It allows for the retrieval of a list of data sources, as well as the creation, update, and deletion of individual data sources.", "methods": ["GET"], "paths": ["/api/widget-data-source"]}}
{"file": "cloned/sprout-platform/backend/starters/sprout-spring-boot-starter/src/main/java/net/savantly/sprout/domain/widget/data/WidgetDataApi.java", "endpoints": {"api_summary": "The WidgetDataApi provides a RESTful API for managing widget data. It allows for the retrieval of widget data by type and id, and supports various data types such as JSON, Markdown, and HTML.", "methods": ["GET"], "paths": ["/api/widget-data/{widgetDataSourceType}", "/api/widget-data/{widgetDataSourceType}/{widgetDataId}"]}}
{"file": "cloned/sprout-platform/backend/starters/sprout-spring-boot-starter/src/main/java/net/savantly/sprout/domain/branding/BrandingApi.java", "endpoints": {"api_summary": "The Branding API provides endpoints for retrieving the favicon, logo, and mini-logo images, as well as a styles endpoint that returns a map of styles for the application.", "methods": ["GET"], "paths": ["/api/public/brand/favicon", "/api/public/brand/logo", "/api/public/brand/mini-logo", "/api/public/brand/styles"]}}
{"file": "cloned/sprout-platform/backend/starters/sprout-spring-boot-starter/src/main/java/net/savantly/sprout/domain/file/FileProviderApi.java", "endpoints": {"api_summary": "The FileProviderApi provides endpoints for managing files and their metadata. It allows for listing, creating, deleting, and uploading files, as well as retrieving metadata about files.", "methods": ["GET", "POST", "DELETE"], "paths": ["/api/files/list", "/api/files/list/**", "/api/files/create", "/api/files/upload"]}}
{"file": "cloned/sprout-platform/backend/starters/sprout-spring-boot-starter/src/main/java/net/savantly/sprout/domain/file/s3/S3FileProviderApi.java", "endpoints": {"api_summary": "The S3FileProviderApi provides a REST API for downloading files from an S3 bucket. The API accepts a GET request to the /download/** endpoint and returns a pre-signed URL for the requested file.", "methods": ["GET"], "paths": ["/api/files/s3/download/**"]}}
{"file": "cloned/sprout-platform/backend/starters/sprout-spring-boot-starter/src/main/java/net/savantly/sprout/domain/file/jpa/JpaFileApi.java", "endpoints": {"api_summary": "The JpaFileApi provides a RESTful API for downloading files stored in the JpaFileProvider. The API allows clients to retrieve a file by its ID and returns the file as a byte array with a content-disposition header set to attachment.", "methods": ["GET"], "paths": ["/api/files/download/{id}"]}}
{"file": "cloned/sprout-platform/backend/starters/sprout-spring-boot-starter/src/main/java/net/savantly/sprout/domain/file/jpa/JpaFileProvider.java", "endpoints": {"api_summary": "The JpaFileProvider class implements the FileProvider interface and provides methods for storing, retrieving, and deleting files. It also provides a method for getting a list of files by folder.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/files/<id>", "/api/files/download/<id>", "/api/files/<id>/children"]}}
{"file": "cloned/sprout-platform/backend/starters/sprout-spring-boot-starter/src/main/java/net/savantly/sprout/domain/feed/FeedApi.java", "endpoints": {"api_summary": "The Feed API provides endpoints for retrieving and managing feed items, including creating, deleting, and updating feed posts.", "methods": ["GET", "POST", "DELETE"], "paths": ["/api/feed", "/api/feed/post", "/api/feed/post/{itemId}"]}}
{"file": "cloned/sprout-platform/backend/starters/sprout-spring-boot-starter/src/main/java/net/savantly/sprout/controllers/DefaultMvcController.java", "endpoints": {"api_summary": "The DefaultMvcController defines a set of endpoints for handling requests related to the admin interface of the application. It includes endpoints for handling requests to the root path, the admin path, and the error path. The endpoints use the GET method and return a string representing the name of the view to be rendered.", "methods": ["GET"], "paths": ["/", "/admin/", "/admin/*/", "/admin/*/*/", "/admin/*/*/*/", "/admin/*/*/*/*/", "/admin/*/*/*/*/*/", "/admin/*/*/*/*/*/*/", "/error*"]}}
{"file": "cloned/sprout-platform/backend/starters/sprout-spring-boot-starter/src/main/java/net/savantly/sprout/controllers/PluginsApi.java", "endpoints": {"api_summary": "The Plugins API provides endpoints for managing and interacting with plugins in the Sprout system. It allows for retrieving plugin information, settings, and markdown content, as well as updating plugin settings.", "methods": ["GET", "POST"], "paths": ["/api/plugins", "/api/plugins/app", "/api/plugins/panel", "/api/plugins/{id}", "/api/plugins/{id}/settings", "/api/plugins/{id}/markdown/{markdownType}"]}}
{"file": "cloned/sprout-platform/backend/starters/sprout-spring-boot-starter/src/main/java/net/savantly/sprout/controllers/LoginController.java", "endpoints": {"api_summary": "The LoginController API provides a login page for users to authenticate with the system. It also provides a list of OAuth2 clients for users to choose from.", "methods": ["GET"], "paths": ["/login"]}}
{"file": "cloned/sprout-platform/backend/starters/sprout-spring-boot-starter/src/main/java/net/savantly/sprout/starter/SproutWebSecurityConfiguration.java", "endpoints": {"api_summary": "This API defines a security configuration for a web application, including login and logout functionality, and customizable security settings.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/login", "/logout"]}}
{"file": "cloned/sprout-platform/backend/starters/sprout-spring-boot-starter/src/main/java/net/savantly/sprout/starter/mvc/SproutWebMvcConfigurer.java", "endpoints": {"api_summary": "The SproutWebMvcConfigurer class defines a set of REST API endpoints for the Sprout web application. The endpoints include a default MVC controller, a login controller, and a plugins API. The endpoints are used to manage the web application's configuration, handle user authentication, and provide access to plugin functionality.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/", "/admin", "/admin/", "/login", "/plugins"]}}
{"file": "cloned/sprout-platform/backend/starters/sprout-spring-boot-starter/src/main/java/net/savantly/sprout/easy/EasyController.java", "endpoints": {"api_summary": "This API provides CRUD operations for a generic entity, with the ability to paginate and sort the results.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/", "/{itemId}"]}}
{"file": "cloned/sprout-platform/backend/starters/sprout-spring-boot-starter/src/main/java/net/savantly/sprout/rest/crud/CrudController.java", "endpoints": {"api_summary": "The CrudController API provides a set of endpoints for performing CRUD operations on a repository of objects. It supports GET, POST, PUT, and DELETE methods for retrieving, creating, updating, and deleting objects, respectively.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/", "/{id}"]}}
{"file": "cloned/sprout-platform/backend/starters/sprout-spring-boot-starter/src/main/java/net/savantly/sprout/rest/crud/TenantedDtoController.java", "endpoints": {"api_summary": "This API provides CRUD operations for a tenant-keyed repository of entities, with support for paging and permission-based access control.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/", "/{itemId}"]}}
{"file": "cloned/sprout-platform/backend/starters/sprout-spring-boot-starter/src/main/java/net/savantly/sprout/rest/crud/PageAndSortController.java", "endpoints": {"api_summary": "This API provides basic CRUD operations for a repository of entities, with support for pagination and sorting.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/", "/{id}"]}}
{"file": "cloned/sprout-platform/backend/starters/sprout-spring-boot-starter/src/main/java/net/savantly/sprout/rest/crud/CrudProjectionController.java", "endpoints": {"api_summary": "This API provides CRUD operations for a resource entity, with support for projections and SpEL expressions.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/", "/{id}"]}}
{"file": "cloned/sprout-platform/backend/starters/sprout-spring-boot-starter/src/test/java/net/savantly/sprout/domain/files/FileProviderApiTest.java", "endpoints": {"api_summary": "The FileProviderApiTest class provides a test suite for the FileProvider API, which allows users to create, read, update, and delete files and folders. The API also supports file uploads and downloads, as well as file metadata management.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/files", "/api/files/create", "/api/files/list", "/api/files/upload", "/api/files/download"]}}
{"file": "cloned/sprout-platform/backend/starters/sprout-spring-boot-starter/src/test/java/net/savantly/sprout/domain/user/admin/UserAdminApiTest.java", "endpoints": {"api_summary": "The UserAdminApiTest class defines a set of REST API endpoints for managing users in a system. The endpoints include creating, updating, and retrieving user information, as well as resetting user passwords.", "methods": ["GET", "POST", "PUT"], "paths": ["/api/admin/users", "/api/admin/users/<uuid>", "/api/admin/users/<uuid>/password"]}}
{"file": "cloned/sprout-platform/backend/starters/sprout-spring-boot-starter/src/test/java/net/savantly/sprout/domain/folder/FolderApiTest.java", "endpoints": {"api_summary": "The Folder API allows for the creation, retrieval, and deletion of folders. It also allows for the retrieval of a list of all folders and the ability to search for specific folders by name.", "methods": ["GET", "POST", "DELETE"], "paths": ["/api/folders", "/api/folders/<folder_id>"]}}
{"file": "cloned/sprout-platform/backend/starters/sprout-spring-boot-starter/src/test/java/net/savantly/sprout/controllers/DashboardsApiTest.java", "endpoints": {"api_summary": "The Dashboards API provides a RESTful interface for managing and interacting with dashboards in the Sprout application.", "methods": ["GET"], "paths": ["/api/dashboards/home"]}}
{"file": "cloned/sprout-platform/backend/starters/sprout-spring-boot-starter/src/test/java/net/savantly/sprout/starter/security/SecurityConfigurationComboTest.java", "endpoints": {"api_summary": "This API provides endpoints for user authentication and authorization, as well as a root page and an admin page. The admin page is only accessible to authorized users.", "methods": ["GET", "POST"], "paths": ["/", "/api/login", "/admin/"]}}
{"file": "cloned/sprout-platform/backend/starters/sprout-spring-boot-starter/src/test/java/net/savantly/sprout/autoconfigure/SproutWebMvcAutoConfigurationTest.java", "endpoints": {"api_summary": "The API provides a way to manage menus in a web application. It allows for the creation, retrieval, update, and deletion of menus, as well as the ability to retrieve a list of all menus.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/menu", "/api/menu/<menu_id>"]}}
{"file": "cloned/sprout-platform/backend/starters/sprout-spring-boot-starter/src/test/java/net/savantly/sprout/rest/crud/PageAndSortControllerTest.java", "endpoints": {"api_summary": "This API provides a CRUD interface for managing organizations, including creating, reading, updating, and deleting organizations. It also supports pagination and sorting of organizations.", "methods": ["GET", "POST"], "paths": ["/api/example"]}}
{"file": "cloned/sprout-platform/backend/starters/sprout-spring-boot-starter/src/test/java/net/savantly/sprout/module/PluginConfigurationTest.java", "endpoints": {"api_summary": "This API provides endpoints for managing plugins and their settings, as well as a custom controller for the example module.", "methods": ["GET", "POST"], "paths": ["/api/plugins/panel", "/api/plugins/<module_key>/settings", "/api/example/"]}}
{"file": "cloned/sprout-platform/backend/starters/sprout-spring-boot-starter/src/test/java/net/savantly/sprout/settings/AppSettingsRepositoryTests.java", "endpoints": {"api_summary": "The API provides a single endpoint for retrieving the UI properties for the application. The endpoint is accessible at /api/repo/uiProperties and returns a JSON object containing the UI properties.", "methods": ["GET"], "paths": ["/api/repo/uiProperties"]}}
{"file": "cloned/sprout-platform/frontend/libs/ui/src/util/mocks/entity.ts", "endpoints": {"api_summary": "The API defined in this file provides a simple CRUD interface for managing demo entities. It includes endpoints for creating, reading, updating, and deleting demo entities, as well as endpoints for retrieving a list of demo entities and retrieving a single demo entity by ID.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/demo", "/demo/<id>"]}}
{"file": "cloned/sprout-platform/frontend/apps/webapp/src/core/services/backend_srv.ts", "endpoints": {"api_summary": "The BackendSrv class provides methods for retrieving dashboards and folders from the Sprout API. It uses the sproutApiSvc service to make HTTP requests to the API.", "methods": ["GET"], "paths": ["/api/dashboards/db/<slug>", "/api/dashboards/uid/<uid>", "/api/folders/<uid>"]}}
{"file": "cloned/sprout-platform/frontend/apps/webapp/src/plugins/panel/widget/api/widgetApi.ts", "endpoints": {"api_summary": "The WidgetApi provides endpoints for retrieving data from a data source, and for retrieving a specific data item by its ID. The endpoints are used to fetch data for a widget, and to fetch a specific data item within a widget.", "methods": ["GET"], "paths": ["/api/widget-data/<dataSourceId>", "/api/widget-data/<dataSourceId>/<dataId>"]}}
{"file": "cloned/sprout-platform/frontend/apps/webapp/src/plugins/panel/posts/postsService.ts", "endpoints": {"api_summary": "This API provides a feed of items, allowing users to create new posts and retrieve a list of all feed items.", "methods": ["GET", "POST"], "paths": ["/api/feed", "/api/feed/post"]}}
{"file": "cloned/sprout-platform/frontend/apps/webapp/src/features/files/state.ts", "endpoints": {"api_summary": "This API provides endpoints for managing files and folders in a file system. It allows for creating, uploading, and deleting files and folders, as well as retrieving information about files and folders.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/files", "/files/<file_id>", "/files/<file_id>/upload", "/files/<file_id>/delete"]}}
{"file": "cloned/sprout-platform/frontend/apps/webapp/src/features/files/service.ts", "endpoints": {"api_summary": "The FileService API provides endpoints for managing files and their metadata. It allows for listing, creating, deleting, and uploading files, as well as retrieving metadata for a specific file.", "methods": ["GET", "POST", "DELETE"], "paths": ["/api/files/list", "/api/files/create", "/api/files/upload", "/api/files/<built-in function id>"]}}
{"file": "cloned/sprout-platform/frontend/apps/webapp/src/features/user-management/entity.ts", "endpoints": {"api_summary": "The UserEntityService provides a REST API for managing users and their roles. It allows for creating, reading, updating, and deleting users, as well as adding comments to issues.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/admin/users", "/api/issues/<issueId>/comments"]}}
{"file": "cloned/sprout-platform/frontend/apps/webapp/src/features/manage-dashboards/state/actions.ts", "endpoints": {"api_summary": "This API provides functionality for managing dashboards and folders in a Grafana instance. It includes endpoints for creating, updating, and deleting dashboards and folders, as well as for moving and deleting multiple dashboards and folders at once.", "methods": ["GET", "POST", "DELETE"], "paths": ["/api/dashboards/db/", "/api/folders/", "/api/folders/<folderId>", "/api/dashboards/uid/<dashboardUid>", "/api/dashboards/db/set-current/<dashboardUid>/<version>"]}}
{"file": "cloned/sprout-platform/frontend/apps/webapp/src/features/plugins/PluginSettings.ts", "endpoints": {"api_summary": "The API provides endpoints for retrieving and updating plugin settings. It allows users to manage their plugin settings and configurations.", "methods": ["GET", "POST"], "paths": ["/api/plugins/<pluginId>/settings"]}}
{"file": "cloned/sprout-platform/frontend/apps/webapp/src/features/feedback/entity.ts", "endpoints": {"api_summary": "The IssueEntityService provides a REST API for managing issues, including creating, reading, updating, and deleting issues. It also provides a method for adding comments to issues. The API is designed to be used with the EntityStateProvider, which manages the state of the issues in the system.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/issues", "/api/issues/<built-in function id>", "/api/issues/<built-in function id>/comments"]}}
{"file": "cloned/sprout-platform/frontend/apps/webapp/src/features/dashboard/services/dashboardService.ts", "endpoints": {"api_summary": "The dashboard service provides endpoints for retrieving and updating dashboards in a folder, as well as retrieving a single dashboard by its UID.", "methods": ["GET", "POST"], "paths": ["/api/dashboards/folder/<folder>", "/api/dashboards/db", "/api/dashboards/uid/<uid>"]}}
{"file": "cloned/sprout-platform/frontend/apps/webapp/src/features/folders/folderService.ts", "endpoints": {"api_summary": "The Folder API provides endpoints for managing folders in a repository. It allows for creating, reading, updating, and deleting folders, as well as retrieving a list of all folders in the repository.", "methods": ["GET", "POST", "DELETE"], "paths": ["/api/folders", "/api/folders/<built-in function id>"]}}
{"file": "cloned/engine/tests/hash-backend-integration/src/tests/test-server.ts", "endpoints": {"api_summary": "This API provides endpoints for managing a graph database, including deleting records, restoring snapshots, and resetting the graph.", "methods": ["DELETE", "POST"], "paths": ["/accounts", "/data-types", "/property-types", "/entity-types", "/entities", "/snapshot"]}}
{"file": "cloned/engine/tests/hash-backend-integration/src/tests/graph/knowledge/system-types/file.test.ts", "endpoints": {"api_summary": "This API allows for the creation of files from external URLs and upload requests, and provides a way to retrieve the presigned URL for a file.", "methods": ["POST", "GET"], "paths": ["/files/external", "/files/upload"]}}
{"file": "cloned/engine/tests/hash-backend-integration/src/tests/graph/knowledge/system-types/comment-notification.test.ts", "endpoints": {"api_summary": "This API defines comment notifications for a page in a document.", "methods": ["GET", "POST"], "paths": ["/pages/<page_id>/comments/<comment_id>/notifications"]}}
{"file": "cloned/engine/tests/hash-backend-integration/src/tests/graph/knowledge/system-types/comment.test.ts", "endpoints": {"api_summary": "This API defines a comment system that allows users to create, read, and delete comments on a page. The API also provides methods for retrieving the text of a comment, the author of a comment, and the parent block of a comment.", "methods": ["GET", "POST", "DELETE"], "paths": ["/comments", "/comments/<comment_id>", "/comments/<comment_id>/text", "/comments/<comment_id>/author", "/comments/<comment_id>/parent"]}}
{"file": "cloned/engine/tests/hash-backend-integration/src/tests/graph/knowledge/system-types/user.test.ts", "endpoints": {"api_summary": "This API defines a user model class that can be used to create, retrieve, and manage users in a system. It also includes methods for joining organizations and reading user web roles.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users", "/users/<built-in function id>", "/orgs", "/orgs/<built-in function id>", "/web-roles", "/web-roles/<built-in function id>"]}}
{"file": "cloned/engine/tests/hash-backend-integration/src/tests/graph/authorization/policy.test.ts", "endpoints": {"api_summary": "This API defines endpoints for creating, querying, updating, and deleting policies in a graph database.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/policies", "/policies/<policy_id>", "/policies/query", "/policies/resolve"]}}
{"file": "cloned/engine/tests/hash-playwright/tests/inbox-page.spec.ts", "endpoints": {"api_summary": "This API defines a notification system for a web application. It allows users to create and manage notifications, and provides a way to retrieve and display notifications on a dedicated page.", "methods": ["GET", "POST"], "paths": ["/notifications"]}}
{"file": "cloned/engine/tests/hash-playwright/tests/browser-plugin.spec.ts", "endpoints": {"api_summary": "This file defines a set of endpoints for a browser extension that allows users to interact with the HASH platform. The endpoints include login and logout, as well as functionality for creating and managing quick notes and one-off inferences.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/", "/popup.html", "/options.html", "/login", "/logout", "/quick-note", "/one-off"]}}
{"file": "cloned/engine/tests/hash-backend-load/src/graph/user.ts", "endpoints": {"api_summary": "This API defines endpoints for retrieving and modifying user information in a system.", "methods": ["GET", "POST"], "paths": ["/users", "/users/<built-in function id>"]}}
{"file": "cloned/engine/libs/@local/graph/sdk/typescript/src/principal/team.ts", "endpoints": {"api_summary": "This API provides endpoints for retrieving information about teams and their roles in the system.", "methods": ["GET"], "paths": ["/teams/<team_name>", "/teams/<team_id>/roles"]}}
{"file": "cloned/engine/libs/@local/hash-backend-utils/src/file-storage/aws-s3-storage-provider.ts", "endpoints": {"api_summary": "The AwsS3StorageProvider class implements the UploadableStorageProvider interface and provides methods for presigning uploads and downloads to an AWS S3 bucket.", "methods": ["presignUpload", "presignDownload", "getFileEntityStorageKey"], "paths": ["/files/<entityId>/<editionIdentifier>/<filename>"]}}
{"file": "cloned/engine/libs/@local/hash-isomorphic-utils/src/ontology-type-ids.ts", "endpoints": {"api_summary": "This file defines several entity types and link entity types, as well as property types and data types for a system that manages entities and their relationships.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/entity-types", "/link-entity-types", "/property-types", "/data-types"]}}
{"file": "cloned/engine/libs/@local/hash-isomorphic-utils/src/save.ts", "endpoints": {"api_summary": "This file defines a function called `save` that calculates the actions needed to persist changes to a block collection in a Hash graph database.", "methods": ["GET", "POST"], "paths": ["/save"]}}
{"file": "cloned/engine/libs/@local/hash-isomorphic-utils/src/graphql/type-defs/generation.typedef.ts", "endpoints": {"api_summary": "This API provides endpoints for generating the plural form of a word or phrase, the inverse form of a relationship, and checking whether the generation resolvers are available.", "methods": ["GET"], "paths": ["/generatePlural", "/generateInverse", "/isGenerationAvailable"]}}
{"file": "cloned/engine/libs/@local/hash-isomorphic-utils/src/graphql/type-defs/embed.typedef.ts", "endpoints": {"api_summary": "This API provides a single endpoint for generating embeddable HTML code for a given URL, along with the provider name. The endpoint accepts a URL and an optional provider name as input, and returns an object with the embeddable HTML code, provider name, height, and width.", "methods": ["GET"], "paths": ["/embedCode"]}}
{"file": "cloned/engine/libs/@local/hash-isomorphic-utils/src/graphql/type-defs/ontology/property-type.typedef.ts", "endpoints": {"api_summary": "This API provides endpoints for managing property types, including creating, updating, and archiving property types. It also provides a query endpoint for retrieving a subgraph of property types based on a filter.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/queryPropertyTypes", "/getPropertyType", "/createPropertyType", "/updatePropertyType", "/archivePropertyType", "/unarchivePropertyType"]}}
{"file": "cloned/engine/libs/@local/hash-isomorphic-utils/src/graphql/type-defs/ontology/data-type.typedef.ts", "endpoints": {"api_summary": "This API provides endpoints for querying and managing data types, including creating, updating, archiving, and unarchiving data types, as well as checking user permissions on data types.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/queryDataTypes", "/getDataType", "/getDataTypeConversionTargets", "/checkUserPermissionsOnDataType", "/createDataType", "/updateDataType", "/archiveDataType", "/unarchiveDataType"]}}
{"file": "cloned/engine/libs/@local/hash-isomorphic-utils/src/graphql/type-defs/knowledge/user.typedef.ts", "endpoints": {"api_summary": "This API provides endpoints for managing user accounts, accessing usage records, and determining access to the instance of HASH.", "methods": ["GET", "POST"], "paths": ["/me", "/isShortnameTaken", "/hasAccessToHash", "/getUsageRecords", "/getWaitlistPosition"]}}
{"file": "cloned/engine/libs/@local/hash-isomorphic-utils/src/graphql/type-defs/knowledge/block.typedef.ts", "endpoints": {"api_summary": "The API allows for the retrieval of blocks by their entity id. The blocks are represented as a list of Block objects, each containing information about the block's linked child entity, component id, metadata, and properties.", "methods": ["GET"], "paths": ["/blocks"]}}
{"file": "cloned/engine/libs/@local/hash-isomorphic-utils/src/graphql/type-defs/knowledge/page.typedef.ts", "endpoints": {"api_summary": "This API defines endpoints for creating, updating, and setting the parent of a page. It also provides a way to retrieve comments for a page.", "methods": ["GET", "POST", "PUT"], "paths": ["/pageComments", "/createPage", "/updatePage", "/setParentPage"]}}
{"file": "cloned/engine/libs/@local/hash-isomorphic-utils/src/graphql/type-defs/knowledge/entity.typedef.ts", "endpoints": {"api_summary": "This API defines the schema for a block protocol, which is a set of rules and constraints for creating and managing a block-based data model. It includes endpoints for creating, updating, and querying entities, as well as endpoints for managing permissions and relationships between entities.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/queryEntities", "/countEntities", "/getEntitySubgraph", "/getEntity", "/isEntityPublic", "/getEntityAuthorizationRelationships", "/checkUserPermissionsOnEntity", "/getEntityDiffs", "/validateEntity", "/createEntity", "/updateEntity", "/updateEntities", "/archiveEntity", "/archiveEntities", "/addEntityOwner", "/removeEntityOwner", "/addEntityEditor", "/removeEntityEditor", "/addEntityViewer", "/removeEntityViewer", "/addAccountGroupMember", "/removeAccountGroupMember"]}}
{"file": "cloned/engine/libs/@local/hash-isomorphic-utils/src/graphql/type-defs/knowledge/comment.typedef.ts", "endpoints": {"api_summary": "This API defines endpoints for creating, resolving, deleting, and editing comments on a block or comment. It also provides information about the comment, such as its text contents, author, and parent entity.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/comments", "/comments/<comment_id>", "/comments/<comment_id>/resolve", "/comments/<comment_id>/delete", "/comments/<comment_id>/edit"]}}
{"file": "cloned/engine/libs/@local/hash-isomorphic-utils/src/graphql/type-defs/integration/linear.typedef.ts", "endpoints": {"api_summary": "This API defines endpoints for managing Linear teams and organizations, as well as syncing Linear integration with HASH workspaces (users or orgs).", "methods": ["GET", "POST"], "paths": ["/linear-organization", "/sync-linear-integration-with-workspaces"]}}
{"file": "cloned/engine/apps/hash-frontend/src/graphql/queries/comment.queries.ts", "endpoints": {"api_summary": "This API provides functionality for creating, resolving, deleting, and updating comments on a parent entity. It also includes a fragment for retrieving comment fields.", "methods": ["POST", "PUT", "DELETE"], "paths": ["/createComment", "/resolveComment", "/deleteComment", "/updateCommentText"]}}
{"file": "cloned/engine/apps/hash-frontend/src/graphql/queries/user.queries.ts", "endpoints": {"api_summary": "This API provides endpoints for checking if a shortname is taken, getting the user's waitlist position, and submitting an early access form. It also provides a query for getting the user's information and a mutation for submitting the early access form.", "methods": ["GET", "POST"], "paths": ["/isShortnameTaken", "/hasAccessToHash", "/getWaitlistPosition", "/me", "/submitEarlyAccessForm"]}}
{"file": "cloned/engine/apps/hash-frontend/src/graphql/queries/page.queries.ts", "endpoints": {"api_summary": "This API provides endpoints for creating, updating, and retrieving pages and their comments. It also allows for setting the parent page of a page and retrieving the comments of a page.", "methods": ["GET", "POST", "PUT"], "paths": ["/pages", "/pages/<page_id>", "/pages/<page_id>/comments"]}}
{"file": "cloned/engine/apps/hash-frontend/src/components/hooks/use-update-authenticated-user.ts", "endpoints": {"api_summary": "This file defines a React hook for updating the authenticated user's information. It uses the Apollo Client library to perform a GraphQL mutation to update the user's information in the database.", "methods": ["POST"], "paths": ["/users/<built-in function id>"]}}
{"file": "cloned/engine/apps/hash-frontend/src/components/grid/utils/custom-grid-icons.ts", "endpoints": {"api_summary": "This file defines a set of custom icons for the Glide Data Grid.", "methods": ["GET"], "paths": ["/icons"]}}
{"file": "cloned/engine/apps/hash-frontend/src/middleware/return-types-as-json.ts", "endpoints": {"api_summary": "This API provides a way to retrieve the schema of a specific data type, entity type, or property type from the ontology.", "methods": ["GET"], "paths": ["/types/(entity-type|data-type|property-type)/[slug]/v/[version]"]}}
{"file": "cloned/engine/apps/hash-ai-worker-ts/src/activities/flow-activities/answer-question-action.ts", "endpoints": {"api_summary": "This file defines a REST API for answering questions based on provided data. The API accepts a question and optional context data, and returns an answer, explanation, and confidence score. The API also supports running Python code to analyze the data.", "methods": ["GET", "POST"], "paths": ["/answer-question"]}}
{"file": "cloned/engine/apps/hash-ai-worker-ts/src/activities/flow-activities/get-web-page-summary-action.ts", "endpoints": {"api_summary": "This API provides a web page summarization service. The user provides the URL, title, and HTML content of a web page, and the API generates a summary of the contents of the web page.", "methods": ["GET"], "paths": ["/web-page-summary"]}}
{"file": "cloned/engine/apps/hash-ai-worker-ts/src/activities/flow-activities/research-entities-action/link-follower-agent/choose-relevant-links-from-content.ts", "endpoints": {"api_summary": "This API is designed to extract relevant links from a piece of content, given a specific goal or task. It uses a combination of natural language processing and link extraction techniques to identify and return a list of links that are relevant to the specified goal.", "methods": ["GET"], "paths": ["/links"]}}
{"file": "cloned/engine/apps/hash-ai-worker-ts/src/activities/flow-activities/research-entities-action/link-follower-agent/filter-and-rank-text-chunks-agent.ts", "endpoints": {"api_summary": "This API is responsible for filtering and ranking text chunks based on a user's description and example text. It uses a machine learning model to determine the relevance of each text chunk and returns the ordered list of relevant chunks.", "methods": ["POST"], "paths": ["/filter-and-rank-text-chunks"]}}
{"file": "cloned/engine/apps/hash-ai-worker-ts/src/activities/flow-activities/research-entities-action/coordinating-agent/create-initial-plan.ts", "endpoints": {"api_summary": "This API is responsible for creating an initial plan for a coordinating agent, which is a tool that helps a user complete a task by providing a plan of how to use other tools to progress towards completing the task.", "methods": ["GET", "POST"], "paths": ["/create-initial-plan"]}}
{"file": "cloned/engine/apps/hash-ai-worker-ts/src/activities/flow-activities/research-entities-action/shared/deduplicate-entities.ts", "endpoints": {"api_summary": "This API is a deduplication agent that identifies duplicate entities in a list of entities and returns a list of duplicate entities and their canonical entity to merge them with.", "methods": ["GET", "POST"], "paths": ["/deduplicateEntities"]}}
{"file": "cloned/engine/apps/hash-ai-worker-ts/src/activities/shared/get-llm-response/anthropic-client.ts", "endpoints": {"api_summary": "This API is a tool for creating and managing messages using the Anthropic AI platform. It allows users to create messages with specific models and tools, and provides a way to interact with the Anthropic API through the Amazon Bedrock platform.", "methods": ["GET", "POST"], "paths": ["/messages", "/messages/<message_id>", "/messages/<message_id>/tools"]}}
{"file": "cloned/engine/apps/hash-ai-worker-ts/src/activities/shared/optimize-system-prompt/improve-system-prompt.ts", "endpoints": {"api_summary": "This API is used to propose an improved system prompt based on the previous system prompt and metric results.", "methods": ["GET", "POST"], "paths": ["/propose-system-prompt"]}}
{"file": "cloned/engine/apps/hash-ai-worker-ts/src/activities/shared/judge-ai-output-optimize/judge-test-data.ts", "endpoints": {"api_summary": "This file defines a tool called 'provideDocumentMetadata' that provides metadata about a document. The tool takes a document metadata object as input and outputs a modified document metadata object with corrected values.", "methods": ["POST"], "paths": ["/tools/provideDocumentMetadata"]}}
{"file": "cloned/engine/apps/hash-ai-worker-ts/src/shared/queries.ts", "endpoints": {"api_summary": "This API provides a query for checking if a request for external input mid-Flow has been fulfilled.", "methods": ["GET"], "paths": ["/getExternalInputResponse"]}}
{"file": "cloned/engine/apps/plugin-browser/src/graphql/queries/entity.queries.ts", "endpoints": {"api_summary": "This API provides endpoints for creating, updating, and retrieving entities in a graph database. It also provides a subgraph query endpoint for retrieving a subset of the graph.", "methods": ["POST", "PUT", "GET"], "paths": ["/createEntity", "/updateEntity", "/getEntitySubgraph"]}}
{"file": "cloned/engine/apps/mcp/linear/src/main.ts", "endpoints": {"api_summary": "This API provides a set of tools for interacting with the Linear issue tracking system. It includes endpoints for listing issues, getting a specific issue, adding a comment to an issue, and creating a new issue.", "methods": ["GET", "POST"], "paths": ["/list_issues", "/get_issue", "/add_comment_to_issue", "/create_issue"]}}
{"file": "cloned/engine/apps/mcp/notion/src/main.ts", "endpoints": {"api_summary": "This API provides a set of tools for interacting with Notion pages, including searching for pages by title and retrieving page content as markdown.", "methods": ["GET", "POST"], "paths": ["/tools/search_page_by_title", "/tools/get_page_content"]}}
{"file": "cloned/engine/apps/hash-api/src/block-protocol-external-service-method-proxy.ts", "endpoints": {"api_summary": "This API sets up a proxy to the blockprotocol.org proxy for the internal API, attaching the HASH BLOCK_PROTOCOL_API key. It allows for the use of the external service method proxy for the internal API.", "methods": ["GET", "POST"], "paths": ["/api/external-service-method"]}}
{"file": "cloned/engine/apps/hash-api/src/graph/ensure-system-graph-is-initialized/migrate-ontology-types/migrations/005-create-hash-system-entities-and-web-bots.migration.ts", "endpoints": {"api_summary": "This API defines endpoints for creating and retrieving entities in a HASH system, including web-scoped machine actors for existing users and orgs.", "methods": ["GET", "POST"], "paths": ["/users", "/users/<built-in function id>", "/organizations", "/organizations/<built-in function id>"]}}
{"file": "cloned/engine/apps/hash-api/src/graph/knowledge/system-types/user-secret.ts", "endpoints": {"api_summary": "This API is used to create and manage user secrets in Vault, and link them to external integration entities.", "methods": ["POST"], "paths": ["/user-secret"]}}
{"file": "cloned/engine/apps/hash-api/src/graph/knowledge/system-types/linear-user-secret.ts", "endpoints": {"api_summary": "This API provides a way to retrieve a Linear user secret value by the HASH workspace it is associated with.", "methods": ["GET"], "paths": ["/api/linear-secret-value/<hashWorkspaceEntityId>"]}}
{"file": "cloned/engine/apps/hash-api/src/graph/knowledge/primitive/entity/after-create-entity-hooks.ts", "endpoints": {"api_summary": "This API defines hooks for creating entities in the system, including comments, text, and users. It also includes a hook for creating or updating a user in Mailchimp.", "methods": ["POST"], "paths": ["/comments", "/text", "/users"]}}
{"file": "cloned/engine/apps/hash-api/src/auth/ory-kratos.ts", "endpoints": {"api_summary": "The Kratos API provides endpoints for managing user identities and interacting with the Kratos Identity and Access Management (IAM) system.", "methods": ["GET", "POST", "DELETE"], "paths": ["/users", "/users/<built-in function id>", "/identities", "/identities/<built-in function id>"]}}
{"file": "cloned/engine/apps/hash-api/src/auth/create-auth-handlers.ts", "endpoints": {"api_summary": "This API handles user authentication and registration using ORY Kratos and Hydra.", "methods": ["POST"], "paths": ["/kratos-after-registration"]}}
{"file": "cloned/engine/apps/hash-api/src/auth/oauth-consent-handlers.ts", "endpoints": {"api_summary": "This API handles OAuth2 consent requests and submissions for the ORY Hydra login and consent flow. It provides endpoints for handling consent challenges, accepting or rejecting consent requests, and rendering consent pages.", "methods": ["GET", "POST"], "paths": ["/oauth2/consent/request", "/oauth2/consent/submission"]}}
{"file": "cloned/engine/apps/hash-api/src/integrations/google/get-access-token.ts", "endpoints": {"api_summary": "This API endpoint provides a way to retrieve an access token for use in the client where unavoidable, such as to use the Google File Picker. The access token lasts for 1 hour.", "methods": ["GET"], "paths": ["/get-google-access-token"]}}
{"file": "cloned/engine/apps/hash-api/src/integrations/linear/webhook.ts", "endpoints": {"api_summary": "This API is a Linear webhook endpoint that processes incoming webhooks from the Linear API and starts Temporal workflows to sync data with Hash.", "methods": ["POST"], "paths": ["/linear-webhook"]}}
{"file": "cloned/engine/apps/hash-api/src/integrations/linear/oauth.ts", "endpoints": {"api_summary": "This API is a Linear integration API that allows users to authenticate with Linear and create a new Linear integration entity in the system.", "methods": ["GET", "POST"], "paths": ["/oauth/linear/callback", "/settings/integrations/linear/new"]}}
{"file": "cloned/engine/apps/hash-api/src/graphql/create-apollo-server.ts", "endpoints": {"api_summary": "This API is a GraphQL API that provides a schema for querying and mutating data in the Hash system. It includes resolvers for various GraphQL types and operations, as well as data sources for accessing the underlying data storage and search functionality.", "methods": ["GET", "POST"], "paths": ["/graphql"]}}
{"file": "cloned/engine/apps/hash-api/src/graphql/resolvers/ontology/data-type.ts", "endpoints": {"api_summary": "This API defines endpoints for managing data types, including creating, updating, archiving, and unarchiving data types, as well as checking user permissions on data types.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/data-types", "/data-types/<data-type-id>", "/data-types/<data-type-id>/conversion-targets", "/data-types/<data-type-id>/permissions"]}}
{"file": "cloned/engine/apps/hash-api/src/graphql/resolvers/ontology/property-type.ts", "endpoints": {"api_summary": "This API defines endpoints for creating, querying, updating, and archiving property types in a graph database.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/property-types", "/property-types/<property-type-id>", "/property-types/<property-type-id>/archive"]}}
{"file": "cloned/engine/apps/hash-api/src/graphql/resolvers/ontology/entity-type.ts", "endpoints": {"api_summary": "This API defines the endpoints for creating, querying, updating, and archiving entity types in a graph database.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/entity-types", "/entity-types/<entity_type_id>", "/entity-types/closed-multi"]}}
{"file": "cloned/engine/apps/hash-api/src/graphql/resolvers/integrations/linear/sync-workspaces-with-teams.ts", "endpoints": {"api_summary": "This API is used to sync a Linear integration with workspaces. It allows you to add or remove workspaces from the integration and trigger a sync with the Linear API.", "methods": ["POST"], "paths": ["/linear-integration/sync-with-workspaces"]}}
{"file": "cloned/engine/apps/hash-api/src/graphql/resolvers/knowledge/user/submit-early-access-form.ts", "endpoints": {"api_summary": "This API endpoint allows users to submit an early access form, which creates a new entity in the graph and sends a notification to the Slack channel specified in the environment variables.", "methods": ["POST"], "paths": ["/early-access-form"]}}
{"file": "cloned/engine/apps/hash-api/src/graphql/resolvers/knowledge/comment/delete.ts", "endpoints": {"api_summary": "The API allows for the deletion of comments and the retrieval of comments by ID. The API also provides a mapping function to convert comments to a GraphQL format.", "methods": ["GET", "DELETE"], "paths": ["/comments/<entityId>", "/comments/<entityId>/delete"]}}
{"file": "cloned/engine/apps/hash-api/src/graphql/resolvers/knowledge/block-collection/update-block-collection-contents.ts", "endpoints": {"api_summary": "This API allows for the creation, update, and deletion of blocks in a block collection. It also allows for the swapping of block data and the creation of new entities.", "methods": ["POST"], "paths": ["/block-collection/<blockCollectionEntityId>/update"]}}
{"file": "cloned/engine/apps/hash-api/src/graphql/resolvers/knowledge/page/page.ts", "endpoints": {"api_summary": "This API provides endpoints for creating and retrieving pages and their comments. The endpoints allow for creating a new page with a title, previous fractional index, and type, as well as retrieving all comments for a given page entity ID.", "methods": ["POST", "GET"], "paths": ["/createPage", "/pageComments"]}}
{"file": "cloned/engine/apps/hash-api/src/graphql/resolvers/knowledge/page/set-parent-page.ts", "endpoints": {"api_summary": "This API defines a resolver function for setting the parent page of a page in a graph database. It takes in a page entity ID, a parent page entity ID, and optional previous fractional index and next index parameters. It returns the updated page in GraphQL format.", "methods": ["POST"], "paths": ["/setParentPage"]}}
{"file": "cloned/engine/apps/hash-api/src/graphql/resolvers/flows/get-flow-run-by-id.ts", "endpoints": {"api_summary": "This API endpoint retrieves a flow run by its ID. It takes a single argument, the flow run ID, and returns a JSON object containing information about the flow run, including its ID, name, and status.", "methods": ["GET"], "paths": ["/flow-runs/<flow-run-id>"]}}
{"file": "cloned/engine/apps/hash-api/src/storage/local-file-storage.ts", "endpoints": {"api_summary": "This API provides endpoints for uploading and downloading files to a local file system. It also provides a way to generate presigned URLs for uploading and downloading files.", "methods": ["GET", "PUT"], "paths": ["/local-file-storage-upload", "/uploads"]}}
{"file": "cloned/engine/apps/hash-api/src/ai/gpt/gpt-get-user-webs.ts", "endpoints": {"api_summary": "The API allows users to retrieve their personalized webs, which are a collection of web pages that are tailored to their interests and preferences.", "methods": ["GET"], "paths": ["/users/<built-in function id>/webs"]}}
{"file": "cloned/engine/apps/hash-api/src/ai/gpt/gpt-query-types.ts", "endpoints": {"api_summary": "This API endpoint allows users to query for entity types based on a natural language text query and/or web UUIDs. It returns a list of entity types that match the query and/or belong to the specified webs.", "methods": ["POST"], "paths": ["/gpt-query-types"]}}
{"file": "cloned/engine/apps/hash-api/src/ai/gpt/generate-hashgpt-schema.ts", "endpoints": {"api_summary": "This API allows users to retrieve information about their knowledge graph entities, including their personal web and any organizations they are a member of. It also allows users to query entities and entity types in their graph.", "methods": ["GET", "POST"], "paths": ["/gpt/user-webs", "/gpt/entities/query", "/gpt/entities/query-types"]}}
{"file": "cloned/engine/apps/hash-api/src/ai/gpt/upsert-gpt-oauth-client.ts", "endpoints": {"api_summary": "This API allows admins to update the redirect_uri parameter of the ChatGPT OAuth client. If the client does not exist, it will be created.", "methods": ["POST"], "paths": ["/upsertGptOauthClient"]}}
{"file": "cloned/weaviate/adapters/repos/db/inverted_reindexer_map_to_blockmax.go", "endpoints": {"api_summary": "This code defines a REST API for a shard reindex task in Weaviate, which is a vector search engine. The API includes endpoints for starting, pausing, and resuming the reindex task, as well as endpoints for checking the status of the task and getting information about the task.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/shards/<shard_name>/reindex", "/shards/<shard_name>/reindex/start", "/shards/<shard_name>/reindex/pause", "/shards/<shard_name>/reindex/resume", "/shards/<shard_name>/reindex/status", "/shards/<shard_name>/reindex/info"]}}
{"file": "cloned/weaviate/adapters/repos/db/lsmkv/bucket.go", "endpoints": {"api_summary": "This code defines a REST API for a simple bucket-based key-value store.", "methods": ["GET", "PUT", "DELETE"], "paths": ["/buckets/<bucket_id>/keys/<key>", "/buckets/<bucket_id>/keys"]}}
{"file": "cloned/weaviate/adapters/clients/cluster_backups.go", "endpoints": {"api_summary": "The ClusterBackups API provides endpoints for managing backups of a Weaviate cluster. It allows for checking if a backup can be committed, committing a backup, getting the status of a backup, and aborting a backup.", "methods": ["POST"], "paths": ["/backups/can-commit", "/backups/commit", "/backups/status", "/backups/abort"]}}
{"file": "cloned/weaviate/adapters/handlers/graphql/schema.go", "endpoints": {"api_summary": "The GraphQL API provides a query language for Weaviate, allowing users to retrieve and manipulate data in a flexible and efficient manner.", "methods": ["GET", "POST"], "paths": ["/graphql"]}}
{"file": "cloned/weaviate/adapters/handlers/graphql/graphiql/graphiql.go", "endpoints": {"api_summary": "This API provides a GraphiQL interface for querying a GraphQL API.", "methods": ["GET"], "paths": ["/v1/graphql"]}}
{"file": "cloned/weaviate/adapters/handlers/graphql/local/explore/concepts.go", "endpoints": {"api_summary": "The Explore API allows users to search for objects in the Weaviate database based on their vector positions and other search parameters.", "methods": ["GET"], "paths": ["/explore"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/handlers_misc.go", "endpoints": {"api_summary": "This API provides information about the Weaviate instance and its configuration, as well as links to other relevant endpoints.", "methods": ["GET"], "paths": ["/v1/meta", "/v1/schema", "/v1/schema/:className", "/v1/objects", "/v1/objects/:id", "/v1/classifications", "/v1/classifications/:id", "/v1/.well-known/live", "/v1/.well-known/ready", "/v1/.well-known/openid-configuration"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/handlers_authn.go", "endpoints": {"api_summary": "The Weaviate API provides endpoints for managing users and their roles, as well as retrieving information about the current user.", "methods": ["GET"], "paths": ["/users", "/users/<built-in function id>"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/handlers_nodes.go", "endpoints": {"api_summary": "This API provides information about the status of nodes in a Weaviate cluster.", "methods": ["GET"], "paths": ["/nodes", "/nodes/<class_name>", "/cluster/statistics"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/clusterapi/transactions.go", "endpoints": {"api_summary": "This API is responsible for managing transactions in a cluster. It allows for the creation, commit, and abort of transactions, as well as the retrieval of transaction status.", "methods": ["POST", "PUT", "DELETE"], "paths": ["/transactions", "/transactions/<transaction_id>/commit", "/transactions/<transaction_id>"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/clusterapi/nodes.go", "endpoints": {"api_summary": "The Weaviate Cluster API provides information about the status of the Weaviate cluster and its nodes, as well as statistics about the data stored in the cluster.", "methods": ["GET"], "paths": ["/status", "/status/<className>", "/statistics"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/clusterapi/backups.go", "endpoints": {"api_summary": "The Weaviate Cluster API provides endpoints for managing backups and restores of a Weaviate cluster. It allows for creating, committing, and aborting backups, as well as checking the status of backups.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/backups/can-commit", "/backups/commit", "/backups/abort", "/backups/status"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/clusterapi/serve.go", "endpoints": {"api_summary": "The cluster API server provides endpoints for cross-node communication in Weaviate's distributed database system. It handles requests for classifications, nodes, indices, replicated indices, backups, and database users.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/classifications/transactions/", "/cluster/users/db/", "/nodes/", "/indices/", "/replicas/indices/", "/backups/can-commit", "/backups/commit", "/backups/abort", "/backups/status"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/tenantactivity/handler_test.go", "endpoints": {"api_summary": "This API provides information about the usage of a tenant's resources in a Weaviate system.", "methods": ["GET"], "paths": ["/"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/replication/handlers_setup.go", "endpoints": {"api_summary": "This API is responsible for managing replication of data across multiple Weaviate instances. It allows for replication, cancellation, deletion, and listing of replications, as well as querying the sharding state of a collection.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/replication", "/replication/<replication_id>", "/replication/cancel", "/replication/delete", "/replication/delete_all", "/replication/force_delete", "/replication/sharding_state"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/raft/handler.go", "endpoints": {"api_summary": "The ClusterRouter API allows you to manage the Raft cluster, including joining and removing nodes, and migrating from Raft to non-Raft storage.", "methods": ["POST", "GET"], "paths": ["/v1/cluster/join", "/v1/cluster/remove", "/v1/cluster/schema-v1"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/weaviate_wellknown_readiness.go", "endpoints": {"api_summary": "This API provides a readiness probe for the Weaviate application. It determines whether the application is ready to receive traffic and can be used for Kubernetes readiness probe.", "methods": ["GET"], "paths": ["/.well-known/ready"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/weaviate_wellknown_readiness_urlbuilder.go", "endpoints": {"api_summary": "The Weaviate API is a RESTful API that allows users to interact with the Weaviate system. It provides endpoints for managing resources such as things, actions, and users, as well as endpoints for querying and retrieving data from the system.", "methods": ["GET"], "paths": ["/v1/.well-known/ready"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/weaviate_wellknown_liveness.go", "endpoints": {"api_summary": "This API provides a liveness probe for the Weaviate application. It determines whether the application is alive and can be used for kubernetes liveness probe.", "methods": ["GET"], "paths": ["/.well-known/live"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/weaviate_root.go", "endpoints": {"api_summary": "This API provides a list of available endpoints to help discover the REST API.", "methods": ["GET"], "paths": ["/weaviateRoot"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/distributed_tasks/distributed_tasks_get.go", "endpoints": {"api_summary": "The Distributed Tasks API allows you to manage and monitor distributed tasks in a Weaviate cluster.", "methods": ["GET"], "paths": ["/tasks"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/distributed_tasks/distributed_tasks_get_urlbuilder.go", "endpoints": {"api_summary": "The Distributed Tasks API allows you to manage and monitor tasks that are distributed across multiple nodes in a Weaviate cluster.", "methods": ["GET"], "paths": ["/v1/tasks"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/well_known/get_well_known_openid_configuration_urlbuilder.go", "endpoints": {"api_summary": "This API provides information about the OpenID Connect configuration of the Weaviate service.", "methods": ["GET"], "paths": ["/.well-known/openid-configuration"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/schema/tenant_exists.go", "endpoints": {"api_summary": "This API allows you to check if a tenant exists for a specific class.", "methods": ["HEAD"], "paths": ["/schema/{className}/tenants/{tenantName}"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/schema/schema_objects_update.go", "endpoints": {"api_summary": "This API allows users to update the settings of an existing schema class in Weaviate.", "methods": ["PUT"], "paths": ["/schema/{className}"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/schema/schema_objects_shards_update_responses.go", "endpoints": {"api_summary": "Update the status of a shard in a Weaviate database. The endpoint accepts a `http.Request` object as input and returns a `http.Response` object as output. The endpoint uses the `models.ShardStatus` struct to represent the status of the shard.", "methods": ["GET", "POST"], "paths": ["/schema/objects/shards/update"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/schema/schema_objects_properties_add_responses.go", "endpoints": {"api_summary": "This API adds a property to an object in the Weaviate schema.", "methods": ["POST"], "paths": ["/schema/objects/<object_name>/properties"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/schema/tenants_update.go", "endpoints": {"api_summary": "This API allows for the management of tenants in a Weaviate instance. It includes endpoints for creating, updating, and deleting tenants, as well as retrieving information about existing tenants.", "methods": ["PUT"], "paths": ["/schema/{className}/tenants"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/schema/schema_objects_update_responses.go", "endpoints": {"api_summary": "The SchemaObjectsUpdate endpoint updates a schema object. It accepts a POST request with a JSON payload containing the schema object to be updated, and returns a JSON response with the updated schema object.", "methods": ["POST"], "paths": ["/schemaObjects/update"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/schema/tenants_update_responses.go", "endpoints": {"api_summary": "This API allows users to update the tenants of a specified class.", "methods": ["PUT"], "paths": ["/tenants"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/schema/tenants_get_one_responses.go", "endpoints": {"api_summary": "This API allows users to retrieve information about a specific tenant.", "methods": ["GET"], "paths": ["/tenants/{tenantId}"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/schema/tenants_create_responses.go", "endpoints": {"api_summary": "This API allows users to create new tenants in the system.", "methods": ["POST"], "paths": ["/tenants"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/schema/schema_objects_shards_update.go", "endpoints": {"api_summary": "This API allows for the management of shards in a Weaviate instance. It includes endpoints for creating, updating, and deleting shards, as well as endpoints for retrieving information about shards.", "methods": ["PUT"], "paths": ["/schema/{className}/shards/{shardName}"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/schema/tenants_delete.go", "endpoints": {"api_summary": "This API allows users to delete tenants from a specific class in the Weaviate schema.", "methods": ["DELETE"], "paths": ["/schema/{className}/tenants"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/schema/schema_objects_shards_update_urlbuilder.go", "endpoints": {"api_summary": "This API allows for the management of shards in a Weaviate instance. It includes endpoints for creating, updating, and deleting shards, as well as endpoints for retrieving information about shards.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/schema/{className}/shards/{shardName}"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/schema/schema_objects_get.go", "endpoints": {"api_summary": "This API defines a single endpoint for retrieving a single class from the schema.", "methods": ["GET"], "paths": ["/schema/{className}"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/schema/schema_objects_shards_update_parameters.go", "endpoints": {"api_summary": "This API allows you to update the shards of a class in the Weaviate schema.", "methods": ["PUT"], "paths": ["/schema/objects/{className}/shards/{shardName}"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/schema/schema_objects_properties_add.go", "endpoints": {"api_summary": "This API allows users to add properties to an Object class in the schema.", "methods": ["POST"], "paths": ["/schema/{className}/properties"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/schema/schema_objects_create.go", "endpoints": {"api_summary": "This API defines a single endpoint for creating a new object class in the schema. The endpoint accepts a JSON object with the class definition and returns a JSON object with the created class.", "methods": ["POST"], "paths": ["/schema/objects/create"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/schema/tenants_get_one.go", "endpoints": {"api_summary": "This API allows users to retrieve information about specific tenants for a given class.", "methods": ["GET"], "paths": ["/schema/{className}/tenants/{tenantName}"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/schema/tenant_exists_responses.go", "endpoints": {"api_summary": "This API is used to check if a tenant exists in the system.", "methods": ["GET"], "paths": ["/tenants/<tenant_id>"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/schema/schema_dump_urlbuilder.go", "endpoints": {"api_summary": "The SchemaDump API provides a way to dump the current schema of a Weaviate instance.", "methods": ["GET"], "paths": ["/v1/schema"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/schema/schema_objects_create_responses.go", "endpoints": {"api_summary": "This API defines a new Object class in the schema.", "methods": ["POST"], "paths": ["/schema/objects"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/schema/schema_objects_shards_get.go", "endpoints": {"api_summary": "This API provides information about the shards of an Object class in the Weaviate database.", "methods": ["GET"], "paths": ["/schema/{className}/shards"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/schema/schema_objects_get_responses.go", "endpoints": {"api_summary": "This file defines a REST API endpoint for retrieving a single Class object from the Weaviate schema.", "methods": ["GET"], "paths": ["/schema/objects/<ClassName>"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/schema/schema_dump_responses.go", "endpoints": {"api_summary": "This API allows users to dump the database schema.", "methods": ["GET"], "paths": ["/schema"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/schema/schema_objects_delete.go", "endpoints": {"api_summary": "This API allows you to delete an object class and all its instances from the schema. It also deletes all the objects in the collection.", "methods": ["DELETE"], "paths": ["/schema/{className}"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/schema/tenants_create.go", "endpoints": {"api_summary": "This API allows you to create a new tenant for a collection. Multi-tenancy must be enabled in the collection definition.", "methods": ["POST"], "paths": ["/schema/{className}/tenants"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/schema/tenants_get.go", "endpoints": {"api_summary": "This API allows users to retrieve the list of tenants for a specific class.", "methods": ["GET"], "paths": ["/schema/{className}/tenants"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/schema/schema_dump.go", "endpoints": {"api_summary": "The Weaviate API allows you to interact with the Weaviate database, which stores and manages data in a graph structure. The API provides endpoints for creating, reading, updating, and deleting data, as well as for querying and searching the data.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/schema", "/schema/dump"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/schema/schema_objects_create_urlbuilder.go", "endpoints": {"api_summary": "This API defines a single endpoint for creating objects in the schema.", "methods": ["POST"], "paths": ["/schema"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/schema/schema_objects_delete_responses.go", "endpoints": {"api_summary": "This API allows users to delete an object class from the schema.", "methods": ["DELETE"], "paths": ["/schema/objects"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/schema/tenants_get_responses.go", "endpoints": {"api_summary": "This API allows users to retrieve information about tenants in a Weaviate system.", "methods": ["GET"], "paths": ["/tenants"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/schema/tenants_delete_responses.go", "endpoints": {"api_summary": "This API allows users to delete tenants from a specified class.", "methods": ["DELETE"], "paths": ["/tenants"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/graphql/graphql_batch_responses.go", "endpoints": {"api_summary": "This API allows users to perform batch queries on the Weaviate graph database.", "methods": ["POST"], "paths": ["/graphql/batch"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/graphql/graphql_post.go", "endpoints": {"api_summary": "This API allows users to make GraphQL queries and retrieve data from the Weaviate database.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/graphql/graphql_batch.go", "endpoints": {"api_summary": "The GraphQL API allows you to perform batched queries and mutations using the GraphQL query language. It is a powerful and flexible way to interact with the Weaviate API.", "methods": ["POST"], "paths": ["/graphql/batch"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/graphql/graphql_post_responses.go", "endpoints": {"api_summary": "This API allows users to perform GraphQL queries and mutations on the Weaviate database.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/nodes/nodes_get.go", "endpoints": {"api_summary": "This API provides information about the nodes in the database.", "methods": ["GET"], "paths": ["/nodes"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/nodes/nodes_get_class.go", "endpoints": {"api_summary": "This API provides information about nodes in a collection.", "methods": ["GET"], "paths": ["/nodes/{className}"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/replication/delete_replication.go", "endpoints": {"api_summary": "This API allows you to manage replication operations in Weaviate. It provides endpoints for creating, deleting, and listing replication operations, as well as for getting information about specific replication operations.", "methods": ["GET", "POST", "DELETE"], "paths": ["/replication/replicate", "/replication/replicate/{id}"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/replication/replication_details.go", "endpoints": {"api_summary": "Retrieve a replication operation. Fetches the current status and detailed information for a specific replication operation, identified by its unique ID. Optionally includes historical data of the operation's progress if requested.", "methods": ["GET"], "paths": ["/replication/replicate/{id}"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/replication/force_delete_replications.go", "endpoints": {"api_summary": "This API allows you to force delete replication operations from the FSM. This can be used to delete operations that are stuck or causing issues, but use with caution as it may lead to data corruption or loss.", "methods": ["POST"], "paths": ["/replication/replicate/force-delete"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/replication/get_collection_sharding_state.go", "endpoints": {"api_summary": "This API provides information about the sharding state of a collection or all collections in the system.", "methods": ["GET"], "paths": ["/replication/sharding-state"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/replication/list_replication_urlbuilder.go", "endpoints": {"api_summary": "The Weaviate replication API allows you to manage replication of data between Weaviate instances. It provides endpoints for listing, creating, and deleting replication objects, as well as for managing the replication process itself.", "methods": ["GET", "POST", "DELETE"], "paths": ["/replication/replicate/list", "/replication/replicate/create", "/replication/replicate/delete", "/replication/replicate/start", "/replication/replicate/stop"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/replication/delete_all_replications.go", "endpoints": {"api_summary": "The Weaviate replication API allows you to manage replication across multiple Weaviate instances. It provides endpoints for scheduling replication, checking replication status, and deleting replication operations.", "methods": ["DELETE"], "paths": ["/replication/replicate"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/replication/list_replication.go", "endpoints": {"api_summary": "The Weaviate replication API allows you to manage replication operations for Weaviate instances. It provides endpoints for listing, creating, and deleting replication operations, as well as for retrieving information about specific replication operations.", "methods": ["GET", "POST", "DELETE"], "paths": ["/replication/replicate/list", "/replication/replicate/create", "/replication/replicate/delete", "/replication/replicate/<replication_id>"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/replication/replicate.go", "endpoints": {"api_summary": "The replication API allows you to initiate a replica movement, which involves copying data, synchronizing, and potentially decommissioning the source replica.", "methods": ["POST"], "paths": ["/replication/replicate"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/replication/force_delete_replications_urlbuilder.go", "endpoints": {"api_summary": "This API allows you to force delete replications in Weaviate.", "methods": ["DELETE"], "paths": ["/replication/replicate/force-delete"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/replication/cancel_replication.go", "endpoints": {"api_summary": "This API allows for the cancellation of an active replication operation identified by its ID. The operation will be stopped, but its record will remain in the 'CANCELLED' state (can't be resumed) and will not be automatically deleted.", "methods": ["POST"], "paths": ["/replication/replicate/{id}/cancel"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/classifications/classifications_post_responses.go", "endpoints": {"api_summary": "This API allows users to create and manage classifications for Weaviate.", "methods": ["POST"], "paths": ["/classifications"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/classifications/classifications_get.go", "endpoints": {"api_summary": "The Weaviate API allows you to create, retrieve, update, and delete classifications in a Weaviate instance.", "methods": ["GET"], "paths": ["/classifications/{id}"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/classifications/classifications_get_responses.go", "endpoints": {"api_summary": "This API provides information about the classification of a given object.", "methods": ["GET"], "paths": ["/classifications/<object_id>"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/classifications/classifications_post_urlbuilder.go", "endpoints": {"api_summary": "The Weaviate API provides a RESTful interface for interacting with the Weaviate knowledge graph. It allows users to create, retrieve, update, and delete data objects, as well as perform various other operations such as classification and search.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/v1/classifications/"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/classifications/classifications_post.go", "endpoints": {"api_summary": "The Weaviate API allows you to perform various operations on a knowledge graph, including creating, retrieving, and updating entities and their properties, as well as performing classification and other operations on the graph.", "methods": ["POST"], "paths": ["/classifications"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/meta/meta_get.go", "endpoints": {"api_summary": "Returns meta information of the current Weaviate instance. Returns meta information about the server. Can be used to provide information to another Weaviate instance that wants to interact with the current instance.", "methods": ["GET"], "paths": ["/meta"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/backups/backups_cancel_urlbuilder.go", "endpoints": {"api_summary": "The Weaviate API provides a RESTful interface for interacting with the Weaviate system. It allows users to create, retrieve, update, and delete objects, as well as perform various other actions such as backup and restore.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/backups/{backend}/{id}", "/v1/backups/{backend}/{id}"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/backups/backups_create.go", "endpoints": {"api_summary": "The Weaviate API allows you to create, retrieve, update, and delete data objects, as well as manage backups and perform other administrative tasks.", "methods": ["POST"], "paths": ["/backups/{backend}"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/backups/backups_cancel_responses.go", "endpoints": {"api_summary": "This API allows users to cancel a backup job.", "methods": ["DELETE"], "paths": ["/backups/cancel"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/backups/backups_restore.go", "endpoints": {"api_summary": "This API allows for the restoration of a backup for a set of collections. The backup can be restored to any machine, as long as the number of nodes between the source and target are identical. Requirements: None of the collections to be restored already exist on the target restoration node(s). The node names of the backed-up collections' must match those of the target restoration node(s).", "methods": ["POST"], "paths": ["/backups/{backend}/{id}/restore"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/backups/backups_list.go", "endpoints": {"api_summary": "The Weaviate API provides a RESTful interface for interacting with the Weaviate system. It allows users to create, retrieve, update, and delete data objects, as well as perform various other actions such as backup and restore.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/backups/{backend}", "/backups/list"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/backups/backups_restore_status.go", "endpoints": {"api_summary": "This API provides information about the status of a backup restoration process for a set of classes.", "methods": ["GET"], "paths": ["/backups/{backend}/{id}/restore"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/backups/backups_restore_status_responses.go", "endpoints": {"api_summary": "This API provides information about the status of a backup restore process.", "methods": ["GET"], "paths": ["/backups/restore/status"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/backups/backups_create_status.go", "endpoints": {"api_summary": "The Weaviate API provides a set of endpoints for managing backups of the database. These endpoints allow you to create, retrieve, and delete backups, as well as get the status of backup creation attempts.", "methods": ["GET"], "paths": ["/backups/{backend}/{id}"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/backups/backups_cancel.go", "endpoints": {"api_summary": "The Weaviate API provides a set of endpoints for managing backups, including creating, canceling, and restoring backups. The API also provides endpoints for retrieving information about backups and the backup status.", "methods": ["GET", "POST", "DELETE"], "paths": ["/backups", "/backups/{backend}/{id}"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/backups/backups_create_status_urlbuilder.go", "endpoints": {"api_summary": "The Weaviate API provides a RESTful interface for interacting with the Weaviate system. It allows users to create, retrieve, update, and delete objects, as well as perform various other actions such as creating backups and managing permissions.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/backups/{backend}/{id}", "/v1/backups/{backend}/{id}"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/backups/backups_list_responses.go", "endpoints": {"api_summary": "This API allows users to list, create, and manage backups of their Weaviate instance.", "methods": ["GET", "POST"], "paths": ["/backups", "/backups/<backup_id>"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/backups/backups_create_responses.go", "endpoints": {"api_summary": "This API allows users to create, retrieve, and delete backups of their Weaviate instance.", "methods": ["POST", "GET", "DELETE"], "paths": ["/backups", "/backups/<backup_id>"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/objects/objects_references_delete.go", "endpoints": {"api_summary": "This API allows for the management of objects and their references in a Weaviate instance.", "methods": ["DELETE"], "paths": ["/objects/{id}/references/{propertyName}"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/objects/objects_class_head_urlbuilder.go", "endpoints": {"api_summary": "The Weaviate API provides a RESTful interface for interacting with the Weaviate knowledge graph. It allows users to create, read, update, and delete objects, as well as perform queries and aggregations on the data stored in the graph.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/objects/{className}/{id}", "/objects/{className}/{id}/{propertyName}", "/objects/{className}/{id}/{propertyName}/{propertyValue}"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/objects/objects_class_patch.go", "endpoints": {"api_summary": "This API allows for the creation, retrieval, and modification of objects in a Weaviate instance. It supports json-merge style patch semantics (RFC 7396) and provides meta-data and schema validation.", "methods": ["PATCH"], "paths": ["/objects/{className}/{id}"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/objects/objects_class_put_parameters.go", "endpoints": {"api_summary": "This API allows users to create, update, and delete objects in the Weaviate database.", "methods": ["POST", "PUT", "DELETE"], "paths": ["/objects/<className>/<id>"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/objects/objects_class_get.go", "endpoints": {"api_summary": "This API provides a way to retrieve a specific object based on its class and UUID. It also supports Websocket bus.", "methods": ["GET"], "paths": ["/objects/{className}/{id}"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/objects/objects_references_delete_responses.go", "endpoints": {"api_summary": "This API allows users to delete references between objects in the Weaviate system.", "methods": ["DELETE"], "paths": ["/objects/<id>/references/<id>"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/objects/objects_class_delete_urlbuilder.go", "endpoints": {"api_summary": "The ObjectsClassDeleteURL defines a URL for deleting an object of a specific class in the Weaviate database.", "methods": ["DELETE"], "paths": ["/objects/{className}/{id}"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/objects/objects_references_update.go", "endpoints": {"api_summary": "This API allows for the management of objects and their references in a Weaviate instance. It provides endpoints for creating, updating, and deleting objects, as well as for managing references between objects.", "methods": ["PUT"], "paths": ["/objects/{id}/references/{propertyName}"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/objects/objects_class_head.go", "endpoints": {"api_summary": "This API defines a single endpoint for checking the existence of a data object based on its class and uuid.", "methods": ["HEAD"], "paths": ["/objects/{className}/{id}"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/objects/objects_get_urlbuilder.go", "endpoints": {"api_summary": "The ObjectsGetURL struct is used to generate an URL for the objects get operation. It includes the ID of the object and an optional include parameter.", "methods": ["GET"], "paths": ["/objects/{id}"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/objects/objects_class_references_put.go", "endpoints": {"api_summary": "This API defines a single endpoint for replacing all references in a cross-reference property of an object.", "methods": ["PUT"], "paths": ["/objects/{className}/{id}/references/{propertyName}"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/objects/objects_references_update_responses.go", "endpoints": {"api_summary": "This API allows users to update references to other objects in the Weaviate database.", "methods": ["PUT"], "paths": ["/objects/{id}/references/{propertyName}"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/objects/objects_references_create_responses.go", "endpoints": {"api_summary": "This API allows you to create, retrieve, update, and delete references between objects in Weaviate.", "methods": ["POST", "GET", "PUT", "DELETE"], "paths": ["/objects/<object_id>/references/<property_name>", "/objects/<object_id>/references/<property_name>/<reference_id>"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/objects/objects_references_create.go", "endpoints": {"api_summary": "This API allows you to create a reference to a class-property. It adds a cross-reference between two objects.", "methods": ["POST"], "paths": ["/objects/{id}/references/{propertyName}"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/objects/objects_class_references_delete_urlbuilder.go", "endpoints": {"api_summary": "This API allows for the deletion of references between objects in the Weaviate database.", "methods": ["DELETE"], "paths": ["/objects/{className}/{id}/references/{propertyName}"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/objects/objects_class_references_delete.go", "endpoints": {"api_summary": "This API allows you to delete a single reference from a list of references that a property has.", "methods": ["DELETE"], "paths": ["/objects/{className}/{id}/references/{propertyName}"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/objects/objects_references_create_parameters.go", "endpoints": {"api_summary": "This API allows you to create a reference to an object in a multi-tenant class.", "methods": ["POST"], "paths": ["/objects/{id}/references/{propertyName}"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/objects/objects_patch.go", "endpoints": {"api_summary": "This API allows for the creation, retrieval, and modification of objects in a Weaviate instance. It supports json-merge style patch semantics (RFC 7396) and provides meta-data and schema validation.", "methods": ["PATCH"], "paths": ["/objects/{id}"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/objects/objects_class_get_urlbuilder.go", "endpoints": {"api_summary": "The ObjectsClassGetURL defines a URL for the objects class get operation, which retrieves a single object by its class and ID.", "methods": ["GET"], "paths": ["/objects/{className}/{id}"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/objects/objects_class_put.go", "endpoints": {"api_summary": "This API allows for the creation, retrieval, and modification of objects in a Weaviate instance. It supports the standard HTTP methods (GET, POST, PUT, DELETE) and uses a RESTful architecture.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/objects/{className}/{id}"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/objects/objects_validate_urlbuilder.go", "endpoints": {"api_summary": "The ObjectsValidateURL API endpoint validates the structure of an object.", "methods": ["GET"], "paths": ["/objects/validate"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/objects/objects_list.go", "endpoints": {"api_summary": "The Weaviate API allows you to create, retrieve, update, and delete objects in a Weaviate instance. It also allows you to search for objects based on their properties and relationships.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/objects", "/objects/<object_id>", "/objects/<object_id>/properties", "/objects/<object_id>/properties/<property_name>", "/objects/<object_id>/references", "/objects/<object_id>/references/<reference_name>"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/objects/objects_class_delete_responses.go", "endpoints": {"api_summary": "This API allows users to delete objects from the Weaviate database.", "methods": ["DELETE"], "paths": ["/objects/<className>/<objectId>"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/objects/objects_class_references_create_urlbuilder.go", "endpoints": {"api_summary": "This API allows for the creation of references between objects in the Weaviate database.", "methods": ["POST"], "paths": ["/objects/{className}/{id}/references/{propertyName}"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/objects/objects_patch_urlbuilder.go", "endpoints": {"api_summary": "The Weaviate API provides a RESTful interface for interacting with the Weaviate knowledge graph. It allows users to create, read, update, and delete objects, as well as perform complex queries and aggregations on the data stored in the graph.", "methods": ["GET", "POST", "PUT", "PATCH", "DELETE"], "paths": ["/objects/{id}", "/objects"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/objects/objects_get.go", "endpoints": {"api_summary": "The Weaviate API allows you to create, retrieve, update, and delete objects in a Weaviate instance. It also provides endpoints for managing the schema and for querying the data in the instance.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/objects/{id}", "/objects", "/schema", "/query"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/objects/objects_class_put_responses.go", "endpoints": {"api_summary": "This API allows users to create, retrieve, update, and delete objects in a Weaviate instance.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/objects", "/objects/<object_id>", "/objects/<object_id>/properties"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/objects/objects_delete_responses.go", "endpoints": {"api_summary": "This API allows users to delete objects from the Weaviate database.", "methods": ["DELETE"], "paths": ["/objects/<object_id>"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/objects/objects_class_delete.go", "endpoints": {"api_summary": "This API allows you to delete objects based on their class and UUID. It also supports deleting references to other objects.", "methods": ["DELETE"], "paths": ["/objects/{className}/{id}"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/objects/objects_delete_urlbuilder.go", "endpoints": {"api_summary": "The ObjectsDeleteURL defines a URL for deleting an object in the Weaviate API.", "methods": ["DELETE"], "paths": ["/objects/{id}"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/objects/objects_validate_responses.go", "endpoints": {"api_summary": "This API validates objects in the Weaviate database.", "methods": ["GET", "POST"], "paths": ["/objects/validate"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/objects/objects_head.go", "endpoints": {"api_summary": "The Weaviate API allows you to create, retrieve, update, and delete objects in a Weaviate instance. It also allows you to perform CRUD operations on other resources such as actions, things, and contexts.", "methods": ["HEAD"], "paths": ["/objects/{id}"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/objects/objects_class_head_responses.go", "endpoints": {"api_summary": "This API allows users to check if an object exists in the system.", "methods": ["HEAD"], "paths": ["/objects/<object_id>"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/objects/objects_create.go", "endpoints": {"api_summary": "This API defines a single endpoint for creating a new object. The endpoint validates the meta-data and schema values of the object and returns a response with the created object.", "methods": ["POST"], "paths": ["/objects"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/objects/objects_validate.go", "endpoints": {"api_summary": "This API validates an object based on a schema. It takes an object as input and returns an error object if the schema is invalid. Otherwise, it returns nothing.", "methods": ["POST"], "paths": ["/objects/validate"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/objects/objects_update_responses.go", "endpoints": {"api_summary": "This API allows users to update objects in the Weaviate database.", "methods": ["PUT"], "paths": ["/objects/<object_id>"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/objects/objects_class_patch_parameters.go", "endpoints": {"api_summary": "This API allows users to create, retrieve, update, and delete objects in the Weaviate database.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/objects/<className>/<id>"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/objects/objects_list_urlbuilder.go", "endpoints": {"api_summary": "The ObjectsListURL struct is used to generate URLs for the objects list operation. It includes parameters such as after, class, include, limit, offset, order, sort, and tenant.", "methods": ["GET"], "paths": ["/objects"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/objects/objects_references_update_urlbuilder.go", "endpoints": {"api_summary": "The Weaviate API allows you to create, retrieve, update, and delete objects in a Weaviate instance. It also allows you to manage references between objects.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/objects", "/objects/<id>", "/objects/<id>/references/<propertyName>"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/objects/objects_class_references_put_urlbuilder.go", "endpoints": {"api_summary": "This API allows for the management of objects and their references in a Weaviate instance.", "methods": ["PUT"], "paths": ["/objects/{className}/{id}/references/{propertyName}"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/objects/objects_references_delete_parameters.go", "endpoints": {"api_summary": "This API allows you to delete a reference to an object in a property of another object.", "methods": ["DELETE"], "paths": ["/objects/{id}/references/{propertyName}"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/objects/objects_references_create_urlbuilder.go", "endpoints": {"api_summary": "The Weaviate API allows you to create, retrieve, update, and delete objects in a Weaviate instance. It also allows you to create, retrieve, update, and delete references between objects.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/objects", "/objects/<id>", "/objects/<id>/references/<propertyName>"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/objects/objects_class_references_create.go", "endpoints": {"api_summary": "This API allows you to create a reference to an object in a class-property. It adds a reference to the array of cross-references of the given property in the source object specified by its collection name and id.", "methods": ["POST"], "paths": ["/objects/{className}/{id}/references/{propertyName}"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/objects/objects_class_patch_urlbuilder.go", "endpoints": {"api_summary": "The Weaviate API provides a RESTful interface for interacting with the Weaviate knowledge graph. It allows users to create, read, update, and delete objects, as well as perform queries and aggregations on the data stored in the graph.", "methods": ["GET", "POST", "PUT", "PATCH", "DELETE"], "paths": ["/objects/{className}/{id}", "/objects/{className}", "/objects"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/objects/objects_references_update_parameters.go", "endpoints": {"api_summary": "This API allows for the management of object references in Weaviate.", "methods": ["POST"], "paths": ["/objects/{id}/references/{propertyName}"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/objects/objects_update_urlbuilder.go", "endpoints": {"api_summary": "The Weaviate API allows you to create, retrieve, update, and delete objects in a Weaviate instance. It also allows you to perform CRUD operations on other resources such as actions, things, and contexts.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/objects", "/objects/<built-in function id>"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/objects/objects_references_delete_urlbuilder.go", "endpoints": {"api_summary": "The Weaviate API allows you to create, retrieve, update, and delete objects in a Weaviate instance. It also allows you to manage references between objects.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/objects", "/objects/<id>", "/objects/<id>/references/<propertyName>"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/batch/batch_objects_delete.go", "endpoints": {"api_summary": "This API allows for batch deletion of objects based on a match filter. The request body takes a single `where` filter and will delete all objects matched. The limit to the number of objects to be deleted at once is 10,000, and may be configured by setting the `QUERY_MAXIMUM_RESULTS` environment variable.", "methods": ["DELETE"], "paths": ["/batch/objects"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/batch/batch_objects_create.go", "endpoints": {"api_summary": "This API allows users to create new objects in bulk.", "methods": ["POST"], "paths": ["/batch/objects"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/batch/batch_references_create.go", "endpoints": {"api_summary": "The Weaviate Batch API allows you to create, update, and delete multiple objects and references in a single request.", "methods": ["POST"], "paths": ["/batch"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/batch/batch_objects_delete_urlbuilder.go", "endpoints": {"api_summary": "The BatchObjectsDeleteURL API allows users to delete objects in batches. It takes in a consistency level and tenant as query parameters and returns a URL for the batch delete operation.", "methods": ["DELETE"], "paths": ["/batch/objects"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/authz/delete_role.go", "endpoints": {"api_summary": "The API defines a single endpoint for deleting a role in the Weaviate authorization system.", "methods": ["DELETE"], "paths": ["/authz/roles/{id}"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/authz/get_users_for_role.go", "endpoints": {"api_summary": "This API provides information about the users assigned to a particular role.", "methods": ["GET"], "paths": ["/authz/roles/{id}/user-assignments"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/authz/has_permission.go", "endpoints": {"api_summary": "The authz API provides endpoints for checking whether a role possesses a specific permission. It takes a role ID and a permission as input, and returns a boolean indicating whether the role has the permission.", "methods": ["POST"], "paths": ["/authz/roles/{id}/has-permission"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/authz/get_roles_for_user_deprecated_urlbuilder.go", "endpoints": {"api_summary": "This API provides endpoints for managing user roles in an authorization system.", "methods": ["GET"], "paths": ["/authz/users/{id}/roles"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/authz/get_roles_for_user.go", "endpoints": {"api_summary": "This API provides endpoints for managing roles for users in the Weaviate system.", "methods": ["GET"], "paths": ["/authz/users/{id}/roles/{userType}"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/authz/revoke_role_from_group.go", "endpoints": {"api_summary": "This API allows you to revoke roles from a group.", "methods": ["POST"], "paths": ["/authz/groups/{id}/revoke"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/authz/create_role.go", "endpoints": {"api_summary": "The API defines a single endpoint for creating a new role in the system. The endpoint accepts a JSON payload with the role details and returns a JSON response with the created role.", "methods": ["POST"], "paths": ["/authz/roles"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/authz/get_role.go", "endpoints": {"api_summary": "The API defines a single endpoint for retrieving a role by ID. The endpoint is protected by authentication and authorization, and the response includes the role's name and permissions.", "methods": ["GET"], "paths": ["/authz/roles/{id}"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/authz/get_roles_urlbuilder.go", "endpoints": {"api_summary": "The authz API provides endpoints for managing roles and permissions in a Weaviate instance.", "methods": ["GET"], "paths": ["/authz/roles"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/authz/revoke_role_from_user_responses.go", "endpoints": {"api_summary": "This API revokes a role from a user.", "methods": ["POST"], "paths": ["/authz/revoke-role-from-user"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/authz/delete_role_responses.go", "endpoints": {"api_summary": "This API defines the endpoints for managing roles in the Weaviate system.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/roles", "/roles/<role_id>"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/authz/add_permissions.go", "endpoints": {"api_summary": "Add permission to a given role.", "methods": ["POST"], "paths": ["/authz/roles/{id}/add-permissions"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/authz/assign_role_to_user.go", "endpoints": {"api_summary": "This API assigns a role to a user.", "methods": ["POST"], "paths": ["/authz/users/{id}/assign"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/authz/assign_role_to_group_responses.go", "endpoints": {"api_summary": "This API assigns a role to a group.", "methods": ["POST"], "paths": ["/authz/assignRoleToGroup"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/authz/revoke_role_from_user.go", "endpoints": {"api_summary": "This API allows you to revoke roles from users.", "methods": ["POST"], "paths": ["/authz/users/{id}/revoke"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/authz/get_roles.go", "endpoints": {"api_summary": "This API provides a way to manage roles and permissions in a Weaviate system.", "methods": ["GET"], "paths": ["/authz/roles"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/authz/get_roles_for_user_urlbuilder.go", "endpoints": {"api_summary": "The API provides a way to retrieve the roles for a given user and user type.", "methods": ["GET"], "paths": ["/authz/users/{id}/roles/{userType}"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/authz/revoke_role_from_group_responses.go", "endpoints": {"api_summary": "This API revokes a role from a group.", "methods": ["POST"], "paths": ["/authz/groups/<group_id>/roles/<role_id>"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/authz/get_users_for_role_deprecated.go", "endpoints": {"api_summary": "This API provides endpoints for managing users and roles in a Weaviate system.", "methods": ["GET"], "paths": ["/authz/roles/{id}/users"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/authz/assign_role_to_user_responses.go", "endpoints": {"api_summary": "This API assigns a role to a user.", "methods": ["POST"], "paths": ["/authz/assignRoleToUser"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/authz/get_users_for_role_deprecated_urlbuilder.go", "endpoints": {"api_summary": "This API provides a way to retrieve users for a given role. It is a deprecated endpoint and should not be used in new applications.", "methods": ["GET"], "paths": ["/authz/roles/{id}/users"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/authz/assign_role_to_group.go", "endpoints": {"api_summary": "This API allows you to assign roles to groups in the Weaviate system.", "methods": ["POST"], "paths": ["/authz/groups/{id}/assign"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/authz/create_role_urlbuilder.go", "endpoints": {"api_summary": "The authz API provides endpoints for managing roles and permissions in a Weaviate instance.", "methods": ["GET", "POST"], "paths": ["/authz/roles"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/authz/remove_permissions.go", "endpoints": {"api_summary": "This API allows you to remove permissions from a role. If this results in an empty role, the role will be deleted.", "methods": ["POST"], "paths": ["/authz/roles/{id}/remove-permissions"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/authz/get_roles_responses.go", "endpoints": {"api_summary": "This API provides a list of roles for the Weaviate system.", "methods": ["GET"], "paths": ["/roles"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/users/delete_user.go", "endpoints": {"api_summary": "The API allows for the deletion of a user from the system.", "methods": ["DELETE"], "paths": ["/users/db/{user_id}"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/users/get_user_info_responses.go", "endpoints": {"api_summary": "This API provides information about the user.", "methods": ["GET"], "paths": ["/users/<built-in function id>"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/users/deactivate_user.go", "endpoints": {"api_summary": "This API allows users to deactivate their accounts.", "methods": ["POST"], "paths": ["/users/db/{user_id}/deactivate"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/users/get_own_info.go", "endpoints": {"api_summary": "The Weaviate API provides information about the current user, including their username and roles.", "methods": ["GET"], "paths": ["/users/own-info"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/users/activate_user_responses.go", "endpoints": {"api_summary": "This API allows users to activate their accounts.", "methods": ["POST"], "paths": ["/users/activate"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/users/delete_user_urlbuilder.go", "endpoints": {"api_summary": "The Weaviate API provides a RESTful interface for interacting with the Weaviate database. It allows users to create, read, update, and delete objects in the database, as well as perform various other operations such as searching and filtering.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users/db/{user_id}"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/users/get_user_info.go", "endpoints": {"api_summary": "This API provides information about users in the system, including their username and roles.", "methods": ["GET"], "paths": ["/users/db/{user_id}"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/users/get_user_info_urlbuilder.go", "endpoints": {"api_summary": "The Weaviate API provides access to the Weaviate database, allowing users to create, read, update, and delete objects and their properties.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users/db/{user_id}", "/v1"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/users/get_own_info_responses.go", "endpoints": {"api_summary": "This API provides information about the current user.", "methods": ["GET"], "paths": ["/users/me"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/users/create_user.go", "endpoints": {"api_summary": "This API allows users to create a new user in the system.", "methods": ["POST"], "paths": ["/users/db/{user_id}"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/users/activate_user.go", "endpoints": {"api_summary": "The Weaviate API allows you to interact with the Weaviate system, including managing users, creating and managing objects, and performing queries.", "methods": ["POST"], "paths": ["/users/db/{user_id}/activate"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/users/get_own_info_urlbuilder.go", "endpoints": {"api_summary": "The Weaviate API provides access to the Weaviate knowledge graph, allowing users to create, read, update, and delete objects and their properties, as well as perform queries and aggregations on the data.", "methods": ["GET"], "paths": ["/v1/users/own-info"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/users/deactivate_user_urlbuilder.go", "endpoints": {"api_summary": "The Weaviate API allows you to interact with the Weaviate database and perform various operations such as creating, updating, and querying data.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users/db/{user_id}/deactivate"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/users/rotate_user_api_key.go", "endpoints": {"api_summary": "This API allows users to rotate their API keys.", "methods": ["POST"], "paths": ["/users/db/{user_id}/rotate-key"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/users/list_all_users_responses.go", "endpoints": {"api_summary": "This API provides a list of all users in the system.", "methods": ["GET"], "paths": ["/users"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/users/list_all_users.go", "endpoints": {"api_summary": "This API allows users to list all users in the database.", "methods": ["GET"], "paths": ["/users/db"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/users/create_user_urlbuilder.go", "endpoints": {"api_summary": "The Weaviate API allows you to create, retrieve, update, and delete users in a Weaviate database.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users/db/{user_id}"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/users/activate_user_urlbuilder.go", "endpoints": {"api_summary": "The Weaviate API allows you to interact with the Weaviate database and perform various operations such as creating, updating, and querying data.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users/db/{user_id}/activate"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/cluster/cluster_get_statistics.go", "endpoints": {"api_summary": "This API provides information about the Raft cluster statistics of Weaviate DB.", "methods": ["GET"], "paths": ["/cluster/statistics"]}}
{"file": "cloned/weaviate/adapters/handlers/rest/operations/cluster/cluster_get_statistics_urlbuilder.go", "endpoints": {"api_summary": "The ClusterGetStatisticsURL endpoint retrieves statistics about the cluster.", "methods": ["GET"], "paths": ["/v1/cluster/statistics"]}}
{"file": "cloned/weaviate/usecases/objects/get.go", "endpoints": {"api_summary": "This API defines endpoints for retrieving objects from a database.", "methods": ["GET"], "paths": ["/objects", "/objects/{id}", "/objects/{class}", "/objects/{class}/{id}"]}}
{"file": "cloned/weaviate/usecases/modulecomponents/clients/nvidia/nvidia.go", "endpoints": {"api_summary": "The Nvidia module provides a way to use Nvidia's text-to-image generation models to generate images from text. It supports various input types and models, and can be configured to use different Nvidia API endpoints.", "methods": ["POST"], "paths": ["/v1/embeddings"]}}
{"file": "cloned/weaviate/grpc/generated/protocol/v0/weaviate_grpc.pb.go", "endpoints": {"api_summary": "The Weaviate service provides search and batch object management functionality.", "methods": ["GET", "POST"], "paths": ["/weaviategrpc.Weaviate/Search", "/weaviategrpc.Weaviate/BatchObjects"]}}
{"file": "cloned/weaviate/client/schema/schema_objects_update_parameters.go", "endpoints": {"api_summary": "This API updates a schema object.", "methods": ["PUT"], "paths": ["/schema/objects/<className>"]}}
{"file": "cloned/weaviate/client/schema/schema_objects_shards_get_parameters.go", "endpoints": {"api_summary": "This API endpoint retrieves information about the shards of a class in the Weaviate schema.", "methods": ["GET"], "paths": ["/schema/objects/<className>/shards"]}}
{"file": "cloned/weaviate/client/graphql/graphql_client.go", "endpoints": {"api_summary": "This API allows users to perform GraphQL queries and batch queries.", "methods": ["POST"], "paths": ["/graphql", "/graphql/batch"]}}
{"file": "cloned/weaviate/client/nodes/nodes_client.go", "endpoints": {"api_summary": "This API provides information about the nodes in the database.", "methods": ["GET"], "paths": ["/nodes", "/nodes/{className}"]}}
{"file": "cloned/weaviate/client/classifications/classifications_client.go", "endpoints": {"api_summary": "The classifications API allows users to start and view the status of classifications, which are used to classify data in Weaviate.", "methods": ["GET", "POST"], "paths": ["/classifications/", "/classifications/{id}"]}}
{"file": "cloned/weaviate/client/batch/batch_client.go", "endpoints": {"api_summary": "This API allows you to create, delete, and batch create or delete objects and references in bulk.", "methods": ["POST", "DELETE"], "paths": ["/batch/objects", "/batch/references"]}}
{"file": "cloned/weaviate/cmd/weaviate-server/main.go", "endpoints": {"api_summary": "Weaviate is an open source, AI-native vector database that helps developers create intuitive and reliable AI-powered applications.", "methods": ["GET", "POST"], "paths": ["/v1/schema"]}}
{"file": "cloned/weaviate/test/acceptance/schema/update_class_test.go", "endpoints": {"api_summary": "This API defines a schema for a class with a description and a property with a description. The API also allows updating the description of the class and the property.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/schema/objects/<className>", "/schema/objects/<className>/properties/<propertyName>"]}}
{"file": "cloned/weaviate/test/acceptance/grpc/grpc_named_vectors_test.go", "endpoints": {"api_summary": "This API is a test suite for the Weaviate gRPC API. It includes tests for various endpoints and methods, such as batch import, search, and metadata retrieval.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/v1/batch", "/v1/search", "/v1/meta"]}}
{"file": "cloned/weaviate/test/acceptance/grpc/tenants_test.go", "endpoints": {"api_summary": "This API allows for the management of tenants in a Weaviate instance. It includes endpoints for creating, retrieving, updating, and deleting tenants, as well as endpoints for listing all tenants and getting specific tenants by their names.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/tenants", "/tenants/<tenant_name>"]}}
{"file": "cloned/weaviate/test/acceptance/grpc/grpc_test_deprecated.go", "endpoints": {"api_summary": "This API is a test suite for the Weaviate gRPC API. It includes tests for the Health Check, Batch Import, and Search endpoints.", "methods": ["GET", "POST"], "paths": ["/grpc/health", "/grpc/batch", "/grpc/search"]}}
{"file": "cloned/weaviate/test/acceptance/replication/replica_replication/fast/force_delete_ops_test.go", "endpoints": {"api_summary": "This API is a test suite for the replication feature of Weaviate. It includes tests for starting, listing, and force deleting replication operations.", "methods": ["GET", "POST", "DELETE"], "paths": ["/replication/operations", "/replication/operations/<operation_id>", "/replication/force-delete"]}}
{"file": "cloned/weaviate/test/acceptance/multi_tenancy/patch_tenant_objects_test.go", "endpoints": {"api_summary": "This API is a test suite for the Weaviate client library. It includes tests for creating, updating, and deleting objects in a multi-tenant environment.", "methods": ["GET", "POST", "PATCH", "DELETE"], "paths": ["/objects", "/objects/<object_id>", "/objects/<object_id>/<property_name>"]}}
{"file": "cloned/weaviate/test/acceptance/multi_tenancy/class_creation_test.go", "endpoints": {"api_summary": "This API is a test suite for the Weaviate client library. It includes tests for creating, retrieving, and deleting classes and objects, as well as tests for multi-tenancy and auto-tenant creation.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/classes", "/classes/<class_name>", "/objects", "/objects/<object_id>"]}}
{"file": "cloned/weaviate/test/acceptance/maintenance_mode/maintenance_mode_test.go", "endpoints": {"api_summary": "This file defines a test suite for a Weaviate API, specifically for testing the maintenance mode feature. It includes tests for creating and retrieving objects with different consistency levels, and verifies that the 3rd node can still respond to schema/metadata changes/queries but not to object changes/queries.", "methods": ["GET", "POST"], "paths": ["/objects", "/objects/<id>", "/objects/<id>/properties"]}}
{"file": "cloned/weaviate/test/acceptance/graphql_resolvers/unindexed_property_test.go", "endpoints": {"api_summary": "This API defines a class with two string properties, one of which is indexed and searchable, while the other is not. It also includes a test for searching the indexed property and a test for searching the non-indexed property, which should fail.", "methods": ["GET"], "paths": ["/NoIndexTestClass"]}}
{"file": "cloned/weaviate/test/acceptance/graphql_resolvers/local_get_test.go", "endpoints": {"api_summary": "This API defines a set of endpoints for retrieving and manipulating data related to cities and countries.", "methods": ["GET"], "paths": ["/cities", "/cities/<city_id>", "/countries", "/countries/<country_id>"]}}
{"file": "cloned/weaviate/test/acceptance/authz/grpc_aggregate_test.go", "endpoints": {"api_summary": "This API defines a set of endpoints for managing and querying a Weaviate instance, including creating and deleting classes, objects, and properties, as well as performing CRUD operations on those entities.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/v1/schema", "/v1/schema/<class_name>", "/v1/objects", "/v1/objects/<object_id>", "/v1/objects/<object_id>/properties/<property_name>"]}}
{"file": "cloned/weaviate/test/acceptance/authz/grpc_search_test.go", "endpoints": {"api_summary": "This file defines a set of gRPC endpoints for performing search operations on a Weaviate instance. The endpoints are used to search for objects in a specific class and tenant, and to retrieve the results of a search query.", "methods": ["GET", "POST"], "paths": ["/v1/search", "/v1/search/<tenant>/<class>"]}}
{"file": "cloned/weaviate/test/acceptance/authz/permissions_test.go", "endpoints": {"api_summary": "This API defines a set of roles with permissions for creating, reading, and managing roles in a Weaviate system.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/roles", "/roles/<role_name>", "/roles/<role_name>/permissions"]}}
{"file": "cloned/weaviate/test/acceptance/authz/nodes_test.go", "endpoints": {"api_summary": "This API defines the authorization and authentication endpoints for the Weaviate platform.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/authz/nodes", "/authz/nodes/<built-in function id>", "/authz/cluster", "/authz/cluster/<built-in function id>"]}}
{"file": "cloned/weaviate/test/acceptance/authz/autoschema_test.go", "endpoints": {"api_summary": "This API defines a set of endpoints for managing authorization and authentication in a Weaviate system.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/authz", "/authz/roles", "/authz/roles/<role_name>", "/authz/users", "/authz/users/<user_id>", "/authz/users/<user_id>/roles"]}}
{"file": "cloned/weaviate/test/acceptance_with_go_client/vector_dimensions_test.go", "endpoints": {"api_summary": "This API defines a set of endpoints for testing the vector dimensions of a class in Weaviate.", "methods": ["GET", "POST"], "paths": ["/api/v1/acceptance-with-go-client/vector-dimensions"]}}
{"file": "cloned/weaviate/test/acceptance_with_go_client/generative_test.go", "endpoints": {"api_summary": "This API defines a generative search API that allows users to perform generative searches on a Weaviate instance.", "methods": ["GET"], "paths": ["/generative-search"]}}
{"file": "cloned/weaviate/test/acceptance_with_go_client/grpc_tests/batch_grpc_test.go", "endpoints": {"api_summary": "This API defines a batch import of objects with properties and vectors, and allows for retrieving objects by ID with their vectors.", "methods": ["POST"], "paths": ["/batch"]}}
{"file": "cloned/weaviate/test/acceptance_with_go_client/filters_tests/regex_test.go", "endpoints": {"api_summary": "This API defines a filter for a text property in a class, which can be used to search for objects based on a specific value in the text property.", "methods": ["GET"], "paths": ["/Regex"]}}
{"file": "cloned/weaviate/test/modules/generative-nvidia/generative_nvidia_test.go", "endpoints": {"api_summary": "This API is used to test the generative Nvidia model in Weaviate. It allows users to create a tweet using the model and retrieve the generated text.", "methods": ["POST"], "paths": ["/v1/generative/nvidia/tweet"]}}
{"file": "cloned/weaviate/cluster/raft_snapshot_test.go", "endpoints": {"api_summary": "This API defines a schema for a cluster of nodes, allowing for the addition and deletion of classes and tenants, as well as the deletion of a class.", "methods": ["GET", "POST", "DELETE"], "paths": ["/classes", "/classes/<class_name>", "/tenants", "/tenants/<tenant_name>"]}}
{"file": "cloned/weaviate/cluster/rpc/server.go", "endpoints": {"api_summary": "This API is a RPC server for a Weaviate cluster, providing endpoints for peers management and executing/querying commands.", "methods": ["POST", "GET"], "paths": ["/rpc/joinPeer", "/rpc/removePeer", "/rpc/notifyPeer", "/rpc/apply", "/rpc/query"]}}
{"file": "cloned/weaviate/deprecations/data.go", "endpoints": {"api_summary": "This API defines various endpoints for managing and retrieving data from a Weaviate instance. It includes endpoints for CRUD operations on things and actions, as well as endpoints for managing the schema and retrieving meta information.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/v1/thing/{id}", "/v1/things", "/v1/action/{id}", "/v1/actions", "/v1/schema", "/v1/schema/things", "/v1/schema/actions", "/v1/schema/things/{className}/properties", "/v1/schema/actions/{className}/properties"]}}
{"file": "cloned/weaviate/modules/text2vec-contextionary/extensions/rest_storage_test.go", "endpoints": {"api_summary": "This API provides a simple key-value store for storing and retrieving extensions.", "methods": ["GET", "PUT"], "paths": ["/<extension-key>", "/"]}}
{"file": "cloned/weaviate/modules/generative-anthropic/clients/anthropic_test.go", "endpoints": {"api_summary": "This API is used to generate text based on a given prompt and properties. It uses the Anthropic API to generate responses.", "methods": ["POST"], "paths": ["/v1/messages"]}}
{"file": "cloned/weaviate/modules/qna-openai/additional/answer/answer_test.go", "endpoints": {"api_summary": "This API provides a way to retrieve answers to questions based on the content of a text. It uses the OpenAI QnA model to generate answers and can be used to enhance the search functionality of a Weaviate instance.", "methods": ["GET"], "paths": ["/qna-openai/answer"]}}
{"file": "cloned/weaviate/modules/generative-ollama/clients/ollama.go", "endpoints": {"api_summary": "The Ollama module provides a REST API for generating text based on a prompt and a model. It also supports generating images based on a prompt and a model.", "methods": ["POST"], "paths": ["/api/generate"]}}
{"file": "cloned/firezone/website/redirects.js", "endpoints": {"api_summary": "This API provides download links for Firezone clients and gateways for various platforms and architectures.", "methods": ["GET"], "paths": ["/dl/firezone-client-macos/latest", "/dl/firezone-client-macos/pkg/latest", "/dl/firezone-client-android/latest", "/dl/firezone-client-gui-windows/latest/x86_64", "/dl/firezone-client-headless-windows/latest/x86_64", "/dl/firezone-client-gui-linux/latest/x86_64", "/dl/firezone-client-gui-linux/latest/aarch64", "/dl/firezone-client-headless-linux/latest/x86_64", "/dl/firezone-client-headless-linux/latest/aarch64", "/dl/firezone-client-headless-linux/latest/armv7", "/dl/firezone-gateway/latest/x86_64", "/dl/firezone-gateway/latest/aarch64", "/dl/firezone-gateway/latest/armv7"]}}
{"file": "cloned/firezone/website/src/middleware.ts", "endpoints": {"api_summary": "This API provides versioned redirects for downloading Firezone client and gateway software for various platforms and architectures.", "methods": ["GET"], "paths": ["/dl/firezone-client-macos/:version", "/dl/firezone-client-macos/pkg/:version", "/dl/firezone-client-android/:version", "/dl/firezone-client-gui-windows/:version/x86_64", "/dl/firezone-client-headless-windows/:version/x86_64", "/dl/firezone-client-gui-linux/:version/x86_64", "/dl/firezone-client-gui-linux/:version/aarch64", "/dl/firezone-client-headless-linux/:version/x86_64", "/dl/firezone-client-headless-linux/:version/aarch64", "/dl/firezone-client-headless-linux/:version/armv7", "/dl/firezone-gateway/:version/x86_64", "/dl/firezone-gateway/:version/aarch64", "/dl/firezone-gateway/:version/armv7"]}}
{"file": "cloned/firezone/website/src/app/api/releases/route.ts", "endpoints": {"api_summary": "This API provides information about the current versions of the portal, apple, android, gui, headless, and gateway.", "methods": ["GET"], "paths": ["/versions"]}}
{"file": "cloned/geoserver-cloud/src/gwc/services/src/main/java/org/gwc/web/tms/TMSController.java", "endpoints": {"api_summary": "The TMSController defines a REST API for serving tiled map services (TMS) using GeoServer. It supports multiple virtual services and layers, and allows for customization of the TMS parameters through the use of URL parameters.", "methods": ["GET"], "paths": ["/gwc/service/tms", "/{virtualservice}/gwc/service/tms", "/{virtualservice}/{layer}/gwc/service/tms"]}}
{"file": "cloned/geoserver-cloud/src/gwc/services/src/main/java/org/gwc/web/gmaps/GoogleMapsController.java", "endpoints": {"api_summary": "The GoogleMapsController defines a REST API for interacting with Google Maps services. It provides a single endpoint for handling all requests to the /gwc/service/gmaps path, and forwards them to the Geoserver Dispatcher for processing.", "methods": ["GET"], "paths": ["/gwc/service/gmaps", "/{virtualservice}/gwc/service/gmaps", "/{virtualservice}/{layer}/gwc/service/gmaps"]}}
{"file": "cloned/geoserver-cloud/src/gwc/services/src/main/java/org/gwc/web/mgmaps/MGMapsController.java", "endpoints": {"api_summary": "The MGMapsController defines a REST API for interacting with the GeoServer MGMaps service. It provides a single endpoint for handling all requests to the service, and uses the Dispatcher to handle the actual requests.", "methods": ["GET"], "paths": ["/gwc/service/mgmaps", "/{virtualservice}/gwc/service/mgmaps", "/{virtualservice}/{layer}/gwc/service/mgmaps"]}}
{"file": "cloned/geoserver-cloud/src/gwc/services/src/main/java/org/gwc/web/kml/KMLController.java", "endpoints": {"api_summary": "The KMLController defines a REST API for serving KML (Keyhole Markup Language) documents for geospatial data. The API supports GET requests for retrieving KML documents and can be accessed at the following paths: /gwc/service/kml, /{virtualservice}/gwc/service/kml, and /{virtualservice}/{layer}/gwc/service/kml.", "methods": ["GET"], "paths": ["/gwc/service/kml", "/{virtualservice}/gwc/service/kml", "/{virtualservice}/{layer}/gwc/service/kml"]}}
{"file": "cloned/geoserver-cloud/src/gwc/services/src/main/java/org/gwc/web/wmts/WMTSController.java", "endpoints": {"api_summary": "The WMTSController defines a REST API for accessing geospatial data in the form of Web Map Tile Service (WMTS) tiles. The API supports GET requests for tile retrieval and can be accessed at the /gwc/service/wmts, /{virtualservice}/gwc/service/wmts, or /{virtualservice}/{layer}/gwc/service/wmts paths.", "methods": ["GET"], "paths": ["/gwc/service/wmts", "/{virtualservice}/gwc/service/wmts", "/{virtualservice}/{layer}/gwc/service/wmts"]}}
{"file": "cloned/geoserver-cloud/src/gwc/services/src/main/java/org/gwc/web/rest/GeoWebCacheController.java", "endpoints": {"api_summary": "The GeoWebCacheController defines a REST API for handling requests for GeoWebCache, a caching system for geospatial data. The API includes endpoints for handling GET requests for home, demo, and proxy resources.", "methods": ["GET"], "paths": ["/gwc", "/gwc/home", "/gwc/demo/**", "/gwc/proxy/**"]}}
{"file": "cloned/geoserver-cloud/src/gwc/services/src/main/java/org/gwc/web/wms/WMSController.java", "endpoints": {"api_summary": "The WMSController defines a REST API for interacting with the Geoserver WMS service. It provides endpoints for handling WMS requests and responses, and supports multiple virtual services and layers.", "methods": ["GET"], "paths": ["/gwc/service/wms", "/{virtualservice}/gwc/service/wms", "/{virtualservice}/{layer}/gwc/service/wms"]}}
{"file": "cloned/geoserver-cloud/src/gwc/services/src/main/java/org/geoserver/cloud/gwc/config/services/RESTConfigConfiguration.java", "endpoints": {"api_summary": "This API provides a RESTful interface for interacting with GeoServer's GWC (GeoWebCache) service. It allows for seeding, purging, and retrieving information about cached tiles and layers.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/gwc/rest/wmts", "/gwc/rest/wmts/<layer_name>", "/gwc/rest/wmts/<layer_name>/<tile_matrix_set>", "/gwc/rest/wmts/<layer_name>/<tile_matrix_set>/<tile_matrix>", "/gwc/rest/wmts/<layer_name>/<tile_matrix_set>/<tile_matrix>/<tile_row>/<tile_col>"]}}
{"file": "cloned/geoserver-cloud/src/gwc/services/src/main/java/org/geoserver/cloud/gwc/config/services/SeedControllerOverride.java", "endpoints": {"api_summary": "The SeedControllerOverride API allows for seeding or truncating a layer in a GeoServer workspace with a JSON or XML payload. The API supports POST requests to the /rest/seed/{layer} endpoint, where {layer} is the name of the layer to be seeded or truncated. The API also supports GET requests to the /rest/seed/{layer} endpoint, which returns information about the layer.", "methods": ["POST", "GET"], "paths": ["/rest/seed/{layer}", "/rest/seed/{layer}.xml", "/rest/seed/{layer}.json"]}}
{"file": "cloned/geoserver-cloud/src/catalog/events/src/main/java/org/geoserver/cloud/autoconfigure/catalog/event/UpdateSequenceController.java", "endpoints": {"api_summary": "The UpdateSequenceController API provides endpoints for managing the update sequence of a GeoServer instance. It allows administrators to retrieve the current update sequence value, as well as to increment the value and publish an event to notify other components of the update.", "methods": ["GET", "POST"], "paths": ["/admin/updatesequence"]}}
{"file": "cloned/geoserver-cloud/src/catalog/backends/jdbcconfig/src/main/java/org/geoserver/cloud/config/catalog/backend/jdbcconfig/CloudJdbcGeoServerLoader.java", "endpoints": {"api_summary": "This API is a loader for the GeoServer cloud JDBC configuration backend. It loads the configuration as soon as the spring bean wiring is ready and provides methods to initialize the default styles and load the catalog.", "methods": ["GET", "POST"], "paths": ["/api/v1/config/jdbcconfig/load", "/api/v1/config/jdbcconfig/initializeDefaultStyles", "/api/v1/config/jdbcconfig/loadCatalog"]}}
{"file": "cloned/geoserver-cloud/src/catalog/backends/pgconfig/src/main/java/org/geoserver/cloud/config/catalog/backend/pgconfig/PgconfigBackendConfiguration.java", "endpoints": {"api_summary": "The PgconfigBackendConfiguration class is a Spring configuration class that sets up the backend for the GeoServer cloud configuration. It defines a PostgreSQL-based configuration backend for GeoServer, which allows for storing and retrieving configuration data in a PostgreSQL database.", "methods": ["GET", "POST"], "paths": ["/pgconfig/config", "/pgconfig/updateSequence", "/pgconfig/resourceStore"]}}
{"file": "cloned/geoserver-cloud/src/catalog/backends/pgconfig/src/main/java/org/geoserver/cloud/backend/pgconfig/catalog/PgconfigCatalogFacade.java", "endpoints": {"api_summary": "The PgconfigCatalogFacade class provides a facade for the catalog in the pgconfig backend of GeoServer Cloud. It leverages a PostgreSQL database via a JdbcTemplate to persist and retrieve catalog data. The class includes a dedicated, read-only PublishedInfo repository, which optimizes queries for published information without requiring separate queries to layer and layer group repositories.", "methods": ["GET", "POST"], "paths": ["/pgconfig/catalog/publishedInfo"]}}
{"file": "cloned/geoserver-cloud/src/catalog/plugin/src/main/java/org/geoserver/catalog/plugin/RepositoryCatalogFacadeImpl.java", "endpoints": {"api_summary": "This is a repository-backed facade for GeoServer Cloud\u2019s catalog, implementing both ExtendedCatalogFacade and CatalogInfoRepositoryHolder interfaces. It provides a robust and flexible facade that integrates repository-based data access with catalog operations.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/stores", "/stores/{id}", "/resources", "/resources/{id}", "/layers", "/layers/{id}", "/layerGroups", "/layerGroups/{id}", "/styles", "/styles/{id}", "/maps", "/maps/{id}"]}}
{"file": "cloned/geoserver-cloud/src/catalog/plugin/src/main/java/org/geoserver/catalog/plugin/locking/LockingCatalog.java", "endpoints": {"api_summary": "This API provides a locking mechanism for GeoServer catalog operations, ensuring cluster-wide safety for updates.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/catalog/locking", "/catalog/locking/<resource_id>", "/catalog/locking/<resource_id>/<action>"]}}
{"file": "cloned/geoserver-cloud/src/catalog/plugin/src/main/java/org/geoserver/catalog/plugin/locking/LockingGeoServer.java", "endpoints": {"api_summary": "The LockingGeoServer class provides a locking mechanism for GeoServer configuration updates, ensuring cluster-wide safety using a GeoServerConfigurationLock. It overrides mutating methods of GeoServerImpl to run within a cluster-wide lock, preventing concurrent modification issues.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/geoserver/config/locking", "/geoserver/config/locking/<id>", "/geoserver/config/locking/<id>/settings", "/geoserver/config/locking/<id>/logging"]}}
{"file": "cloned/geoserver-cloud/src/catalog/plugin/src/main/java/org/geoserver/config/plugin/ConfigRepository.java", "endpoints": {"api_summary": "This API provides a raw data access to GeoServer global configuration and per-workspace settings and services configuration.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/geoserver/config/global", "/geoserver/config/workspace/<workspace_id>", "/geoserver/config/service/<service_id>"]}}
{"file": "cloned/geoserver-cloud/src/extensions/output-formats/dxf/src/main/java/org/geoserver/cloud/autoconfigure/extensions/dxf/DxfAutoConfiguration.java", "endpoints": {"api_summary": "This code enables the DXF extension in GeoServer Cloud, allowing DXF to be used as a WFS output format and integrated with the WebUI.", "methods": ["GET", "POST"], "paths": ["/users", "/users/<built-in function id>"]}}
{"file": "cloned/geoserver-cloud/src/extensions/ogcapi/core/src/main/java/org/geoserver/cloud/configuration/ogcapi/core/OgcApiCoreConfiguration.java", "endpoints": {"api_summary": "This API provides a mapping for OGC API requests and responses, as well as a classpath publisher for serving static resources.", "methods": ["GET", "POST"], "paths": ["/ogc", "/ogc/**", "/apicss/**", "/swagger-ui/**", "/webresources/ogcapi/**"]}}
{"file": "cloned/geoserver-cloud/src/apps/geoserver/restconfig/src/main/java/org/geoserver/cloud/restconfig/RestConfigApplicationConfiguration.java", "endpoints": {"api_summary": "The GeoServer REST API provides access to geospatial data and services, including data stores, layers, and styles. It also allows for the creation and management of maps and map layers.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/rest/geoserver/dataStores", "/rest/geoserver/layers", "/rest/geoserver/styles", "/rest/geoserver/maps", "/rest/geoserver/mapLayers"]}}
{"file": "cloned/geoserver-cloud/src/apps/geoserver/restconfig/src/main/java/org/geoserver/cloud/restconfig/RootController.java", "endpoints": {"api_summary": "The RootController defines a single endpoint that redirects the root URL to the REST API capabilities endpoint.", "methods": ["GET"], "paths": ["/"]}}
{"file": "cloned/geoserver-cloud/src/apps/geoserver/gwc/src/main/java/org/geoserver/cloud/gwc/app/RootRedirectController.java", "endpoints": {"api_summary": "The RootRedirectController defines a single endpoint that redirects the root URL to the /gwc endpoint, which is likely a GET endpoint that returns a capabilities document for the Geospatial Web Client (GWC) application.", "methods": ["GET"], "paths": ["/"]}}
{"file": "cloned/geoserver-cloud/src/apps/geoserver/gwc/src/main/java/org/geoserver/cloud/gwc/app/GeoWebCacheApplicationConfiguration.java", "endpoints": {"api_summary": "The GeoWebCacheApplicationConfiguration class defines a REST API for interacting with the GeoServer tile layer and legend sample. The API allows for retrieving tile layers and legend samples, and supports content negotiation for different media types.", "methods": ["GET", "POST"], "paths": ["/rest/layers", "/rest/legend"]}}
{"file": "cloned/geoserver-cloud/src/apps/geoserver/gwc/src/test/java/org/geoserver/cloud/gwc/app/GeoWebCacheApplicationTest.java", "endpoints": {"api_summary": "This API provides functionality for managing and querying geospatial data in a cloud-based environment. It includes endpoints for seeding, reseeding, and querying data, as well as endpoints for managing the cache and retrieving information about the cache.", "methods": ["GET", "POST"], "paths": ["/gwc/rest/layers", "/gwc/rest/layers.json", "/gwc/rest/layers.xml", "/gwc/rest/seed/workspace:layer.xml"]}}
{"file": "cloned/geoserver-cloud/src/apps/geoserver/wcs/src/main/java/org/geoserver/cloud/wcs/WCSController.java", "endpoints": {"api_summary": "The WCSController class defines a set of REST API endpoints for interacting with a geospatial server. The endpoints allow for retrieving and manipulating geospatial data, as well as serving WCS schemas and verifying virtual services.", "methods": ["GET", "POST"], "paths": ["/", "/schemas/wcs/**", "/wcs", "/ows", "/{virtualService}/wcs", "/{virtualService}/ows", "/{virtualService}/{layer}/wcs", "/{virtualService}/{layer}/ows"]}}
{"file": "cloned/geoserver-cloud/src/apps/geoserver/wps/src/main/java/org/geoserver/cloud/wps/WPSController.java", "endpoints": {"api_summary": "The WPSController defines a set of REST API endpoints for interacting with the Geoserver cloud WPS service. It provides endpoints for retrieving WPS schemas, handling WPS requests, and serving WPS responses.", "methods": ["GET", "POST"], "paths": ["/", "/wps", "/ows", "/schemas/wps/**", "/{virtualService}/wps", "/{virtualService}/ows", "/{virtualService}/{layer}/wps", "/{virtualService}/{layer}/ows"]}}
{"file": "cloned/geoserver-cloud/src/apps/geoserver/wfs/src/main/java/org/geoserver/cloud/wfs/app/WFSController.java", "endpoints": {"api_summary": "This API provides access to geospatial data and services, including WFS (Web Feature Service) and OWS (Open Web Services). It supports GET and POST requests for various endpoints, including GetCapabilities, GetSchema, and GetStaticResource.", "methods": ["GET", "POST"], "paths": ["/", "/wfs", "/ows", "/schemas/wfs/**", "/webresources/wfs/**", "/{virtualService}/wfs", "/{virtualService}/ows", "/{virtualService}/{layer}/wfs", "/{virtualService}/{layer}/ows"]}}
{"file": "cloned/geoserver-cloud/src/apps/geoserver/webui/src/main/java/org/geoserver/cloud/autoconfigure/web/core/WicketComponentFilter.java", "endpoints": {"api_summary": "This API is a servlet filter that intercepts requests to Wicket bookmarkable pages and returns a 404 (Not Found) response when the requested page belongs to a component that has been disabled through configuration.", "methods": ["GET", "POST"], "paths": ["/web/wicket/bookmarkable/org.geoserver.wms.web.WMSAdminPage", "/geoserver/cloud/web/bookmarkable/org.geoserver.wms.web.WMSAdminPage"]}}
{"file": "cloned/geoserver-cloud/src/apps/geoserver/wms/src/main/java/org/geoserver/cloud/autoconfigure/wms/WmsApplicationAutoConfiguration.java", "endpoints": {"api_summary": "This API provides WMS (Web Map Service) capabilities for GeoServer, including GetCapabilities, GetMap, and GetFeatureInfo. It also supports WFS (Web Feature Service) capabilities for GeoServer, including GetCapabilities, GetFeature, and Transaction.", "methods": ["GET", "POST"], "paths": ["/wms", "/wms/<built-in function id>", "/wfs", "/wfs/<built-in function id>"]}}
{"file": "cloned/geoserver-cloud/src/apps/geoserver/wms/src/main/java/org/geoserver/cloud/wms/controller/WMSController.java", "endpoints": {"api_summary": "The WMSController class defines a set of REST API endpoints for serving WMS (Web Map Service) requests. The endpoints support both GET and POST methods and handle requests for WMS capabilities, schema resources, and virtual service requests.", "methods": ["GET", "POST"], "paths": ["/", "/schemas/wms/**", "/openlayers/**", "/openlayers3/**", "/webresources/wms/**", "/options.png", "/wms", "/ows", "/{virtualService}/wms", "/{virtualService}/ows", "/{virtualService}/{layer}/wms", "/{virtualService}/{layer}/ows"]}}
{"file": "cloned/geoserver-cloud/src/apps/geoserver/wms/src/main/java/org/geoserver/cloud/wms/controller/GetMapReflectorController.java", "endpoints": {"api_summary": "The GetMapReflectorController defines a REST API endpoint for retrieving a map reflector for a given workspace in GeoServer. The endpoint supports GET requests and returns a JSON object with information about the map reflector.", "methods": ["GET"], "paths": ["/wms/reflect", "/{workspace}/wms/reflect"]}}
{"file": "cloned/geoserver-cloud/src/apps/geoserver/wms/src/main/java/org/geoserver/cloud/wms/controller/kml/KMLIconsController.java", "endpoints": {"api_summary": "The KMLIconsController defines a REST API for serving KML icons at /kml/icon/**. The API allows clients to retrieve KML icons using the GET method.", "methods": ["GET"], "paths": ["/kml/icon/**"]}}
{"file": "cloned/geoserver-cloud/src/apps/geoserver/wms/src/main/java/org/geoserver/cloud/wms/controller/kml/KMLReflectorController.java", "endpoints": {"api_summary": "The KMLReflectorController defines a REST API for handling KML requests at /wms/kml and /{workspace}/wms/kml. The API forwards requests to the Dispatcher, which eventually gets intercepted by the wmsServiceInterceptor-kmlReflector method advice defined in gs-kml.jar!/applicationContext.xml.", "methods": ["GET"], "paths": ["/wms/kml", "/{workspace}/wms/kml"]}}
{"file": "cloned/geoserver-cloud/src/apps/geoserver/wms/src/main/java/org/geoserver/cloud/wms/app/StatusCodeWmsExceptionHandler.java", "endpoints": {"api_summary": "This code defines a WMS exception handler that sets HTTP status codes for WMS requests based on the exception type and configuration. It also extends the WMSServiceExceptionHandler class to provide additional functionality.", "methods": ["GET", "POST"], "paths": ["/wms/exceptions"]}}
{"file": "cloned/geoserver-cloud/src/apps/infrastructure/gateway/src/main/java/org/geoserver/cloud/security/gateway/sharedauth/GatewaySharedAuthenticationPreFilter.java", "endpoints": {"api_summary": "This API enables sharing the webui form-based authentication object with the other services. It allows for impersonation of authenticated users and roles, and removes incoming request headers to prevent impersonation attempts.", "methods": ["GET", "POST"], "paths": ["/users", "/users/<built-in function id>"]}}
{"file": "cloned/geoserver-cloud/src/apps/infrastructure/gateway/src/main/java/org/geoserver/cloud/security/gateway/sharedauth/GatewaySharedAuthenticationPostFilter.java", "endpoints": {"api_summary": "This API enables sharing the webui form-based authentication object with the other services. It allows for storing and removing the webui response headers in the session and forwarding them to all services as request headers.", "methods": ["GET", "POST"], "paths": ["/users", "/users/<built-in function id>"]}}
{"file": "cloned/geoserver-cloud/src/starters/observability/src/main/java/org/geoserver/cloud/logging/accesslog/AccessLogWebfluxFilter.java", "endpoints": {"api_summary": "This API logs HTTP requests based on the provided configuration. It captures the following information about each request: HTTP method, URI path, status code, and processing duration.", "methods": ["GET", "POST"], "paths": ["/users", "/users/<built-in function id>"]}}
{"file": "cloned/geoserver-cloud/src/starters/observability/src/main/java/org/geoserver/cloud/logging/mdc/servlet/HttpRequestMdcFilter.java", "endpoints": {"api_summary": "This API provides a filter that adds HTTP request-specific information to the Mapped Diagnostic Context (MDC) for logging purposes.", "methods": ["GET", "POST"], "paths": ["/request-mdc"]}}
{"file": "cloned/geoserver-cloud/src/starters/observability/src/test/java/org/geoserver/cloud/logging/accesslog/AccessLogFilterTest.java", "endpoints": {"api_summary": "This API provides access to the access log filter for the GeoServer cloud logging module. It allows for configuring the filter and logging access to the API.", "methods": ["GET", "POST"], "paths": ["/api/data"]}}
{"file": "cloned/geoserver-cloud/src/starters/observability-spring-boot-3/src/main/java/org/geoserver/cloud/autoconfigure/logging/gateway/GatewayMdcAutoConfiguration.java", "endpoints": {"api_summary": "This API is used for integrating WebFlux MDC filters with Spring Cloud Gateway. It allows MDC context propagation and access logging to be properly configured and registered as global filters in the gateway.", "methods": ["GET", "POST"], "paths": ["/users", "/users/<built-in function id>"]}}
{"file": "cloned/geoserver-cloud/src/starters/observability-spring-boot-3/src/main/java/org/geoserver/cloud/logging/mdc/servlet/HttpRequestMdcFilter.java", "endpoints": {"api_summary": "This API provides a filter that adds HTTP request-specific information to the Mapped Diagnostic Context (MDC) for logging purposes.", "methods": ["GET", "POST"], "paths": ["/request-mdc"]}}
{"file": "cloned/geoserver-cloud/src/starters/observability-spring-boot-3/src/main/java/org/geoserver/cloud/logging/mdc/webflux/MDCWebFilter.java", "endpoints": {"api_summary": "This file defines a WebFlux filter for logging MDC (Mapped Diagnostic Context) in WebFlux applications. It captures information from the HTTP request and application environment and sets it in the MDC context.", "methods": ["GET", "POST", "PUT", "DELETE", "PATCH"], "paths": ["/users", "/users/<built-in function id>", "/users/<built-in function id>/<built-in function id>"]}}
{"file": "cloned/geoserver-cloud/src/starters/observability-spring-boot-3/src/test/java/org/geoserver/cloud/logging/accesslog/AccessLogFilterTest.java", "endpoints": {"api_summary": "This code defines a set of access log filters for a web application, which can be used to log information about incoming requests and responses. The filters can be used with both Servlet-based and WebFlux-based applications.", "methods": ["GET", "POST", "PUT", "DELETE", "HEAD", "OPTIONS", "TRACE", "CONNECT"], "paths": ["/api/data", "/admin/.*", "/debug/.*", "/info/.*", "/trace/.*"]}}
{"file": "cloned/puppy-love/controllers/heart.go", "endpoints": {"api_summary": "The Heart API allows users to retrieve their heart rate data and send their heart rate data to the server. The API also allows users to retrieve the last checked time and current time.", "methods": ["GET"], "paths": ["/heart/<you>/<time>"]}}
{"file": "cloned/puppy-love/controllers/declare.go", "endpoints": {"api_summary": "The API allows an admin user to prepare the declare table by creating entries for all users who have not been matched yet.", "methods": ["POST"], "paths": ["/declare/prepare"]}}
{"file": "cloned/puppy-love/router/router.go", "endpoints": {"api_summary": "The Puppy Love API provides endpoints for managing users, listing users, and handling user sessions. It also provides endpoints for retrieving user data and updating user information.", "methods": ["GET", "POST"], "paths": ["/", "/stats", "/users", "/users/<built-in function id>", "/list", "/list/all", "/list/pubkey", "/list/declare", "/hearts", "/hearts/get/:time/:you", "/session", "/session/login", "/session/logout", "/admin", "/admin/declare/prepare", "/admin/user/drop", "/admin/user/new"]}}
{"file": "cloned/puppy-love/frontend/src/app/app-routing.module.ts", "endpoints": {"api_summary": "This API provides routes for the main application, including login, signup, and home pages. It also includes routes for static pages such as about and how-it-works.", "methods": ["GET", "POST"], "paths": ["/", "/about", "/how-it-works", "/howto", "/login", "/signup", "/home"]}}
{"file": "cloned/nest-microservices/media-service/src/main.ts", "endpoints": {"api_summary": "This API provides a simple health check endpoint at /_ah/health and a root endpoint at / that returns the string 'ok'.", "methods": ["GET"], "paths": ["/", "/_ah/health"]}}
{"file": "cloned/nest-microservices/media-service/src/medias/medias.module.ts", "endpoints": {"api_summary": "The Medias API allows for the management of media resources, including creating, reading, updating, and deleting media items. It also provides endpoints for querying and searching media items.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/medias", "/medias/<media_id>", "/medias/search"]}}
{"file": "cloned/nest-microservices/media-service/src/medias/medias.controller.ts", "endpoints": {"api_summary": "The Medias API allows for the creation, update, and retrieval of media objects. It also supports event-driven updates for media objects and creator information.", "methods": ["POST", "PUT", "GET"], "paths": ["/medias", "/medias/<id>", "/medias/<id>/creator"]}}
{"file": "cloned/nest-microservices/user-management-service/src/main.ts", "endpoints": {"api_summary": "This API provides a simple health check endpoint at /_ah/health and a root endpoint at / that returns the string 'ok'.", "methods": ["GET"], "paths": ["/", "/_ah/health"]}}
{"file": "cloned/nest-microservices/user-management-service/src/users/users.module.ts", "endpoints": {"api_summary": "The Users API provides endpoints for managing user accounts, including creating, reading, updating, and deleting users. It also provides endpoints for querying and searching users, as well as for handling user authentication and authorization.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users", "/users/<built-in function id>", "/users/query", "/users/search", "/users/auth"]}}
{"file": "cloned/nest-microservices/user-management-service/src/users/users.controller.ts", "endpoints": {"api_summary": "The Users API allows for the creation, retrieval, and update of user information. It also provides an event pattern for catching user creation events.", "methods": ["GET", "POST", "PUT"], "paths": ["/users", "/users/<built-in function id>", "/users/get_users", "/users/get_user_by_id"]}}
{"file": "cloned/nest-microservices/api/src/app.controller.ts", "endpoints": {"api_summary": "This API provides a single endpoint for a root request, which returns a string message indicating that the request was authorized.", "methods": ["GET"], "paths": ["/<repository_name>/"]}}
{"file": "cloned/nest-microservices/api/src/app.module.ts", "endpoints": {"api_summary": "The API provides endpoints for managing users and media content. It includes authentication middleware to ensure only authorized users can access the endpoints.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users", "/users/<built-in function id>", "/medias", "/medias/<built-in function id>"]}}
{"file": "cloned/nest-microservices/api/src/main.ts", "endpoints": {"api_summary": "This API provides a simple health check endpoint for a NestJS application. The endpoint returns a 200 status code and the string 'ok' for any request made to it.", "methods": ["GET"], "paths": ["/", "/_ah/health"]}}
{"file": "cloned/nest-microservices/api/src/medias/medias.service.ts", "endpoints": {"api_summary": "The MediasService API provides endpoints for creating, updating, and retrieving media objects. It uses a Redis client to send messages to a microservice for handling the requests.", "methods": ["POST", "PUT", "GET"], "paths": ["/medias", "/medias/<built-in function id>"]}}
{"file": "cloned/nest-microservices/api/src/medias/medias.module.ts", "endpoints": {"api_summary": "The Medias API provides endpoints for managing media files and their associated metadata. It includes endpoints for creating, reading, updating, and deleting media files, as well as endpoints for retrieving metadata about media files.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/medias", "/medias/<built-in function id>"]}}
{"file": "cloned/nest-microservices/api/src/medias/medias.controller.ts", "endpoints": {"api_summary": "The Medias API allows for the creation, retrieval, and update of media objects. It also provides a method for retrieving a list of all media objects.", "methods": ["POST", "PUT", "GET"], "paths": ["/medias", "/medias/:id"]}}
{"file": "cloned/nest-microservices/api/src/medias/medias.constants.ts", "endpoints": {"api_summary": "The API provides endpoints for managing media resources, including retrieving, creating, updating, and deleting media items. The endpoints are protected by a token-based authentication system, and users can access the endpoints based on their role and permissions.", "methods": ["GET", "POST", "PUT"], "paths": ["/medias/:id", "/medias/"]}}
{"file": "cloned/nest-microservices/api/src/users/users.service.ts", "endpoints": {"api_summary": "The UsersService API provides endpoints for registering, updating, and retrieving user information. It uses a Redis client to communicate with a microservice for user data storage and retrieval.", "methods": ["GET", "POST", "PUT"], "paths": ["/users", "/users/<built-in function id>", "/users/<built-in function id>/update"]}}
{"file": "cloned/nest-microservices/api/src/users/users.controller.ts", "endpoints": {"api_summary": "The Users API allows for the registration, updating, and retrieval of user information. It also provides a way to retrieve a list of all users.", "methods": ["GET", "POST", "PUT"], "paths": ["/users", "/users/<built-in function id>"]}}
{"file": "cloned/nest-microservices/api/src/users/users.constants.ts", "endpoints": {"api_summary": "The API allows for the management of users, including creating, reading, updating, and deleting user accounts. It also provides endpoints for retrieving a list of users and retrieving a specific user by ID.", "methods": ["GET", "POST", "PUT"], "paths": ["/users/:id", "/users/", "/users/<built-in function id>"]}}
{"file": "cloned/streaming-online-analytics-demo/pyspark-sql-server/spark-sql.py", "endpoints": {"api_summary": "This API provides a SQL server for querying data stored in a Hadoop cluster. It accepts GET and POST requests to the '/sqlserver' endpoint and returns the results of the SQL query in JSON format.", "methods": ["GET", "POST"], "paths": ["/sqlserver"]}}
{"file": "cloned/streaming-online-analytics-demo/messaging-service/src/main/java/com/radanalyticsio/camel/OrderRouteBuilder.java", "endpoints": {"api_summary": "The OrderRouteBuilder defines a REST API for managing product orders. It provides endpoints for creating, viewing, and listing orders, as well as retrieving the order list.", "methods": ["GET", "POST"], "paths": ["/order/view/{id}", "/order/list", "/order/create"]}}
{"file": "cloned/streaming-online-analytics-demo/web/server.js", "endpoints": {"api_summary": "This API allows users to place orders for products and retrieve information about products and orders.", "methods": ["GET", "POST"], "paths": ["/orderService", "/mock/orderService", "/mock/query"]}}
{"file": "cloned/light-config-test/light-router/light-portal/signin/build/static/js/main.4e55a631.chunk.js", "endpoints": {"api_summary": "This file defines a login form for a web application. The form accepts user input for username, password, and a remember me checkbox. The form also includes hidden fields for state, client_id, user_type, and redirect_uri. The form is rendered using React and Material-UI components.", "methods": ["POST"], "paths": ["/oauth2/code"]}}
{"file": "cloned/geonetwork-microservices/modules/library/common-error/src/main/java/org/fao/geonet/errors/controller/GeoNetworkErrorController.java", "endpoints": {"api_summary": "The GeoNetworkErrorController provides a basic error handling mechanism for the GeoNetwork application. It defines several endpoints for handling errors, including a test endpoint for triggering errors and a generic error endpoint for handling errors in different formats (JSON, XML, and HTML).", "methods": ["GET", "POST"], "paths": ["/errortest", "/errortestlocalized", "/error"]}}
{"file": "cloned/geonetwork-microservices/modules/library/common-search/src/main/java/org/fao/geonet/common/search/processor/impl/DcatCatalogResponseProcessorImpl.java", "endpoints": {"api_summary": "This API provides a search functionality for the FAO GeoNet platform, allowing users to search for geospatial data and metadata. The API returns results in RSS format, and supports filtering and sorting of results.", "methods": ["GET"], "paths": ["/geonet/search"]}}
{"file": "cloned/geonetwork-microservices/modules/services/authorizing/src/main/java/org/fao/geonet/authorizing/SecurityConfigurer.java", "endpoints": {"api_summary": "This API is an authorization server that provides endpoints for authenticating and authorizing users. It supports password authentication and refresh token grant types.", "methods": ["GET", "POST"], "paths": ["/oauth/authorize", "/oauth/token"]}}
{"file": "cloned/geonetwork-microservices/modules/services/authorizing/src/test/java/org/fao/geonet/authorizing/AuthentificationTest.java", "endpoints": {"api_summary": "This API provides authentication and authorization for the GeoNet application. It allows users to authenticate and obtain an access token, which can be used to access protected resources.", "methods": ["POST"], "paths": ["/oauth/token"]}}
{"file": "cloned/geonetwork-microservices/modules/services/indexing/src/main/java/org/fao/geonet/indexing/controller/RouteController.java", "endpoints": {"api_summary": "The RouteController API provides a single endpoint for reloading the route configuration of a CamelContext. The endpoint is accessible at /routes/reload and supports the GET method.", "methods": ["GET"], "paths": ["/routes/reload"]}}
{"file": "cloned/geonetwork-microservices/modules/services/indexing/src/main/java/org/fao/geonet/indexing/controller/IndexController.java", "endpoints": {"api_summary": "The IndexController API provides endpoints for indexing records and sending events to an event stream service. The API allows clients to index all records or specific records by bucket and UUID, and to send events to the event stream service for further processing.", "methods": ["GET", "POST"], "paths": ["/index/all", "/index/event/{bucket}/{uuid}"]}}
{"file": "cloned/geonetwork-microservices/modules/services/indexing/src/main/java/org/fao/geonet/indexing/service/IndexingRouteBuilder.java", "endpoints": {"api_summary": "This API allows for the indexing of records in a bucket. It provides endpoints for indexing one record, a bucket of records, and all records in a bucket. It also provides an endpoint for deleting the index.", "methods": ["GET", "PUT", "DELETE"], "paths": ["/index/<bucket>/<uuid>", "/index/<bucket>", "/index/all", "/index/records"]}}
{"file": "cloned/geonetwork-microservices/modules/services/ogc-api-records/src/main/java/org/fao/geonet/ogcapi/records/MvcConfigurer.java", "endpoints": {"api_summary": "The GeoNetwork Cloud OpenAPI Documentation API provides endpoints for creating, modifying, and querying metadata on the web. It is part of the OGC API Records API and supports multiple languages.", "methods": ["GET", "POST"], "paths": ["/users", "/users/<built-in function id>"]}}
{"file": "cloned/geonetwork-microservices/modules/services/ogc-api-records/src/main/java/org/fao/geonet/ogcapi/records/util/CollectionInfoBuilder.java", "endpoints": {"api_summary": "This API provides information about the GeoNetwork repository and its collections, including the spatial extent and links to the collection items.", "methods": ["GET"], "paths": ["/geonetwork/collections"]}}
{"file": "cloned/geonetwork-microservices/modules/services/ogc-api-records/src/main/java/org/fao/geonet/ogcapi/records/controller/CollectionApiController.java", "endpoints": {"api_summary": "This API provides information about the collections and their sorting capabilities.", "methods": ["GET"], "paths": ["/collections/{collectionId}", "/collections/{collectionId}/sortables"]}}
{"file": "cloned/geonetwork-microservices/modules/services/ogc-api-records/src/main/java/org/fao/geonet/ogcapi/records/controller/CapabilitiesApiController.java", "endpoints": {"api_summary": "This API provides information about the collections available from this API.", "methods": ["GET"], "paths": ["/collections"]}}
{"file": "cloned/geonetwork-microservices/modules/services/ogc-api-records/src/main/java/org/fao/geonet/ogcapi/records/controller/QueryableApiController.java", "endpoints": {"api_summary": "The Queryable API provides information about the queryable properties of a collection of resources, which can be used to construct filter expressions for querying the collection.", "methods": ["GET"], "paths": ["/collections/{collectionId}/queryables"]}}
{"file": "cloned/geonetwork-microservices/modules/services/ogc-api-records/src/main/java/org/fao/geonet/ogcapi/records/controller/ApiDocController.java", "endpoints": {"api_summary": "The API provides documentation for the Open Geospatial Foundation's (FAO) GeoNet OGC API Records implementation. It allows users to access and manipulate geospatial data and metadata in a RESTful manner.", "methods": ["GET"], "paths": ["/openapi"]}}
{"file": "cloned/geonetwork-microservices/modules/services/ogc-api-records/src/main/java/org/fao/geonet/ogcapi/records/controller/ItemApiController.java", "endpoints": {"api_summary": "This API provides endpoints for managing and retrieving information about geospatial data collections and items.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/collections", "/collections/{collectionId}", "/collections/{collectionId}/items", "/collections/{collectionId}/items/{recordId}"]}}
{"file": "cloned/geonetwork-microservices/modules/services/searching/src/main/java/org/fao/geonet/searching/controller/SecurityTesterController.java", "endpoints": {"api_summary": "The SecurityTesterController API provides a simple secured endpoint for retrieving user details stored in JWT.", "methods": ["GET"], "paths": ["/search/secured"]}}
{"file": "cloned/geonetwork-microservices/modules/services/searching/src/main/java/org/fao/geonet/searching/controller/MainSearchController.java", "endpoints": {"api_summary": "The MainSearchController API provides a proxy for ElasticSearch catalog search operations. It allows users to search for records in the catalog using various search parameters.", "methods": ["POST"], "paths": ["/{portal}/api/search/records/_search"]}}
{"file": "cloned/spring-microservices/applications/contact-service/src/main/java/ro/rasel/spring/microservices/contactservice/ContactServiceApplication.java", "endpoints": {"api_summary": "The Contact Service API provides endpoints for managing contacts, including creating, reading, updating, and deleting contacts. It also provides endpoints for retrieving contact information and searching for contacts by name or email.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/contacts", "/contacts/<contact_id>", "/contacts/search"]}}
{"file": "cloned/spring-microservices/applications/contact-service/src/main/java/ro/rasel/spring/microservices/contactservice/config/ResourceSecurityConfigurer.java", "endpoints": {"api_summary": "The Contact Service API allows for the management of contacts for users. It provides endpoints for creating, reading, updating, and deleting contacts, as well as endpoints for retrieving a list of contacts for a given user.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/v1/users/<built-in function id>/contacts", "/v1/users/<built-in function id>/contacts/<contact id>"]}}
{"file": "cloned/spring-microservices/applications/contact-service/src/main/java/ro/rasel/spring/microservices/contactservice/controller/v1/ContactApi.java", "endpoints": {"api_summary": "The Contact API provides endpoints for managing contacts for a user. It allows for creating, reading, updating, and deleting contacts, as well as retrieving a list of all contacts for a user.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/v1/users/{userId}/contacts", "/v1/users/{userId}/contacts/{contactId}"]}}
{"file": "cloned/spring-microservices/applications/contact-service/src/main/java/ro/rasel/spring/microservices/contactservice/controller/v1/ContactRestController.java", "endpoints": {"api_summary": "The ContactRestController defines a REST API for managing contacts. It provides endpoints for creating, reading, updating, and deleting contacts, as well as retrieving a list of all contacts for a given user.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users/{userId}/contacts", "/users/{userId}/contacts/{contactId}"]}}
{"file": "cloned/spring-microservices/applications/contact-service/src/test/java/ro/rasel/spring/microservices/contactservice/integrationtest/v1/ContactIntegrationTest.java", "endpoints": {"api_summary": "This API allows for the management of contacts, including creating, reading, updating, and deleting contacts. It also allows for retrieving a collection of contacts for a given user.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/v1/users/{userId}/contacts", "/v1/users/{userId}/contacts/{contactId}"]}}
{"file": "cloned/spring-microservices/applications/bookmark-service/src/main/java/ro/rasel/spring/microservices/bookmarkservice/BookmarkServiceApplication.java", "endpoints": {"api_summary": "The Bookmark Service API allows users to create, read, update, and delete bookmarks. It also provides a way to retrieve a list of bookmarks for a given user.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/bookmarks", "/bookmarks/<bookmark_id>"]}}
{"file": "cloned/spring-microservices/applications/bookmark-service/src/main/java/ro/rasel/spring/microservices/bookmarkservice/config/ResourceSecurityConfigurer.java", "endpoints": {"api_summary": "The Bookmark Service API allows users to create, read, update, and delete bookmarks. It also provides endpoints for retrieving and updating user information.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/v1/users/<built-in function id>/bookmarks", "/v1/users/<built-in function id>/bookmarks/<bookmark id>"]}}
{"file": "cloned/spring-microservices/applications/bookmark-service/src/main/java/ro/rasel/spring/microservices/bookmarkservice/controller/v1/BookmarkRestController.java", "endpoints": {"api_summary": "The BookmarkService API allows users to create, read, update, and delete bookmarks. It also provides endpoints for retrieving all bookmarks for a given user and for retrieving a specific bookmark by ID.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/bookmarks", "/bookmarks/{userId}", "/bookmarks/{userId}/{bookmarkId}"]}}
{"file": "cloned/spring-microservices/applications/bookmark-service/src/main/java/ro/rasel/spring/microservices/bookmarkservice/controller/v1/BookmarkApi.java", "endpoints": {"api_summary": "The Bookmark API allows users to create, read, update, and delete bookmarks. It also provides endpoints for retrieving a list of bookmarks and a specific bookmark by ID.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/v1/users/{userId}/bookmarks", "/v1/users/{userId}/bookmarks/{bookmarkId}"]}}
{"file": "cloned/spring-microservices/applications/bookmark-service/src/test/java/ro/rasel/spring/microservices/bookmarkservice/controller/v1/BookmarkRestControllerTest.java", "endpoints": {"api_summary": "The BookmarkRestController provides endpoints for managing bookmarks. It allows users to create, read, update, and delete bookmarks, as well as retrieve a list of all bookmarks.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/bookmarks", "/bookmarks/<bookmark_id>"]}}
{"file": "cloned/spring-microservices/applications/bookmark-service/src/test/java/ro/rasel/spring/microservices/bookmarkservice/integrationtest/v1/BookmarkIntegrationTest.java", "endpoints": {"api_summary": "The BookmarkService API allows users to create, retrieve, update, and delete bookmarks. It also provides a way to retrieve a collection of bookmarks for a given user.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/v1/users/{userId}/bookmarks", "/v1/users/{userId}/bookmarks/{bookmarkId}"]}}
{"file": "cloned/spring-microservices/applications/echo-service/src/main/java/ro/rasel/spring/microservices/echoservice/controller/v1/EchoApiImpl.java", "endpoints": {"api_summary": "The Echo API allows users to create, read, update, and delete echoes, which are used to test and debug the API. The API also allows users to specify response headers and status codes for each endpoint.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/echos", "/echos/<built-in function id>"]}}
{"file": "cloned/spring-microservices/applications/echo-service/src/main/java/ro/rasel/spring/microservices/echoservice/controller/v1/EchoApi.java", "endpoints": {"api_summary": "The Echo API is a simple REST API that allows users to send and receive echo requests and responses. The API supports GET, POST, PUT, and DELETE methods and returns a JSON response with the echoed request and response information.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/echo", "/echo/<built-in function id>"]}}
{"file": "cloned/spring-microservices/applications/passport-service/src/main/java/ro/rasel/spring/microservices/passportservice/config/ResourceSecurityConfigurer.java", "endpoints": {"api_summary": "The Passport Service API allows for the management of passports for users. It provides endpoints for creating, reading, updating, and deleting passports, as well as endpoints for retrieving information about specific passports.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/v1/users/<built-in function id>/passport"]}}
{"file": "cloned/spring-microservices/applications/passport-service/src/main/java/ro/rasel/spring/microservices/passportservice/controller/AsyncPassportRestController.java", "endpoints": {"api_summary": "The AsyncPassportRestController defines a REST API for retrieving passports for users. The API uses a rate limiter to prevent abuse and returns a Future object that can be used to retrieve the passport data asynchronously.", "methods": ["GET"], "paths": ["/async-passport/{userId}"]}}
{"file": "cloned/spring-microservices/applications/passport-service/src/main/java/ro/rasel/spring/microservices/passportservice/controller/AsyncPassportApi.java", "endpoints": {"api_summary": "The Passport Service API provides endpoints for retrieving passports for users. The API uses the /v1/async/users/{userId}/passport endpoint to retrieve passports for a given user ID.", "methods": ["GET"], "paths": ["/v1/async/users/{userId}/passport"]}}
{"file": "cloned/spring-microservices/applications/passport-service/src/main/java/ro/rasel/spring/microservices/passportservice/controller/PassportApi.java", "endpoints": {"api_summary": "The Passport API provides endpoints for retrieving passports for users. It allows users to retrieve their passports by providing their user ID.", "methods": ["GET"], "paths": ["/v1/users/{userId}/passport"]}}
{"file": "cloned/spring-microservices/applications/passport-service/src/main/java/ro/rasel/spring/microservices/passportservice/controller/PassportRestController.java", "endpoints": {"api_summary": "The Passport API allows users to retrieve their passport information, including their user ID, bookmarks, and contacts. The API is rate-limited to prevent abuse and ensure fair usage.", "methods": ["GET"], "paths": ["/passport/{userId}"]}}
{"file": "cloned/spring-microservices/spring2p3/services-s2p3/sso-auth-service-s2p3/src/main/java/ro/rasel/spring/microservices/ssoauthservice/config/OAuth2Config.java", "endpoints": {"api_summary": "This API is an OAuth2 authorization server that provides authentication and authorization services for a microservices architecture. It supports various grant types, including authorization code, refresh token, and password. The API also supports token revocation and token introspection.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/oauth/authorize", "/oauth/token", "/oauth/revoke", "/oauth/introspect"]}}
{"file": "cloned/spring-microservices/spring2p3/services-s2p3/sso-auth-service-s2p3/src/main/java/ro/rasel/spring/microservices/ssoauthservice/controller/UserController.java", "endpoints": {"api_summary": "The UserController REST API provides a single endpoint for retrieving the current user's information. The endpoint is accessible at /user and returns a JSON object containing the user's principal information.", "methods": ["GET"], "paths": ["/user"]}}
{"file": "cloned/spring-microservices/spring2p3/services-s2p3/sso-auth-service-s2p3/src/main/java/ro/rasel/spring/microservices/ssoauthservice/controller/JwtPublicKeyController.java", "endpoints": {"api_summary": "The SSO Auth Service API provides endpoints for managing JSON Web Tokens (JWT) and retrieving public keys for authentication and authorization. The API includes endpoints for retrieving the JWT key, the public key, and the OpenID configuration.", "methods": ["GET"], "paths": ["/api/key", "/api/publicKey", "/.well-known/openid-configuration"]}}
{"file": "cloned/spring-microservices/spring2p3/services-s2p3/sso-auth-service-s2p3/src/test/java/ro/rasel/spring/microservices/ssoauthservice/AuthorizationTokenGrantTypeV2Test.java", "endpoints": {"api_summary": "This API is a test suite for the Authorization Token Grant Type V2 endpoint. It defines several endpoints for testing the authorization code flow and retrieving an access token.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/login", "/oauth/authorize", "/oauth/token", "/user"]}}
{"file": "cloned/spring-microservices/spring2p3/services-s2p3/sso-auth-service-s2p3/src/test/java/ro/rasel/spring/microservices/ssoauthservice/XForwardedHostTokenGrantTypeTest.java", "endpoints": {"api_summary": "This API is a test suite for the SSOAuthService, which is a Spring Boot application that provides a single sign-on (SSO) authentication service for a microservices architecture. The API includes endpoints for logging in, getting an authorization code, and getting an access token.", "methods": ["POST", "GET"], "paths": ["/login", "/oauth/authorize", "/oauth/token"]}}
{"file": "cloned/spring-microservices/spring2p3/services-s2p3/sso-auth-service-s2p3/src/test/java/ro/rasel/spring/microservices/ssoauthservice/AuthorizationTokenGrantTypeTest.java", "endpoints": {"api_summary": "This API is a test suite for an OAuth2 authorization server. It includes endpoints for logging in, getting an authorization code, and exchanging an authorization code for an access token.", "methods": ["POST", "GET"], "paths": ["/login", "/oauth/authorize", "/oauth/token"]}}
{"file": "cloned/spring-microservices/services/resource-gateway-service/src/main/java/ro/rasel/spring/microservices/resourcegatewayservice/config/GatewayConfig.java", "endpoints": {"api_summary": "This API is a gateway service that routes requests to other microservices. It defines four routes, each corresponding to a different microservice, and rewrites the request path and response headers to match the target service's expectations.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/echo-service/**", "/bookmark-service/**", "/contact-service/**", "/passport-service/**"]}}
{"file": "cloned/spring-microservices/services/eureka-service/src/main/java/ro/rasel/spring/microservices/eurekaservice/config/SecurityConfigurer.java", "endpoints": {"api_summary": "The Eureka Service API provides a discovery service for microservices in a Spring Cloud environment. It allows services to register themselves and discover other services in the system. The API also provides endpoints for managing the service registry and for retrieving information about the services.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/eureka/apps", "/eureka/apps/<app_name>", "/eureka/apps/<app_name>/<instance_id>", "/eureka/apps/<app_name>/<instance_id>/status", "/eureka/apps/<app_name>/<instance_id>/metadata"]}}
{"file": "cloned/tribunals-case-api/definitions/test/api/client/sscs/factory/appeal.update.factory.ts", "endpoints": {"api_summary": "This API is used to perform events on cases in the CCD system. It allows for the submission of events with empty bodies, upload responses, and action further evidence.", "methods": ["GET", "POST"], "paths": ["/caseworkers/<userId>/jurisdictions/<jurisdiction>/case-types/<caseType>/cases/<caseId>/event-triggers/<eventId>/token", "/caseworkers/<userId>/jurisdictions/<jurisdiction>/case-types/<caseType>/cases/<caseId>/events"]}}
{"file": "cloned/tribunals-case-api/definitions/test/api/client/sscs/factory/appeal.type.factory.ts", "endpoints": {"api_summary": "This API creates a case based on the case type provided. It accepts a case type as input and returns the location URL of the created case.", "methods": ["POST"], "paths": ["/appeals", "/api/appeals"]}}
{"file": "cloned/tribunals-case-api/definitions/test/e2e/upload-response.spec.ts", "endpoints": {"api_summary": "This API is used to upload responses for appeals and handle related workflows, including reviewing responses and handling errors.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/appeals/<appeal_id>/responses", "/appeals/<appeal_id>/responses/<response_id>", "/appeals/<appeal_id>/responses/<response_id>/errors"]}}
{"file": "cloned/tribunals-case-api/definitions/test/pages/write.final.decision.page.ts", "endpoints": {"api_summary": "This code defines a class called WriteFinalDecisionPages that contains methods for verifying and inputting page content for various pages in the Write Final Decision journey.", "methods": ["verifyPageContentForTypeOfAwardPage", "inputPageContentForAwardDatesPageData", "verifyPageContentForDailyLivingNutrition", "inputPageContentForDailyLivingNutritionPageData", "verifyPageContentForMovingAround", "inputPageContentForMovingAroundPageData", "verifyPageContentForCheckYourAnswersPageForAwardsCriteria", "verifyPageContentForCheckYourAnswersPageForNoNoticeGenerated", "verifyPageContentForCheckYourAnswersPageForUCCaseWithScheduleAndReasses", "inputPageContentForSchedule7ActivitiesPageData", "verifyPageContentForSchedule2ActivitiesPage", "inputAndVerifyPageContentForSchedule2ActivitiesPageData", "verifyPageContentForReassessTheAwardPage", "inputPageContentForReassessTheAwardPage", "chooseAllowedOrRefused", "submitContinueBtn", "verifyDocumentTitle"], "paths": ["/write-final-decision/type-of-award", "/write-final-decision/award-dates", "/write-final-decision/daily-living/nutrition", "/write-final-decision/mobility/moving-around", "/write-final-decision/check-your-answers-for-awards-criteria", "/write-final-decision/check-your-answers-for-no-notice-generated", "/write-final-decision/check-your-answers-for-uc-case-with-schedule-and-reasses", "/write-final-decision/schedule-7-activities", "/write-final-decision/schedule-2-activities", "/write-final-decision/reassess-the-award", "/write-final-decision/consciousness", "/write-final-decision/reaching", "/write-final-decision/coping-with-change", "/write-final-decision/cognitive-impairment", "/write-final-decision/regulation-29", "/write-final-decision/regulation-35", "/write-final-decision/submit-continue"]}}
{"file": "cloned/tribunals-case-api/definitions/test/pages/postponement.page.ts", "endpoints": {"api_summary": "This API is used to handle postponement requests for a hearing. It includes endpoints for creating, viewing, and submitting postponement requests, as well as endpoints for previewing and submitting postponement request documents.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/postponement/create", "/postponement/view", "/postponement/submit", "/postponement/preview", "/postponement/submit-document"]}}
{"file": "cloned/tribunals-case-api/src/main/java/uk/gov/hmcts/reform/sscs/evidenceshare/callback/handlers/SorWriteHandler.java", "endpoints": {"api_summary": "This API is responsible for handling the Post Hearing App SOR Written event in the SSCS case management system. It generates and sends letters to parties involved in the case, including the appellant, joint party, representative, and other parties.", "methods": ["POST"], "paths": ["/sscs/evidenceshare/callback/handlers/sor-write-handler"]}}
{"file": "cloned/tribunals-case-api/src/main/java/uk/gov/hmcts/reform/sscs/evidenceshare/service/BulkPrintService.java", "endpoints": {"api_summary": "The Bulk Print Service API allows for sending letters to the bulk print service for printing and distribution. The API supports sending letters with one or more PDF documents and includes additional data such as the case identifier, letter type, and recipient information.", "methods": ["POST"], "paths": ["/send-letter"]}}
{"file": "cloned/tribunals-case-api/src/main/java/uk/gov/hmcts/reform/sscs/document/EvidenceMetadataDownloadClientApi.java", "endpoints": {"api_summary": "The EvidenceMetadataDownloadClientApi provides a REST API for retrieving document metadata from the Document Management Service. It includes endpoints for retrieving document metadata by document metadata URI and for checking the health of the service.", "methods": ["GET"], "paths": ["/document-management-metadata-download-api/{document_metadata_uri}", "/document-management-metadata-download-api/health"]}}
{"file": "cloned/tribunals-case-api/src/main/java/uk/gov/hmcts/reform/sscs/document/EvidenceDownloadClientApi.java", "endpoints": {"api_summary": "The SSCS Document Management Download API provides a way to download binary data for a given document download URI. The API uses the HTTP GET method and requires authentication and authorization headers to be provided in the request.", "methods": ["GET"], "paths": ["/document-management-download-api/{document_download_uri}"]}}
{"file": "cloned/tribunals-case-api/src/main/java/uk/gov/hmcts/reform/sscs/bulkscan/controllers/OcrValidationController.java", "endpoints": {"api_summary": "The OcrValidationController API validates OCR form data based on form type. It accepts a request with OcrDataValidationRequest body and returns a response with OcrValidationResponse body.", "methods": ["POST"], "paths": ["/forms/{form-type}/validate-ocr"]}}
{"file": "cloned/tribunals-case-api/src/main/java/uk/gov/hmcts/reform/sscs/bulkscan/controllers/TransformationController.java", "endpoints": {"api_summary": "The TransformationController API provides endpoints for transforming exception records and scanned data. It uses the AuthorisationService to authenticate and authorize requests, and the CcdCallbackHandler to handle the transformation requests.", "methods": ["POST"], "paths": ["/transform-exception-record", "/transform-scanned-data"]}}
{"file": "cloned/tribunals-case-api/src/main/java/uk/gov/hmcts/reform/sscs/bulkscan/controllers/CcdBulkScanCallbackController.java", "endpoints": {"api_summary": "The CcdBulkScanCallbackController API handles callbacks from SSCS to validate case data and update the case state to appeal created.", "methods": ["POST"], "paths": ["/validate-record"]}}
{"file": "cloned/tribunals-case-api/src/main/java/uk/gov/hmcts/reform/sscs/helper/mapping/HearingsCaseMapping.java", "endpoints": {"api_summary": "This API is responsible for mapping SSCS cases to hearing cases. It provides a way to build hearing case details from SSCS case data and reference data.", "methods": ["GET", "POST"], "paths": ["/cases/case-details/<case_id>"]}}
{"file": "cloned/tribunals-case-api/src/main/java/uk/gov/hmcts/reform/sscs/tyanotifications/controller/NotificationController.java", "endpoints": {"api_summary": "The API allows for sending notifications to users based on events in the SSCS (Social Security and Child Support) case management system. It receives a message from the CCD (Case Management System) and uses the information in the message to determine which notifications to send and to whom.", "methods": ["POST"], "paths": ["/sendNotification"]}}
{"file": "cloned/tribunals-case-api/src/main/java/uk/gov/hmcts/reform/sscs/tyanotifications/service/coh/CohClient.java", "endpoints": {"api_summary": "The CohClient API provides a way to retrieve question rounds for a given online hearing ID. It uses the Spring Cloud OpenFeign library to make HTTP requests to the Coh API.", "methods": ["GET"], "paths": ["/continuous-online-hearings/{onlineHearingId}/questionrounds"]}}
{"file": "cloned/tribunals-case-api/src/main/java/uk/gov/hmcts/reform/sscs/ccd/presubmit/writefinaldecision/esa/EsaWriteFinalDecisionMidEventValidationHandler.java", "endpoints": {"api_summary": "This API is used to validate the input data for the ESA final decision notice generation. It checks the input data against the ESA regulations and sets the appropriate flags for the final decision notice.", "methods": ["POST"], "paths": ["/esa/validate"]}}
{"file": "cloned/tribunals-case-api/src/main/java/uk/gov/hmcts/reform/sscs/ccd/presubmit/writefinaldecision/uc/UcWriteFinalDecisionMidEventValidationHandler.java", "endpoints": {"api_summary": "This API is used to validate the input data for the Universal Credit (UC) write final decision mid-event callback. It checks the input data for various conditions and sets the appropriate page flags and show conditions for the UC write final decision journey.", "methods": ["POST"], "paths": ["/uc/write-final-decision-mid-event"]}}
{"file": "cloned/tribunals-case-api/src/main/java/uk/gov/hmcts/reform/sscs/ccd/presubmit/uploadwelshdocument/UploadWelshDocumentsAboutToSubmitHandler.java", "endpoints": {"api_summary": "This API allows users to upload Welsh documents for SSCS cases. It provides endpoints for uploading, retrieving, and deleting Welsh documents, as well as endpoints for updating the translation status of documents.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/sscs/welsh-documents", "/sscs/welsh-documents/<document_id>", "/sscs/welsh-documents/<document_id>/translation-status"]}}
{"file": "cloned/tribunals-case-api/src/main/java/uk/gov/hmcts/reform/sscs/ccd/presubmit/uploadwelshdocument/UploadWelshDocumentsSubmittedHandler.java", "endpoints": {"api_summary": "This API handles the submission of Welsh documents for SSCS cases. It can also send cases to urgent hearing and set reinstatement requests.", "methods": ["POST"], "paths": ["/sscs/ccd/uploadWelshDocuments"]}}
{"file": "cloned/tribunals-case-api/src/main/java/uk/gov/hmcts/reform/sscs/ccd/presubmit/addhearingoutcome/AddHearingOutcomeAboutToStartHandler.java", "endpoints": {"api_summary": "This API allows for the retrieval of hearing details for a given case ID. It also allows for the addition of hearing outcomes for a given case ID.", "methods": ["GET", "POST"], "paths": ["/hearings/<case_id>", "/hearings/<case_id>/outcome"]}}
{"file": "cloned/tribunals-case-api/src/main/java/uk/gov/hmcts/reform/sscs/ccd/presubmit/deathofappellant/DeathOfAppellantAboutToSubmitHandler.java", "endpoints": {"api_summary": "This API handles the death of an appellant in the SSCS system, including setting the interloc review state and cancelling hearings.", "methods": ["POST"], "paths": ["/death-of-appellant"]}}
{"file": "cloned/tribunals-case-api/src/main/java/uk/gov/hmcts/reform/sscs/ccd/presubmit/processaudiovideo/ProcessAudioVideoEvidenceMidEventHandler.java", "endpoints": {"api_summary": "This API processes audio and video evidence for a case in the SSCS system.", "methods": ["GET", "POST"], "paths": ["/processAudioVideo"]}}
{"file": "cloned/tribunals-case-api/src/main/java/uk/gov/hmcts/reform/sscs/ccd/presubmit/issuegenericletter/IssueGenericLetterMidEventValidationHandler.java", "endpoints": {"api_summary": "This API is used to validate the addresses of parties involved in a case, including the appellant, appointee, joint party, representative, and other parties. It checks if the addresses are empty and returns errors if they are.", "methods": ["GET", "POST"], "paths": ["/validateAddresses"]}}
{"file": "cloned/tribunals-case-api/src/main/java/uk/gov/hmcts/reform/sscs/ccd/presubmit/uploaddocuments/UploadDocumentFurtherEvidenceMidEventHandler.java", "endpoints": {"api_summary": "This API allows users to upload further evidence documents for a case in the SSCS system.", "methods": ["POST"], "paths": ["/uploadDocumentFurtherEvidence"]}}
{"file": "cloned/tribunals-case-api/src/main/java/uk/gov/hmcts/reform/sscs/ccd/presubmit/voidcase/VoidCaseAboutToSubmitHandler.java", "endpoints": {"api_summary": "This API handles the voiding of cases in the SSCS system. It cancels hearings and clears postponement transient fields, PO details, and direction due dates.", "methods": ["GET", "POST"], "paths": ["/void-case", "/admin-send-to-void-state"]}}
{"file": "cloned/tribunals-case-api/src/main/java/uk/gov/hmcts/reform/sscs/ccd/presubmit/createcase/CreateCaseMidEventHandler.java", "endpoints": {"api_summary": "This API is used to handle callbacks for the SSCS case data. It can handle mid-event callbacks for various events such as valid appeal created, non-compliant, incomplete application received, and case updated. It also validates the IBCA reference and address for the appellant and representative.", "methods": ["GET", "POST"], "paths": ["/sscs/ccd/presubmit/createcase"]}}
{"file": "cloned/tribunals-case-api/src/main/java/uk/gov/hmcts/reform/sscs/ccd/presubmit/createcase/CreateCaseAboutToSubmitHandler.java", "endpoints": {"api_summary": "This API handles the creation of a new case in the SSCS system, including generating a PDF document for the case.", "methods": ["POST"], "paths": ["/create-case"]}}
{"file": "cloned/tribunals-case-api/src/main/java/uk/gov/hmcts/reform/sscs/ccd/presubmit/uploadhearingrecording/UploadHearingRecordingAboutToStartHandler.java", "endpoints": {"api_summary": "This API allows for the uploading of hearing recordings for SSCS cases. It provides a way to select a hearing and upload the recording, as well as a way to view the uploaded recordings.", "methods": ["GET", "POST"], "paths": ["/sscs/ccd/presubmit/uploadhearingrecording"]}}
{"file": "cloned/tribunals-case-api/src/main/java/uk/gov/hmcts/reform/sscs/ccd/presubmit/caseupdated/CaseUpdatedSubmittedHandler.java", "endpoints": {"api_summary": "This API handles the case updated event for SSCS cases, specifically for joint parties. It checks if the case is a new joint party and triggers the JOINT_PARTY_ADDED event if necessary.", "methods": ["POST"], "paths": ["/case-updated"]}}
{"file": "cloned/tribunals-case-api/src/main/java/uk/gov/hmcts/reform/sscs/ccd/presubmit/furtherevidence/reissuefurtherevidence/ReissueFurtherEvidenceAboutToStartHandler.java", "endpoints": {"api_summary": "This API reissues further evidence for an appeal in the SSCS (Social Security and Child Support) system. It allows users to select the evidence documents to reissue and provides options for confidential cases.", "methods": ["GET", "POST"], "paths": ["/reissueFurtherEvidence"]}}
{"file": "cloned/tribunals-case-api/src/main/java/uk/gov/hmcts/reform/sscs/ccd/presubmit/tribunalcommunication/TribunalCommunicationAboutToSubmitHandler.java", "endpoints": {"api_summary": "This API handles communication requests and replies for the Tribunal Communication feature in the SSCS system.", "methods": ["GET", "POST"], "paths": ["/tribunal-communication"]}}
{"file": "cloned/tribunals-case-api/src/main/java/uk/gov/hmcts/reform/sscs/ccd/presubmit/tribunalcommunication/TribunalCommunicationMidEventHandler.java", "endpoints": {"api_summary": "This API allows for the management of tribunal communications, including the ability to send requests and replies, and to review replies.", "methods": ["GET", "POST"], "paths": ["/tribunal-communications", "/tribunal-communications/<communication_id>", "/tribunal-communications/<communication_id>/replies"]}}
{"file": "cloned/tribunals-case-api/src/main/java/uk/gov/hmcts/reform/sscs/ccd/presubmit/decisionissued/DecisionIssuedAboutToSubmitHandler.java", "endpoints": {"api_summary": "This API handles the decision issued event for SSCS cases, including the creation of a decision notice document and the update of the case data.", "methods": ["POST"], "paths": ["/sscs/ccd/decision-issued"]}}
{"file": "cloned/tribunals-case-api/src/main/java/uk/gov/hmcts/reform/sscs/ccd/presubmit/editbundle/EditBundleAboutToSubmitHandler.java", "endpoints": {"api_summary": "This API allows for the editing of a bundle in a case, including the ability to stitch a new PDF document with the updated bundle.", "methods": ["POST"], "paths": ["/api/stitch-ccd-bundles"]}}
{"file": "cloned/tribunals-case-api/src/main/java/uk/gov/hmcts/reform/sscs/ccd/presubmit/resendtogaps/ResendToGapsAboutToSubmitHandler.java", "endpoints": {"api_summary": "This API handles the resending of cases to GAPS2 for SSCS cases. It validates the case data and sends a ListAssist cancellation message if necessary.", "methods": ["POST"], "paths": ["/sscs/ccd/presubmit/resendtogaps"]}}
{"file": "cloned/tribunals-case-api/src/main/java/uk/gov/hmcts/reform/sscs/ccd/presubmit/updateotherparty/UpdateOtherPartyAboutToSubmitHandler.java", "endpoints": {"api_summary": "This API handles the update of other party data for SSCS cases. It validates the hearing options and exclude dates for other parties, and updates the hearing type to Oral if at least one of the parties wants to attend the hearing.", "methods": ["POST"], "paths": ["/updateOtherPartyData"]}}
{"file": "cloned/tribunals-case-api/src/main/java/uk/gov/hmcts/reform/sscs/ccd/presubmit/updateotherparty/UpdateOtherPartyMidEventHandler.java", "endpoints": {"api_summary": "This API is used to validate the address of other parties and their representatives in a SSCS case.", "methods": ["POST"], "paths": ["/sscs/ccd/presubmit/updateotherpartymideventhandler"]}}
{"file": "cloned/tribunals-case-api/src/main/java/uk/gov/hmcts/reform/sscs/ccd/presubmit/validsendtointerloc/ValidSendToInterlocMidEventHandler.java", "endpoints": {"api_summary": "This API handles postponement requests for SSCS cases. It validates the request and generates a PDF document for the request if it is valid.", "methods": ["POST"], "paths": ["/sscs/postponement-requests"]}}
{"file": "cloned/tribunals-case-api/src/main/java/uk/gov/hmcts/reform/sscs/ccd/presubmit/actionpostponementrequest/ActionPostponementRequestSubmittedCallbackHandler.java", "endpoints": {"api_summary": "This API handles postponement requests for SSCS cases. It allows users to send postponement requests to judges, refuse postponement requests, and grant postponement requests.", "methods": ["POST"], "paths": ["/sscs/ccd/presubmit/actionPostponementRequestSubmitted"]}}
{"file": "cloned/tribunals-case-api/src/main/java/uk/gov/hmcts/reform/sscs/ccd/presubmit/dwpuploadresponse/DwpUploadResponseMidEventHandler.java", "endpoints": {"api_summary": "This API handles the DWP upload response event for SSCS cases. It validates the benefit issue code, postponement requests, and other party details for SSCS2 cases. It also checks if the benefit code is valid for the given benefit type.", "methods": ["POST"], "paths": ["/sscs/ccd/presubmit/dwpUploadResponse"]}}
{"file": "cloned/tribunals-case-api/src/main/java/uk/gov/hmcts/reform/sscs/ccd/presubmit/sendtofirsttier/SendToFirstTierAboutToSubmitHandler.java", "endpoints": {"api_summary": "This API handles the sending of cases to the first tier after a hearing, and allows for the creation of decision documents for remitted, refused, and remitted cases.", "methods": ["POST"], "paths": ["/send-to-first-tier"]}}
{"file": "cloned/tribunals-case-api/src/main/java/uk/gov/hmcts/reform/sscs/ccd/presubmit/updatelistingrequirements/UpdateListingRequirementsAboutToStartHandler.java", "endpoints": {"api_summary": "This API handles the update listing requirements event for a case in the SSCS system. It allows for the override of certain fields, such as the hearing interpreter language, and sets the default panel composition if enabled.", "methods": ["POST"], "paths": ["/update-listing-requirements"]}}
{"file": "cloned/tribunals-case-api/src/main/java/uk/gov/hmcts/reform/sscs/ccd/presubmit/posthearingrequest/PostHearingRequestAboutToSubmitHandler.java", "endpoints": {"api_summary": "This API handles post-hearing requests for the SSCS (Social Security and Child Support) system. It allows for the submission of post-hearing requests, including uploading documents and clearing format and content fields.", "methods": ["POST"], "paths": ["/post-hearing-request"]}}
{"file": "cloned/tribunals-case-api/src/main/java/uk/gov/hmcts/reform/sscs/ccd/presubmit/createbundle/CreateBundleAboutToStartEventHandler.java", "endpoints": {"api_summary": "The CreateBundleAboutToStartEventHandler class handles the Create Bundle event for SSCS cases. It checks if the mandatory FTA documents are missing and returns a response with an error or warning message if they are. It also moves the FTA documents to the DWP document collection if they are stored in the old pattern.", "methods": ["GET", "POST"], "paths": ["/api/new-bundle"]}}
{"file": "cloned/tribunals-case-api/src/main/java/uk/gov/hmcts/reform/sscs/ccd/presubmit/createbundle/WorkAllocationHandler.java", "endpoints": {"api_summary": "This API handles work allocation for the SSCS (Social Security and Child Support) case management system. It allows for the assignment of case roles to users and the retrieval of user roles for a given case.", "methods": ["GET", "POST"], "paths": ["/work-allocation/assign-case-roles", "/work-allocation/get-user-roles"]}}
{"file": "cloned/tribunals-case-api/src/main/java/uk/gov/hmcts/reform/sscs/ccd/presubmit/posthearingreview/PostHearingReviewSubmittedHandler.java", "endpoints": {"api_summary": "This API handles post-hearing review actions for SSCS cases, including set aside, correction, statement of reasons, permission to appeal, and liberty to apply.", "methods": ["POST"], "paths": ["/post-hearing-review"]}}
{"file": "cloned/tribunals-case-api/src/main/java/uk/gov/hmcts/reform/sscs/ccd/presubmit/posthearingreview/PostHearingReviewMidEventHandler.java", "endpoints": {"api_summary": "This API handles post-hearing review for SSCS cases, allowing users to generate and verify notices for decisions issued after a hearing.", "methods": ["GET", "POST"], "paths": ["/post-hearing-review", "/post-hearing-review/<case_id>"]}}
{"file": "cloned/tribunals-case-api/src/main/java/uk/gov/hmcts/reform/sscs/ccd/presubmit/confidentialityrequest/ReviewConfidentialityRequestAboutToSubmitHandler.java", "endpoints": {"api_summary": "This API handles confidentiality requests for SSCS cases. It allows for the review of confidentiality requests and updates the case data accordingly.", "methods": ["GET", "POST"], "paths": ["/reviewConfidentialityRequest"]}}
{"file": "cloned/tribunals-case-api/src/main/java/uk/gov/hmcts/reform/sscs/ccd/presubmit/canceltranslations/CancelTranslationsSubmittedHandler.java", "endpoints": {"api_summary": "This API handles the cancellation of translations for SSCS cases. It can be used to update the case data and trigger the 'makeCaseUrgent' event or the 'reinstatementRequest' event.", "methods": ["POST"], "paths": ["/cancelTranslations"]}}
{"file": "cloned/tribunals-case-api/src/main/java/uk/gov/hmcts/reform/sscs/ccd/presubmit/dormant/DormantEventsAboutToSubmitHandler.java", "endpoints": {"api_summary": "This API handles the events related to dormant appeals in the SSCS system, including confirming lapsed appeals, sending appeals to dormant state, and cancelling hearings.", "methods": ["GET", "POST"], "paths": ["/appeals/<appeal_id>/dormant", "/appeals/<appeal_id>/confirm-lapsed", "/appeals/<appeal_id>/send-to-dormant-state", "/appeals/<appeal_id>/cancel-hearing"]}}
{"file": "cloned/tribunals-case-api/src/main/java/uk/gov/hmcts/reform/sscs/ccd/presubmit/ftacommunication/FtaCommunicationMidEventHandler.java", "endpoints": {"api_summary": "This API allows for the management of FTA (Further Time Adjustment) communications in the SSCS (Social Security and Child Support) system.", "methods": ["GET", "POST"], "paths": ["/fta-communications"]}}
{"file": "cloned/tribunals-case-api/src/main/java/uk/gov/hmcts/reform/sscs/thirdparty/documentmanagement/DocumentStoreClient.java", "endpoints": {"api_summary": "The DocumentStoreClient API provides a way to delete documents from the document management system. It takes in an authorization header, a service authorization header, a user ID, and a document ID as path parameters. The API returns a 204 status code upon successful deletion of the document.", "methods": ["DELETE"], "paths": ["/documents/{documentId}"]}}
{"file": "cloned/tribunals-case-api/src/main/java/uk/gov/hmcts/reform/sscs/controller/EvidenceUploadController.java", "endpoints": {"api_summary": "The API allows for the upload, submission, and deletion of evidence for an appeal, as well as the generation of a cover sheet for the evidence.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/continuous-online-hearings/{identifier}/evidence", "/api/continuous-online-hearings/{identifier}/evidence/{evidenceId}", "/api/continuous-online-hearings/{identifier}/singleevidence", "/api/continuous-online-hearings/{identifier}/evidence/coversheet"]}}
{"file": "cloned/tribunals-case-api/src/main/java/uk/gov/hmcts/reform/sscs/controller/ServiceHearingsController.java", "endpoints": {"api_summary": "The ServiceHearingsController defines two REST API endpoints for retrieving hearing values and linked cases for a case in the SSCS system.", "methods": ["POST"], "paths": ["/serviceHearingValues", "/serviceLinkedCases"]}}
{"file": "cloned/tribunals-case-api/src/main/java/uk/gov/hmcts/reform/sscs/controller/SubscriptionsController.java", "endpoints": {"api_summary": "This API allows for the management of email notifications for appeals in the SSCS system. It includes endpoints for validating MAC tokens, updating subscriptions, and unsubscribing from email notifications.", "methods": ["GET", "POST", "DELETE"], "paths": ["/tokens/{token}", "/appeals/{appealNumber}/subscriptions/{subscriptionId}", "/appeals/{id}/subscriptions/{subscriptionId}"]}}
{"file": "cloned/tribunals-case-api/src/main/java/uk/gov/hmcts/reform/sscs/controller/CcdCallbackOrchestratorController.java", "endpoints": {"api_summary": "The CcdCallbackOrchestratorController defines a REST API endpoint for sending callbacks to the SSCS service.", "methods": ["POST"], "paths": ["/send"]}}
{"file": "cloned/tribunals-case-api/src/main/java/uk/gov/hmcts/reform/sscs/controller/CcdCallbackController.java", "endpoints": {"api_summary": "This API handles callbacks for the SSCS (Social Security and Child Support) case management system. It provides endpoints for handling callbacks at various stages of the case lifecycle, such as before a case is started, before it is submitted, and after it is submitted.", "methods": ["POST"], "paths": ["/ccdAboutToStart", "/ccdAboutToSubmit", "/ccdMidEvent", "/ccdSubmittedEvent"]}}
{"file": "cloned/tribunals-case-api/src/main/java/uk/gov/hmcts/reform/sscs/controller/PostCodeController.java", "endpoints": {"api_summary": "The PostCodeController API provides a single endpoint for retrieving the regional centre given the appellant's full post code or out code.", "methods": ["GET"], "paths": ["/regionalcentre/{postCode}"]}}
{"file": "cloned/tribunals-case-api/src/main/java/uk/gov/hmcts/reform/sscs/controller/CitizenRequestController.java", "endpoints": {"api_summary": "The Citizen Request API allows users to request hearing recordings for a given CCD case. It provides endpoints for getting hearing recordings and submitting hearing recording requests.", "methods": ["GET", "POST"], "paths": ["/api/request/{identifier}/hearingrecording", "/api/request/{identifier}/recordingrequest"]}}
{"file": "cloned/tribunals-case-api/src/main/java/uk/gov/hmcts/reform/sscs/controller/FunctionalTestController.java", "endpoints": {"api_summary": "The FunctionalTestController API allows for sending callbacks for functional testing purposes. It accepts a JSON message with the callback details and sends it to the SendCallbackHandler for processing.", "methods": ["POST"], "paths": ["/testing-support/send"]}}
{"file": "cloned/tribunals-case-api/src/main/java/uk/gov/hmcts/reform/sscs/controller/TribunalsController.java", "endpoints": {"api_summary": "The Tribunals API provides information about the appeals process for the UK's Supreme Court and other tribunals. It allows users to retrieve information about appeals, create new appeals, and update existing appeals.", "methods": ["GET"], "paths": ["/"]}}
{"file": "cloned/tribunals-case-api/src/main/java/uk/gov/hmcts/reform/sscs/controller/CitizenController.java", "endpoints": {"api_summary": "The Citizen API provides endpoints for associating a citizen with a case, logging time against a case, and retrieving ports of entry and countries of residence.", "methods": ["GET", "POST", "PUT"], "paths": ["/api/citizen", "/api/citizen/{tya}", "/api/citizen/cases/active", "/api/citizen/cases/dormant", "/api/citizen/ports-of-entry", "/api/citizen/countries-of-residence"]}}
{"file": "cloned/tribunals-case-api/src/main/java/uk/gov/hmcts/reform/sscs/controller/EvidenceManagementController.java", "endpoints": {"api_summary": "The Evidence Management API allows for the upload of additional evidence for an appeal, which will be held in a draft state until it is submitted by a caseworker in CCD. The API also supports the conversion of files to PDF and the upload of evidence to the secure document store.", "methods": ["POST"], "paths": ["/evidence/upload"]}}
{"file": "cloned/tribunals-case-api/src/main/java/uk/gov/hmcts/reform/sscs/controller/TyaController.java", "endpoints": {"api_summary": "The TyaController API provides endpoints for retrieving appeal information and hearing outcome documents. The API allows users to retrieve appeal information by case ID and hearing outcome documents by document URL.", "methods": ["GET"], "paths": ["/appeals", "/document"]}}
{"file": "cloned/tribunals-case-api/src/main/java/uk/gov/hmcts/reform/sscs/controller/RootController.java", "endpoints": {"api_summary": "The sscs-tribunals-api provides a welcome message to the root endpoint.", "methods": ["GET"], "paths": ["/sscs-tribunals-api"]}}
{"file": "cloned/tribunals-case-api/src/main/java/uk/gov/hmcts/reform/sscs/controller/StatementController.java", "endpoints": {"api_summary": "The StatementController API allows for the uploading of personal statements for COR appeals. The API accepts a statement as a JSON object and saves it as a piece of evidence for the case in CCD as a PDF.", "methods": ["POST"], "paths": ["/api/continuous-online-hearings/{identifier}/statement"]}}
{"file": "cloned/tribunals-case-api/src/main/java/uk/gov/hmcts/reform/sscs/controller/CreateCaseController.java", "endpoints": {"api_summary": "This API creates a case in CCD with an online panel which can be used for an online hearing. The email address used must be unique for all other cases in CCD with an online panel if we want to load it for the MYA process.", "methods": ["POST"], "paths": ["/api/case", "/api/appeals"]}}
{"file": "cloned/tribunals-case-api/src/main/java/uk/gov/hmcts/reform/sscs/service/SscsPdfService.java", "endpoints": {"api_summary": "This API is responsible for generating PDF documents for SSCS cases. It provides a service to generate PDFs based on the data provided in the SscsCaseData object and the template file specified in the configuration.", "methods": ["GET", "POST"], "paths": ["/sscs/pdf/generate"]}}
{"file": "cloned/tribunals-case-api/src/main/java/uk/gov/hmcts/reform/sscs/service/HmcHearingApi.java", "endpoints": {"api_summary": "The HmcHearingApi defines endpoints for creating, updating, and retrieving hearing requests in the Hearing Management System (HMS).", "methods": ["POST", "PUT", "DELETE", "GET"], "paths": ["/hearing", "/hearings/{caseId}"]}}
{"file": "cloned/tribunals-case-api/src/main/java/uk/gov/hmcts/reform/sscs/service/PdfStoreService.java", "endpoints": {"api_summary": "The PdfStoreService provides methods for storing and retrieving PDF documents in the Document Management System (DMS).", "methods": ["POST", "GET"], "paths": ["/documents", "/documents/<document_id>"]}}
{"file": "cloned/tribunals-case-api/src/main/java/uk/gov/hmcts/reform/sscs/service/HmcHearingApiService.java", "endpoints": {"api_summary": "The HmcHearingApiService provides a set of APIs for interacting with the Hearing Management System (HMS) in the Hearing Management Centre (HMC). The APIs include getHearingRequest, sendCreateHearingRequest, sendUpdateHearingRequest, sendCancelHearingRequest, and getHearingsRequest.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/hearings/<hearingId>", "/hearings/<caseId>", "/hearings/<hmcStatus>"]}}
{"file": "cloned/tribunals-case-api/src/main/java/uk/gov/hmcts/reform/sscs/service/exceptions/FeignClientErrorDecoder.java", "endpoints": {"api_summary": "The API defined in this file is a Feign client error decoder that handles errors returned by the Hearing Service. It logs errors and sends them to AppInsights for further analysis.", "methods": ["GET", "POST", "PUT"], "paths": ["/hearing/<case_id>", "/hearings/<case_id>"]}}
{"file": "cloned/tribunals-case-api/src/contractTest/java/uk/gov/hmcts/reform/sscs/evidenceshare/SendLetterServiceConsumerTest.java", "endpoints": {"api_summary": "This API allows for sending letters through the Send Letter Service.", "methods": ["POST"], "paths": ["/letters"]}}
{"file": "cloned/tribunals-case-api/src/contractTest/java/uk/gov/hmcts/reform/sscs/evidenceshare/DocumentServiceConsumerTest.java", "endpoints": {"api_summary": "This API provides a way to download binary documents from the Document Management Store (DMS) using a document ID.", "methods": ["GET"], "paths": ["/documents/<document_id>/binary"]}}
{"file": "cloned/tribunals-case-api/src/contractTest/java/uk/gov/hmcts/reform/sscs/ccd/caseassignment/CaseAssignmentUserRolesConsumerTest.java", "endpoints": {"api_summary": "This API provides a way to retrieve user roles for a given case in the SSCS Tribunals API.", "methods": ["GET"], "paths": ["/case-users"]}}
{"file": "cloned/tribunals-case-api/src/contractTest/java/uk/gov/hmcts/reform/sscs/idam/IdamApiConsumerTest.java", "endpoints": {"api_summary": "This API defines a single endpoint for generating an OpenID token for the SSCS Tribunals API. The endpoint accepts a POST request to /o/token and returns a JSON response containing an access token and scope.", "methods": ["POST"], "paths": ["/o/token"]}}
{"file": "cloned/tribunals-case-api/src/functionalTest/java/uk/gov/hmcts/reform/sscs/functional/evidence/EvidenceDocumentUploadTest.java", "endpoints": {"api_summary": "This API allows for the upload and management of evidence documents for an appeal case in the SSCS system.", "methods": ["POST"], "paths": ["/evidence/upload", "/appeals"]}}
{"file": "cloned/tribunals-case-api/src/functionalTest/java/uk/gov/hmcts/reform/sscs/functional/postcode/PostCodeTest.java", "endpoints": {"api_summary": "The PostCode API allows users to retrieve the regional centre for a given postcode. The API returns a JSON object with the regional centre information if the postcode is valid, and a 404 Not Found error if the postcode is not found.", "methods": ["GET"], "paths": ["/regionalcentre/<postcode>"]}}
{"file": "cloned/tribunals-case-api/src/functionalTest/java/uk/gov/hmcts/reform/sscs/functional/handlers/writefinaldecision/WriteFinalDecisionAboutToSubmitHandlerTest.java", "endpoints": {"api_summary": "This API defines a single endpoint for handling the /ccdAboutToSubmit callback for the SSCS functional handler.", "methods": ["POST"], "paths": ["/ccdAboutToSubmit"]}}
{"file": "cloned/tribunals-case-api/src/functionalTest/java/uk/gov/hmcts/reform/sscs/functional/handlers/processaudiovideo/ProcessAudioVideoEvidenceAboutToSubmitHandlerFunctionalTest.java", "endpoints": {"api_summary": "This API handles the processing of audio and video evidence for the SSCS (Social Security and Child Support) system. It allows for the submission of audio and video evidence, and provides endpoints for retrieving and updating the status of the evidence.", "methods": ["POST"], "paths": ["/ccdAboutToSubmit"]}}
{"file": "cloned/tribunals-case-api/src/functionalTest/java/uk/gov/hmcts/reform/sscs/functional/handlers/updatewelshpreference/UpdateWelshPreferenceAboutToSubmitHandlerFunctionalTest.java", "endpoints": {"api_summary": "This API defines a single endpoint for updating the Welsh preference for a case in the SSCS (Social Security and Child Support) system. The endpoint accepts a JSON payload containing the case details and returns a JSON response with the updated case details.", "methods": ["POST"], "paths": ["/ccdAboutToSubmit"]}}
{"file": "cloned/tribunals-case-api/src/functionalTest/java/uk/gov/hmcts/reform/sscs/functional/handlers/uploaddocument/UploadDocumentFurtherEvidenceHandlerTest.java", "endpoints": {"api_summary": "The API allows for the uploading of documents for further evidence in the SSCS (Social Security and Child Support) system. It accepts a JSON payload with the document details and returns a response with the uploaded document information.", "methods": ["POST"], "paths": ["/ccdAboutToSubmit"]}}
{"file": "cloned/tribunals-case-api/src/functionalTest/java/uk/gov/hmcts/reform/sscs/functional/handlers/actionposteponementrequest/ActionPostponementRequestAboutToStartCallbackHandlerTest.java", "endpoints": {"api_summary": "The API defined in this file is a RESTful API that handles the action postponement request for the SSCS (Social Security and Child Support) system. It has a single endpoint that is triggered by a POST request to the /ccdAboutToStart path, and it clears the actionPostponementRequestSelected field in the request body.", "methods": ["POST"], "paths": ["/ccdAboutToStart"]}}
{"file": "cloned/tribunals-case-api/src/functionalTest/java/uk/gov/hmcts/reform/sscs/functional/mya/SscsMyaBackendRequests.java", "endpoints": {"api_summary": "This API provides endpoints for managing online hearings, including creating and updating hearings, uploading evidence, and retrieving hearing information.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/citizen", "/api/citizen/<built-in function id>", "/api/case", "/api/continuous-online-hearings/<hearingId>/evidence", "/api/continuous-online-hearings/<hearingId>/singleevidence", "/api/continuous-online-hearings/<hearingId>/evidence/coversheet", "/appeals/<appellantTya>/subscriptions/<appellantTya>"]}}
{"file": "cloned/tribunals-case-api/src/functionalTest/java/uk/gov/hmcts/reform/sscs/functional/tyanotifications/sya/notifications/OtherPartyFunctionalTest.java", "endpoints": {"api_summary": "This API sends notifications to other parties in the SSCS system, such as when a hearing is adjourned or an appeal is withdrawn.", "methods": ["POST"], "paths": ["/tyanotifications/otherparty/oral-<event_type>"]}}
{"file": "cloned/tribunals-case-api/src/functionalTest/java/uk/gov/hmcts/reform/sscs/functional/tyanotifications/sya/notifications/WithRepresentativePersonalisationTest.java", "endpoints": {"api_summary": "This API is responsible for sending notifications to representatives of appellants in the SSCS system. It supports various notification event types, such as appeal lapsed, appeal withdrawn, appeal created, appeal dormant, hearing adjourned, appeal received, and valid appeal created. The API also supports sending notifications to representatives of appellants who have postponed their hearings.", "methods": ["POST"], "paths": ["/notifications/representative/appealLapsed", "/notifications/representative/appealWithdrawn", "/notifications/representative/appealCreated", "/notifications/representative/appealDormant", "/notifications/representative/hearingAdjourned", "/notifications/representative/appealReceived", "/notifications/representative/hearingPostponed", "/notifications/representative/validAppealCreated"]}}
{"file": "cloned/tribunals-case-api/src/functionalTest/java/uk/gov/hmcts/reform/sscs/functional/ccd/CcdMidEventControllerFunctionalTest.java", "endpoints": {"api_summary": "This API is a functional test for the CCD MidEventController. It tests various scenarios such as unauthorized requests, valid requests, and error handling.", "methods": ["GET", "POST"], "paths": ["/ccdMidEvent"]}}
{"file": "cloned/tribunals-case-api/src/IntegrationTests/java/uk/gov/hmcts/reform/sscs/tyanotifications/tya/ReminderTestController.java", "endpoints": {"api_summary": "This API endpoint simulates the response that is received when the reminder service executes. It takes a service authorization header and a JSON message as input, and returns a 200 OK response with a JSON body containing the case details and the notification event type.", "methods": ["POST"], "paths": ["/reminder"]}}
{"file": "cloned/tribunals-case-api/src/IntegrationTests/java/uk/gov/hmcts/reform/sscs/tyanotifications/service/NotificationServiceForSubscriptionUpdatedTest.java", "endpoints": {"api_summary": "This API allows users to manage their subscriptions and receive notifications for updates.", "methods": ["GET", "POST"], "paths": ["/subscriptions", "/subscriptions/<subscription_id>"]}}
{"file": "cloned/tribunals-case-api/src/IntegrationTests/java/uk/gov/hmcts/reform/sscs/callback/DecisionIssuedIt.java", "endpoints": {"api_summary": "This API defines endpoints for handling decision issued events in the SSCS system.", "methods": ["GET", "POST"], "paths": ["/ccdMidEvent", "/ccdAboutToSubmit"]}}
{"file": "cloned/tribunals-case-api/src/IntegrationTests/java/uk/gov/hmcts/reform/sscs/callback/HmctsResponseReviewedIt.java", "endpoints": {"api_summary": "This API is a Spring Boot application that handles callbacks from the Court Case Data (CCD) system. It has endpoints for handling the 'about to start', 'about to submit', and 'submitted' events for the 'hmctsResponseReviewed' callback. The endpoints return a JSON object with the updated case data and any errors that occurred during the callback.", "methods": ["GET", "POST"], "paths": ["/ccdAboutToStart", "/ccdAboutToSubmit", "/ccdSubmittedEvent"]}}
{"file": "cloned/tribunals-case-api/src/IntegrationTests/java/uk/gov/hmcts/reform/sscs/callback/CreateWelshNoticeIt.java", "endpoints": {"api_summary": "This API defines endpoints for creating and managing Welsh notices in the SSCS system.", "methods": ["GET", "POST"], "paths": ["/ccdAboutToStart", "/ccdAboutToSubmit", "/ccdSubmittedEvent"]}}
{"file": "cloned/tribunals-case-api/src/IntegrationTests/java/uk/gov/hmcts/reform/sscs/callback/EditBundleIt.java", "endpoints": {"api_summary": "This API defines a callback endpoint for the SSCS (Social Security and Child Support) system. The endpoint is used to handle requests to edit a bundle, which is a collection of documents related to a case. The endpoint accepts a JSON payload containing the case data and returns a JSON response with the updated case data.", "methods": ["POST"], "paths": ["/api/stitch-ccd-bundles"]}}
{"file": "cloned/tribunals-case-api/src/IntegrationTests/java/uk/gov/hmcts/reform/sscs/callback/AdminSendToInterlocIt.java", "endpoints": {"api_summary": "This API is used to send a case to interlocutory review, allowing the user to select who reviews the case. It also allows the user to select the reason for the postponement request.", "methods": ["GET", "POST"], "paths": ["/ccdAboutToStart", "/ccdAboutToSubmit"]}}
{"file": "cloned/tribunals-case-api/src/IntegrationTests/java/uk/gov/hmcts/reform/sscs/callback/CancelTranslationIt.java", "endpoints": {"api_summary": "This API is used to handle the cancellation of document translations for SSCS cases. It has endpoints for starting and submitting events, as well as for retrieving case data.", "methods": ["GET", "POST"], "paths": ["/ccdAboutToStart", "/ccdAboutToSubmit", "/ccdSubmittedEvent"]}}
{"file": "cloned/tribunals-case-api/src/IntegrationTests/java/uk/gov/hmcts/reform/sscs/callback/UploadWelshDocumentsIt.java", "endpoints": {"api_summary": "This API is used to handle the upload of Welsh documents for SSCS cases. It has endpoints for starting and submitting the upload process, as well as for cancelling the translation of a document.", "methods": ["GET", "POST"], "paths": ["/ccdAboutToStart", "/ccdAboutToSubmit", "/ccdSubmittedEvent"]}}
{"file": "cloned/tribunals-case-api/src/IntegrationTests/java/uk/gov/hmcts/reform/sscs/callback/DirectionIssuedIt.java", "endpoints": {"api_summary": "This API defines endpoints for handling direction issued events in the SSCS system.", "methods": ["GET", "POST"], "paths": ["/ccdMidEvent", "/ccdAboutToSubmit"]}}
{"file": "cloned/tribunals-case-api/src/IntegrationTests/java/uk/gov/hmcts/reform/sscs/callback/IssueFinalDecisionIt.java", "endpoints": {"api_summary": "This API is used to generate and upload final decision notices for SSCS cases. It allows for the upload of a final decision notice in PDF format, and can also generate the notice automatically based on the case data.", "methods": ["POST"], "paths": ["/ccdAboutToSubmit"]}}
{"file": "cloned/tribunals-case-api/src/IntegrationTests/java/uk/gov/hmcts/reform/sscs/controller/SyaControllerTest.java", "endpoints": {"api_summary": "This API is a test suite for the SyaController, which defines a REST API for creating and retrieving drafts for the SSCS (Social Security and Child Support) service. The API allows users to create, retrieve, and update drafts, as well as retrieve a list of all drafts for a given user.", "methods": ["POST", "GET"], "paths": ["/drafts", "/drafts/<draftId>"]}}
{"file": "cloned/tribunals-case-api/src/IntegrationTests/java/uk/gov/hmcts/reform/sscs/controller/CitizenRequestControllerIt.java", "endpoints": {"api_summary": "This API allows users to request hearing recordings for a specific case. It also allows users to retrieve the hearing recordings for a specific case.", "methods": ["GET", "POST"], "paths": ["/api/request/<case_id>/hearingrecording", "/api/request/<case_id>/recordingrequest"]}}
{"file": "cloned/tribunals-case-api/src/IntegrationTests/java/uk/gov/hmcts/reform/sscs/tya/TyaEndpointsIt.java", "endpoints": {"api_summary": "This API provides endpoints for retrieving appeals and documents from the SSCS system.", "methods": ["GET"], "paths": ["/appeals", "/document"]}}
{"file": "cloned/tribunals-case-api/src/test/java/uk/gov/hmcts/reform/sscs/bulkscan/controllers/TransformationControllerTest.java", "endpoints": {"api_summary": "The TransformationController API is responsible for handling requests to transform exception records and scanned data. It uses the CcdCallbackHandler to handle the transformation and returns a SuccessfulTransformationResponse if successful, or an error response if the transformation failed.", "methods": ["POST"], "paths": ["/transform-exception-record", "/transform-scanned-data"]}}
{"file": "cloned/tribunals-case-api/src/test/java/uk/gov/hmcts/reform/sscs/ccd/presubmit/amendhearingoutcome/AmendHearingOutcomeAboutToStartHandlerTest.java", "endpoints": {"api_summary": "This API allows for the amendment of hearing outcomes for SSCS cases. It retrieves hearing outcomes from the HMC hearing API and allows for the selection of a hearing outcome to be amended. The API also allows for the creation of a new hearing outcome if the existing ones do not meet the requirements.", "methods": ["GET", "POST"], "paths": ["/amend-hearing-outcome"]}}
{"file": "cloned/tribunals-case-api/src/test/java/uk/gov/hmcts/reform/sscs/ccd/presubmit/actionpostponementrequest/ActionPostponementRequestMidEventHandlerTest.java", "endpoints": {"api_summary": "This API handles postponement requests for SSCS cases. It generates a directions notice and populates the preview document field in the case data.", "methods": ["POST"], "paths": ["/sscs/ccd/action-postponement-request"]}}
{"file": "cloned/tribunals-case-api/src/test/java/uk/gov/hmcts/reform/sscs/ccd/presubmit/dwpuploadresponse/DwpUploadResponseMidEventHandlerTest.java", "endpoints": {"api_summary": "This API handles the DWP upload response mid-event for SSCS cases. It validates the request and updates the case data with the uploaded response and evidence documents.", "methods": ["POST"], "paths": ["/ccdMidEvent"]}}
{"file": "cloned/tribunals-case-api/src/test/java/uk/gov/hmcts/reform/sscs/ccd/presubmit/posthearingrequest/PostHearingRequestSubmittedHandlerTest.java", "endpoints": {"api_summary": "This API handles post-hearing requests for SSCS cases. It allows users to submit post-hearing requests and handles the associated business logic.", "methods": ["POST"], "paths": ["/post-hearing-requests"]}}
{"file": "cloned/tribunals-case-api/src/test/java/uk/gov/hmcts/reform/sscs/controller/SubscriptionsControllerTest.java", "endpoints": {"api_summary": "This API allows users to validate MAC tokens, unsubscribe from notifications, and update subscriptions for a given appeal number.", "methods": ["GET", "POST"], "paths": ["/tokens/token123", "/unsubscribe/appealId", "/updateSubscription/appealId"]}}
{"file": "cloned/tribunals-case-api/src/test/java/uk/gov/hmcts/reform/sscs/controller/EvidenceUploadControllerTest.java", "endpoints": {"api_summary": "This API allows for the upload, submission, and deletion of evidence for a hearing in the SSCS system.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/evidence/upload", "/evidence/submit", "/evidence/delete"]}}
{"file": "cloned/tribunals-case-api/src/test/java/uk/gov/hmcts/reform/sscs/controller/CitizenControllerTest.java", "endpoints": {"api_summary": "The API allows users to retrieve and manipulate online hearing information, including associating users with cases and logging user activity.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/onlineHearings", "/activeOnlineHearings", "/dormantOnlineHearings", "/associateUserWithCase", "/logUserWithCase"]}}
{"file": "cloned/rasa-sdk/rasa_sdk/endpoint.py", "endpoints": {"api_summary": "This API provides a health check endpoint and a webhook endpoint for action execution.", "methods": ["GET", "POST"], "paths": ["/health", "/webhook"]}}
{"file": "cloned/rasa-sdk/tests/test_endpoint.py", "endpoints": {"api_summary": "This API provides a webhook endpoint for handling custom actions and a health check endpoint for monitoring the server's status.", "methods": ["GET", "POST"], "paths": ["/health", "/webhook"]}}
{"file": "cloned/clocal-azure/example/azure-cosmosdb/app.js", "endpoints": {"api_summary": "The Todo App API allows users to create, read, update, and delete tasks. The API also provides a list of all tasks and the ability to mark tasks as completed.", "methods": ["GET", "POST"], "paths": ["/", "/addtask", "/completetask"]}}
{"file": "cloned/clocal-azure/example/azure-cosmosdb/routes/users.js", "endpoints": {"api_summary": "This API provides a listing of users and allows for the retrieval of a specific user by ID.", "methods": ["GET"], "paths": ["/users", "/users/<built-in function id>"]}}
{"file": "cloned/clocal-azure/example/azure-cosmosdb/routes/index.js", "endpoints": {"api_summary": "This API provides a single endpoint for retrieving the home page of an Express application.", "methods": ["GET"], "paths": ["/"]}}
{"file": "cloned/clocal-azure/example/azure-functions/function-sample/HttpTriggerJS/index.js", "endpoints": {"api_summary": "This API endpoint is a simple HTTP trigger function that responds to GET requests and returns a greeting message with the name passed in the query string or request body.", "methods": ["GET"], "paths": ["/users"]}}
{"file": "cloned/clocal-azure/example/azure-api-app-service/handlers/contacts.js", "endpoints": {"api_summary": "This API provides a single endpoint for retrieving a list of contacts.", "methods": ["GET"], "paths": ["/contacts"]}}
{"file": "cloned/clocal-azure/example/azure-api-app-service/handlers/contacts/{id}.js", "endpoints": {"api_summary": "This API provides a single endpoint for retrieving a contact by ID. The endpoint is accessible via the HTTP GET method and requires a valid ID parameter in the request URL.", "methods": ["GET"], "paths": ["/contacts/<built-in function id>"]}}
{"file": "cloned/clocal-azure/src/.temp/azure-storage-v1.js", "endpoints": {"api_summary": "This API provides a simple file upload service using Azure Storage. It allows users to upload files to a specified directory and provides a redirect to the uploaded file's URL.", "methods": ["GET", "POST"], "paths": ["/", "/upload"]}}
{"file": "cloned/clocal-azure/src/.temp/old/index.js", "endpoints": {"api_summary": "This API endpoint greets the user with a personalized message based on the name provided in the query string or request body.", "methods": ["GET"], "paths": ["/users/<built-in function id>"]}}
{"file": "cloned/clocal-azure/src/.temp/old/function/index.js", "endpoints": {"api_summary": "This API endpoint returns a greeting message with the name passed in the query string or request body.", "methods": ["GET"], "paths": ["/users/<built-in function id>"]}}
{"file": "cloned/clocal-azure/src/services/azure-api-app-service/Image/ContactList/server.js", "endpoints": {"api_summary": "This API provides a simple RESTful interface for managing users and their associated data. It includes endpoints for creating, reading, updating, and deleting users, as well as endpoints for retrieving and updating user data.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users", "/users/<built-in function id>", "/users/<built-in function id>/data"]}}
{"file": "cloned/clocal-azure/src/services/azure-api-app-service/Image/ContactList/tests/test_contacts_{id}.js", "endpoints": {"api_summary": "This API allows users to retrieve and manipulate contact information. It includes endpoints for retrieving a list of contacts, retrieving a single contact by ID, creating a new contact, updating an existing contact, and deleting a contact.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/contacts", "/contacts/{id}"]}}
{"file": "cloned/clocal-azure/src/services/azure-api-app-service/Image/ContactList/tests/test_contacts.js", "endpoints": {"api_summary": "This API provides a list of contacts, with the ability to retrieve, create, update, and delete individual contacts. It also includes a search function to find specific contacts by name or email.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/contacts", "/contacts/<id>", "/search"]}}
{"file": "cloned/clocal-azure/src/services/azure-api-app-service/Image/ContactList/handlers/contacts.js", "endpoints": {"api_summary": "This API provides a single endpoint for retrieving a list of contacts.", "methods": ["GET"], "paths": ["/contacts"]}}
{"file": "cloned/clocal-azure/src/services/azure-api-app-service/Image/ContactList/handlers/contacts/{id}.js", "endpoints": {"api_summary": "This API provides a single endpoint for retrieving a contact by ID. The endpoint is accessible via the HTTP GET method and requires a valid ID parameter in the request URL.", "methods": ["GET"], "paths": ["/contacts/<built-in function id>"]}}
{"file": "cloned/pravega/standalone/src/main/java/io/pravega/local/LocalPravegaEmulator.java", "endpoints": {"api_summary": "This API is a local Pravega emulator that runs a single node Pravega cluster on the local machine. It includes a Zookeeper, Controller, and Segment Store, and optionally a REST server and an Admin Gateway. The API allows users to start and stop the cluster, and provides configuration options for the cluster.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/", "/controller", "/segmentstore", "/restserver", "/admin"]}}
{"file": "cloned/pravega/standalone/src/test/java/io/pravega/local/PravegaEmulatorResource.java", "endpoints": {"api_summary": "This API is a resource for managing a Pravega emulator, which is a local instance of the Pravega distributed storage system. It includes endpoints for starting and stopping the emulator, as well as for creating and managing streams and scopes within the emulator.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/", "/streams", "/scopes"]}}
{"file": "cloned/pravega/client/src/main/java/io/pravega/client/byteStream/impl/ByteStreamClientImpl.java", "endpoints": {"api_summary": "The ByteStreamClientImpl class provides a factory for creating ByteStreamReader and ByteStreamWriter objects for reading and writing bytes to a Pravega stream.", "methods": ["GET", "POST"], "paths": ["/byteStream/read", "/byteStream/write"]}}
{"file": "cloned/pravega/client/src/main/java/io/pravega/client/segment/impl/ConditionalOutputStreamImpl.java", "endpoints": {"api_summary": "This file defines a ConditionalOutputStreamImpl class that implements the ConditionalOutputStream interface. It provides a way to write data to a segment in a Pravega stream in a conditional manner, meaning that the data is only written if the expected offset matches the current offset of the segment.", "methods": ["GET", "POST"], "paths": ["/segment/{segmentId}/conditional_write"]}}
{"file": "cloned/pravega/client/src/main/java/io/pravega/client/stream/impl/Pinger.java", "endpoints": {"api_summary": "The Pinger class is used to send pings to renew the transaction lease for active transactions. It invokes the pingTransaction() method on the controller to renew the lease of active transactions.", "methods": ["GET", "POST"], "paths": ["/pingTransactions"]}}
{"file": "cloned/pravega/client/src/main/java/io/pravega/client/stream/impl/CheckpointImpl.java", "endpoints": {"api_summary": "The Checkpoint API allows clients to create, update, and retrieve checkpoints for a Pravega stream. Checkpoints are used to record the position of a reader in a stream, so that the reader can resume reading from the same position later.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/checkpoints", "/checkpoints/<checkpoint_name>", "/checkpoints/<checkpoint_name>/positions"]}}
{"file": "cloned/pravega/client/src/main/java/io/pravega/client/admin/impl/StreamCutHelper.java", "endpoints": {"api_summary": "The StreamCutHelper class provides methods to obtain the current HEAD and TAIL StreamCuts for a given Stream.", "methods": ["GET", "POST"], "paths": ["/streams/<stream_name>/head", "/streams/<stream_name>/tail"]}}
{"file": "cloned/pravega/client/src/main/java/io/pravega/client/admin/impl/KeyValueTableManagerImpl.java", "endpoints": {"api_summary": "The KeyValueTableManagerImpl class provides an implementation of the KeyValueTableManager interface, which is used to bootstrap the client. It defines methods for creating, deleting, and listing key-value tables in a Pravega scope.", "methods": ["GET", "POST"], "paths": ["/scopes/<scope_name>/key-value-tables", "/scopes/<scope_name>/key-value-tables/<key-value-table_name>"]}}
{"file": "cloned/pravega/client/src/test/java/io/pravega/client/byteStream/ByteStreamWriterTest.java", "endpoints": {"api_summary": "This file defines a ByteStreamWriter and ByteStreamReader for reading and writing bytes to a Pravega stream.", "methods": ["write", "closeAndSeal", "truncateDataBefore"], "paths": ["/stream"]}}
{"file": "cloned/pravega/client/src/test/java/io/pravega/client/stream/mock/MockConnectionFactoryImpl.java", "endpoints": {"api_summary": "The MockConnectionFactoryImpl class provides a mock implementation of the ConnectionFactory and ConnectionPool interfaces for testing purposes. It allows for the creation of mock ClientConnection objects and the simulation of network communication.", "methods": ["GET", "POST"], "paths": ["/users", "/users/<built-in function id>"]}}
{"file": "cloned/pravega/client/src/test/java/io/pravega/client/state/examples/SetSynchronizer.java", "endpoints": {"api_summary": "This API is a set synchronizer that coordinates the values in a set. It allows for adding, removing, and clearing items in the set.", "methods": ["GET", "POST", "DELETE"], "paths": ["/set/<set_name>", "/set/<set_name>/<item_id>"]}}
{"file": "cloned/pravega/segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/handler/AdminRequestProcessorImpl.java", "endpoints": {"api_summary": "AdminRequestProcessorImpl is a request processor for admin commands issued from Admin CLI. It allows administrators to perform arbitrary operations against Segments for debug and/or recovery purposes.", "methods": ["hello", "keepAlive", "flushToStorage", "listStorageChunks"], "paths": ["/admin/hello", "/admin/keepAlive", "/admin/flushToStorage", "/admin/listStorageChunks"]}}
{"file": "cloned/pravega/segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/handler/AdminConnectionListener.java", "endpoints": {"api_summary": "The AdminConnectionListener class manages connections from Admin CLI clients sending debug and/or repair commands.", "methods": ["GET", "POST"], "paths": ["/admin/connection/listener"]}}
{"file": "cloned/pravega/segmentstore/server/host/src/test/java/io/pravega/segmentstore/server/host/PrometheusTest.java", "endpoints": {"api_summary": "This API provides a Prometheus metrics endpoint for the Pravega Segment Store service.", "methods": ["GET"], "paths": ["/prometheus"]}}
{"file": "cloned/pravega/segmentstore/server/src/main/java/io/pravega/segmentstore/server/logs/operations/MergeSegmentOperation.java", "endpoints": {"api_summary": "The MergeSegmentOperation class represents a log operation that indicates a segment is to be merged into another segment.", "methods": ["GET", "POST"], "paths": ["/mergeSegment"]}}
{"file": "cloned/pravega/segmentstore/server/src/main/java/io/pravega/segmentstore/server/logs/operations/StreamSegmentMapOperation.java", "endpoints": {"api_summary": "The StreamSegmentMapOperation class represents a mapping of StreamSegment Name to a StreamSegment Id. It provides information about the StreamSegment, such as its Id, Name, StartOffset, Length, Sealed status, and Attributes.", "methods": ["GET", "POST"], "paths": ["/streamSegmentMap"]}}
{"file": "cloned/pravega/segmentstore/server/src/main/java/io/pravega/segmentstore/server/logs/operations/UpdateAttributesOperation.java", "endpoints": {"api_summary": "UpdateAttributesOperation is a Log Operation that represents an Update to a Segment's Attribute collection.", "methods": ["GET", "POST"], "paths": ["/UpdateAttributesOperation"]}}
{"file": "cloned/pravega/segmentstore/server/src/main/java/io/pravega/segmentstore/server/reading/AsyncReadResultProcessor.java", "endpoints": {"api_summary": "The AsyncReadResultProcessor class is a processor for ReadResult objects. It attaches to a ReadResult and executes a callback using an Executor for each ReadResultEntry returned by the result. This class is suitable for handling long-poll reads, as it does not hog any threads while waiting for such future reads to become available. It only uses (a thread from) the Executor when the data for a read becomes available, at which point it executes the handler on such a thread.", "methods": ["GET", "POST"], "paths": ["/users", "/users/<built-in function id>"]}}
{"file": "cloned/pravega/segmentstore/server/src/main/java/io/pravega/segmentstore/server/store/StreamSegmentService.java", "endpoints": {"api_summary": "The StreamSegmentService class provides a unified interface for interacting with the Pravega storage tier. It is responsible for routing requests to the appropriate SegmentContainer based on the StreamSegment's name and for managing the lifecycle of StreamSegments.", "methods": ["GET", "POST", "PUT", "DELETE", "HEAD", "OPTIONS", "TRACE", "CONNECT"], "paths": ["/streamSegmentService/append", "/streamSegmentService/appendWithOffset", "/streamSegmentService/updateAttributes", "/streamSegmentService/getAttributes", "/streamSegmentService/flushToStorage", "/streamSegmentService/getExtendedChunkInfo", "/streamSegmentService/read", "/streamSegmentService/getStreamSegmentInfo", "/streamSegmentService/createStreamSegment", "/streamSegmentService/mergeStreamSegment", "/streamSegmentService/sealStreamSegment", "/streamSegmentService/deleteStreamSegment", "/streamSegmentService/truncateStreamSegment"]}}
{"file": "cloned/pravega/segmentstore/server/src/main/java/io/pravega/segmentstore/server/store/SegmentContainerCollection.java", "endpoints": {"api_summary": "This API is a base class for any wrapper that deals with multiple Segment Containers. It provides methods for routing requests to the appropriate Segment Container based on the StreamSegment name or Id.", "methods": ["GET", "POST"], "paths": ["/segmentContainer", "/segmentContainer/<containerId>"]}}
{"file": "cloned/pravega/segmentstore/server/src/main/java/io/pravega/segmentstore/server/tables/TableEntryDeltaIterator.java", "endpoints": {"api_summary": "The TableEntryDeltaIterator class provides an iterator over a DirectSegmentAccess, deserializing TableEntry from a BufferView in linear fashion.", "methods": ["GET", "POST"], "paths": ["/io.pravega.segmentstore.server.tables.TableEntryDeltaIterator"]}}
{"file": "cloned/pravega/segmentstore/server/src/main/java/io/pravega/segmentstore/server/tables/TableService.java", "endpoints": {"api_summary": "The Table Service API provides methods for creating, deleting, and interacting with tables in Pravega.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/tables", "/tables/<table_name>", "/tables/<table_name>/entries", "/tables/<table_name>/entries/<entry_id>"]}}
{"file": "cloned/pravega/segmentstore/server/src/main/java/io/pravega/segmentstore/server/mocks/SynchronousStreamSegmentStore.java", "endpoints": {"api_summary": "The SynchronousStreamSegmentStore is a wrapper around a StreamSegmentStore that turns asynchronous calls into synchronous ones for testing purposes.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/streamSegmentStore/append", "/streamSegmentStore/updateAttributes", "/streamSegmentStore/getAttributes", "/streamSegmentStore/flushToStorage", "/streamSegmentStore/getExtendedChunkInfo", "/streamSegmentStore/read", "/streamSegmentStore/getStreamSegmentInfo", "/streamSegmentStore/createStreamSegment", "/streamSegmentStore/mergeStreamSegment", "/streamSegmentStore/sealStreamSegment", "/streamSegmentStore/deleteStreamSegment", "/streamSegmentStore/truncateStreamSegment"]}}
{"file": "cloned/pravega/segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/LogFlusher.java", "endpoints": {"api_summary": "The LogFlusher class provides a utility method to force-flush all data to the underlying storage.", "methods": ["GET", "POST"], "paths": ["/logflusher/flushToStorage"]}}
{"file": "cloned/pravega/segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/SegmentAttributeIterator.java", "endpoints": {"api_summary": "The SegmentAttributeIterator class implements an AttributeIterator for a Segment, using both the Segment Attribute Index and Segment Metadata as sources. It iterates over the Attribute Index and includes Attributes from the Segment Metadata where appropriate.", "methods": ["GET", "POST"], "paths": ["/segment/attributes", "/segment/attributes/<built-in function id>"]}}
{"file": "cloned/pravega/segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/StorageEventProcessor.java", "endpoints": {"api_summary": "The StorageEventProcessor is an implementation of AbstractTaskQueueManager that uses ContainerEventProcessor as the underlying implementation. It adds a queue by the given name and adds a task to the queue.", "methods": ["GET", "POST"], "paths": ["/containers/<container_id>/events", "/containers/<container_id>/events/<event_id>"]}}
{"file": "cloned/pravega/segmentstore/server/src/test/java/io/pravega/segmentstore/server/logs/DataFrameTests.java", "endpoints": {"api_summary": "This file defines a DataFrame class that is used to store and manipulate data in a frame-based data structure. It includes methods for appending, reading, and serializing data, as well as methods for starting, ending, and discarding entries.", "methods": ["append", "read", "serialize", "startNewEntry", "endEntry", "discardEntry"], "paths": ["/dataframe"]}}
{"file": "cloned/pravega/segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/mocks/SlowStorage.java", "endpoints": {"api_summary": "SlowStorage is a Storage implementation that introduces delays/slowness to inner Storage instance.", "methods": ["GET", "POST", "PUT", "DELETE", "HEAD", "OPTIONS", "TRACE", "CONNECT"], "paths": ["/SlowStorage/openRead", "/SlowStorage/read", "/SlowStorage/getStreamSegmentInfo", "/SlowStorage/exists", "/SlowStorage/openWrite", "/SlowStorage/create", "/SlowStorage/write", "/SlowStorage/seal", "/SlowStorage/concat", "/SlowStorage/delete", "/SlowStorage/truncate", "/SlowStorage/listSegments"]}}
{"file": "cloned/pravega/segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/mocks/InMemoryMetadataStore.java", "endpoints": {"api_summary": "InMemoryMetadataStore is a mock metadata store that stores data in memory. It provides methods to read and write metadata records.", "methods": ["GET", "POST"], "paths": ["/InMemoryMetadataStore/read", "/InMemoryMetadataStore/writeAll"]}}
{"file": "cloned/pravega/segmentstore/storage/src/test/java/io/pravega/segmentstore/storage/mocks/InMemoryStorageTests.java", "endpoints": {"api_summary": "This API is a unit test for the InMemoryStorage class, which is a mock implementation of the Storage interface for testing purposes. It includes tests for the append, fencing, and replace methods.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/segment", "/segment/<built-in function id>"]}}
{"file": "cloned/pravega/bindings/src/main/java/io/pravega/storage/azure/AzureBlobClientImpl.java", "endpoints": {"api_summary": "The AzureBlobClientImpl class provides implementation of AzureClient methods, including creating, deleting, and appending blocks to a blob in an Azure storage container.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/container/blob", "/container/blob/<blobName>", "/container/blob/<blobName>/block"]}}
{"file": "cloned/pravega/bindings/src/main/java/io/pravega/storage/gcp/GCPSimpleStorageFactory.java", "endpoints": {"api_summary": "The GCPSimpleStorageFactory class provides a factory for creating GCP (Google Cloud Platform) Storage adapters using ChunkedSegmentStorage and GCPChunkStorage.", "methods": ["GET", "POST"], "paths": ["/users", "/users/<built-in function id>"]}}
{"file": "cloned/pravega/bindings/src/main/java/io/pravega/storage/extendeds3/ExtendedS3StorageConfig.java", "endpoints": {"api_summary": "The ExtendedS3StorageConfig class provides configuration for the ExtendedS3 Storage component. It includes properties such as the S3 config, access key, secret key, bucket, prefix, and concat small object size limit.", "methods": ["GET", "POST"], "paths": ["/extendeds3/config", "/extendeds3/config/<config_id>"]}}
{"file": "cloned/pravega/bindings/src/test/java/io/pravega/storage/s3/S3ClientMock.java", "endpoints": {"api_summary": "The S3ClientMock class implements the S3Client interface and provides a mock implementation of the S3 API. It communicates with a S3Mock storage and provides methods for interacting with S3 objects.", "methods": ["PUT", "DELETE", "DELETE", "GET", "HEAD", "CREATE", "UPLOAD", "ABORT", "COMPLETE"], "paths": ["/objects", "/objects/<object_id>", "/objects/<object_id>/parts", "/objects/<object_id>/parts/<part_id>"]}}
{"file": "cloned/pravega/bindings/src/test/java/io/pravega/storage/extendeds3/S3ClientMock.java", "endpoints": {"api_summary": "The S3ClientMock class provides a mock implementation of the S3JerseyClient class, which communicates with a S3Mock storage. It defines methods for deleting objects, putting objects, setting object ACLs, getting object ACLs, deleting objects, listing objects, reading object streams, initiating multipart uploads, aborting multipart uploads, copying parts, completing multipart uploads, and getting objects.", "methods": ["DELETE", "PUT", "POST", "GET"], "paths": ["/deleteObjects", "/putObject", "/setObjectAcl", "/getObjectAcl", "/deleteObject", "/listObjects", "/readObjectStream", "/initiateMultipartUpload", "/abortMultipartUpload", "/copyPart", "/completeMultipartUpload", "/getObject"]}}
{"file": "cloned/pravega/bindings/src/test/java/io/pravega/storage/hdfs/HDFSSimpleStorageTest.java", "endpoints": {"api_summary": "This API provides a simple storage interface for storing and retrieving chunks of data.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/chunks", "/chunks/<chunk_id>", "/chunks/<chunk_id>/metadata"]}}
{"file": "cloned/pravega/test/system/src/main/java/io/pravega/test/system/framework/RemoteSequential.java", "endpoints": {"api_summary": "RemoteSequential is a TestExecutor that runs tests as Mesos tasks. It creates a job on Metronome and waits for its completion.", "methods": ["GET", "POST"], "paths": ["/jobs", "/jobs/<jobId>", "/jobs/<jobId>/runs"]}}
{"file": "cloned/pravega/test/system/src/main/java/io/pravega/test/system/framework/marathon/AuthEnabledMarathonClient.java", "endpoints": {"api_summary": "The AuthEnabledMarathonClient provides a Marathon client with authentication enabled. It defines a single endpoint for creating a Marathon client instance with a token authentication interceptor.", "methods": ["GET"], "paths": ["/marathon"]}}
{"file": "cloned/pravega/test/system/src/main/java/io/pravega/test/system/framework/metronome/Metronome.java", "endpoints": {"api_summary": "The Metronome API provides a way to manage and run jobs on a DC/OS cluster. It allows users to create, update, and delete jobs, as well as trigger job runs and retrieve information about job history and active runs.", "methods": ["GET", "POST", "DELETE"], "paths": ["/v1/jobs", "/v1/jobs/{id}", "/v1/jobs/{id}/runs", "/ping"]}}
{"file": "cloned/pravega/test/system/src/main/java/io/pravega/test/system/framework/services/kubernetes/ZookeeperK8sService.java", "endpoints": {"api_summary": "ZookeeperK8sService is a Kubernetes service that manages Zookeeper instances on a Kubernetes cluster. It provides methods to start, stop, and scale Zookeeper instances.", "methods": ["GET", "POST"], "paths": ["/zookeeper/start", "/zookeeper/stop", "/zookeeper/scale"]}}
{"file": "cloned/pravega/test/system/src/main/java/io/pravega/test/system/framework/services/docker/PravegaControllerDockerService.java", "endpoints": {"api_summary": "The Pravega Controller Docker Service is a REST API that manages the deployment and scaling of Pravega controllers in a Docker environment.", "methods": ["GET", "POST"], "paths": ["/controller", "/controller/<built-in function id>"]}}
{"file": "cloned/pravega/test/system/src/main/java/io/pravega/test/system/framework/services/docker/HDFSDockerService.java", "endpoints": {"api_summary": "This API provides a HDFS (Hadoop Distributed File System) service with a REST API for managing files and directories.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/hdfs/v1/", "/hdfs/v1/<path>", "/hdfs/v1/<path>?op=<operation>"]}}
{"file": "cloned/pravega/test/system/src/main/java/io/pravega/test/system/framework/services/docker/PravegaSegmentStoreDockerService.java", "endpoints": {"api_summary": "The Pravega Segment Store service provides a REST API for storing and retrieving data in a distributed manner. It is designed to be highly available and fault-tolerant, with support for automatic scaling and failover.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/segmentstore", "/segmentstore/<segment_id>", "/segmentstore/<segment_id>/<offset>"]}}
{"file": "cloned/pravega/test/system/src/test/java/io/pravega/test/system/PravegaSegmentStoreTest.java", "endpoints": {"api_summary": "This API is a system test for the Pravega Segment Store service. It tests the availability of the service on a given port.", "methods": ["GET"], "paths": ["/segmentStoreTest"]}}
{"file": "cloned/pravega/test/system/src/test/java/io/pravega/test/system/PravegaControllerTest.java", "endpoints": {"api_summary": "This API is a system test for the Pravega Controller service. It tests the controller's REST API endpoints and ensures that they are working correctly.", "methods": ["GET", "POST"], "paths": ["/v1/scopes", "/v1/scopes/<scope_name>", "/v1/scopes/<scope_name>/streams", "/v1/scopes/<scope_name>/streams/<stream_name>"]}}
{"file": "cloned/pravega/test/system/src/test/java/io/pravega/test/system/DynamicRestApiTest.java", "endpoints": {"api_summary": "This API defines a test for the Dynamic REST API of Pravega, which includes a list of scopes and streams.", "methods": ["GET"], "paths": ["/v1/scopes", "/v1/scopes/<scope_name>/streams"]}}
{"file": "cloned/pravega/test/integration/src/test/java/io/pravega/test/integration/ClusterWrapperTest.java", "endpoints": {"api_summary": "This API is a test suite for the ClusterWrapper class, which is used to start and stop a Pravega cluster for integration testing. The API includes tests for writing and reading events to a stream, as well as invoking REST API endpoints with security enabled.", "methods": ["GET", "POST"], "paths": ["/ping"]}}
{"file": "cloned/pravega/test/integration/src/test/java/io/pravega/test/integration/ControllerBootstrapTest.java", "endpoints": {"api_summary": "This API is a test suite for the Pravega controller bootstrap sequence. It includes tests for creating a scope, a stream, and a transaction.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/testScope", "/testScope/testStream", "/testScope/testStream/txn"]}}
{"file": "cloned/pravega/test/integration/src/test/java/io/pravega/test/integration/endtoendtest/EndToEndUpdateTest.java", "endpoints": {"api_summary": "This API is used to update the configuration of a Pravega stream. It allows for updating the scaling policy, sealing the stream, and more.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/scopes/<scope_name>/streams/<stream_name>/update", "/scopes/<scope_name>/streams/<stream_name>/seal"]}}
{"file": "cloned/pravega/controller/src/main/java/io/pravega/controller/server/eventProcessor/requesthandlers/DeleteReaderGroupTask.java", "endpoints": {"api_summary": "The DeleteReaderGroupTask class is a request handler for executing a delete operation for a ReaderGroup.", "methods": ["DELETE"], "paths": ["/scopes/{scope}/readergroups/{readerGroup}"]}}
{"file": "cloned/pravega/controller/src/main/java/io/pravega/controller/server/eventProcessor/requesthandlers/AbortRequestHandler.java", "endpoints": {"api_summary": "This API processes commit txn events. It sends abort txn messages to active segments of the stream and changes the txn state from aborting to aborted.", "methods": ["POST"], "paths": ["/commitTxn"]}}
{"file": "cloned/pravega/controller/src/main/java/io/pravega/controller/server/eventProcessor/requesthandlers/TruncateStreamTask.java", "endpoints": {"api_summary": "This API is responsible for performing truncation operations received from requeststream.", "methods": ["GET", "POST"], "paths": ["/truncateStream"]}}
{"file": "cloned/pravega/controller/src/main/java/io/pravega/controller/server/eventProcessor/requesthandlers/CreateReaderGroupTask.java", "endpoints": {"api_summary": "The CreateReaderGroupTask class is responsible for executing a create operation for a ReaderGroup.", "methods": ["GET", "POST"], "paths": ["/createReaderGroup"]}}
{"file": "cloned/pravega/controller/src/main/java/io/pravega/controller/server/eventProcessor/requesthandlers/UpdateReaderGroupTask.java", "endpoints": {"api_summary": "This API is responsible for updating a ReaderGroup in Pravega. It allows for updating the ReaderGroup's configuration, such as the streams it subscribes to, and the retention policy for the data it reads.", "methods": ["PUT"], "paths": ["/v1/scopes/<scope_name>/readergroups/<reader_group_name>"]}}
{"file": "cloned/pravega/controller/src/main/java/io/pravega/controller/server/eventProcessor/requesthandlers/DeleteStreamTask.java", "endpoints": {"api_summary": "The DeleteStreamTask class is a request handler for performing scale operations received from the requeststream. It deletes the specified stream and its associated segments, and notifies the Watermarking and Retention services to remove the stream from their respective stores.", "methods": ["DELETE"], "paths": ["/scopes/{scope}/streams/{stream}"]}}
{"file": "cloned/pravega/controller/src/main/java/io/pravega/controller/server/eventProcessor/requesthandlers/kvtable/DeleteTableTask.java", "endpoints": {"api_summary": "This API is responsible for deleting a KeyValueTable in Pravega.", "methods": ["DELETE"], "paths": ["/kvtable/scopes/{scope}/{kvt}"]}}
{"file": "cloned/pravega/controller/src/main/java/io/pravega/controller/server/eventProcessor/requesthandlers/kvtable/CreateTableTask.java", "endpoints": {"api_summary": "This API is responsible for creating a new Key-Value Table in Pravega. It takes in a scope, a table name, a partition count, a primary key length, a secondary key length, a creation time, a request ID, and a rollover size in bytes. It then creates a new Key-Value Table with the given configuration and returns a response indicating whether the table was created successfully or not.", "methods": ["POST"], "paths": ["/v1/scopes/{scope}/tables/{kvt}"]}}
{"file": "cloned/pravega/controller/src/main/java/io/pravega/controller/server/rest/v1/ApiV1.java", "endpoints": {"api_summary": "This API provides a set of endpoints for managing Pravega streams and scopes, including creating, updating, and deleting streams and scopes, as well as retrieving information about existing streams and scopes.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/v1/scopes", "/v1/scopes/{scopeName}", "/v1/scopes/{scopeName}/streams", "/v1/scopes/{scopeName}/streams/{streamName}", "/v1/scopes/{scopeName}/readergroups", "/v1/scopes/{scopeName}/readergroups/{readerGroupName}", "/v1/scopes/{scopeName}/streams/{streamName}/scaling-events"]}}
{"file": "cloned/pravega/controller/src/main/java/io/pravega/controller/server/rest/generated/api/ScopesApi.java", "endpoints": {"api_summary": "This API provides a set of endpoints for managing scopes, streams, and reader groups in a Pravega cluster.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/scopes", "/scopes/{scopeName}", "/scopes/{scopeName}/streams", "/scopes/{scopeName}/streams/{streamName}", "/scopes/{scopeName}/readergroups", "/scopes/{scopeName}/readergroups/{readerGroupName}"]}}
{"file": "cloned/pravega/controller/src/main/java/io/pravega/controller/server/rest/generated/api/ScopesApiService.java", "endpoints": {"api_summary": "The Pravega Controller REST API provides a set of endpoints for managing Pravega scopes, streams, and reader groups. It allows users to create, update, and delete scopes, streams, and reader groups, as well as retrieve information about them.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/scopes", "/scopes/{scopeName}", "/scopes/{scopeName}/streams", "/scopes/{scopeName}/streams/{streamName}", "/scopes/{scopeName}/readergroups", "/scopes/{scopeName}/readergroups/{readerGroupName}"]}}
{"file": "cloned/pravega/controller/src/main/java/io/pravega/controller/server/rest/generated/api/impl/ScopesApiServiceImpl.java", "endpoints": {"api_summary": "This API provides endpoints for managing Pravega scopes and streams, including creating, deleting, and listing scopes and streams, as well as retrieving information about them.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/scopes", "/scopes/<scope_name>", "/scopes/<scope_name>/streams", "/scopes/<scope_name>/streams/<stream_name>"]}}
{"file": "cloned/pravega/controller/src/main/java/io/pravega/controller/server/rest/generated/model/UpdateStreamRequest.java", "endpoints": {"api_summary": "The Pravega Controller REST API provides a set of endpoints for managing and configuring Pravega streams, including creating, updating, and deleting streams, as well as retrieving information about streams and their status.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/v1/scopes/<scope_name>/streams", "/api/v1/scopes/<scope_name>/streams/<stream_name>", "/api/v1/scopes/<scope_name>/streams/<stream_name>/status"]}}
{"file": "cloned/pravega/controller/src/main/java/io/pravega/controller/server/rest/generated/model/CreateStreamRequest.java", "endpoints": {"api_summary": "The Pravega Controller REST API provides a set of endpoints for managing Pravega streams, including creating, updating, and deleting streams, as well as retrieving information about streams and their status.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/v1/scopes/<scope_name>/streams", "/api/v1/scopes/<scope_name>/streams/<stream_name>", "/api/v1/scopes/<scope_name>/streams/<stream_name>/status"]}}
{"file": "cloned/pravega/controller/src/main/java/io/pravega/controller/server/rest/resources/PingImpl.java", "endpoints": {"api_summary": "The Ping API is a simple REST API that serves as a check for a working REST server. It has a single endpoint, /ping, which returns a 200 OK response.", "methods": ["GET"], "paths": ["/ping"]}}
{"file": "cloned/pravega/controller/src/main/java/io/pravega/controller/server/rpc/grpc/GRPCServer.java", "endpoints": {"api_summary": "The gRPC server for the Pravega Controller service.", "methods": ["GET", "POST"], "paths": ["/users", "/users/<built-in function id>"]}}
{"file": "cloned/pravega/controller/src/main/java/io/pravega/controller/task/Stream/TestTasks.java", "endpoints": {"api_summary": "The TestTasks API provides a set of tasks for testing purposes. It includes a single endpoint, testStreamLock, which allows for the acquisition of a lock on a stream for a specified amount of time.", "methods": ["GET", "POST"], "paths": ["/test/1.0/{scope}/{stream}"]}}
{"file": "cloned/pravega/controller/src/main/java/io/pravega/controller/store/Scope.java", "endpoints": {"api_summary": "The Scope API provides methods for creating, deleting, and retrieving information about a scope, as well as listing streams and key-value tables under the scope.", "methods": ["GET", "POST", "DELETE"], "paths": ["/scopes", "/scopes/<scope_name>", "/scopes/<scope_name>/streams", "/scopes/<scope_name>/keyvaluetables"]}}
{"file": "cloned/pravega/controller/src/main/java/io/pravega/controller/store/host/ZKHostStore.java", "endpoints": {"api_summary": "Zookeeper based host store implementation for Pravega.", "methods": ["GET", "POST"], "paths": ["/cluster/segmentContainerHostMapping"]}}
{"file": "cloned/pravega/controller/src/main/java/io/pravega/controller/store/task/ZKTaskMetadataStore.java", "endpoints": {"api_summary": "ZKTaskMetadataStore is a Zookeeper-based task store that provides methods for acquiring, transferring, and removing locks on resources.", "methods": ["GET", "POST"], "paths": ["/taskIndex", "/hostTaskIndex"]}}
{"file": "cloned/pravega/controller/src/main/java/io/pravega/controller/store/client/StoreClientFactory.java", "endpoints": {"api_summary": "The StoreClientFactory class provides a factory method for creating store clients. It supports creating Zookeeper and InMemory store clients.", "methods": ["GET", "POST"], "paths": ["/store/client/zookeeper", "/store/client/inmemory"]}}
{"file": "cloned/pravega/controller/src/main/java/io/pravega/controller/store/kvtable/ZookeeperKVTMetadataStore.java", "endpoints": {"api_summary": "ZookeeperKVTMetadataStore is a metadata store for Key-Value Tables (KVTs) that uses Zookeeper for storage. It provides methods for creating, deleting, and retrieving KVTs, as well as for checking the existence of KVTs and scopes.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/store", "/store/<scope>", "/store/<scope>/<kvt>", "/_system/deletingScopes", "/_system/deletingScopes/<scope>", "/lastActiveKVTableSegment/<scope>/<kvt>"]}}
{"file": "cloned/pravega/controller/src/main/java/io/pravega/controller/store/stream/records/EpochTransitionRecord.java", "endpoints": {"api_summary": "The EpochTransitionRecord class represents a transient record that is created during epoch transitions in Pravega. It captures the transition and is deleted once the transition completes.", "methods": ["GET", "POST"], "paths": ["/epochTransitionRecord"]}}
{"file": "cloned/pravega/controller/src/main/java/io/pravega/controller/eventProcessor/impl/SerializedRequestHandler.java", "endpoints": {"api_summary": "SerializedRequestHandler is a class that processes events in a serialized manner for a given key. It maintains a map of key and its work queue, and any new request received for the key is queued up if the queue is not empty. If a worker queue for the key is not found in the map, a new queue is created and the event is put in the queue and this is added to the worker map. The processing is then scheduled asynchronously for the key.", "methods": ["GET", "POST"], "paths": ["/users", "/users/<built-in function id>"]}}
{"file": "cloned/pravega/controller/src/test/java/io/pravega/controller/server/ControllerPrometheusTest.java", "endpoints": {"api_summary": "This API provides a test for the ControllerServiceStarter class, which starts and stops the controller service. It also tests the Prometheus metrics endpoint.", "methods": ["GET"], "paths": ["/prometheus"]}}
{"file": "cloned/pravega/controller/src/test/java/io/pravega/controller/server/rpc/auth/ControllerGrpcAuthFocusedTest.java", "endpoints": {"api_summary": "This API provides a simple interface for managing and retrieving information about Pravega streams, scopes, and key-value tables.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/v1/scopes", "/v1/scopes/{scopeName}", "/v1/scopes/{scopeName}/streams", "/v1/scopes/{scopeName}/streams/{streamName}", "/v1/scopes/{scopeName}/key-value-tables", "/v1/scopes/{scopeName}/key-value-tables/{keyValueTableName}"]}}
{"file": "cloned/pravega/controller/src/test/java/io/pravega/controller/rest/v1/PingTest.java", "endpoints": {"api_summary": "This API provides a simple ping endpoint that returns a 200 status code when the server is running.", "methods": ["GET"], "paths": ["/ping"]}}
{"file": "cloned/pravega/shared/protocol/src/main/java/io/pravega/shared/protocol/netty/FailingRequestProcessor.java", "endpoints": {"api_summary": "This API provides a set of methods for managing and interacting with Pravega streams and tables.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/streams", "/streams/<stream_name>", "/tables", "/tables/<table_name>"]}}
{"file": "cloned/pravega/shared/protocol/src/main/java/io/pravega/shared/protocol/netty/DelegatingRequestProcessor.java", "endpoints": {"api_summary": "This API provides a set of commands for managing and interacting with Pravega streams and tables.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/streams", "/streams/<stream_name>", "/tables", "/tables/<table_name>"]}}
{"file": "cloned/pravega/shared/protocol/src/test/java/io/pravega/shared/protocol/netty/CommandEncoderTest.java", "endpoints": {"api_summary": "This file defines a CommandEncoder class that encodes Pravega commands for the client and server. It also defines a TestBatchSizeTracker class for testing the CommandEncoder.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/segment", "/segment/<built-in function id>", "/segment/<built-in function id>/<event number>"]}}
{"file": "cloned/pravega/shared/controller-api/src/main/java/io/pravega/shared/controller/event/UpdateReaderGroupEvent.java", "endpoints": {"api_summary": "The UpdateReaderGroupEvent API allows for updating a reader group in Pravega. It takes in a scope, reader group name, request ID, reader group ID, generation, and a boolean indicating whether the update is a transition to or from a subscriber. It also takes in a set of streams to remove. The API returns a CompletableFuture that can be used to process the update.", "methods": ["POST"], "paths": ["/scopes/{scope}/readergroups/{rgName}"]}}
{"file": "cloned/pravega/shared/controller-api/src/main/java/io/pravega/shared/controller/event/CreateReaderGroupEvent.java", "endpoints": {"api_summary": "The CreateReaderGroupEvent class defines a REST API endpoint for creating a new reader group in a Pravega stream. The endpoint accepts a JSON payload with the reader group name, scope, and other configuration parameters, and returns a JSON object with the reader group ID and other details.", "methods": ["POST"], "paths": ["/v1/scopes/{scope}/readergroups/{rgName}"]}}
{"file": "cloned/pravega/shared/controller-api/src/main/java/io/pravega/shared/controller/event/kvtable/CreateTableEvent.java", "endpoints": {"api_summary": "This API defines a single endpoint for creating a new table in a Pravega database.", "methods": ["POST"], "paths": ["/scopes/{scopeName}/tables/{kvtName}"]}}
{"file": "cloned/pravega/shared/controller-api/src/main/java/io/pravega/shared/controller/event/kvtable/DeleteTableEvent.java", "endpoints": {"api_summary": "The DeleteTableEvent API allows for the deletion of a Key-Value Table (KVT) in Pravega. It takes in a scope, KVT name, request ID, and table ID as parameters and returns a CompletableFuture that can be used to track the status of the deletion request.", "methods": ["DELETE"], "paths": ["/scopes/{scope}/kvt/{kvtName}/tables/{tableId}"]}}
{"file": "cloned/pravega/shared/controller-api/src/test/java/io/pravega/shared/controller/tracing/RPCTracingHelpersTest.java", "endpoints": {"api_summary": "This API is used to manage tracing request headers for RPC calls.", "methods": ["GET", "POST"], "paths": ["/createStream", "/createStream/myScope/myStream"]}}
{"file": "cloned/pravega/shared/metrics/src/main/java/io/pravega/shared/metrics/StatsProviderImpl.java", "endpoints": {"api_summary": "The StatsProviderImpl class provides a set of methods for managing and exporting metrics for a Pravega cluster. It includes methods for starting and stopping the metrics export, as well as creating and managing StatsLogger and DynamicLogger instances.", "methods": ["GET"], "paths": ["/prometheus"]}}
{"file": "cloned/pravega/shared/metrics/src/test/java/io/pravega/shared/metrics/PrometheusResourceTest.java", "endpoints": {"api_summary": "This API provides a Prometheus endpoint for scraping metrics from a Pravega cluster.", "methods": ["GET"], "paths": ["/prometheus"]}}
{"file": "cloned/pravega/shared/health/src/main/java/io/pravega/shared/health/impl/HealthEndpointImpl.java", "endpoints": {"api_summary": "The HealthEndpointImpl class provides a simpler interface for retrieving Health information from the HealthServiceManager. It allows for retrieving the health status of a component and its children, as well as the details of the health status.", "methods": ["GET", "POST"], "paths": ["/health", "/health/<id>"]}}
{"file": "cloned/pravega/shared/health/src/main/java/io/pravega/shared/health/impl/HealthServiceUpdaterImpl.java", "endpoints": {"api_summary": "The HealthServiceUpdaterImpl provides a recurring health check for the Pravega system. It uses a ScheduledExecutorService to run the health check at a specified interval and provides the latest health result through the getLatestHealth() method.", "methods": ["GET"], "paths": ["/health"]}}
{"file": "cloned/pravega/shared/rest/src/main/java/io/pravega/shared/rest/security/RESTAuthHelper.java", "endpoints": {"api_summary": "The RESTAuthHelper class provides helper methods for handling authentication and authorization for the REST API.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users", "/users/<built-in function id>"]}}
{"file": "cloned/pravega/shared/rest/src/main/java/io/pravega/shared/rest/resources/Ping.java", "endpoints": {"api_summary": "The Ping API provides a simple endpoint for checking the health of the Pravega service.", "methods": ["GET"], "paths": ["/ping"]}}
{"file": "cloned/pravega/shared/rest/src/test/java/io/pravega/shared/rest/impl/RESTServerTest.java", "endpoints": {"api_summary": "This API provides a simple REST server for testing purposes. It includes a ping endpoint that returns a 200 status code when called.", "methods": ["GET"], "paths": ["/ping"]}}
{"file": "cloned/pravega/shared/health-bindings/src/main/java/io/pravega/shared/health/bindings/v1/ApiV1.java", "endpoints": {"api_summary": "This API provides health information about the Pravega Controller service.", "methods": ["GET"], "paths": ["/v1/health", "/v1/health/details/{id}", "/v1/health/{id}", "/v1/health/liveness/{id}", "/v1/health/readiness/{id}", "/v1/health/status/{id}"]}}
{"file": "cloned/pravega/shared/health-bindings/src/main/java/io/pravega/shared/health/bindings/generated/api/HealthApiService.java", "endpoints": {"api_summary": "The HealthApiService provides a set of endpoints for retrieving health and status information about a contributor. It includes endpoints for getting details, health, liveness, readiness, and status of a contributor, as well as endpoints for getting the details, health, liveness, and readiness of the overall system.", "methods": ["GET"], "paths": ["/health/contributors/<id>", "/health/details", "/health/liveness", "/health/readiness", "/health/status"]}}
{"file": "cloned/pravega/shared/health-bindings/src/main/java/io/pravega/shared/health/bindings/generated/api/HealthApi.java", "endpoints": {"api_summary": "The Health API provides endpoints for fetching the health status of a specific health contributor, as well as the details and readiness state of the Controller service.", "methods": ["GET"], "paths": ["/health/details/{id}", "/health/{id}", "/health/liveness/{id}", "/health/readiness/{id}", "/health/status/{id}", "/health/details", "/health", "/health/liveness", "/health/readiness", "/health/status"]}}
{"file": "cloned/pravega/shared/health-bindings/src/main/java/io/pravega/shared/health/bindings/resources/HealthImpl.java", "endpoints": {"api_summary": "This API provides health and status information for a Pravega cluster.", "methods": ["GET", "POST"], "paths": ["/health", "/health/<id>", "/liveness", "/liveness/<id>", "/details", "/details/<id>", "/readiness", "/readiness/<id>", "/status", "/status/<id>"]}}
{"file": "cloned/pravega/shared/basic-authplugin/src/main/java/io/pravega/authplugin/basic/PasswordAuthHandler.java", "endpoints": {"api_summary": "This API provides authentication and authorization for Pravega users. It allows users to authenticate and access resources based on their permissions.", "methods": ["GET", "POST"], "paths": ["/users", "/users/<built-in function id>"]}}
{"file": "cloned/pravega/cli/user/src/test/java/io/pravega/cli/user/scope/ScopeCommandsTest.java", "endpoints": {"api_summary": "This API provides commands for managing Pravega scopes, including creating, deleting, and listing scopes.", "methods": ["GET", "POST", "DELETE"], "paths": ["/scopes", "/scopes/<scope_name>", "/scopes/<scope_name>/streams"]}}
{"file": "cloned/pravega/cli/user/src/test/java/io/pravega/cli/user/stream/StreamCommandTest.java", "endpoints": {"api_summary": "This API provides a set of commands for managing Pravega streams, including creating, deleting, and reading streams.", "methods": ["GET", "POST", "DELETE"], "paths": ["/streams", "/streams/<stream_name>", "/streams/<stream_name>/append", "/streams/<stream_name>/read"]}}
{"file": "cloned/pravega/cli/admin/src/main/java/io/pravega/cli/admin/utils/CLIConfig.java", "endpoints": {"api_summary": "The CLIConfig class defines the configuration for the Pravega CLI client. It includes properties such as the controller REST and GRPC URIs, authentication and TLS settings, and metadata backend.", "methods": ["GET", "POST"], "paths": ["/cli/controller/rest/uri", "/cli/controller/grpc/uri"]}}
{"file": "cloned/pravega/cli/admin/src/main/java/io/pravega/cli/admin/utils/AdminSegmentHelper.java", "endpoints": {"api_summary": "The AdminSegmentHelper class provides methods for interacting with the admin-gateway on the Segment Store, including flushing a container to storage, getting table segment info, and listing storage chunks.", "methods": ["GET", "POST"], "paths": ["/admin/flushToStorage", "/admin/getTableSegmentInfo", "/admin/listStorageChunks"]}}
{"file": "cloned/pravega/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerDeleteReaderGroupCommand.java", "endpoints": {"api_summary": "The API allows for the deletion of a reader group from a given scope.", "methods": ["DELETE"], "paths": ["/v1/scopes/<scope-name>/readergroups/<readergroup>"]}}
{"file": "cloned/pravega/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerDescribeStreamCommand.java", "endpoints": {"api_summary": "The ControllerDescribeStreamCommand provides information about a given Stream, including its configuration, state, and active transactions.", "methods": ["GET"], "paths": ["/v1/scopes/<scope-name>/streams/<stream-name>"]}}
{"file": "cloned/pravega/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerListScopesCommand.java", "endpoints": {"api_summary": "The ControllerListScopesCommand lists all the existing scopes in the system.", "methods": ["GET"], "paths": ["/v1/scopes/"]}}
{"file": "cloned/pravega/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerDescribeReaderGroupCommand.java", "endpoints": {"api_summary": "The ControllerDescribeReaderGroupCommand provides details of a ReaderGroup in a given Scope.", "methods": ["GET"], "paths": ["/v1/scopes/<scope-name>/readergroups/<readergroup-id>"]}}
{"file": "cloned/pravega/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java", "endpoints": {"api_summary": "The ControllerCommand class is a base class for any Controller-related commands. It provides a context for child classes consisting of a REST client to execute calls against the Controller.", "methods": ["GET", "DELETE"], "paths": ["/controller/<requestURI>"]}}
{"file": "cloned/pravega/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerListReaderGroupsInScopeCommand.java", "endpoints": {"api_summary": "The ControllerListReaderGroupsInScopeCommand lists all the ReaderGroups in a given Scope.", "methods": ["GET"], "paths": ["/v1/scopes/<scope-name>/readergroups"]}}
{"file": "cloned/pravega/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerDescribeScopeCommand.java", "endpoints": {"api_summary": "The ControllerDescribeScopeCommand provides information about a given Scope, including its details, via the REST API.", "methods": ["GET"], "paths": ["/v1/scopes/<scope-name>"]}}
{"file": "cloned/pravega/cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerListStreamsInScopeCommand.java", "endpoints": {"api_summary": "The ControllerListStreamsInScopeCommand lists all the Streams in a given Scope.", "methods": ["GET"], "paths": ["/v1/scopes/<scope-name>/streams"]}}
{"file": "cloned/pravega/cli/admin/src/main/java/io/pravega/cli/admin/json/ControllerMetadataJsonSerializer.java", "endpoints": {"api_summary": "This API provides methods for serializing and deserializing JSON data for controller metadata.", "methods": ["GET", "POST"], "paths": ["/controller/metadata"]}}
{"file": "cloned/pravega/cli/admin/src/main/java/io/pravega/cli/admin/dataRecovery/StorageListSegmentsCommand.java", "endpoints": {"api_summary": "This API lists all non-shadow segments from the storage, along with their name, length, and sealed status. The storage is loaded using the config properties.", "methods": ["GET"], "paths": ["/list-segments"]}}
{"file": "cloned/pravega/cli/admin/src/test/java/io/pravega/cli/admin/controller/ControllerCommandsTest.java", "endpoints": {"api_summary": "This API provides a way to describe a reader group in Pravega.", "methods": ["GET"], "paths": ["/v1/scopes/<scope_name>/readergroups/<reader_group_name>"]}}
{"file": "cloned/pravega/cli/admin/src/test/java/io/pravega/cli/admin/controller/SecureControllerCommandsTest.java", "endpoints": {"api_summary": "This API provides a list of scopes, streams, and reader groups in a Pravega cluster, as well as the ability to describe and delete reader groups.", "methods": ["GET", "POST", "DELETE"], "paths": ["/scopes", "/scopes/<scope_name>/streams", "/scopes/<scope_name>/readergroups", "/scopes/<scope_name>/readergroups/<reader_group_name>"]}}
{"file": "cloned/pravega/common/src/main/java/io/pravega/common/util/ContinuationTokenAsyncIterator.java", "endpoints": {"api_summary": "This is a continuation token based async iterator implementation. It takes a function that when completed will have next batch of results with continuation token. This class determines when to call the next iteration of function (if all existing results have been exhausted) and ensures there is only one outstanding call.", "methods": ["GET"], "paths": ["/users", "/users/<built-in function id>"]}}
{"file": "cloned/pravega/common/src/main/java/io/pravega/common/concurrent/OrderedProcessor.java", "endpoints": {"api_summary": "The OrderedProcessor class provides a way to process items in order, subject to capacity constraints. It has methods for executing items and checking for capacity.", "methods": ["GET", "POST"], "paths": ["/users", "/users/<built-in function id>"]}}
{"file": "cloned/pravega/common/src/test/java/io/pravega/common/security/JwtUtilsTest.java", "endpoints": {"api_summary": "This file defines a JWT utility class that provides methods for extracting and parsing expiration times from JWT tokens.", "methods": ["GET", "POST"], "paths": ["/jwt/extractExpirationTime", "/jwt/parseExpirationTime"]}}
{"file": "cloned/pravega/common/src/test/java/io/pravega/common/concurrent/AsyncIteratorTests.java", "endpoints": {"api_summary": "This API provides a set of methods for iterating over a sequence of elements asynchronously.", "methods": ["GET", "POST"], "paths": ["/iterator"]}}
{"file": "cloned/abixen-platform/abixen-platform-gateway/src/main/java/com/abixen/platform/gateway/configuration/PlatformSecurityConfiguration.java", "endpoints": {"api_summary": "This API provides endpoints for user authentication and authorization, as well as endpoints for accessing and manipulating user data.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/turbine.stream", "/test", "/service/**", "/api/user", "/api/user-activation/activate/*/"]}}
{"file": "cloned/abixen-platform/abixen-platform-gateway/src/main/java/com/abixen/platform/gateway/integration/UserIntegrationClient.java", "endpoints": {"api_summary": "The UserIntegrationClient provides a way to retrieve a User object by username from the Abixen Platform Core API.", "methods": ["GET"], "paths": ["/api/control-panel/users/custom/username/{username}/"]}}
{"file": "cloned/abixen-platform/abixen-platform-gateway/src/main/java/com/abixen/platform/gateway/controller/SecurityController.java", "endpoints": {"api_summary": "The SecurityController API provides a single endpoint for retrieving the current user's information. The endpoint is protected by Spring Security and requires authentication.", "methods": ["GET"], "paths": ["/user"]}}
{"file": "cloned/abixen-platform/abixen-platform-common/src/main/java/com/abixen/platform/common/interfaces/client/UserClient.java", "endpoints": {"api_summary": "The UserClient API provides a simple interface for retrieving user information from the Abixen Platform Core API.", "methods": ["GET"], "paths": ["/api-intranet/users/{id}"]}}
{"file": "cloned/abixen-platform/abixen-platform-common/src/main/java/com/abixen/platform/common/interfaces/client/SecurityClient.java", "endpoints": {"api_summary": "The SecurityClient API provides a way to check if a user has permission to access a securable object in the Abixen platform.", "methods": ["GET"], "paths": ["/api/control-panel/securities/has-permission/{username}/{securableObjectId}/{aclClassName}/{permissionName}"]}}
{"file": "cloned/abixen-platform/abixen-platform-core/src/main/java/com/abixen/platform/core/domain/repository/CommentRepository.java", "endpoints": {"api_summary": "The CommentRepository API provides a way to manage comments in the Abixen platform. It allows for creating, reading, updating, and deleting comments, as well as searching for comments by module or parent ID.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/comments", "/comments/<comment_id>", "/comments/search/module/<module_id>", "/comments/search/parent/<parent_id>"]}}
{"file": "cloned/abixen-platform/abixen-platform-core/src/main/java/com/abixen/platform/core/interfaces/client/ModuleConfigurationService.java", "endpoints": {"api_summary": "The ModuleConfigurationService API provides a way to retrieve the configuration properties for the Abixen platform's modules.", "methods": ["GET"], "paths": ["/api/configuration"]}}
{"file": "cloned/abixen-platform/abixen-platform-core/src/main/java/com/abixen/platform/core/interfaces/web/PermissionController.java", "endpoints": {"api_summary": "The PermissionController API provides endpoints for managing permissions in the Abixen platform. It allows for searching, retrieving, and manipulating permissions, as well as retrieving information about the permissions.", "methods": ["GET"], "paths": ["/api/control-panel/permissions"]}}
{"file": "cloned/abixen-platform/abixen-platform-core/src/main/java/com/abixen/platform/core/interfaces/web/ResourceController.java", "endpoints": {"api_summary": "The ResourceController API provides a RESTful interface for managing resources in the Abixen platform. It allows for the retrieval of a list of all resources, as well as the creation, retrieval, update, and deletion of individual resources.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/resources", "/api/resources/<resource_id>"]}}
{"file": "cloned/abixen-platform/abixen-platform-core/src/main/java/com/abixen/platform/core/interfaces/web/SecurityController.java", "endpoints": {"api_summary": "The SecurityController API provides endpoints for checking permissions on securable objects for a given user. It allows clients to check if a user has a specific permission on a securable object, given the user's username, the securable object's ID, the ACL class name, and the permission name.", "methods": ["GET"], "paths": ["/api/control-panel/securities/has-permission/{username}/{securableObjectId}/{aclClassName}/{permissionName}"]}}
{"file": "cloned/abixen-platform/abixen-platform-core/src/main/java/com/abixen/platform/core/interfaces/web/AclController.java", "endpoints": {"api_summary": "The AclController API provides endpoints for managing access control lists (ACLs) for objects in the Abixen platform. It allows for finding and updating ACLs based on the object's permission ACL class category name and ID.", "methods": ["GET", "PUT"], "paths": ["/api/control-panel/acls", "/api/control-panel/acls?permissionAclClassCategoryName={permissionAclClassCategoryName}&objectId={objectId}"]}}
{"file": "cloned/abixen-platform/abixen-platform-core/src/main/java/com/abixen/platform/core/interfaces/web/intranet/IntranetUserController.java", "endpoints": {"api_summary": "The IntranetUserController API provides endpoints for managing users in the Abixen platform's intranet. It allows for the creation, retrieval, update, and deletion of users, as well as the ability to search for users by name or email.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api-intranet/users", "/api-intranet/users/<built-in function id>"]}}
{"file": "cloned/abixen-platform/abixen-platform-core/src/main/java/com/abixen/platform/core/interfaces/web/admin/ModuleController.java", "endpoints": {"api_summary": "The ModuleController API provides endpoints for managing modules in the Abixen platform. It allows for creating, reading, updating, and deleting modules, as well as searching and retrieving all modules.", "methods": ["GET", "PUT"], "paths": ["/api/control-panel/modules/{id}", "/api/control-panel/modules"]}}
{"file": "cloned/abixen-platform/abixen-platform-core/src/main/java/com/abixen/platform/core/interfaces/web/admin/AdminModuleTypeController.java", "endpoints": {"api_summary": "The AdminModuleTypeController API provides endpoints for managing module types in the Abixen platform. It allows for retrieving, creating, updating, and deleting module types, as well as reloading individual module types or all module types at once.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/control-panel/module-types", "/api/control-panel/module-types/all", "/api/control-panel/module-types/{id}/reload", "/api/control-panel/module-types/reload-all"]}}
{"file": "cloned/abixen-platform/abixen-platform-core/src/main/java/com/abixen/platform/core/interfaces/web/admin/AdminResourceController.java", "endpoints": {"api_summary": "The AdminResourceController API provides endpoints for managing resources in the control panel module. It allows for retrieving a list of resources, as well as creating, updating, and deleting resources.", "methods": ["GET"], "paths": ["/api/control-panel/module-types/{moduleId}/resources"]}}
{"file": "cloned/abixen-platform/abixen-platform-core/src/main/java/com/abixen/platform/core/interfaces/web/admin/AdminPageController.java", "endpoints": {"api_summary": "The AdminPageController API provides endpoints for managing pages in the Abixen platform. It allows for creating, reading, updating, and deleting pages, as well as searching for pages based on various criteria.", "methods": ["GET", "POST", "PUT"], "paths": ["/api/control-panel/pages/{id}", "/api/control-panel/pages", "/api/control-panel/pages/{id}"]}}
{"file": "cloned/abixen-platform/abixen-platform-core/src/main/java/com/abixen/platform/core/interfaces/web/admin/AdminLayoutController.java", "endpoints": {"api_summary": "The AdminLayoutController API provides endpoints for managing layouts in the Abixen platform. It allows for creating, updating, deleting, and retrieving layouts, as well as changing the icon for a layout.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/control-panel/layouts", "/api/control-panel/layouts/{id}", "/api/control-panel/layouts/{id}/icon"]}}
{"file": "cloned/abixen-platform/abixen-platform-core/src/main/java/com/abixen/platform/core/interfaces/web/admin/AdminUserController.java", "endpoints": {"api_summary": "The AdminUserController API provides endpoints for managing users in the control panel. It allows for searching, retrieving, updating, and deleting users, as well as managing their roles.", "methods": ["GET", "PUT", "POST"], "paths": ["/api/control-panel/users", "/api/control-panel/users/{id}/roles", "/api/control-panel/users/custom/username/{username}/"]}}
{"file": "cloned/abixen-platform/abixen-platform-core/src/main/java/com/abixen/platform/core/interfaces/web/admin/RoleController.java", "endpoints": {"api_summary": "The RoleController API provides endpoints for managing roles and their permissions in the Abixen platform. It allows for creating, reading, updating, and deleting roles, as well as managing permissions for each role.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/control-panel/roles", "/api/control-panel/roles/{id}", "/api/control-panel/roles/{id}/permissions"]}}
{"file": "cloned/abixen-platform/abixen-platform-core/src/main/java/com/abixen/platform/core/interfaces/web/common/EnumController.java", "endpoints": {"api_summary": "The EnumController API provides a list of available role types for the Abixen platform.", "methods": ["GET"], "paths": ["/api/dictionary/enum/roleType"]}}
{"file": "cloned/abixen-platform/abixen-platform-core/src/main/java/com/abixen/platform/core/interfaces/web/common/ImageLibraryController.java", "endpoints": {"api_summary": "The ImageLibraryController API provides a way to retrieve images from the image library. It has one endpoint that allows users to retrieve an image by its file name.", "methods": ["GET"], "paths": ["/api/images/layout/{fileName}/"]}}
{"file": "cloned/abixen-platform/abixen-platform-core/src/main/java/com/abixen/platform/core/interfaces/web/common/AbstractPageController.java", "endpoints": {"api_summary": "The AbstractPageController defines a REST API for managing pages in the Abixen platform. It provides endpoints for creating, reading, updating, and deleting pages, as well as endpoints for managing page permissions.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/pages", "/pages/{id}", "/pages/{id}/permissions"]}}
{"file": "cloned/abixen-platform/abixen-platform-core/src/main/java/com/abixen/platform/core/interfaces/web/common/AbstractUserController.java", "endpoints": {"api_summary": "The AbstractUserController defines a set of REST API endpoints for managing users in the Abixen platform. It includes endpoints for creating, updating, deleting, and retrieving user information, as well as endpoints for managing user roles and avatars.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users/{id}", "/users", "/users/{id}/avatar/{hash}", "/users/{id}/avatar", "/users/{id}/roles", "/users/{id}/password", "/selected-language/{selectedLanguage}"]}}
{"file": "cloned/abixen-platform/abixen-platform-core/src/main/java/com/abixen/platform/core/interfaces/web/application/ApplicationLayoutController.java", "endpoints": {"api_summary": "The ApplicationLayoutController API provides endpoints for managing dashboard layouts in the Abixen platform. It allows users to retrieve a list of all dashboard layouts, as well as retrieve a specific layout by ID.", "methods": ["GET"], "paths": ["/api/application/layouts", "/api/application/layouts/<id>"]}}
{"file": "cloned/abixen-platform/abixen-platform-core/src/main/java/com/abixen/platform/core/interfaces/web/application/ApplicationUserController.java", "endpoints": {"api_summary": "The ApplicationUserController API provides endpoints for managing users in the Abixen platform. It allows for the creation, retrieval, update, and deletion of users, as well as the ability to search for users by name or email.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/application/users", "/api/application/users/<built-in function id>"]}}
{"file": "cloned/abixen-platform/abixen-platform-core/src/main/java/com/abixen/platform/core/interfaces/web/application/CommentVoteController.java", "endpoints": {"api_summary": "The CommentVoteController API allows for the creation, deletion, and retrieval of comment votes. It also provides validation and error handling for comment vote creation.", "methods": ["POST", "DELETE"], "paths": ["/api/comment-votes", "/api/comment-votes/{id}"]}}
{"file": "cloned/abixen-platform/abixen-platform-core/src/main/java/com/abixen/platform/core/interfaces/web/application/ApplicationPageController.java", "endpoints": {"api_summary": "The ApplicationPageController API provides endpoints for managing pages in the Abixen platform. It allows for the retrieval of all pages, as well as the creation, update, and deletion of individual pages.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/application/pages", "/api/application/pages/<page_id>"]}}
{"file": "cloned/abixen-platform/abixen-platform-core/src/main/java/com/abixen/platform/core/interfaces/web/application/ApplicationUserActivationController.java", "endpoints": {"api_summary": "The ApplicationUserActivationController API allows for the activation of users in the Abixen platform. It provides a single endpoint for activating a user using a user hash key.", "methods": ["GET"], "paths": ["/api/user-activation/activate/{userHashKey}/"]}}
{"file": "cloned/abixen-platform/abixen-platform-core/src/main/java/com/abixen/platform/core/interfaces/web/application/DashboardController.java", "endpoints": {"api_summary": "The DashboardController API provides endpoints for managing dashboards in the Abixen platform. It allows users to create, update, and configure dashboards, as well as retrieve information about specific dashboards.", "methods": ["GET", "POST", "PUT"], "paths": ["/api/page-configurations/{id}", "/api/page-configurations", "/api/page-configurations/{id}/configure"]}}
{"file": "cloned/abixen-platform/abixen-platform-core/src/main/java/com/abixen/platform/core/interfaces/web/application/ApplicationModuleTypeController.java", "endpoints": {"api_summary": "The ApplicationModuleTypeController API provides endpoints for managing module types in the Abixen platform. It allows for retrieving a list of all module types, as well as creating, updating, and deleting individual module types.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/application/module-types", "/api/application/module-types/<module_type_id>"]}}
{"file": "cloned/abixen-platform/abixen-platform-core/src/main/java/com/abixen/platform/core/interfaces/web/application/CommentController.java", "endpoints": {"api_summary": "The CommentController API provides endpoints for managing comments on a module. It allows for creating, updating, and deleting comments, as well as retrieving all comments for a given module.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/comments", "/api/comments/{id}"]}}
{"file": "cloned/abixen-platform/abixen-platform-core/src/main/java/com/abixen/platform/core/application/service/CommentManagementService.java", "endpoints": {"api_summary": "The CommentManagementService API provides endpoints for managing comments on a module. It allows users to create, update, and delete comments, as well as retrieve all comments for a given module.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/comments", "/comments/<comment_id>", "/comments/<comment_id>/children"]}}
{"file": "cloned/abixen-platform/abixen-platform-core/src/main/java/com/abixen/platform/core/application/service/LayoutManagementService.java", "endpoints": {"api_summary": "The LayoutManagementService provides endpoints for managing layouts, including creating, updating, deleting, and retrieving layouts. It also provides an endpoint for changing the icon of a layout.", "methods": ["POST", "PUT", "DELETE", "GET"], "paths": ["/layouts", "/layouts/<id>", "/layouts/<id>/icon"]}}
{"file": "cloned/abixen-platform/abixen-platform-core/src/test/java/com/abixen/platform/core/interfaces/CommentControllerTest.java", "endpoints": {"api_summary": "This API provides functionality for managing comments on a module. It allows for creating, updating, and deleting comments, as well as retrieving a list of comments for a given module.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/comments/", "/api/comments/<comment_id>"]}}
{"file": "cloned/abixen-platform/abixen-platform-core/src/test/java/com/abixen/platform/core/infrastructure/configuration/PlatformTestSecurityConfiguration.java", "endpoints": {"api_summary": "The PlatformTestSecurityConfiguration class defines the security configuration for the Abixen Platform test environment. It configures the authentication and authorization for the API endpoints, allowing access to certain endpoints for all users and restricting access to other endpoints to authenticated users only.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api-intranet/", "/api/control-panel/users/custom/username/*/", "/api/control-panel/module-types/all", "/api/control-panel/securities/**", "/api/resources", "/api/user-activation/activate/*/", "/hystrix.stream"]}}
{"file": "cloned/abixen-platform/abixen-platform-web-content-service/src/main/java/com/abixen/platform/service/webcontent/interfaces/web/TemplateController.java", "endpoints": {"api_summary": "The TemplateController API provides endpoints for managing templates, including creating, updating, deleting, and retrieving templates, as well as retrieving template variables.", "methods": ["POST", "PUT", "DELETE", "GET"], "paths": ["/api/service/abixen/web-content/control-panel/templates", "/api/service/abixen/web-content/control-panel/templates/{id}", "/api/service/abixen/web-content/control-panel/templates/{id}/variables", "/api/service/abixen/web-content/control-panel/templates?page=<page_number>&size=<page_size>", "/api/service/abixen/web-content/control-panel/templates/all"]}}
{"file": "cloned/abixen-platform/abixen-platform-web-content-service/src/main/java/com/abixen/platform/service/webcontent/interfaces/web/AbstractWebContentController.java", "endpoints": {"api_summary": "The AbstractWebContentController defines a REST API for managing web content. It provides endpoints for retrieving and manipulating web content, including pagination and sorting.", "methods": ["GET"], "paths": ["/webcontent"]}}
{"file": "cloned/abixen-platform/abixen-platform-web-content-service/src/main/java/com/abixen/platform/service/webcontent/interfaces/web/ConfigurationController.java", "endpoints": {"api_summary": "The ConfigurationController API provides a RESTful interface for retrieving the configuration properties of the Web Content Service.", "methods": ["GET"], "paths": ["/api/configuration"]}}
{"file": "cloned/abixen-platform/abixen-platform-web-content-service/src/main/java/com/abixen/platform/service/webcontent/interfaces/web/WebContentModuleConfigurationController.java", "endpoints": {"api_summary": "The WebContentModuleConfigurationController API provides endpoints for managing web content module configurations. It allows users to create, update, and retrieve web content module configurations.", "methods": ["GET", "POST", "PUT"], "paths": ["/api/service/abixen/web-content/application/web-content-module-config/{moduleId}", "/api/service/abixen/web-content/application/web-content-module-config"]}}
{"file": "cloned/abixen-platform/abixen-platform-web-content-service/src/main/java/com/abixen/platform/service/webcontent/interfaces/web/ApplicationWebContentController.java", "endpoints": {"api_summary": "The ApplicationWebContentController API provides endpoints for managing and retrieving web content for the Abixen platform. It allows for the creation, retrieval, and deletion of web content, as well as the ability to retrieve a specific web content by ID.", "methods": ["GET"], "paths": ["/api/service/abixen/web-content/application/web-contents/{id}"]}}
{"file": "cloned/abixen-platform/abixen-platform-web-content-service/src/main/java/com/abixen/platform/service/webcontent/interfaces/web/ControlPanelWebContentController.java", "endpoints": {"api_summary": "The ControlPanelWebContentController API provides endpoints for managing web content in the Abixen platform. It allows for creating, updating, and deleting web content, as well as retrieving a specific web content by ID.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/service/abixen/web-content/control-panel/web-contents/{id}"]}}
{"file": "cloned/abixen-platform/abixen-platform-web-content-service/src/main/java/com/abixen/platform/service/webcontent/interfaces/web/StructureController.java", "endpoints": {"api_summary": "The StructureController API provides endpoints for managing structures in the Abixen platform. It allows for creating, updating, deleting, and retrieving structures, as well as retrieving a list of all structures.", "methods": ["POST", "PUT", "DELETE", "GET"], "paths": ["/api/service/abixen/web-content/control-panel/structures", "/api/service/abixen/web-content/control-panel/structures/{id}", "/api/service/abixen/web-content/control-panel/structures/all"]}}
{"file": "cloned/abixen-platform/abixen-platform-web-content-service/src/main/web/service/abixen/web-content/control-panel/modules/structure/js/structure.config.js", "endpoints": {"api_summary": "The webContentServiceStructureModule API provides endpoints for managing the structure of web content in the Abixen Systems control panel. It allows for listing, adding, and editing web content structures, as well as retrieving details about specific structures.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/application/webContentService/structure", "/application/webContentService/structure/list", "/application/webContentService/structure/add", "/application/webContentService/structure/edit/:id"]}}
{"file": "cloned/abixen-platform/abixen-platform-web-content-service/src/main/web/service/abixen/web-content/control-panel/modules/structure/js/structure.factory.js", "endpoints": {"api_summary": "The Abixen Web Content Service Structure API provides endpoints for managing web content structures, including querying, updating, and retrieving all structures.", "methods": ["GET", "PUT"], "paths": ["/api/service/abixen/web-content/control-panel/structures/:id", "/api/service/abixen/web-content/control-panel/structures/all"]}}
{"file": "cloned/abixen-platform/abixen-platform-web-content-service/src/main/web/service/abixen/web-content/control-panel/modules/template/js/template.config.js", "endpoints": {"api_summary": "The webContentServiceTemplateModule module defines a set of REST API endpoints for managing web content templates. The endpoints allow for listing, adding, editing, and deleting templates, as well as retrieving details about a specific template.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/template", "/template/list", "/template/add", "/template/edit/:id"]}}
{"file": "cloned/abixen-platform/abixen-platform-business-intelligence-service/src/main/java/com/abixen/platform/service/businessintelligence/multivisualisation/interfaces/client/ConfigurationController.java", "endpoints": {"api_summary": "The Business Intelligence Service Configuration API provides endpoints for retrieving configuration properties for the service.", "methods": ["GET"], "paths": ["/api/configuration"]}}
{"file": "cloned/abixen-platform/abixen-platform-business-intelligence-service/src/main/java/com/abixen/platform/service/businessintelligence/multivisualisation/interfaces/web/DataSourceController.java", "endpoints": {"api_summary": "The Multi-Visualisation Data Source API provides endpoints for managing data sources for the Multi-Visualisation module. It allows for creating, updating, and deleting data sources, as well as retrieving preview data for a given data source.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/service/abixen/business-intelligence/control-panel/multi-visualisation/data-sources", "/api/service/abixen/business-intelligence/control-panel/multi-visualisation/data-sources/{id}", "/api/service/abixen/business-intelligence/control-panel/multi-visualisation/data-sources/preview"]}}
{"file": "cloned/abixen-platform/abixen-platform-business-intelligence-service/src/main/java/com/abixen/platform/service/businessintelligence/multivisualisation/interfaces/web/ChartInitController.java", "endpoints": {"api_summary": "The ChartInitController API provides a RESTful interface for initializing and retrieving information about multi-visualization charts in the Abixen platform.", "methods": ["GET"], "paths": ["/api/service/abixen/business-intelligence/application/multi-visualisation/{id}"]}}
{"file": "cloned/abixen-platform/abixen-platform-business-intelligence-service/src/main/java/com/abixen/platform/service/businessintelligence/multivisualisation/interfaces/web/ChartModuleConfigurationController.java", "endpoints": {"api_summary": "The ChartModuleConfigurationController API provides endpoints for managing chart configurations for the Multi-Visualisation module in the Abixen platform.", "methods": ["GET", "POST", "PUT"], "paths": ["/api/service/abixen/business-intelligence/application/multi-visualisation/configuration/{moduleId}", "/api/service/abixen/business-intelligence/application/multi-visualisation/configuration", "/api/service/abixen/business-intelligence/application/multi-visualisation/configuration/{id}"]}}
{"file": "cloned/abixen-platform/abixen-platform-business-intelligence-service/src/main/java/com/abixen/platform/service/businessintelligence/multivisualisation/interfaces/web/DatabaseConnectionController.java", "endpoints": {"api_summary": "The Multi-Visualisation API allows users to manage database connections and retrieve information about tables and columns in those databases.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/service/abixen/business-intelligence/control-panel/multi-visualisation/database-connections", "/api/service/abixen/business-intelligence/control-panel/multi-visualisation/database-connections/{id}", "/api/service/abixen/business-intelligence/control-panel/multi-visualisation/database-connections/{id}/tables", "/api/service/abixen/business-intelligence/control-panel/multi-visualisation/database-connections/{id}/tables/{tableName}/columns"]}}
{"file": "cloned/abixen-platform/abixen-platform-business-intelligence-service/src/main/java/com/abixen/platform/service/businessintelligence/multivisualisation/interfaces/web/ChartDataController.java", "endpoints": {"api_summary": "The Multi-Visualisation API allows users to retrieve data for charts and visualisations. It provides endpoints for finding data for a specific chart or for all charts in a module.", "methods": ["POST"], "paths": ["/api/service/abixen/business-intelligence/application/multi-visualisation/data/{seriesName}", "/api/service/abixen/business-intelligence/application/multi-visualisation/data"]}}
{"file": "cloned/abixen-platform/abixen-platform-business-intelligence-service/src/main/java/com/abixen/platform/service/businessintelligence/multivisualisation/interfaces/web/DataFileController.java", "endpoints": {"api_summary": "The API provides endpoints for managing data files and their columns, as well as parsing and deleting files.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/service/abixen/business-intelligence/control-panel/multi-visualisation/file-data", "/api/service/abixen/business-intelligence/control-panel/multi-visualisation/file-data/{id}", "/api/service/abixen/business-intelligence/control-panel/multi-visualisation/file-data/{id}/columns", "/api/service/abixen/business-intelligence/control-panel/multi-visualisation/file-data/parse/{readFirstColumnAsColumnName}"]}}
{"file": "cloned/abixen-platform/abixen-platform-business-intelligence-service/src/main/web/service/abixen/business-intelligence/control-panel/multi-visualisation/javascript/data-source.factory.js", "endpoints": {"api_summary": "The Abixen Business Intelligence Control Panel Multi-Visualisation Data Sources API allows users to manage data sources for multi-visualisation dashboards. It provides endpoints for querying, updating, and previewing data sources.", "methods": ["GET", "PUT", "POST"], "paths": ["/api/service/abixen/business-intelligence/control-panel/multi-visualisation/data-sources/:id", "/api/service/abixen/business-intelligence/control-panel/multi-visualisation/data-sources/preview"]}}
{"file": "cloned/abixen-platform/abixen-platform-business-intelligence-service/src/main/web/service/abixen/business-intelligence/control-panel/multi-visualisation/modules/database-connection/javascript/database-connection.factory.js", "endpoints": {"api_summary": "The Abixen Business Intelligence Control Panel API provides endpoints for managing database connections, testing connections, retrieving tables and columns, and performing other operations related to data visualization and analysis.", "methods": ["GET", "PUT", "POST"], "paths": ["/api/service/abixen/business-intelligence/control-panel/multi-visualisation/database-connections/:id", "/api/service/abixen/business-intelligence/control-panel/multi-visualisation/database-connections/test", "/api/service/abixen/business-intelligence/control-panel/multi-visualisation/database-connections/:id/tables", "/api/service/abixen/business-intelligence/control-panel/multi-visualisation/database-connections/:id/tables/:tableName/columns"]}}
{"file": "cloned/abixen-platform/abixen-platform-business-intelligence-service/src/main/web/service/abixen/business-intelligence/control-panel/multi-visualisation/modules/file-data/javascript/file-data.factory.js", "endpoints": {"api_summary": "The FileData service provides a REST API for managing file data in the Abixen platform. It allows for querying, updating, and parsing file data, as well as retrieving information about the columns in a file.", "methods": ["GET", "PUT", "POST"], "paths": ["/api/service/abixen/business-intelligence/control-panel/multi-visualisation/file-data/:id", "/api/service/abixen/business-intelligence/control-panel/multi-visualisation/file-data/:id/columns", "/api/service/abixen/business-intelligence/control-panel/multi-visualisation/file-data/parse/:readFirstColumnAsColumnName"]}}
{"file": "cloned/abixen-platform/abixen-platform-business-intelligence-service/src/main/web/service/abixen/business-intelligence/application/multi-visualisation/javascript/multivisualisation-data.factory.js", "endpoints": {"api_summary": "The API provides a way to retrieve data for a multi-visualization application. It allows for querying data by series name and returns an array of data points.", "methods": ["POST"], "paths": ["/api/service/abixen/business-intelligence/application/multi-visualisation/data/:seriesName"]}}
{"file": "cloned/abixen-platform/abixen-platform-business-intelligence-service/src/main/web/service/abixen/business-intelligence/application/multi-visualisation/javascript/application-data-source.factory.js", "endpoints": {"api_summary": "The Abixen Systems platformChartModule API provides access to business intelligence data sources for the control panel multi-visualization feature.", "methods": ["GET"], "paths": ["/api/service/abixen/business-intelligence/control-panel/multi-visualisation/data-sources/"]}}
{"file": "cloned/abixen-platform/abixen-platform-web-client/src/main/java/com/abixen/platform/client/web/client/ModuleTypeClient.java", "endpoints": {"api_summary": "The ModuleTypeClient API provides a list of all module types available in the Abixen platform.", "methods": ["GET"], "paths": ["/api/control-panel/module-types/all"]}}
{"file": "cloned/abixen-platform/abixen-platform-web-client/src/main/java/com/abixen/platform/client/web/controller/LoginViewController.java", "endpoints": {"api_summary": "The LoginViewController class defines a REST API endpoint for rendering the login page. The endpoint is accessible at the URL path '/login' and supports the GET HTTP method.", "methods": ["GET"], "paths": ["/login"]}}
{"file": "cloned/abixen-platform/abixen-platform-web-client/src/main/java/com/abixen/platform/client/web/controller/AdminViewController.java", "endpoints": {"api_summary": "The AdminViewController class defines a REST API endpoint for rendering the admin page of the Abixen platform. The endpoint is accessible at the URL '/control-panel' and supports the GET method.", "methods": ["GET"], "paths": ["/control-panel"]}}
{"file": "cloned/abixen-platform/abixen-platform-web-client/src/main/java/com/abixen/platform/client/web/controller/ApplicationViewController.java", "endpoints": {"api_summary": "The API provides a list of resources and AngularJS modules for the Abixen platform.", "methods": ["GET"], "paths": ["/"]}}
{"file": "cloned/abixen-platform/abixen-platform-web-client/src/main/web/control-panel/modules/role/javascript/role.config.js", "endpoints": {"api_summary": "The platformRoleModuleConfig function defines a set of states for the application.roles module, each with a specific URL and template. The states include a list of roles, a form to add or edit a role, and a form to define permissions for a role.", "methods": ["GET", "POST"], "paths": ["/roles", "/roles/list", "/roles/add", "/roles/edit/:id", "/roles/permissions/:id"]}}
{"file": "cloned/abixen-platform/abixen-platform-web-client/src/main/web/control-panel/modules/module-type/javascript/module-type.config.js", "endpoints": {"api_summary": "This API provides endpoints for managing module types in the control panel. It includes endpoints for listing, creating, updating, and deleting module types, as well as endpoints for managing permissions and resources for module types.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/module-types", "/module-types/list", "/module-types/permissions/:id", "/module-types/:id/resources/list"]}}
{"file": "cloned/abixen-platform/abixen-platform-web-client/src/main/web/control-panel/modules/user/javascript/user.factory.js", "endpoints": {"api_summary": "The User API provides endpoints for managing users in the control panel. It includes endpoints for querying, updating, and selecting the language for a user.", "methods": ["GET", "PUT"], "paths": ["/api/control-panel/users/:id", "/api/control-panel/users/selected-language/:selectedLanguage"]}}
{"file": "cloned/abixen-platform/abixen-platform-web-client/src/main/web/control-panel/modules/module/javascript/module.config.js", "endpoints": {"api_summary": "The platformModuleModuleConfig function defines a set of states for the application.modules module, each with a URL and a template. The states include a list of modules, a form to add or edit a module, and a form to manage permissions for a module.", "methods": ["GET", "POST"], "paths": ["/modules", "/modules/list", "/modules/add", "/modules/edit/:id", "/modules/permissions/:id"]}}
{"file": "cloned/abixen-platform/abixen-platform-web-client/src/main/web/application/javascript/user-password.factory.js", "endpoints": {"api_summary": "The UserPassword API allows for the management of user passwords for the Abixen Systems platform. It provides a single endpoint for updating the password of a user, which can be accessed via the HTTP POST method at the URL '/api/application/users/:id/password'.", "methods": ["POST"], "paths": ["/api/application/users/:id/password"]}}
{"file": "cloned/abixen-platform/abixen-platform-web-client/src/main/web/application/javascript/user.factory.js", "endpoints": {"api_summary": "The User API provides endpoints for managing users in the platformApplication. It allows for querying, updating, and selecting the language for a user.", "methods": ["GET", "PUT"], "paths": ["/api/application/users/:id", "/api/application/users/selected-language/:selectedLanguage"]}}
{"file": "cloned/front-end/server.js", "endpoints": {"api_summary": "This API provides endpoints for managing a shopping cart, accessing product catalogues, placing orders, and managing user accounts. It also includes endpoints for tracking metrics and serving static files.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/cart", "/catalogue", "/orders", "/user", "/metrics", "/public"]}}
{"file": "cloned/front-end/public/js/client.js", "endpoints": {"api_summary": "This API provides endpoints for user authentication, registration, and order management. It also includes endpoints for managing user addresses and credit cards.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/login", "/register", "/orders", "/cart", "/cart/update", "/customers/<id>", "/addresses", "/cards"]}}
{"file": "cloned/front-end/api/catalogue/index.js", "endpoints": {"api_summary": "The API provides access to a catalogue of images and tags, allowing users to retrieve and manipulate image and tag data.", "methods": ["GET"], "paths": ["/catalogue/images*", "/catalogue*", "/tags"]}}
{"file": "cloned/front-end/api/orders/index.js", "endpoints": {"api_summary": "This API allows users to retrieve and create orders. It also provides endpoints for retrieving and creating customer information, addresses, and cards.", "methods": ["GET", "POST"], "paths": ["/orders", "/orders/*", "/orders/search/customerId", "/customers", "/customers/*", "/addresses", "/addresses/*", "/cards", "/cards/*"]}}
{"file": "cloned/front-end/api/metrics/index.js", "endpoints": {"api_summary": "The API provides a set of endpoints for managing a shopping cart, catalogue, orders, and user information. It also includes a metrics endpoint for monitoring API performance.", "methods": ["GET", "POST"], "paths": ["/cart", "/catalogue", "/orders", "/user", "/metrics"]}}
{"file": "cloned/front-end/api/cart/index.js", "endpoints": {"api_summary": "This API provides endpoints for managing a shopping cart. It allows users to list items in their cart, add new items, delete items, and update item quantities.", "methods": ["GET", "POST", "DELETE", "PATCH"], "paths": ["/cart", "/cart/:id", "/cart/update"]}}
{"file": "cloned/front-end/test/helpers_test.js", "endpoints": {"api_summary": "This file defines several helper functions for handling HTTP requests and responses, including error handling, response formatting, and simple HTTP requests.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/", "/category.html/", "/"]}}
{"file": "cloned/front-end/test/api/endpoints_test.js", "endpoints": {"api_summary": "This API provides endpoints for managing a catalogue of products, handling user authentication and registration, and managing user information such as addresses and payment methods.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/catalogue", "/tags", "/carts", "/orders", "/customers", "/addresses", "/cards", "/login", "/register"]}}
{"file": "cloned/container.training/dockercoins/rng/rng.py", "endpoints": {"api_summary": "This API provides a simple interface for generating random numbers. It includes an endpoint for generating a specified number of random bytes and a default endpoint for returning a message indicating the hostname of the server.", "methods": ["GET", "POST"], "paths": ["/", "/<int:how_many_bytes>"]}}
{"file": "cloned/container.training/dockercoins/webui/webui.js", "endpoints": {"api_summary": "This API provides a simple web interface for interacting with a Redis database. It allows for retrieving the number of coins in a wallet, the hashes of the wallet, and the current timestamp.", "methods": ["GET"], "paths": ["/", "/json"]}}
{"file": "cloned/container.training/webhooks/admission/flask/webhook.py", "endpoints": {"api_summary": "This API is a webhook that validates the color label of a Kubernetes pod. It accepts POST requests and returns a JSON object with the validation result.", "methods": ["POST"], "paths": ["/"]}}
{"file": "cloned/clean-architecture-manga/wallet-spa/src/store/transactionService.js", "endpoints": {"api_summary": "This API provides endpoints for depositing, withdrawing, and transferring funds between accounts.", "methods": ["PATCH"], "paths": ["/api/v1/transactions/<accountId>/deposit", "/api/v1/transactions/<accountId>/withdraw", "/api/v1/transactions/<originAccountId>/<destinationAccountId>"]}}
{"file": "cloned/clean-architecture-manga/wallet-spa/src/store/accountsService.js", "endpoints": {"api_summary": "The API provides endpoints for managing accounts, including retrieving a list of accounts, retrieving a specific account by ID, opening a new account, and closing an existing account.", "methods": ["GET", "POST", "DELETE"], "paths": ["/api/v1/accounts", "/api/v1/accounts/<built-in function id>"]}}
{"file": "cloned/clean-architecture-manga/wallet-spa/src/routes/routes.js", "endpoints": {"api_summary": "This API defines routes for user authentication and authorization, including sign-in, sign-out, registration, and silent renewal. It also provides a private route for accessing a dashboard and a public route for accessing a public page.", "methods": ["GET", "POST"], "paths": ["/signin-oidc", "/logout", "/logout/callback", "/register", "/silentrenew", "/dashboard", "/"]}}
{"file": "cloned/polkabtc-js/test/integration/parachain/staging/sequential/oracle.partial.ts", "endpoints": {"api_summary": "This API is used for testing the Oracle module of the Interlay parachain. It includes endpoints for setting exchange rates, converting wrapped to collateral currency, getting sources by ID, getting online timeout, getting valid until, and checking if the oracle is online.", "methods": ["GET", "POST"], "paths": ["/oracle/setExchangeRate", "/oracle/convertWrappedToCurrency", "/oracle/getSourcesById", "/oracle/getOnlineTimeout", "/oracle/getValidUntil", "/oracle/isOnline"]}}
{"file": "cloned/polkabtc-js/test/integration/parachain/staging/sequential/amm.partial.ts", "endpoints": {"api_summary": "This API is used for managing liquidity pools and performing swaps between different cryptocurrencies.", "methods": ["GET", "POST"], "paths": ["/liquidityPools", "/liquidityPools/<liquidity_pool_id>", "/swaps"]}}
{"file": "cloned/polkabtc-js/test/integration/parachain/staging/sequential/asset-registry.partial.ts", "endpoints": {"api_summary": "This API is used to interact with the AssetRegistry module of the Interlay parachain. It allows for the registration and management of assets on the parachain, and provides information about the assets that are registered.", "methods": ["GET", "POST"], "paths": ["/assetRegistry", "/assetRegistry/metadata", "/assetRegistry/collateralForeignAssets"]}}
{"file": "cloned/polkabtc-js/test/integration/parachain/staging/sequential/replace.partial.ts", "endpoints": {"api_summary": "This API defines endpoints for requesting vault replacement and getting dust value, replace period, and replace requests by a vault.", "methods": ["GET", "POST"], "paths": ["/replace", "/dustValue", "/replacePeriod", "/replaceRequests"]}}
{"file": "cloned/polkabtc-js/test/integration/parachain/staging/sequential/escrow.partial.ts", "endpoints": {"api_summary": "This API defines endpoints for managing escrow accounts, including creating locks, increasing amounts, and increasing unlock heights.", "methods": ["GET", "POST"], "paths": ["/escrow", "/escrow/<account_id>", "/escrow/<account_id>/lock", "/escrow/<account_id>/increase_amount", "/escrow/<account_id>/increase_unlock_height"]}}
{"file": "cloned/polkabtc-js/test/integration/parachain/staging/sequential/redeem.partial.ts", "endpoints": {"api_summary": "This API is used for redeeming wrapped tokens in the interBTC system. It includes endpoints for issuing and redeeming wrapped tokens, as well as for getting information about redeem requests and fees.", "methods": ["GET", "POST"], "paths": ["/redeem", "/redeem/<redeem_id>", "/redeem/fees"]}}
{"file": "cloned/polkabtc-js/src/clients/faucet.ts", "endpoints": {"api_summary": "The FaucetClient class provides a JSON-RPC client for the FundAccountJsonRpcRequest endpoint, which allows funding an account with a specific currency.", "methods": ["POST"], "paths": ["/fund_account"]}}
{"file": "cloned/polkabtc-js/src/parachain/oracle.ts", "endpoints": {"api_summary": "This API provides functionality for interacting with the Interlay BTC Bridge, including getting the exchange rate between Bitcoin and a collateral currency, setting the exchange rate, and getting the current fee estimate for BTC transactions.", "methods": ["GET", "POST"], "paths": ["/getExchangeRate", "/setExchangeRate", "/getBitcoinFees", "/setBitcoinFees"]}}
{"file": "cloned/polkabtc-js/src/parachain/tokens.ts", "endpoints": {"api_summary": "The TokensAPI interface provides methods for interacting with the tokens module in a Substrate-based blockchain. It includes methods for querying the total supply of a token, getting the balance of an account, building and sending a transfer transaction, and setting the balance of an account.", "methods": ["GET", "POST"], "paths": ["/tokens/total", "/tokens/balance", "/tokens/transfer", "/tokens/setBalance"]}}
{"file": "cloned/polkabtc-js/src/parachain/fee.ts", "endpoints": {"api_summary": "The FeeAPI provides methods for calculating griefing collateral, issue fee, and APY for the BTC Bridge.", "methods": ["GET", "POST"], "paths": ["/fee/griefing-collateral", "/fee/issue-fee", "/fee/apy"]}}
{"file": "cloned/polkabtc-js/src/parachain/rewards.ts", "endpoints": {"api_summary": "This API provides functionality for managing rewards for staking pools in the Interlay system.", "methods": ["GET", "POST"], "paths": ["/rewards/staking-pool/nonce", "/rewards/staking-pool/collateral", "/rewards/staking-pool/withdraw"]}}
{"file": "cloned/polkabtc-js/src/parachain/asset-registry.ts", "endpoints": {"api_summary": "The AssetRegistryAPI provides methods for retrieving information about foreign assets in the asset registry, including their metadata and collateral ceiling.", "methods": ["GET", "POST"], "paths": ["/foreignAssets", "/foreignAssets/<id>", "/collateralForeignAssets"]}}
{"file": "cloned/polkabtc-js/src/parachain/system.ts", "endpoints": {"api_summary": "The SystemAPI provides information about the current block number, active block number, and allows for the upgrade of the runtime using `sudoUncheckedWeight`.", "methods": ["GET", "POST"], "paths": ["/system/currentBlockNumber", "/system/activeBlockNumber", "/system/setCode"]}}
{"file": "cloned/train-ticket/ts-inside-payment-service/src/main/java/inside_payment/controller/InsidePaymentController.java", "endpoints": {"api_summary": "The InsidePayment API allows users to pay for orders, create accounts, add money to accounts, query payments and accounts, and draw back payments. It also allows for paying differences in payments.", "methods": ["GET", "POST"], "paths": ["/api/v1/inside_pay_service/welcome", "/api/v1/inside_pay_service/inside_payment", "/api/v1/inside_pay_service/inside_payment/account", "/api/v1/inside_pay_service/inside_payment/{userId}/{money}", "/api/v1/inside_pay_service/inside_payment/payment", "/api/v1/inside_pay_service/inside_payment/account", "/api/v1/inside_pay_service/inside_payment/drawback/{userId}/{money}", "/api/v1/inside_pay_service/inside_payment/difference", "/api/v1/inside_pay_service/inside_payment/money"]}}
{"file": "cloned/train-ticket/ts-inside-payment-service/src/main/java/inside_payment/service/InsidePaymentService.java", "endpoints": {"api_summary": "The InsidePaymentService API provides endpoints for managing payments and accounts. It allows for paying by payment info, creating accounts by payment info, adding money to an account, querying payment and account information, and drawing back money from an account. It also provides an endpoint for initializing payments.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/inside_payment/pay", "/inside_payment/createAccount", "/inside_payment/addMoney", "/inside_payment/queryPayment", "/inside_payment/queryAccount", "/inside_payment/drawBack", "/inside_payment/payDifference", "/inside_payment/queryAddMoney", "/inside_payment/initPayment"]}}
{"file": "cloned/train-ticket/ts-inside-payment-service/src/test/java/inside_payment/controller/InsidePaymentControllerTest.java", "endpoints": {"api_summary": "The InsidePayment API provides endpoints for managing payments and accounts within the InsidePayment service. It includes endpoints for creating accounts, making payments, querying payment and account information, and more.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/v1/inside_pay_service/inside_payment", "/api/v1/inside_pay_service/inside_payment/account", "/api/v1/inside_pay_service/inside_payment/payment", "/api/v1/inside_pay_service/inside_payment/user_id/money", "/api/v1/inside_pay_service/inside_payment/drawback/user_id/money", "/api/v1/inside_pay_service/inside_payment/difference"]}}
{"file": "cloned/train-ticket/ts-admin-basic-info-service/src/main/java/adminbasic/config/SecurityConfig.java", "endpoints": {"api_summary": "This API provides endpoints for managing admin basic information, such as stations, trains, prices, and contacts. It also provides endpoints for authentication and authorization.", "methods": ["GET", "POST"], "paths": ["/api/v1/adminbasicservice/adminbasic/stations", "/api/v1/adminbasicservice/adminbasic/trains", "/api/v1/adminbasicservice/adminbasic/prices", "/api/v1/adminbasicservice/adminbasic/configs", "/api/v1/adminbasicservice/adminbasic/contacts"]}}
{"file": "cloned/train-ticket/ts-admin-basic-info-service/src/main/java/adminbasic/controller/AdminBasicInfoController.java", "endpoints": {"api_summary": "The AdminBasicInfoController provides a RESTful API for managing basic information in the system, including contacts, stations, trains, configs, and prices. It supports CRUD operations for each resource and provides a welcome message for the API.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/v1/adminbasicservice/welcome", "/api/v1/adminbasicservice/adminbasic/contacts", "/api/v1/adminbasicservice/adminbasic/contacts/{contactsId}", "/api/v1/adminbasicservice/adminbasic/stations", "/api/v1/adminbasicservice/adminbasic/stations/{id}", "/api/v1/adminbasicservice/adminbasic/trains", "/api/v1/adminbasicservice/adminbasic/trains/{id}", "/api/v1/adminbasicservice/adminbasic/configs", "/api/v1/adminbasicservice/adminbasic/configs/{name}", "/api/v1/adminbasicservice/adminbasic/prices", "/api/v1/adminbasicservice/adminbasic/prices/{pricesId}"]}}
{"file": "cloned/train-ticket/ts-admin-basic-info-service/src/main/java/adminbasic/service/AdminBasicInfoServiceImpl.java", "endpoints": {"api_summary": "This API provides basic information for the transportation system, including contact information, station information, train information, and price information.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/v1/contactservice/contacts", "/api/v1/stationservice/stations", "/api/v1/trainservice/trains", "/api/v1/configservice/configs", "/api/v1/priceservice/prices"]}}
{"file": "cloned/train-ticket/ts-admin-basic-info-service/src/main/java/adminbasic/service/AdminBasicInfoService.java", "endpoints": {"api_summary": "The AdminBasicInfoService API provides endpoints for managing basic information about trains, stations, and prices. It includes endpoints for adding, deleting, and modifying information about trains, stations, and prices, as well as endpoints for retrieving all information of a particular type.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/adminbasic/trains", "/adminbasic/stations", "/adminbasic/prices"]}}
{"file": "cloned/train-ticket/ts-verification-code-service/src/main/java/verifycode/controller/VerifyCodeController.java", "endpoints": {"api_summary": "The VerifyCode API provides endpoints for generating and verifying verification codes. The generate endpoint returns an image with a verification code, and the verify endpoint checks if the provided code matches the one in the image.", "methods": ["GET", "POST"], "paths": ["/api/v1/verifycode/generate", "/api/v1/verifycode/verify/{verifyCode}"]}}
{"file": "cloned/train-ticket/ts-verification-code-service/src/main/java/verifycode/service/impl/VerifyCodeServiceImpl.java", "endpoints": {"api_summary": "This API provides a service for generating and verifying captcha codes. It includes endpoints for generating an image with a random code and verifying the code entered by the user.", "methods": ["GET", "POST"], "paths": ["/verifycode/image", "/verifycode/verify"]}}
{"file": "cloned/train-ticket/ts-assurance-service/src/main/java/assurance/controller/AssuranceController.java", "endpoints": {"api_summary": "The Assurance Service API provides endpoints for managing assurances, including creating, reading, updating, and deleting assurances. It also provides endpoints for retrieving assurance types and finding assurances by order ID.", "methods": ["GET", "POST", "DELETE", "PATCH"], "paths": ["/api/v1/assuranceservice/welcome", "/api/v1/assuranceservice/assurances", "/api/v1/assuranceservice/assurances/types", "/api/v1/assuranceservice/assurances/assuranceid/{assuranceId}", "/api/v1/assuranceservice/assurances/orderid/{orderId}", "/api/v1/assuranceservice/assurances/{assuranceId}/{orderId}/{typeIndex}", "/api/v1/assuranceservice/assurances/{typeIndex}/{orderId}", "/api/v1/assuranceservice/assurances/assuranceid/{assuranceId}", "/api/v1/assuranceservice/assurances/orderid/{orderId}"]}}
{"file": "cloned/train-ticket/ts-assurance-service/src/main/java/assurance/service/AssuranceServiceImpl.java", "endpoints": {"api_summary": "The Assurance Service API provides endpoints for managing assurance information, including creating, reading, updating, and deleting assurance records. It also provides an endpoint for retrieving all assurance types.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/assurance", "/assurance/<assurance_id>", "/assurance/<order_id>", "/assurance/types"]}}
{"file": "cloned/train-ticket/ts-assurance-service/src/main/java/assurance/service/AssuranceService.java", "endpoints": {"api_summary": "The Assurance Service API provides endpoints for managing assurances and assurance types. It allows for creating, reading, updating, and deleting assurances, as well as retrieving all assurances and assurance types.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/assurance", "/assurance/<assuranceId>", "/assurance/<orderId>", "/assurance/<typeIndex>", "/assurance/<assuranceId>/<orderId>", "/assurance/<assuranceId>/<typeIndex>", "/assurance/<orderId>/<typeIndex>", "/assurance/<assuranceId>/<orderId>/<typeIndex>", "/assurance/all", "/assurance/types"]}}
{"file": "cloned/train-ticket/ts-assurance-service/src/test/java/assurance/controller/AssuranceControllerTest.java", "endpoints": {"api_summary": "The Assurance API provides endpoints for managing assurances, including creating, modifying, and deleting assurances, as well as retrieving information about assurances and assurance types.", "methods": ["GET", "POST", "PATCH", "DELETE"], "paths": ["/api/v1/assuranceservice/welcome", "/api/v1/assuranceservice/assurances", "/api/v1/assuranceservice/assurances/types", "/api/v1/assuranceservice/assurances/assuranceid/{assuranceId}", "/api/v1/assuranceservice/assurances/orderid/{orderId}", "/api/v1/assuranceservice/assurances/assurance_id/order_id/1", "/api/v1/assuranceservice/assurances/1/order_id", "/api/v1/assuranceservice/assurances/assuranceid/{assuranceId}", "/api/v1/assuranceservice/assurance/orderid/{orderId}"]}}
{"file": "cloned/train-ticket/ts-wait-order-service/src/main/java/waitorder/controller/WaitListOrderController.java", "endpoints": {"api_summary": "The Wait Order Service API allows users to create and manage wait list orders for train tickets. It provides endpoints for creating new orders, retrieving all orders, and retrieving all wait list orders.", "methods": ["GET", "POST"], "paths": ["/api/v1/waitorderservice/welcome", "/api/v1/waitorderservice/order", "/api/v1/waitorderservice/orders", "/api/v1/waitorderservice/waitlistorders"]}}
{"file": "cloned/train-ticket/ts-wait-order-service/src/main/java/waitorder/service/WaitListOrderService.java", "endpoints": {"api_summary": "The WaitListOrderService API provides endpoints for managing wait list orders, including creating, retrieving, updating, and deleting orders. It also provides an endpoint for getting all orders, including completed and expired ones, and an endpoint for getting all orders in the wait list.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/waitorder/service/findOrderById", "/waitorder/service/create", "/waitorder/service/getAllOrders", "/waitorder/service/updateOrder", "/waitorder/service/modifyWaitListOrderStatus", "/waitorder/service/getAllWaitListOrders"]}}
{"file": "cloned/train-ticket/ts-wait-order-service/src/main/java/waitorder/service/Impl/WaitListOrderServiceImpl.java", "endpoints": {"api_summary": "This API is responsible for managing wait list orders for a train ticket booking system. It allows users to create, read, update, and delete wait list orders, as well as retrieve information about all wait list orders and all orders in the wait list.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/waitlistorders", "/waitlistorders/<order_id>", "/waitlistorders/<order_id>/status"]}}
{"file": "cloned/train-ticket/ts-order-other-service/src/main/java/other/repository/OrderOtherRepository.java", "endpoints": {"api_summary": "The OrderOtherRepository API provides a way to manage orders for a travel agency. It allows for the creation, retrieval, update, and deletion of orders, as well as searching for orders by account ID, travel date, and train number.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/orders", "/orders/<id>", "/orders/account/<accountId>", "/orders/travelDate/<travelDate>/trainNumber/<trainNumber>"]}}
{"file": "cloned/train-ticket/ts-order-other-service/src/main/java/other/controller/OrderOtherController.java", "endpoints": {"api_summary": "The Order Other Service API provides endpoints for managing orders, including creating, querying, and modifying orders. It also provides endpoints for calculating sold tickets and getting order prices. The API supports cross-origin requests.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/v1/orderOtherService/welcome", "/api/v1/orderOtherService/orderOther/tickets", "/api/v1/orderOtherService/orderOther", "/api/v1/orderOtherService/orderOther/admin", "/api/v1/orderOtherService/orderOther/query", "/api/v1/orderOtherService/orderOther/refresh", "/api/v1/orderOtherService/orderOther/{travelDate}/{trainNumber}", "/api/v1/orderOtherService/orderOther/price/{orderId}", "/api/v1/orderOtherService/orderOther/orderPay/{orderId}", "/api/v1/orderOtherService/orderOther/{orderId}", "/api/v1/orderOtherService/orderOther/status/{orderId}/{status}", "/api/v1/orderOtherService/orderOther/security/{checkDate}/{accountId}", "/api/v1/orderOtherService/orderOther", "/api/v1/orderOtherService/orderOther/admin"]}}
{"file": "cloned/train-ticket/ts-order-other-service/src/main/java/other/service/OrderOtherServiceImpl.java", "endpoints": {"api_summary": "This API provides various order-related services, such as creating, modifying, and querying orders. It also includes endpoints for getting sold tickets and querying orders for a specific user.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/orders", "/orders/<order_id>", "/orders/sold_tickets", "/orders/query"]}}
{"file": "cloned/train-ticket/ts-order-other-service/src/main/java/other/service/OrderOtherService.java", "endpoints": {"api_summary": "The OrderOtherService API provides a set of endpoints for managing orders, including creating, updating, and querying orders. It also provides endpoints for paying for orders and getting order information.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/orders", "/orders/<orderId>", "/orders/<orderId>/pay", "/orders/<orderId>/info"]}}
{"file": "cloned/train-ticket/ts-news-service/src/main/main.go", "endpoints": {"api_summary": "This API provides a simple news service that allows users to retrieve news articles. The API has a single endpoint that returns a list of news articles in JSON format.", "methods": ["GET"], "paths": ["/news"]}}
{"file": "cloned/train-ticket/ts-admin-travel-service/src/main/java/admintravel/controller/AdminTravelController.java", "endpoints": {"api_summary": "The AdminTravel API provides endpoints for managing travel information, including adding, updating, and deleting travels. It also provides a welcome message and a way to get all travels.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/v1/admintravelservice/welcome", "/api/v1/admintravelservice/admintravel", "/api/v1/admintravelservice/admintravel/{tripId}"]}}
{"file": "cloned/train-ticket/ts-admin-travel-service/src/main/java/admintravel/service/AdminTravelService.java", "endpoints": {"api_summary": "The AdminTravelService API provides endpoints for managing travel information, including getting all travels, adding a new travel, updating an existing travel, and deleting a travel by trip ID.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/admintravel/service/getAllTravels", "/admintravel/service/addTravel", "/admintravel/service/updateTravel", "/admintravel/service/deleteTravel"]}}
{"file": "cloned/train-ticket/ts-admin-travel-service/src/main/java/admintravel/service/AdminTravelServiceImpl.java", "endpoints": {"api_summary": "This API provides travel information and allows for the creation, update, and deletion of travels.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/v1/travelservice/admin_trip", "/api/v1/travel2service/admin_trip", "/api/v1/travelservice/trips", "/api/v1/travel2service/trips", "/api/v1/travelservice/trips/{tripId}", "/api/v1/travel2service/trips/{tripId}"]}}
{"file": "cloned/train-ticket/ts-admin-travel-service/src/test/java/admintravel/controller/AdminTravelControllerTest.java", "endpoints": {"api_summary": "The AdminTravelControllerTest class provides a set of test cases for the AdminTravelController, which defines a set of REST API endpoints for managing travel information. The endpoints include GET, POST, PUT, and DELETE methods for retrieving, creating, updating, and deleting travel information.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/v1/admintravelservice/welcome", "/api/v1/admintravelservice/admintravel", "/api/v1/admintravelservice/admintravel/trip_id"]}}
{"file": "cloned/train-ticket/ts-admin-travel-service/src/test/java/admintravel/service/AdminTravelServiceImplTest.java", "endpoints": {"api_summary": "The AdminTravelServiceImplTest class provides a set of test methods for the AdminTravelServiceImpl class, which is a part of the admintravel.service package. The test methods cover various scenarios for the getAllTravels, addTravel, updateTravel, and deleteTravel methods of the AdminTravelServiceImpl class.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/v1/travelservice/admin_trip", "/api/v1/travelservice/trips", "/api/v1/travel2service/trips"]}}
{"file": "cloned/train-ticket/ts-ticket-office-service/app.js", "endpoints": {"api_summary": "This API provides a simple CRUD interface for managing office locations, including creating, reading, updating, and deleting locations. It also includes a method for initializing the database and handling errors.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/office", "/office/<built-in function id>"]}}
{"file": "cloned/train-ticket/ts-ticket-office-service/bin/db.js", "endpoints": {"api_summary": "This API provides a simple CRUD interface for managing ticket offices, including creating, reading, updating, and deleting offices.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/offices", "/offices/<built-in function id>"]}}
{"file": "cloned/train-ticket/ts-ticket-office-service/bin/router.js", "endpoints": {"api_summary": "This API provides endpoints for managing and querying ticket office information, including getting a list of all offices, getting a specific office, adding a new office, deleting an office, and updating an office.", "methods": ["GET", "POST"], "paths": ["/", "/getRegionList", "/getAll", "/getSpecificOffices", "/addOffice", "/deleteOffice", "/updateOffice"]}}
{"file": "cloned/train-ticket/ts-ticket-office-service/node_modules/acorn/dist/acorn_loose.js", "endpoints": {"api_summary": "This API endpoint allows users to retrieve a list of all available endpoints.", "methods": ["GET"], "paths": ["/endpoints"]}}
{"file": "cloned/train-ticket/ts-ticket-office-service/node_modules/mysql/node_modules/readable-stream/lib/_stream_readable.js", "endpoints": {"api_summary": "This API provides a simple way to interact with the system.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users", "/users/<built-in function id>"]}}
{"file": "cloned/train-ticket/ts-ticket-office-service/node_modules/serve-favicon/index.js", "endpoints": {"api_summary": "This file defines a middleware function for serving a favicon.ico file. The function takes a path to the favicon file and options as input, and returns a function that can be used as a middleware in an Express.js application.", "methods": ["GET", "HEAD", "OPTIONS"], "paths": ["/favicon.ico"]}}
{"file": "cloned/train-ticket/ts-ticket-office-service/node_modules/qs/test/parse.js", "endpoints": {"api_summary": "This file defines a simple REST API with a single endpoint for parsing a query string.", "methods": ["GET"], "paths": ["/parse"]}}
{"file": "cloned/train-ticket/ts-ticket-office-service/node_modules/mongodb/lib/cursor/aggregation_cursor.js", "endpoints": {"api_summary": "This API is an internal class that embodies an aggregation cursor on MongoDB, allowing for iteration over the results returned from the underlying query. It supports one by one document iteration, conversion to an array or can be iterated as a Node 4.X or higher stream.", "methods": ["GET", "POST"], "paths": ["/users", "/users/<built-in function id>"]}}
{"file": "cloned/train-ticket/ts-ticket-office-service/node_modules/mongodb/src/gridfs/index.ts", "endpoints": {"api_summary": "This file defines a GridFSBucket class for streaming file data from GridFS.", "methods": ["openUploadStream", "openUploadStreamWithId", "openDownloadStream", "delete", "find", "openDownloadStreamByName", "rename", "drop"], "paths": ["/fs.chunks", "/fs.files"]}}
{"file": "cloned/train-ticket/ts-ticket-office-service/node_modules/mongodb/src/cursor/aggregation_cursor.ts", "endpoints": {"api_summary": "This API is an internal class that embodies an aggregation cursor on MongoDB, allowing for iteration over the results returned from the underlying query. It supports one by one document iteration, conversion to an array, or can be iterated as a Node 4.X or higher stream.", "methods": ["GET", "POST"], "paths": ["/users", "/users/<built-in function id>"]}}
{"file": "cloned/train-ticket/ts-ticket-office-service/node_modules/mongodb/src/cursor/change_stream_cursor.ts", "endpoints": {"api_summary": "This API is a change stream cursor that allows for real-time monitoring of changes to a MongoDB collection or database.", "methods": ["GET", "POST"], "paths": ["/change_stream"]}}
{"file": "cloned/train-ticket/ts-ticket-office-service/node_modules/iconv-lite/encodings/sbcs-data-generated.js", "endpoints": {"api_summary": "This file defines a REST API for managing a repository of codecs.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/codecs", "/codecs/<codec_id>", "/codecs/<codec_id>/<built-in_function_id>"]}}
{"file": "cloned/train-ticket/ts-ticket-office-service/node_modules/express/node_modules/qs/test/parse.js", "endpoints": {"api_summary": "This file defines a simple REST API with a single endpoint for parsing a query string.", "methods": ["GET"], "paths": ["/parse"]}}
{"file": "cloned/train-ticket/ts-ticket-office-service/node_modules/express/lib/router/route.js", "endpoints": {"api_summary": "This file defines a Route class that can be used to handle HTTP requests and dispatch them to the appropriate handler functions. It also defines methods for adding handlers for different HTTP methods (e.g., GET, POST, PUT, DELETE) and for handling errors.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/"]}}
{"file": "cloned/train-ticket/ts-ticket-office-service/node_modules/@types/node/http.d.ts", "endpoints": {"api_summary": "This file defines a Node.js HTTP server and client. It does not define any REST API endpoints.", "methods": [], "paths": []}}
{"file": "cloned/train-ticket/ts-station-service/src/main/java/fdse/microservice/controller/StationController.java", "endpoints": {"api_summary": "The Station Service API provides endpoints for managing stations, including creating, updating, and deleting stations, as well as querying for station information by name or ID.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/v1/stationservice/welcome", "/api/v1/stationservice/stations", "/api/v1/stationservice/stations/{stationId}", "/api/v1/stationservice/stations/id/{stationNameForId}", "/api/v1/stationservice/stations/idlist", "/api/v1/stationservice/stations/name/{stationIdForName}", "/api/v1/stationservice/stations/namelist"]}}
{"file": "cloned/train-ticket/ts-station-service/src/main/java/fdse/microservice/service/StationService.java", "endpoints": {"api_summary": "The StationService API provides CRUD operations for managing station information. It allows for creating, updating, and deleting station information, as well as querying for station information by name or ID.", "methods": ["POST", "GET", "PUT", "DELETE"], "paths": ["/stations", "/stations/<station_name>", "/stations/<station_id>"]}}
{"file": "cloned/train-ticket/ts-station-service/src/test/java/fdse/microservice/controller/StationControllerTest.java", "endpoints": {"api_summary": "The StationControllerTest class defines a set of REST API endpoints for managing stations. The endpoints include querying, creating, updating, and deleting stations, as well as querying for station IDs and names.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/v1/stationservice/welcome", "/api/v1/stationservice/stations", "/api/v1/stationservice/stations/id/station_name", "/api/v1/stationservice/stations/idlist", "/api/v1/stationservice/stations/name/station_id", "/api/v1/stationservice/stations/namelist"]}}
{"file": "cloned/train-ticket/ts-price-service/src/main/java/price/controller/PriceController.java", "endpoints": {"api_summary": "The Price Service API provides endpoints for managing prices for different train routes and types. It allows for querying, creating, updating, and deleting prices, as well as retrieving all prices.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/v1/priceservice/prices/welcome", "/api/v1/priceservice/prices/{routeId}/{trainType}", "/api/v1/priceservice/prices/byRouteIdsAndTrainTypes", "/api/v1/priceservice/prices", "/api/v1/priceservice/prices/{pricesId}"]}}
{"file": "cloned/train-ticket/ts-price-service/src/main/java/price/service/PriceServiceImpl.java", "endpoints": {"api_summary": "The PriceServiceImpl class provides a set of methods for managing price configurations, including creating, finding, updating, and deleting price configurations. The methods are exposed as REST API endpoints and can be accessed through the appropriate HTTP methods.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/price/create", "/price/findById", "/price/findByRouteIdAndTrainType", "/price/findByRouteIdsAndTrainTypes", "/price/findAll", "/price/delete"]}}
{"file": "cloned/train-ticket/ts-price-service/src/main/java/price/service/PriceService.java", "endpoints": {"api_summary": "The Price Service API provides endpoints for managing price configurations for a transportation system. It allows for creating, reading, updating, and deleting price configurations, as well as finding price configurations by various criteria.", "methods": ["POST", "GET", "PUT", "DELETE"], "paths": ["/price/configs", "/price/configs/<id>", "/price/configs/route/<route_id>", "/price/configs/route/<route_id>/train/<train_type>", "/price/configs/all"]}}
{"file": "cloned/train-ticket/ts-price-service/src/test/java/price/controller/PriceControllerTest.java", "endpoints": {"api_summary": "The Price Service API provides endpoints for managing price configurations for a train route. It allows for querying, creating, updating, and deleting price configurations.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/v1/priceservice/prices/welcome", "/api/v1/priceservice/prices/route_id/train_type", "/api/v1/priceservice/prices", "/api/v1/priceservice/prices"]}}
{"file": "cloned/train-ticket/ts-contacts-service/src/main/java/contacts/repository/ContactsRepository.java", "endpoints": {"api_summary": "The ContactsRepository API provides a way to manage contacts in a database. It allows for creating, reading, updating, and deleting contacts, as well as searching for contacts by account ID and document type.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/contacts", "/contacts/<id>", "/contacts/search/accountId/<accountId>", "/contacts/search/documentType/<documentType>"]}}
{"file": "cloned/train-ticket/ts-contacts-service/src/main/java/contacts/controller/ContactsController.java", "endpoints": {"api_summary": "The Contacts API provides endpoints for managing contacts in a repository. It allows for creating, reading, updating, and deleting contacts, as well as finding contacts by account ID or contact ID.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/contacts/welcome", "/contacts", "/contacts/admin", "/contacts/{contactsId}", "/contacts/account/{accountId}", "/contacts/{id}"]}}
{"file": "cloned/train-ticket/ts-contacts-service/src/main/java/contacts/service/ContactsService.java", "endpoints": {"api_summary": "The Contacts API provides endpoints for creating, reading, updating, and deleting contacts. It also provides endpoints for finding contacts by ID or account ID.", "methods": ["POST", "GET", "PUT", "DELETE"], "paths": ["/contacts", "/contacts/<id>", "/contacts/account/<accountId>"]}}
{"file": "cloned/train-ticket/ts-contacts-service/src/main/java/contacts/service/ContactsServiceImpl.java", "endpoints": {"api_summary": "The ContactsServiceImpl class provides methods for managing contacts in a repository. It defines endpoints for finding, creating, modifying, and deleting contacts.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/contacts", "/contacts/<contactsId>", "/contacts/<accountId>", "/contacts/<documentType>", "/contacts/<documentNumber>"]}}
{"file": "cloned/train-ticket/ts-contacts-service/src/test/java/contacts/controller/ContactsControllerTest.java", "endpoints": {"api_summary": "The Contacts API allows users to create, read, update, and delete contacts. It also provides endpoints for finding contacts by account ID and contact ID.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/v1/contactservice/contacts", "/api/v1/contactservice/contacts/<contactsId>", "/api/v1/contactservice/contacts/account/<accountId>"]}}
{"file": "cloned/train-ticket/ts-ui-dashboard/static/assets/js/admin_user.js", "endpoints": {"api_summary": "This API provides endpoints for managing users in an admin panel. It allows for creating, updating, and deleting users, as well as retrieving a list of users.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/v1/adminuserservice/users", "/api/v1/adminuserservice/users/<userId>"]}}
{"file": "cloned/train-ticket/ts-ui-dashboard/static/assets/js/admin_route.js", "endpoints": {"api_summary": "This API provides a list of routes and allows for the addition, update, and deletion of routes.", "methods": ["GET", "POST", "DELETE"], "paths": ["/api/v1/adminrouteservice/adminroute"]}}
{"file": "cloned/train-ticket/ts-ui-dashboard/static/assets/js/admin_price.js", "endpoints": {"api_summary": "This API provides endpoints for managing prices for train routes, including adding, updating, and deleting prices. It also provides an endpoint for retrieving a list of prices.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/v1/adminbasicservice/adminbasic/prices", "/api/v1/adminbasicservice/adminbasic/prices/<id>"]}}
{"file": "cloned/train-ticket/ts-ui-dashboard/static/assets/js/adminlogin.js", "endpoints": {"api_summary": "This API provides a login functionality for the myApp application. It allows users to authenticate using a username and password, and returns a token that can be used to access protected resources.", "methods": ["POST"], "paths": ["/api/v1/users/login"]}}
{"file": "cloned/train-ticket/ts-ui-dashboard/static/assets/js/admin_contacts.js", "endpoints": {"api_summary": "This API provides endpoints for managing contacts, including adding, updating, and deleting contacts. It also provides an endpoint for retrieving a list of contacts.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/v1/adminbasicservice/adminbasic/contacts", "/api/v1/adminbasicservice/adminbasic/contacts/<contact_id>"]}}
{"file": "cloned/train-ticket/ts-ui-dashboard/static/assets/js/admin_train.js", "endpoints": {"api_summary": "This API provides endpoints for managing train information, including adding, updating, and deleting trains, as well as retrieving a list of all trains.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/v1/adminbasicservice/adminbasic/trains", "/api/v1/adminbasicservice/adminbasic/trains/<built-in function id>"]}}
{"file": "cloned/train-ticket/ts-ui-dashboard/static/js/food.js", "endpoints": {"api_summary": "This API provides information about food options available on a train and allows users to place orders for food. It also provides a list of all food orders placed on the train.", "methods": ["GET", "POST"], "paths": ["/food/getFood", "/food/findAllFoodOrder"]}}
{"file": "cloned/train-ticket/ts-ui-dashboard/static/js/insidePayment.js", "endpoints": {"api_summary": "This API provides endpoints for querying and managing payments within a single microservice. It includes endpoints for querying account information, payment information, and adding money to an account.", "methods": ["GET", "POST"], "paths": ["/inside_payment/queryAccount", "/inside_payment/queryPayment", "/inside_payment/queryAddMoney", "/inside_payment/pay"]}}
{"file": "cloned/train-ticket/ts-ui-dashboard/static/js/assurance.js", "endpoints": {"api_summary": "This API provides endpoints for managing assurance services, including creating, updating, and retrieving assurance information.", "methods": ["GET", "POST"], "paths": ["/assurance/findAll", "/assurance/modifyAssurance", "/assurance/create"]}}
{"file": "cloned/train-ticket/ts-ui-dashboard/static/js/route.js", "endpoints": {"api_summary": "This API provides functionality for managing routes, including creating, updating, and querying routes.", "methods": ["GET", "POST"], "paths": ["/route/queryAll", "/route/createAndModify"]}}
{"file": "cloned/train-ticket/ts-rebook-service/src/main/java/rebook/controller/RebookController.java", "endpoints": {"api_summary": "The Rebook API allows users to rebook or pay the difference between two trips. It provides endpoints for rebooking and paying the difference, and returns a response indicating the success or failure of the operation.", "methods": ["GET", "POST"], "paths": ["/api/v1/rebookservice/welcome", "/api/v1/rebookservice/rebook/difference", "/api/v1/rebookservice/rebook"]}}
{"file": "cloned/train-ticket/ts-rebook-service/src/main/java/rebook/service/RebookServiceImpl.java", "endpoints": {"api_summary": "This API allows users to rebook their train tickets, with the ability to change the train, seat, and time of travel.", "methods": ["GET", "POST"], "paths": ["/rebook", "/payDifference"]}}
{"file": "cloned/train-ticket/ts-travel-plan-service/src/main/java/travelplan/controller/TravelPlanController.java", "endpoints": {"api_summary": "The Travel Plan Service API provides endpoints for searching for the cheapest, quickest, and minimum station travel plans. It also provides a welcome message endpoint for testing the service.", "methods": ["GET", "POST"], "paths": ["/api/v1/travelplanservice/welcome", "/api/v1/travelplanservice/travelPlan/transferResult", "/api/v1/travelplanservice/travelPlan/cheapest", "/api/v1/travelplanservice/travelPlan/quickest", "/api/v1/travelplanservice/travelPlan/minStation"]}}
{"file": "cloned/train-ticket/ts-travel-plan-service/src/main/java/travelplan/service/TravelPlanService.java", "endpoints": {"api_summary": "The TravelPlanService API provides endpoints for searching for transfers, finding the cheapest or quickest routes, and getting information about the minimum number of stations required for a trip.", "methods": ["GET"], "paths": ["/travelplan/transfer", "/travelplan/cheapest", "/travelplan/quickest", "/travelplan/minstation"]}}
{"file": "cloned/train-ticket/ts-travel-plan-service/src/test/java/travelplan/controller/TravelPlanControllerTest.java", "endpoints": {"api_summary": "The Travel Plan Service API provides endpoints for searching and retrieving travel plans based on various criteria, such as cheapest, quickest, and minimum number of transfers. The API also provides a welcome message endpoint for testing purposes.", "methods": ["GET", "POST"], "paths": ["/api/v1/travelplanservice/welcome", "/api/v1/travelplanservice/travelPlan/transferResult", "/api/v1/travelplanservice/travelPlan/cheapest", "/api/v1/travelplanservice/travelPlan/quickest", "/api/v1/travelplanservice/travelPlan/minStation"]}}
{"file": "cloned/train-ticket/ts-seat-service/src/main/java/seat/controller/SeatController.java", "endpoints": {"api_summary": "The Seat Service API provides endpoints for managing seats on a train, including assigning seats and querying the number of available seats. The API also includes a welcome message endpoint for testing purposes.", "methods": ["GET", "POST"], "paths": ["/api/v1/seatservice/welcome", "/api/v1/seatservice/seats", "/api/v1/seatservice/seats/left_tickets"]}}
{"file": "cloned/train-ticket/ts-seat-service/src/main/java/seat/service/SeatServiceImpl.java", "endpoints": {"api_summary": "The SeatServiceImpl class provides methods for distributing and querying the number of available seats on a train. It uses the RestTemplate to call other microservices to retrieve information about the train and the number of sold tickets.", "methods": ["GET", "POST"], "paths": ["/api/v1/orderservice/order/tickets", "/api/v1/orderOtherService/orderOther/tickets", "/api/v1/configservice/configs/DirectTicketAllocationProportion"]}}
{"file": "cloned/train-ticket/ts-seat-service/src/test/java/seat/controller/SeatControllerTest.java", "endpoints": {"api_summary": "The Seat Service API provides endpoints for managing seats and retrieving information about available seats on a train. It also provides an endpoint for retrieving the number of available seats between two stations.", "methods": ["GET", "POST"], "paths": ["/api/v1/seatservice/welcome", "/api/v1/seatservice/seats", "/api/v1/seatservice/seats/left_tickets"]}}
{"file": "cloned/train-ticket/ts-food-service/src/main/java/foodsearch/controller/FoodController.java", "endpoints": {"api_summary": "The Food Service API provides endpoints for managing food orders, including creating, updating, and retrieving orders, as well as getting all food for a given date and trip.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/v1/foodservice/welcome", "/api/v1/foodservice/test_send_delivery", "/api/v1/foodservice/orders", "/api/v1/foodservice/orders/{orderId}", "/api/v1/foodservice/foods/{date}/{startStation}/{endStation}/{tripId}"]}}
{"file": "cloned/train-ticket/ts-food-service/src/main/java/foodsearch/service/FoodService.java", "endpoints": {"api_summary": "The FoodService API allows for the creation, deletion, and retrieval of food orders, as well as the ability to find all food orders and get all food for a specific date and trip.", "methods": ["POST", "DELETE", "GET"], "paths": ["/foodsearch/service/createFoodOrder", "/foodsearch/service/createFoodOrdersInBatch", "/foodsearch/service/deleteFoodOrder", "/foodsearch/service/findByOrderId", "/foodsearch/service/updateFoodOrder", "/foodsearch/service/findAllFoodOrder", "/foodsearch/service/getAllFood"]}}
{"file": "cloned/train-ticket/ts-food-service/src/test/java/adminorder/controller/FoodControllerTest.java", "endpoints": {"api_summary": "The Food Service API provides endpoints for managing food orders and retrieving information about food. It includes endpoints for creating, updating, and deleting food orders, as well as endpoints for retrieving information about food and food orders.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/v1/foodservice/welcome", "/api/v1/foodservice/orders", "/api/v1/foodservice/orders/order_id", "/api/v1/foodservice/foods/date/start_station/end_station/trip_id"]}}
{"file": "cloned/train-ticket/ts-preserve-service/src/main/java/preserve/controller/PreserveController.java", "endpoints": {"api_summary": "The Preserve Service API allows users to reserve tickets for a train journey. It provides a single endpoint for preserving a ticket, which can be accessed using the POST method. The endpoint accepts an OrderTicketsInfo object in the request body and returns a HttpEntity object in the response.", "methods": ["POST"], "paths": ["/api/v1/preserveservice/preserve"]}}
{"file": "cloned/train-ticket/ts-preserve-service/src/main/java/preserve/service/PreserveServiceImpl.java", "endpoints": {"api_summary": "This API is responsible for preserving orders and related information, including ticket reservations, food orders, and consignments. It also includes security checks and contact information retrieval.", "methods": ["GET", "POST"], "paths": ["/api/v1/preserve/orders", "/api/v1/preserve/foodorders", "/api/v1/preserve/consigns"]}}
{"file": "cloned/train-ticket/ts-preserve-service/src/test/java/preserve/service/PreserveServiceImplTest.java", "endpoints": {"api_summary": "The Preserve Service API is responsible for handling requests related to ticket reservations and provides endpoints for checking security, adding assurance for orders, creating food orders, creating consignments, sending emails, getting contacts by ID, getting trip all detail information, querying for station ID, travel results, dispatching seats, creating orders, and getting accounts.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/v1/preserveservice/checkSecurity", "/api/v1/preserveservice/addAssuranceForOrder", "/api/v1/preserveservice/createFoodOrder", "/api/v1/preserveservice/createConsign", "/api/v1/preserveservice/sendEmail", "/api/v1/preserveservice/getContactsById", "/api/v1/preserveservice/getTripAllDetailInformation", "/api/v1/preserveservice/queryForStationId", "/api/v1/preserveservice/travelResult", "/api/v1/preserveservice/dipatchSeat", "/api/v1/preserveservice/createOrder", "/api/v1/preserveservice/getAccount"]}}
{"file": "cloned/train-ticket/ts-user-service/src/main/java/user/controller/UserController.java", "endpoints": {"api_summary": "The UserController API provides endpoints for managing users in a system. It allows for creating, reading, updating, and deleting users, as well as retrieving a list of all users.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/v1/userservice/users", "/api/v1/userservice/users/hello", "/api/v1/userservice/users/{userName}", "/api/v1/userservice/users/id/{userId}", "/api/v1/userservice/users/register"]}}
{"file": "cloned/train-ticket/ts-user-service/src/main/java/user/service/impl/UserServiceImpl.java", "endpoints": {"api_summary": "This API provides user management functionality, including user creation, retrieval, update, and deletion. It also includes authentication and authorization functionality.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/v1/users", "/api/v1/users/<userId>", "/api/v1/auth"]}}
{"file": "cloned/train-ticket/ts-user-service/src/test/java/user/controller/UserControllerTest.java", "endpoints": {"api_summary": "The UserControllerTest class defines a set of REST API endpoints for managing users in a system. The endpoints include GET, POST, PUT, and DELETE methods for retrieving, creating, updating, and deleting user information.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/v1/userservice/users", "/api/v1/userservice/users/hello", "/api/v1/userservice/users/user_name", "/api/v1/userservice/users/id/user_id", "/api/v1/userservice/users/register", "/api/v1/userservice/users/id/user_id"]}}
{"file": "cloned/train-ticket/ts-notification-service/src/main/java/notification/controller/NotificationController.java", "endpoints": {"api_summary": "The Notification Service API provides endpoints for sending notifications and managing notification preferences. It also includes endpoints for testing the notification service and sending test notifications.", "methods": ["GET", "POST"], "paths": ["/api/v1/notifyservice/welcome", "/api/v1/notifyservice/test_send_mq", "/api/v1/notifyservice/test_send_mail", "/api/v1/notifyservice/notification/preserve_success", "/api/v1/notifyservice/notification/order_create_success", "/api/v1/notifyservice/notification/order_changed_success", "/api/v1/notifyservice/notification/order_cancel_success"]}}
{"file": "cloned/train-ticket/ts-notification-service/src/test/java/notification/controller/NotificationControllerTest.java", "endpoints": {"api_summary": "The Notification Service API provides endpoints for sending notifications to users. It includes endpoints for preserving notifications, creating orders, changing orders, and canceling orders.", "methods": ["GET", "POST"], "paths": ["/api/v1/notifyservice/welcome", "/api/v1/notifyservice/notification/preserve_success", "/api/v1/notifyservice/notification/order_create_success", "/api/v1/notifyservice/notification/order_changed_success", "/api/v1/notifyservice/notification/order_cancel_success"]}}
{"file": "cloned/train-ticket/ts-preserve-other-service/src/main/java/preserveOther/controller/PreserveOtherController.java", "endpoints": {"api_summary": "The Preserve Other API allows users to reserve tickets for other services, such as hotel reservations or event tickets. It provides a simple interface for users to search and book tickets, and also allows for the cancellation of reservations.", "methods": ["GET", "POST"], "paths": ["/api/v1/preserveotherservice/welcome", "/api/v1/preserveotherservice/preserveOther"]}}
{"file": "cloned/train-ticket/ts-preserve-other-service/src/main/java/preserveOther/service/PreserveOtherServiceImpl.java", "endpoints": {"api_summary": "This API is responsible for preserving other services, such as creating orders, adding food orders, and consigning. It also includes security checks and contact information retrieval.", "methods": ["GET", "POST"], "paths": ["/api/v1/preserveOtherService/preserve", "/api/v1/preserveOtherService/getContactsById", "/api/v1/preserveOtherService/getTripAllDetailInformation", "/api/v1/preserveOtherService/createOrder", "/api/v1/preserveOtherService/createFoodOrder", "/api/v1/preserveOtherService/createConsign"]}}
{"file": "cloned/train-ticket/ts-preserve-other-service/src/test/java/preserveOther/controller/PreserveOtherControllerTest.java", "endpoints": {"api_summary": "The Preserve Other Service API allows users to reserve tickets for other services, such as hotel reservations or event tickets. The API provides a single endpoint for reserving tickets, which accepts a JSON payload containing the ticket information and returns a response with the reservation details.", "methods": ["POST"], "paths": ["/api/v1/preserveotherservice/preserveOther"]}}
{"file": "cloned/train-ticket/ts-preserve-other-service/src/test/java/preserveOther/service/PreserveOtherServiceImplTest.java", "endpoints": {"api_summary": "The PreserveOtherServiceImplTest class provides a set of test methods for the PreserveOtherServiceImpl class, which is a part of the preserve-other-service module. The test methods cover various scenarios, such as checking the security of the service, creating food orders, and sending emails. The class also provides a method for dispatching seats and getting the account information.", "methods": ["GET", "POST"], "paths": ["/api/v1/preserve-other-service/preserve", "/api/v1/preserve-other-service/dipatch-seat", "/api/v1/preserve-other-service/send-email", "/api/v1/preserve-other-service/get-account"]}}
{"file": "cloned/train-ticket/ts-route-plan-service/src/main/java/plan/controller/RoutePlanController.java", "endpoints": {"api_summary": "The RoutePlan API provides endpoints for searching for the cheapest, quickest, and minimum stop stations for a given route. It also provides a welcome message for the API.", "methods": ["GET", "POST"], "paths": ["/api/v1/routeplanservice/welcome", "/api/v1/routeplanservice/routePlan/cheapestRoute", "/api/v1/routeplanservice/routePlan/quickestRoute", "/api/v1/routeplanservice/routePlan/minStopStations"]}}
{"file": "cloned/train-ticket/ts-route-plan-service/src/main/java/plan/service/RoutePlanServiceImpl.java", "endpoints": {"api_summary": "This API provides route planning services for travelers, including searching for the cheapest or quickest routes, and getting information about the route and the train.", "methods": ["GET", "POST"], "paths": ["/api/v1/routeservice/routes", "/api/v1/travelservice/trips/left", "/api/v1/travel2service/trips/left", "/api/v1/travelservice/trip_detail", "/api/v1/travel2service/trip_detail"]}}
{"file": "cloned/train-ticket/ts-route-plan-service/src/main/java/plan/service/RoutePlanService.java", "endpoints": {"api_summary": "The Route Plan Service API provides endpoints for searching the cheapest, quickest, and minimum stop stations for a given route plan. It also includes endpoints for retrieving information about the route plan and its associated data.", "methods": ["GET", "POST"], "paths": ["/route-plan/cheapest", "/route-plan/quickest", "/route-plan/min-stop-stations"]}}
{"file": "cloned/train-ticket/ts-route-plan-service/src/test/java/plan/controller/RoutePlanControllerTest.java", "endpoints": {"api_summary": "The RoutePlanControllerTest API provides endpoints for searching for the cheapest, quickest, and minimum stop stations for a given route plan. It also provides a welcome message for the API.", "methods": ["GET", "POST"], "paths": ["/api/v1/routeplanservice/welcome", "/api/v1/routeplanservice/routePlan/cheapestRoute", "/api/v1/routeplanservice/routePlan/quickestRoute", "/api/v1/routeplanservice/routePlan/minStopStations"]}}
{"file": "cloned/train-ticket/ts-security-service/src/main/java/security/controller/SecurityController.java", "endpoints": {"api_summary": "The Security Service API provides endpoints for managing security configurations for various accounts. It allows for creating, updating, and deleting security configurations, as well as checking the security status of an account.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/v1/securityservice/welcome", "/api/v1/securityservice/securityConfigs", "/api/v1/securityservice/securityConfigs/{id}", "/api/v1/securityservice/check/{accountId}"]}}
{"file": "cloned/train-ticket/ts-security-service/src/main/java/security/service/SecurityServiceImpl.java", "endpoints": {"api_summary": "The SecurityServiceImpl class provides methods for managing security configurations and checking security-related information. It interacts with the OrderService and OrderOtherService to retrieve security-related data.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/v1/securityservice/security/findall", "/api/v1/securityservice/security/addnew", "/api/v1/securityservice/security/modify", "/api/v1/securityservice/security/delete", "/api/v1/securityservice/security/check"]}}
{"file": "cloned/train-ticket/ts-security-service/src/test/java/security/controller/SecurityControllerTest.java", "endpoints": {"api_summary": "The Security Service API provides endpoints for managing security configurations, including creating, updating, and deleting configurations, as well as checking the status of a specific configuration.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/v1/securityservice/welcome", "/api/v1/securityservice/securityConfigs", "/api/v1/securityservice/securityConfigs/id", "/api/v1/securityservice/securityConfigs/account_id"]}}
{"file": "cloned/train-ticket/ts-travel2-service/src/main/java/travel2/controller/Travel2Controller.java", "endpoints": {"api_summary": "The Travel2 API provides information about trips, routes, and train types. It also allows for the creation, update, and deletion of trips.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/v1/travel2service/welcome", "/api/v1/travel2service/train_types/{tripId}", "/api/v1/travel2service/routes/{tripId}", "/api/v1/travel2service/trips/routes", "/api/v1/travel2service/trips", "/api/v1/travel2service/trips/{tripId}", "/api/v1/travel2service/trips/left", "/api/v1/travel2service/trip_detail", "/api/v1/travel2service/trips", "/api/v1/travel2service/admin_trip"]}}
{"file": "cloned/train-ticket/ts-travel2-service/src/main/java/travel2/service/TravelServiceImpl.java", "endpoints": {"api_summary": "The Travel Service API provides endpoints for managing trips, including creating, retrieving, updating, and deleting trips. It also provides endpoints for querying trips by route, train type, and travel date, as well as endpoints for retrieving all trips and all trips with detailed information.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/trips", "/trips/<trip_id>", "/trips/route/<route_id>", "/trips/train_type/<train_type_name>", "/trips/travel_date/<travel_date>", "/trips/all", "/trips/all/detailed"]}}
{"file": "cloned/train-ticket/ts-travel2-service/src/main/java/travel2/service/TravelService.java", "endpoints": {"api_summary": "The Travel Service API provides endpoints for creating, retrieving, updating, and deleting travel information, as well as querying and retrieving detailed information about trips and routes. It also provides an endpoint for admin querying all travel information.", "methods": ["POST", "GET", "PUT", "DELETE"], "paths": ["/travel/create", "/travel/retrieve", "/travel/update", "/travel/delete", "/travel/query", "/travel/queryByBatch", "/travel/getTripAllDetailInfo", "/travel/getRouteByTripId", "/travel/getTrainTypeByTripId", "/travel/queryAll", "/travel/getTripByRoute", "/travel/adminQueryAll"]}}
{"file": "cloned/train-ticket/ts-travel2-service/src/test/java/travel2/controller/TravelControllerTest.java", "endpoints": {"api_summary": "The Travel2 API provides information about trips and allows users to create, retrieve, update, and delete trips.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/v1/travel2service/welcome", "/api/v1/travel2service/train_types/trip_id", "/api/v1/travel2service/routes/trip_id", "/api/v1/travel2service/trips/routes", "/api/v1/travel2service/trips", "/api/v1/travel2service/trips/trip_id", "/api/v1/travel2service/trips/left", "/api/v1/travel2service/trip_detail", "/api/v1/travel2service/trips", "/api/v1/travel2service/admin_trip"]}}
{"file": "cloned/train-ticket/ts-train-service/src/main/java/train/controller/TrainController.java", "endpoints": {"api_summary": "The Train API provides endpoints for managing train types, including creating, retrieving, updating, and deleting train types. It also provides a query endpoint for retrieving all train types.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/v1/trainservice/trains", "/api/v1/trainservice/trains/welcome", "/api/v1/trainservice/trains/{id}", "/api/v1/trainservice/trains/byName/{name}", "/api/v1/trainservice/trains/byNames"]}}
{"file": "cloned/train-ticket/ts-train-service/src/test/java/train/controller/TrainControllerTest.java", "endpoints": {"api_summary": "The Train API provides endpoints for managing train types, including creating, retrieving, updating, and deleting train types. It also provides an endpoint for querying all train types.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/v1/trainservice/trains", "/api/v1/trainservice/trains/welcome", "/api/v1/trainservice/trains/<id>"]}}
{"file": "cloned/train-ticket/ts-admin-order-service/src/main/java/adminorder/controller/AdminOrderController.java", "endpoints": {"api_summary": "The Admin Order Service API allows for the management of orders for the Fudan University Admin Order System. It provides endpoints for adding, updating, and deleting orders, as well as retrieving all orders.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/v1/adminorderservice/welcome", "/api/v1/adminorderservice/adminorder", "/api/v1/adminorderservice/adminorder/{orderId}/{trainNumber}"]}}
{"file": "cloned/train-ticket/ts-admin-order-service/src/main/java/adminorder/service/AdminOrderServiceImpl.java", "endpoints": {"api_summary": "The AdminOrderServiceImpl class provides methods for managing orders, including getting all orders, deleting an order, updating an order, and adding a new order. The methods in this class make HTTP requests to other services to perform these actions.", "methods": ["GET", "DELETE", "PUT", "POST"], "paths": ["/api/v1/orderservice/order", "/api/v1/orderOtherService/orderOther", "/api/v1/orderservice/order/admin", "/api/v1/orderOtherService/orderOther/admin"]}}
{"file": "cloned/train-ticket/ts-admin-order-service/src/main/java/adminorder/service/AdminOrderService.java", "endpoints": {"api_summary": "The AdminOrderService API provides endpoints for managing orders in a train ticketing system. It allows for the creation, update, and deletion of orders, as well as retrieving all orders.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/adminorder/orders", "/adminorder/orders/<orderId>", "/adminorder/orders/<orderId>/<trainNumber>"]}}
{"file": "cloned/train-ticket/ts-admin-order-service/src/test/java/adminorder/controller/AdminOrderControllerTest.java", "endpoints": {"api_summary": "The AdminOrderControllerTest class provides a set of tests for the AdminOrderController, which is a REST API controller for managing orders in an e-commerce application. The tests cover various endpoints, including getting all orders, adding a new order, updating an existing order, and deleting an order.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/v1/adminorderservice/welcome", "/api/v1/adminorderservice/adminorder", "/api/v1/adminorderservice/adminorder/orderId/trainNumber"]}}
{"file": "cloned/train-ticket/ts-admin-order-service/src/test/java/adminorder/service/AdminOrderServiceImplTest.java", "endpoints": {"api_summary": "The AdminOrderServiceImplTest class provides a set of test methods for the AdminOrderServiceImpl class, which is a part of the adminorder.service package. The test methods cover various scenarios for retrieving, updating, deleting, and adding orders, as well as testing the functionality of the AdminOrderServiceImpl class.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/v1/orderservice/order", "/api/v1/orderOtherService/orderOther"]}}
{"file": "cloned/train-ticket/ts-travel-service/src/main/java/travel/controller/TravelController.java", "endpoints": {"api_summary": "The Travel Service API provides information about trips and their routes, as well as the ability to create, update, and delete trips. It also allows for querying trips by route and retrieving trip details.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/v1/travelservice/welcome", "/api/v1/travelservice/train_types/{tripId}", "/api/v1/travelservice/routes/{tripId}", "/api/v1/travelservice/trips/routes", "/api/v1/travelservice/trips", "/api/v1/travelservice/trips/{tripId}", "/api/v1/travelservice/trips/left", "/api/v1/travelservice/trips/left_parallel", "/api/v1/travelservice/trip_detail", "/api/v1/travelservice/trips", "/api/v1/travelservice/admin_trip"]}}
{"file": "cloned/train-ticket/ts-travel-service/src/main/java/travel/service/TravelServiceImpl.java", "endpoints": {"api_summary": "This API provides travel information and ticket booking services. It allows users to search for trips, view trip details, and book tickets.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/trips", "/trips/<trip_id>", "/trips/<trip_id>/tickets", "/trips/<trip_id>/tickets/<ticket_id>"]}}
{"file": "cloned/train-ticket/ts-travel-service/src/main/java/travel/service/TravelService.java", "endpoints": {"api_summary": "The Travel Service API provides endpoints for creating, retrieving, updating, and deleting travel information, as well as querying and retrieving detailed information about trips and routes.", "methods": ["POST", "GET", "PUT", "DELETE"], "paths": ["/travel/create", "/travel/retrieve", "/travel/update", "/travel/delete", "/travel/query", "/travel/queryByBatch", "/travel/queryInParallel", "/travel/getTripAllDetailInfo", "/travel/getRouteByTripId", "/travel/getTrainTypeByTripId", "/travel/queryAll", "/travel/getTripByRoute", "/travel/adminQueryAll"]}}
{"file": "cloned/train-ticket/ts-travel-service/src/test/java/travel/controller/TravelControllerTest.java", "endpoints": {"api_summary": "The Travel Service API provides endpoints for managing travel information, including train types, routes, and trips. It also provides endpoints for querying and retrieving travel information.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/v1/travelservice/welcome", "/api/v1/travelservice/train_types/trip_id", "/api/v1/travelservice/routes/trip_id", "/api/v1/travelservice/trips/routes", "/api/v1/travelservice/trips", "/api/v1/travelservice/trips/trip_id", "/api/v1/travelservice/trips/left", "/api/v1/travelservice/trip_detail", "/api/v1/travelservice/admin_trip"]}}
{"file": "cloned/train-ticket/ts-cancel-service/src/main/java/cancel/controller/CancelController.java", "endpoints": {"api_summary": "The Cancel Service API provides endpoints for calculating refunds and canceling tickets. It also includes a welcome message endpoint for testing the service.", "methods": ["GET", "POST"], "paths": ["/api/v1/cancelservice/welcome", "/api/v1/cancelservice/cancel/refound/{orderId}", "/api/v1/cancelservice/cancel/{orderId}/{loginId}"]}}
{"file": "cloned/train-ticket/ts-config-service/src/main/java/config/controller/ConfigController.java", "endpoints": {"api_summary": "The Config Service API provides endpoints for managing configuration data. It allows for querying, creating, updating, and deleting configuration data, as well as retrieving a specific configuration by name.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/v1/configservice/welcome", "/api/v1/configservice/configs", "/api/v1/configservice/configs/{configName}"]}}
{"file": "cloned/train-ticket/ts-config-service/src/main/java/config/service/ConfigService.java", "endpoints": {"api_summary": "The ConfigService API provides endpoints for creating, updating, retrieving, and deleting configuration information. It also provides an endpoint for querying all configuration information.", "methods": ["POST", "PUT", "GET", "DELETE"], "paths": ["/config/create", "/config/update", "/config/query", "/config/delete", "/config/queryAll"]}}
{"file": "cloned/train-ticket/ts-config-service/src/test/java/config/controller/ConfigControllerTest.java", "endpoints": {"api_summary": "The Config Service API provides endpoints for managing configuration data. It allows for creating, updating, deleting, and retrieving configuration data. The API also includes a welcome message endpoint for testing purposes.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/v1/configservice/welcome", "/api/v1/configservice/configs", "/api/v1/configservice/configs/config_name"]}}
{"file": "cloned/train-ticket/ts-basic-service/src/main/java/fdse/microservice/controller/BasicController.java", "endpoints": {"api_summary": "The Basic Service API provides endpoints for querying travel information and station IDs. It allows users to query for travels by providing travel information and station names, and returns the corresponding travel results and station IDs.", "methods": ["GET", "POST"], "paths": ["/api/v1/basicservice/welcome", "/api/v1/basicservice/basic/travel", "/api/v1/basicservice/basic/travels", "/api/v1/basicservice/basic/{stationName}"]}}
{"file": "cloned/train-ticket/ts-basic-service/src/main/java/fdse/microservice/service/BasicServiceImpl.java", "endpoints": {"api_summary": "This API provides information about travel options, including train types, routes, and prices. It also allows users to query for travel information based on start and end places, and provides a list of available travels.", "methods": ["GET", "POST"], "paths": ["/travels", "/travels/<built-in function id>", "/stations/<built-in function id>"]}}
{"file": "cloned/train-ticket/ts-basic-service/src/main/java/fdse/microservice/service/BasicService.java", "endpoints": {"api_summary": "The BasicService API provides endpoints for querying travel information and station IDs based on travel information or station names. It also provides a method for querying multiple travels at once.", "methods": ["GET", "POST"], "paths": ["/travels", "/stations/<station_name>", "/travels/<travel_id>"]}}
{"file": "cloned/train-ticket/ts-basic-service/src/test/java/fdse/microservice/controller/BasicControllerTest.java", "endpoints": {"api_summary": "The BasicControllerTest API provides a set of endpoints for testing the BasicController, which is a RESTful API for interacting with the BasicService. The endpoints include a welcome message, a travel query, and a station ID query.", "methods": ["GET", "POST"], "paths": ["/api/v1/basicservice/welcome", "/api/v1/basicservice/basic/travel", "/api/v1/basicservice/basic/stationName"]}}
{"file": "cloned/train-ticket/ts-order-service/src/main/java/order/controller/OrderController.java", "endpoints": {"api_summary": "The Order Service API provides endpoints for managing orders, including creating, querying, and modifying orders. It also provides endpoints for calculating sold tickets and getting order prices.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/v1/orderservice/welcome", "/api/v1/orderservice/order/tickets", "/api/v1/orderservice/order", "/api/v1/orderservice/order/admin", "/api/v1/orderservice/order/query", "/api/v1/orderservice/order/refresh", "/api/v1/orderservice/order/{travelDate}/{trainNumber}", "/api/v1/orderservice/order/price/{orderId}", "/api/v1/orderservice/order/orderPay/{orderId}", "/api/v1/orderservice/order/{orderId}", "/api/v1/orderservice/order/status/{orderId}/{status}", "/api/v1/orderservice/order/security/{checkDate}/{accountId}", "/api/v1/orderservice/order", "/api/v1/orderservice/order/admin", "/api/v1/orderservice/order"]}}
{"file": "cloned/train-ticket/ts-order-service/src/main/java/order/service/OrderService.java", "endpoints": {"api_summary": "The OrderService API provides endpoints for managing orders, including creating, modifying, and querying orders. It also includes endpoints for paying for orders and getting order information.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/orders", "/orders/<orderId>", "/orders/<orderId>/pay", "/orders/<orderId>/info"]}}
{"file": "cloned/train-ticket/ts-consign-service/src/main/java/consign/controller/ConsignController.java", "endpoints": {"api_summary": "The Consign Service API allows users to create, update, and retrieve consign records. It also provides endpoints for finding consign records by account ID, order ID, and consignee.", "methods": ["GET", "POST", "PUT"], "paths": ["/api/v1/consignservice/welcome", "/api/v1/consignservice/consigns", "/api/v1/consignservice/consigns/account/{id}", "/api/v1/consignservice/consigns/order/{id}", "/api/v1/consignservice/consigns/{consignee}"]}}
{"file": "cloned/train-ticket/ts-consign-service/src/main/java/consign/service/ConsignService.java", "endpoints": {"api_summary": "The Consign Service API provides endpoints for inserting, updating, and querying consign records. It also allows for querying by account ID, order ID, and consignee.", "methods": ["POST", "PUT", "GET"], "paths": ["/consign/insert", "/consign/update", "/consign/query/accountId", "/consign/query/orderId", "/consign/query/consignee"]}}
{"file": "cloned/train-ticket/ts-consign-service/src/main/java/consign/service/ConsignServiceImpl.java", "endpoints": {"api_summary": "The Consign Service API provides endpoints for managing consignment records, including creating, updating, and querying consignments by account ID, order ID, and consignee.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/consign/create", "/consign/update", "/consign/queryByAccountId", "/consign/queryByOrderId", "/consign/queryByConsignee"]}}
{"file": "cloned/train-ticket/ts-consign-service/src/test/java/consign/controller/ConsignControllerTest.java", "endpoints": {"api_summary": "The Consign Service API allows users to create, update, and retrieve consignment records. It also provides endpoints for querying consignment records by account ID, order ID, and consignee.", "methods": ["GET", "POST", "PUT"], "paths": ["/api/v1/consignservice/welcome", "/api/v1/consignservice/consigns", "/api/v1/consignservice/consigns/account/<id>", "/api/v1/consignservice/consigns/order/<id>", "/api/v1/consignservice/consigns/consignee"]}}
{"file": "cloned/train-ticket/ts-voucher-service/server.py", "endpoints": {"api_summary": "The API allows for the creation and retrieval of vouchers for train tickets. It also allows for the querying of order details and the insertion of vouchers into the voucher table.", "methods": ["POST"], "paths": ["/getVoucher"]}}
{"file": "cloned/train-ticket/ts-admin-route-service/src/main/java/adminroute/controller/AdminRouteController.java", "endpoints": {"api_summary": "The AdminRoute API provides endpoints for managing routes for a transportation system. It allows for the creation, modification, and deletion of routes, as well as retrieving information about all routes.", "methods": ["GET", "POST", "DELETE"], "paths": ["/api/v1/adminrouteservice/welcome", "/api/v1/adminrouteservice/adminroute", "/api/v1/adminrouteservice/adminroute/{routeId}"]}}
{"file": "cloned/train-ticket/ts-admin-route-service/src/main/java/adminroute/service/AdminRouteServiceImpl.java", "endpoints": {"api_summary": "The AdminRouteServiceImpl class provides a RESTful API for managing routes in a transportation system. It includes endpoints for creating, modifying, and deleting routes, as well as checking the existence of stations.", "methods": ["GET", "POST", "DELETE"], "paths": ["/api/v1/routeservice/routes", "/api/v1/routeservice/routes/<routeId>", "/api/v1/stationservice/stations/idlist"]}}
{"file": "cloned/train-ticket/ts-admin-route-service/src/main/java/adminroute/service/AdminRouteService.java", "endpoints": {"api_summary": "The AdminRouteService API provides endpoints for managing routes, including creating, modifying, and deleting routes. The API also provides an endpoint for retrieving all routes.", "methods": ["GET", "POST", "DELETE"], "paths": ["/adminroute/routes", "/adminroute/routes/<routeId>"]}}
{"file": "cloned/train-ticket/ts-admin-route-service/src/test/java/adminroute/controller/AdminRouteControllerTest.java", "endpoints": {"api_summary": "The AdminRouteControllerTest API provides endpoints for managing routes for the AdminRouteService. It allows for the creation, modification, and deletion of routes, as well as retrieving all routes.", "methods": ["GET", "POST", "DELETE"], "paths": ["/api/v1/adminrouteservice/welcome", "/api/v1/adminrouteservice/adminroute", "/api/v1/adminrouteservice/adminroute/routeId"]}}
{"file": "cloned/train-ticket/ts-admin-route-service/src/test/java/adminroute/service/AdminRouteServiceImplTest.java", "endpoints": {"api_summary": "The AdminRouteServiceImplTest class provides a set of REST API endpoints for managing routes in a transportation system. The endpoints allow for the creation, modification, and deletion of routes, as well as retrieving information about all routes.", "methods": ["GET", "POST", "DELETE"], "paths": ["/api/v1/routeservice/routes", "/api/v1/routeservice/routes/<routeId>"]}}
{"file": "cloned/train-ticket/ts-train-food-service/src/main/java/trainFood/controller/TrainFoodController.java", "endpoints": {"api_summary": "The Train Food Service API provides endpoints for retrieving information about food options available on a train trip. The API allows users to get a list of all food options or filter the list by trip ID. The API also includes CORS headers to allow cross-origin requests.", "methods": ["GET"], "paths": ["/api/v1/trainfoodservice/trainfoods/welcome", "/api/v1/trainfoodservice/trainfoods", "/api/v1/trainfoodservice/trainfoods/{tripId}"]}}
{"file": "cloned/train-ticket/ts-train-food-service/src/main/java/trainFood/service/TrainFoodServiceImpl.java", "endpoints": {"api_summary": "The TrainFood API allows users to create, read, update, and delete train food information. It also provides a list of all train foods and the ability to search for train foods by trip ID.", "methods": ["POST", "GET", "PUT", "DELETE"], "paths": ["/trainFood", "/trainFood/<tripId>"]}}
{"file": "cloned/train-ticket/ts-station-food-service/src/main/java/food/controller/StationFoodController.java", "endpoints": {"api_summary": "The Food Map Service API provides endpoints for retrieving information about food stores and their associated food items. It allows users to search for food stores by name, retrieve a list of food items for a given store, and retrieve a list of food items by name.", "methods": ["GET", "POST"], "paths": ["/api/v1/stationfoodservice/stationfoodstores/welcome", "/api/v1/stationfoodservice/stationfoodstores", "/api/v1/stationfoodservice/stationfoodstores/{stationId}", "/api/v1/stationfoodservice/stationfoodstores/bystoreid/{stationFoodStoreId}"]}}
{"file": "cloned/train-ticket/ts-station-food-service/src/main/java/food/service/StationFoodService.java", "endpoints": {"api_summary": "The StationFoodService API provides endpoints for managing food stores and train food, including creating, querying, and retrieving information about food stores and train food. The API also allows for querying food stores by station name and retrieving food stores by ID.", "methods": ["GET", "POST"], "paths": ["/food/stations/<stationName>", "/food/stores/<id>"]}}
{"file": "cloned/train-ticket/ts-station-food-service/src/main/java/food/service/StationFoodServiceImpl.java", "endpoints": {"api_summary": "This API provides endpoints for managing food stores and train food, including creating, listing, and retrieving food stores and train food by various criteria.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/food/stores", "/food/stores/<id>", "/food/stores/<stationName>", "/food/stores/<stationNames>", "/food/train/<tripId>"]}}
{"file": "cloned/train-ticket/ts-station-food-service/src/test/java/food/controller/StationFoodControllerTest.java", "endpoints": {"api_summary": "The Food Store Service API provides endpoints for managing food stores and their relationship with stations. It allows users to retrieve information about food stores, add new food stores, and update existing ones.", "methods": ["GET", "POST"], "paths": ["/api/v1/foodmapservice/stationfoodstores", "/api/v1/foodmapservice/stationfoodstores/welcome", "/api/v1/foodmapservice/stationfoodstores/station_id"]}}
{"file": "cloned/train-ticket/ts-execute-service/src/main/java/execute/serivce/ExecuteServiceImpl.java", "endpoints": {"api_summary": "This API is responsible for executing and collecting orders. It provides endpoints for ticket execution and collection, and it uses the Order Service and Order Other Service to perform these operations.", "methods": ["GET", "POST"], "paths": ["/api/v1/orderservice/order/status/{orderId}/{status}", "/api/v1/orderOtherService/orderOther/status/{orderId}/{status}"]}}
{"file": "cloned/train-ticket/ts-execute-service/src/main/java/execute/controller/ExecuteControlller.java", "endpoints": {"api_summary": "The Execute Service API provides endpoints for executing and collecting tickets. It allows users to perform various actions on tickets, such as executing a ticket, collecting a ticket, and getting information about a ticket.", "methods": ["GET", "POST"], "paths": ["/api/v1/executeservice/welcome", "/api/v1/executeservice/execute/execute/{orderId}", "/api/v1/executeservice/execute/collected/{orderId}"]}}
{"file": "cloned/train-ticket/ts-consign-price-service/src/main/java/consignprice/controller/ConsignPriceController.java", "endpoints": {"api_summary": "The ConsignPrice API provides endpoints for managing and retrieving consignment prices. It allows users to get the price for a given weight and region, as well as query price information and configuration. Additionally, it provides an endpoint for creating and modifying price configurations.", "methods": ["GET", "POST"], "paths": ["/api/v1/consignpriceservice/welcome", "/api/v1/consignpriceservice/consignprice/{weight}/{isWithinRegion}", "/api/v1/consignpriceservice/consignprice/price", "/api/v1/consignpriceservice/consignprice/config", "/api/v1/consignpriceservice/consignprice"]}}
{"file": "cloned/train-ticket/ts-consign-price-service/src/test/java/consignprice/controller/ConsignPriceControllerTest.java", "endpoints": {"api_summary": "The ConsignPriceControllerTest API provides endpoints for managing consignment prices and configurations. It allows users to retrieve price information, modify price configurations, and get the current price configuration.", "methods": ["GET", "POST"], "paths": ["/api/v1/consignpriceservice/welcome", "/api/v1/consignpriceservice/consignprice/1.0/true", "/api/v1/consignpriceservice/consignprice/price", "/api/v1/consignpriceservice/consignprice/config", "/api/v1/consignpriceservice/consignprice"]}}
{"file": "cloned/train-ticket/ts-route-service/src/main/java/route/repository/RouteRepository.java", "endpoints": {"api_summary": "The RouteRepository API provides a way to manage routes in a transportation system. It allows for the creation, retrieval, update, and deletion of routes, as well as searching for routes by ID or by start and end stations.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/routes", "/routes/<id>", "/routes/<startStation>/<endStation>"]}}
{"file": "cloned/train-ticket/ts-route-service/src/main/java/route/controller/RouteController.java", "endpoints": {"api_summary": "The Route Service API provides endpoints for managing routes, including creating, modifying, and querying routes. It also provides endpoints for querying routes by start and end stations.", "methods": ["GET", "POST", "DELETE"], "paths": ["/api/v1/routeservice/welcome", "/api/v1/routeservice/routes", "/api/v1/routeservice/routes/{routeId}", "/api/v1/routeservice/routes/byIds", "/api/v1/routeservice/routes", "/api/v1/routeservice/routes/{start}/{end}"]}}
{"file": "cloned/train-ticket/ts-route-service/src/main/java/route/service/RouteServiceImpl.java", "endpoints": {"api_summary": "This API provides a service for managing routes, including creating, modifying, deleting, and retrieving routes. It also provides a method for finding routes based on start and end stations.", "methods": ["POST", "GET", "DELETE"], "paths": ["/routes", "/routes/<routeId>", "/routes/<startId>/<terminalId>"]}}
{"file": "cloned/train-ticket/ts-route-service/src/main/java/route/service/RouteService.java", "endpoints": {"api_summary": "The Route Service API provides endpoints for managing routes and their associated information. It allows for the creation, modification, and deletion of routes, as well as retrieving information about specific routes or all routes.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/routes", "/routes/<routeId>", "/routes/<routeIds>", "/routes/<startId>/<terminalId>"]}}
{"file": "cloned/train-ticket/ts-route-service/src/test/java/route/controller/RouteControllerTest.java", "endpoints": {"api_summary": "The Route Service API provides endpoints for managing routes, including creating, modifying, and querying routes. It also provides endpoints for querying routes by start and terminal.", "methods": ["GET", "POST", "DELETE"], "paths": ["/api/v1/routeservice/welcome", "/api/v1/routeservice/routes", "/api/v1/routeservice/routes/route_id", "/api/v1/routeservice/routes/start_id/terminal_id"]}}
{"file": "cloned/train-ticket/ts-avatar-service/app.py", "endpoints": {"api_summary": "This API provides a single endpoint for receiving an image and returning a modified version of the image with faces detected and cropped.", "methods": ["POST"], "paths": ["/api/v1/avatar"]}}
{"file": "cloned/train-ticket/ts-food-delivery-service/src/main/java/food_delivery/controller/FoodDeliveryController.java", "endpoints": {"api_summary": "The Food Delivery Service API allows users to create, retrieve, update, and delete food delivery orders. It also allows for updating the trip ID, seat number, and delivery time for an order.", "methods": ["GET", "POST", "DELETE", "PUT"], "paths": ["/api/v1/fooddeliveryservice/welcome", "/api/v1/fooddeliveryservice/orders", "/api/v1/fooddeliveryservice/orders/d/{orderId}", "/api/v1/fooddeliveryservice/orders/{orderId}", "/api/v1/fooddeliveryservice/orders/all", "/api/v1/fooddeliveryservice/orders/store/{storeId}", "/api/v1/fooddeliveryservice/orders/tripid", "/api/v1/fooddeliveryservice/orders/seatno", "/api/v1/fooddeliveryservice/orders/dtime"]}}
{"file": "cloned/train-ticket/ts-food-delivery-service/src/main/java/food_delivery/service/FoodDeliveryServiceImpl.java", "endpoints": {"api_summary": "The Food Delivery Service API allows users to create, retrieve, update, and delete food delivery orders. It also allows users to update the trip ID, seat number, and delivery time for a food delivery order.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/v1/food-delivery-service/orders", "/api/v1/food-delivery-service/orders/<order_id>", "/api/v1/food-delivery-service/orders/<order_id>/trip-id", "/api/v1/food-delivery-service/orders/<order_id>/seat-no", "/api/v1/food-delivery-service/orders/<order_id>/delivery-time"]}}
{"file": "cloned/train-ticket/ts-food-delivery-service/src/test/java/food_delivery/controller/FoodDeliveryControllerTest.java", "endpoints": {"api_summary": "The Food Delivery API allows users to create, retrieve, update, and delete food delivery orders. It also allows users to update the trip ID, seat number, and delivery time for an order.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/v1/fooddeliveryservice/welcome", "/api/v1/fooddeliveryservice/orders", "/api/v1/fooddeliveryservice/orders/d/123", "/api/v1/fooddeliveryservice/orders/123", "/api/v1/fooddeliveryservice/orders/store/1234", "/api/v1/fooddeliveryservice/orders/all", "/api/v1/fooddeliveryservice/orders/tripid", "/api/v1/fooddeliveryservice/orders/seatno", "/api/v1/fooddeliveryservice/orders/dtime"]}}
{"file": "cloned/train-ticket/ts-admin-user-service/src/main/java/adminuser/controller/AdminUserController.java", "endpoints": {"api_summary": "The AdminUserController API provides endpoints for managing users in the AdminUserService. It allows for the creation, retrieval, update, and deletion of users, as well as a welcome message for the AdminUserService.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/v1/adminuserservice/users", "/api/v1/adminuserservice/users/welcome", "/api/v1/adminuserservice/users/{userId}"]}}
{"file": "cloned/train-ticket/ts-admin-user-service/src/main/java/adminuser/service/AdminUserServiceImpl.java", "endpoints": {"api_summary": "The AdminUserServiceImpl class provides a set of REST API endpoints for managing users in the system. It includes endpoints for getting all users, deleting a user, updating a user, and adding a new user.", "methods": ["GET", "DELETE", "PUT", "POST"], "paths": ["/api/v1/userservice/users", "/api/v1/userservice/users/<userId>", "/api/v1/userservice/users/register"]}}
{"file": "cloned/train-ticket/ts-admin-user-service/src/test/java/adminuser/controller/AdminUserControllerTest.java", "endpoints": {"api_summary": "The AdminUserControllerTest class provides a set of REST API endpoints for managing users in the admin user service. The endpoints include GET, POST, PUT, and DELETE methods for retrieving, creating, updating, and deleting users, respectively.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/v1/adminuserservice/users", "/api/v1/adminuserservice/users/welcome", "/api/v1/adminuserservice/users/user_id"]}}
{"file": "cloned/train-ticket/ts-payment-service/src/main/java/com/trainticket/controller/PaymentController.java", "endpoints": {"api_summary": "The Payment Service API allows users to make payments and add money to their accounts. It also provides a query endpoint to retrieve payment information.", "methods": ["GET", "POST"], "paths": ["/api/v1/paymentservice/welcome", "/api/v1/paymentservice/payment", "/api/v1/paymentservice/payment/money", "/api/v1/paymentservice/query"]}}
{"file": "cloned/train-ticket/ts-payment-service/src/test/java/com/trainticket/controller/PaymentControllerTest.java", "endpoints": {"api_summary": "The Payment Service API allows users to make payments and query payment information. It also provides a welcome message for the service.", "methods": ["GET", "POST"], "paths": ["/api/v1/paymentservice/welcome", "/api/v1/paymentservice/payment", "/api/v1/paymentservice/payment/money", "/api/v1/paymentservice/payment"]}}
{"file": "cloned/train-ticket/ts-auth-service/src/main/java/auth/config/WebSecurityConfig.java", "endpoints": {"api_summary": "This API is a user authentication and authorization system. It allows users to register, login, and access protected resources. It also provides endpoints for managing users and roles.", "methods": ["GET", "POST", "DELETE"], "paths": ["/api/v1/auth", "/api/v1/auth/hello", "/api/v1/user/hello", "/api/v1/users/login", "/api/v1/users", "/user/**"]}}
{"file": "cloned/train-ticket/ts-auth-service/src/main/java/auth/controller/UserController.java", "endpoints": {"api_summary": "The UserController API provides endpoints for managing users in the system. It allows for creating, reading, updating, and deleting users, as well as logging in and getting a token for authentication.", "methods": ["GET", "POST", "DELETE"], "paths": ["/api/v1/users", "/api/v1/users/hello", "/api/v1/users/login", "/api/v1/users/{userId}"]}}
{"file": "cloned/train-ticket/ts-auth-service/src/main/java/auth/controller/AuthController.java", "endpoints": {"api_summary": "The AuthController API provides endpoints for creating a default user and returning a hello message. The API is used to create a default user and return a hello message.", "methods": ["GET", "POST"], "paths": ["/api/v1/auth/hello", "/api/v1/auth"]}}
{"file": "cloned/train-ticket/ts-auth-service/src/test/java/auth/controller/AuthControllerTest.java", "endpoints": {"api_summary": "The AuthControllerTest API provides endpoints for testing the AuthController, which manages authentication and authorization for the system. The endpoints include a GET request to retrieve a greeting message and a POST request to create a new user.", "methods": ["GET", "POST"], "paths": ["/api/v1/auth/hello", "/api/v1/auth"]}}
{"file": "cloned/train-ticket/ts-auth-service/src/test/java/auth/controller/UserControllerTest.java", "endpoints": {"api_summary": "The UserController API provides endpoints for managing users, including getting a user's information, logging in, and deleting a user.", "methods": ["GET", "POST", "DELETE"], "paths": ["/api/v1/users/hello", "/api/v1/users/login", "/api/v1/users", "/api/v1/users/<user_id>"]}}
{"file": "cloned/streamer/streamer-ui/packages/server/server.js", "endpoints": {"api_summary": "This API provides authentication and session management for a Streamer UI application. It includes endpoints for OIDC authentication, API interface, and serving static files.", "methods": ["GET", "POST"], "paths": ["/oidc", "/api", "/frontend"]}}
{"file": "cloned/streamer/streamer-ui/packages/server/routes/api.js", "endpoints": {"api_summary": "This API provides endpoints for managing and uploading data to a repository, as well as purging old data for admin users.", "methods": ["GET", "POST"], "paths": ["/projects", "/stager/dac/:projectId", "/upload/begin", "/upload/validatefile", "/upload/addfile", "/upload/finalize", "/upload/submit", "/purge", "/purge/all"]}}
{"file": "cloned/streamer/streamer-ui/packages/server/routes/oidc.js", "endpoints": {"api_summary": "This API provides authentication and authorization functionality for a web application using OpenID Connect. It defines endpoints for login, logout, and retrieving user profile information.", "methods": ["GET", "POST"], "paths": ["/login", "/callback", "/logout", "/profile"]}}
{"file": "cloned/streamer/streamer-ui/packages/server/routes/pdb.js", "endpoints": {"api_summary": "This API provides a list of user projects from PDBv1 SQL database and PDBv2 core-api. The API endpoints are compatible with the `_getProjectsV1` and `_getProjectsV2` functions, and the data returned is in the same structure as the `_getProjectsV1` function.", "methods": ["GET"], "paths": ["/projects"]}}
{"file": "cloned/streamer/streamer-ui/packages/server/routes/stager.js", "endpoints": {"api_summary": "This API provides a single endpoint for retrieving the Data Access Controller (DAC) for a given project ID. The endpoint returns a JSON object containing the DAC information, including the collection name and any errors that may have occurred during the retrieval process.", "methods": ["GET"], "paths": ["/dac/project/<projectId>"]}}
{"file": "cloned/moleculer-examples/conduit/services/favorites.service.js", "endpoints": {"api_summary": "The favorites API allows users to favorite articles and check if an article has been favorited by a user.", "methods": ["GET", "POST", "DELETE"], "paths": ["/favorites", "/favorites/<article>", "/favorites/<user>"]}}
{"file": "cloned/moleculer-examples/conduit/services/comments.service.js", "endpoints": {"api_summary": "This API allows users to create, update, and delete comments on articles. It also allows users to list comments by article and retrieve a single comment by ID.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/comments", "/comments/<id>"]}}
{"file": "cloned/moleculer-examples/conduit/services/follows.service.js", "endpoints": {"api_summary": "The API allows users to follow other users and retrieve information about their followers and followees.", "methods": ["GET", "POST", "DELETE"], "paths": ["/follows", "/follows/<user>", "/follows/<user>/<follow>"]}}
{"file": "cloned/moleculer-examples/conduit/services/api.service.js", "endpoints": {"api_summary": "This API provides a RESTful interface for interacting with a user authentication system. It includes endpoints for authenticating users, retrieving user information, and managing user accounts.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/auth", "/api/users", "/api/users/<built-in function id>"]}}
{"file": "cloned/moleculer-examples/blog/services/www.service.js", "endpoints": {"api_summary": "This API provides a simple blogging platform with basic functionality such as creating, reading, updating, and deleting posts, as well as searching and filtering posts by category and author.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/", "/search", "/category/:category", "/author/:author", "/post/:id/:title?"]}}
{"file": "cloned/moleculer-examples/blog/services/posts.service.js", "endpoints": {"api_summary": "This API defines a service for managing posts, including creating, reading, updating, and deleting posts. It also includes endpoints for seeding the database with fake posts and clearing the cache.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/posts", "/posts/<post_id>", "/posts/seed", "/posts/clear-cache"]}}
{"file": "cloned/astarte/examples/sensor-graph/src/apiHandler.js", "endpoints": {"api_summary": "This API provides endpoints for retrieving device and sensor data from a realm. It also includes endpoints for configuring the API and managing authentication.", "methods": ["GET"], "paths": ["/devices/:id", "/devices/:alias", "/devices/:id/interfaces/:interface", "/devices/:alias/interfaces/:interface", "/devices/:id/interfaces/:interface/:path/value", "/devices/:alias/interfaces/:interface/:path/value"]}}
{"file": "cloned/astarte/examples/sensor-samplingrate/src/apiHandler.js", "endpoints": {"api_summary": "The API provides endpoints for retrieving and manipulating device and sensor data. It allows for retrieving device data by ID or alias, as well as retrieving and setting sensor values by ID or alias.", "methods": ["GET", "PUT", "DELETE"], "paths": ["/appengine/v1/<realm>/devices/:device_id/", "/appengine/v1/<realm>/devices/:device_alias/", "/appengine/v1/<realm>/devices/:device_id/interfaces/:interface/", "/appengine/v1/<realm>/devices/:device_id/interfaces/:interface/:sensor_id/:key"]}}
{"file": "cloned/astarte/examples/sensor-channels/src/apiHandler.js", "endpoints": {"api_summary": "The API provides a way to interact with devices and their interfaces, allowing for the retrieval of device data, sensor values, and the establishment of real-time connections for incoming data.", "methods": ["GET", "PUT"], "paths": ["/appengine/v1/<realm>/devices/:device_alias/", "/appengine/v1/<realm>/devices/:id?", "/appengine/v1/<realm>/devices/:device_alias/interfaces/:interface/", "/appengine/v1/<realm>/devices/:device_id/interfaces/:interface/", "/appengine/v1/<realm>/devices/:device_id/interfaces/:interface/:sensor_id/:key"]}}
{"file": "cloned/astarte/examples/sensors-viewer/src/apiHandler.js", "endpoints": {"api_summary": "This API provides endpoints for retrieving data from devices and interfaces, as well as configuring the API endpoint and authentication token.", "methods": ["GET"], "paths": ["/devices/:id", "/devices/:device_alias", "/devices/:device_id/interfaces/:interface"]}}
{"file": "cloned/astarte/examples/sensor-geolocation/src/apiHandler.js", "endpoints": {"api_summary": "This API provides functionality for retrieving data from Astarte devices and interfaces. It includes endpoints for retrieving device data, interface data, and configuring the API's authentication and endpoint settings.", "methods": ["GET"], "paths": ["/devices-by-alias/:deviceAlias/", "/devices/:deviceId?", "/devices/:deviceId/interfaces/:interfaceName/"]}}
{"file": "cloned/WAII/server/vissv2server/atServer/ecfSim/ecfSimulator.go", "endpoints": {"api_summary": "This API is a simulator for the ECF (Emergency Calling Function) service, which is part of the Automotive VISS2 (Vehicle Information Sharing System) project. It simulates the communication between the ECF service and the Access Token server, and allows the user to test the ECF service by sending requests and receiving responses.", "methods": ["GET", "POST"], "paths": ["/"]}}
{"file": "cloned/WAII/client/client-1.0/grpc_client/grpc_map_client/mapserver/mapserver.go", "endpoints": {"api_summary": "The API provides a simple web server that serves static files and a version endpoint.", "methods": ["GET"], "paths": ["/version", "/", "/static/"]}}
{"file": "cloned/ContractTestingBoilerplate/date-producer-kafka/src/main/java/com/example/producer/DateProducerController.java", "endpoints": {"api_summary": "The DateProducerController API provides a single endpoint for sending messages to a Kafka topic. The endpoint is a POST request to /kafka/publish, and it does not accept any request parameters.", "methods": ["POST"], "paths": ["/kafka/publish"]}}
{"file": "cloned/ContractTestingBoilerplate/age-consumer/src/main/java/com/example/ageconsumer/AgeController.java", "endpoints": {"api_summary": "The Age API calculates the age of a person based on their birth date. It takes a birth date as input and returns the age in years, months, and days.", "methods": ["GET"], "paths": ["/age-calculate"]}}
{"file": "cloned/ContractTestingBoilerplate/age-consumer/src/test/java/com/example/ageconsumer/pact/PactAgeConsumerTest.java", "endpoints": {"api_summary": "This API provides a single endpoint for validating a date received from a provider. The endpoint accepts a GET request with a query parameter `date` and returns a JSON response indicating whether the date is valid or not.", "methods": ["GET"], "paths": ["/provider/validDate"]}}
{"file": "cloned/ContractTestingBoilerplate/age-consumer/src/test/java/com/example/ageconsumer/springcloudcontract/AgeControllerIntegrationTest.java", "endpoints": {"api_summary": "This API calculates the age for a given valid birth date. It takes a JSON request with a birth date parameter and returns a JSON response with the calculated years, months, and days.", "methods": ["GET"], "paths": ["/age-calculate"]}}
{"file": "cloned/ContractTestingBoilerplate/date-provider/src/main/java/com/example/dateprovider/DateController.java", "endpoints": {"api_summary": "The DateProvider API allows clients to retrieve a valid date from the server. The API endpoint is /provider/validDate, which accepts a date parameter and returns a DateResponse object.", "methods": ["GET"], "paths": ["/provider/validDate"]}}
{"file": "cloned/wazo-phoned/integration_tests/assets/confd_data/mock-wazo-confd.py", "endpoints": {"api_summary": "This API provides endpoints for managing users, devices, and services in a telecommunications system. It includes endpoints for retrieving user information, updating user services, and retrieving device information.", "methods": ["GET", "PUT", "POST"], "paths": ["/users/<user_uuid>", "/users/<user_uuid>/services/<service_name>", "/lines", "/devices/<device_name>"]}}
{"file": "cloned/wazo-phoned/integration_tests/assets/dird_data/mock-wazo-dird.py", "endpoints": {"api_summary": "This API provides directory lookup and input functionality for various vendors. It allows for retrieving and updating directory information for different vendors, as well as searching for specific users or phone numbers.", "methods": ["GET", "POST"], "paths": ["/0.1/directories/menu/<profile>/<xivo_user_uuid>/<vendor>", "/0.1/directories/input/<profile>/<xivo_user_uuid>/<vendor>", "/0.1/directories/lookup/<profile>/<xivo_user_uuid>/<vendor>", "/0.1/directories/lookup/<profile>/<xivo_user_uuid>"]}}
{"file": "cloned/wazo-phoned/integration_tests/assets/amid_data/mock-wazo-amid.py", "endpoints": {"api_summary": "This API provides a simple interface for setting and retrieving action responses. It allows for the creation of new action responses and the retrieval of existing ones. The API also provides a way to reset the action responses.", "methods": ["GET", "POST"], "paths": ["/_reset", "/_requests", "/_set_action", "/1.0/action/<action>"]}}
{"file": "cloned/wazo-phoned/wazo_phoned/http_server.py", "endpoints": {"api_summary": "The Wazo Phoned API is a RESTful API that allows clients to interact with the Wazo Phoned system. It provides endpoints for managing users, making and receiving calls, and retrieving information about the system.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users", "/users/<built-in function id>", "/calls", "/calls/<call_id>", "/info"]}}
{"file": "cloned/wazo-phoned/wazo_phoned/plugins/yealink/http.py", "endpoints": {"api_summary": "The Wazo Phone REST API provides endpoints for managing Do Not Disturb (DND) settings for users. The API allows for enabling and disabling DND for a specific user, and retrieving the current DND status for a user.", "methods": ["GET", "POST"], "paths": ["/users/<built-in function id>/dnd/enable", "/users/<built-in function id>/dnd/disable"]}}
{"file": "cloned/wazo-phoned/wazo_phoned/plugins/yealink/plugin.py", "endpoints": {"api_summary": "The Yealink plugin provides REST API endpoints for interacting with the Yealink phone system. It includes endpoints for looking up phone numbers, enabling and disabling phone services, and more.", "methods": ["GET", "POST"], "paths": ["/yealink_plugin/lookup", "/yealink_plugin/directories_lookup", "/yealink_plugin/user_service_dnd_enable", "/yealink_plugin/user_service_dnd_disable"]}}
{"file": "cloned/wazo-phoned/wazo_phoned/plugins/gigaset/http.py", "endpoints": {"api_summary": "The Gigaset Lookup API allows users to search for phone numbers and retrieve information about them. It uses the Flask framework and the Wazo Phone Directory plugin to perform the lookups.", "methods": ["GET"], "paths": ["/users/<built-in function id>/lookup/gigaset"]}}
{"file": "cloned/wazo-phoned/wazo_phoned/plugins/gigaset/plugin.py", "endpoints": {"api_summary": "The Gigaset plugin for Wazo Phone Directory provides a REST API for looking up user information. The API allows clients to retrieve information about users in the directory, including their name, email, and phone number.", "methods": ["GET"], "paths": ["/directories/lookup/<profile>/gigaset/<user_uuid>"]}}
{"file": "cloned/wazo-phoned/wazo_phoned/plugins/polycom/plugin.py", "endpoints": {"api_summary": "The Polycom plugin for Wazo Phone provides REST API endpoints for managing input and lookup resources.", "methods": ["GET", "POST"], "paths": ["/polycom/input", "/polycom/lookup"]}}
{"file": "cloned/wazo-phoned/wazo_phoned/plugins/config/http.py", "endpoints": {"api_summary": "The ConfigResource API provides endpoints for retrieving and updating the configuration of a Wazo phone system. It requires the master tenant and the phoned.config.read or phoned.config.update ACLs to access the endpoints.", "methods": ["GET", "PATCH"], "paths": ["/config"]}}
{"file": "cloned/wazo-phoned/wazo_phoned/plugins/fanvil/http.py", "endpoints": {"api_summary": "The Fanvil API provides endpoints for managing Fanvil devices and their configurations. It includes endpoints for retrieving device information, updating device settings, and managing device DND (Do Not Disturb) status.", "methods": ["GET", "POST"], "paths": ["/users", "/users/<built-in function id>", "/dnd/enable", "/dnd/disable"]}}
{"file": "cloned/wazo-phoned/wazo_phoned/plugins/fanvil/plugin.py", "endpoints": {"api_summary": "The Fanvil plugin provides a set of REST API endpoints for interacting with the Fanvil phone system. It includes endpoints for retrieving phone input, looking up phone numbers, and managing user services such as do-not-disturb.", "methods": ["GET", "POST"], "paths": ["/directories/menu/<profile>/{vendor}", "/directories/input/<profile>/{vendor}", "/directories/lookup/<profile>/{vendor}", "/directories/lookup/<profile>/{vendor}-v2", "/{vendor}/directories/lookup/<profile>", "/{vendor}/users/<user_uuid>/services/dnd/enable", "/{vendor}/users/<user_uuid>/services/dnd/disable"]}}
{"file": "cloned/wazo-phoned/wazo_phoned/plugins/endpoint/http.py", "endpoints": {"api_summary": "The Wazo Phone API provides endpoints for managing phone calls, including holding, answering, and ending calls. The API uses HTTP methods and URL paths to define the endpoints and their functionality.", "methods": ["PUT"], "paths": ["/phoned/endpoints/{endpoint_name}/hold/start", "/phoned/endpoints/{endpoint_name}/hold/stop", "/phoned/endpoints/{endpoint_name}/answer"]}}
{"file": "cloned/wazo-phoned/wazo_phoned/plugins/endpoint/plugin.py", "endpoints": {"api_summary": "The Endpoint API provides endpoints for managing endpoints in a Wazo phone system. It allows for starting and stopping hold on endpoints, and answering calls on endpoints.", "methods": ["GET", "POST"], "paths": ["/endpoints/<endpoint_name>/hold/start", "/endpoints/<endpoint_name>/hold/stop", "/endpoints/<endpoint_name>/answer"]}}
{"file": "cloned/wazo-phoned/wazo_phoned/plugins/status/http.py", "endpoints": {"api_summary": "The Wazo Phone API provides a RESTful interface for managing phone-related resources, such as status and authentication.", "methods": ["GET"], "paths": ["/status"]}}
{"file": "cloned/wazo-phoned/wazo_phoned/plugins/status/plugin.py", "endpoints": {"api_summary": "The status_plugin API provides a way to retrieve the current status of the Wazo phone system. It includes a single endpoint that returns the status of the system, including the number of active calls, the number of registered users, and the current version of the system.", "methods": ["GET"], "paths": ["/status_plugin/status"]}}
{"file": "cloned/wazo-phoned/wazo_phoned/plugins/snom/plugin.py", "endpoints": {"api_summary": "The Snom plugin for Wazo Phone provides REST API endpoints for managing phone inputs and lookups. The inputs endpoint allows for the creation, retrieval, and deletion of phone inputs, while the lookup endpoint provides a way to retrieve information about a specific phone input.", "methods": ["GET", "POST", "DELETE"], "paths": ["/snom_input", "/snom_lookup"]}}
{"file": "cloned/wazo-phoned/wazo_phoned/plugin_helpers/client/http.py", "endpoints": {"api_summary": "This API provides a client menu and input for users to search and select phone numbers from a directory.", "methods": ["GET"], "paths": ["/client/menu", "/client/input", "/client/lookup"]}}
{"file": "cloned/besu/util/src/test/java/org/hyperledger/besu/util/FutureUtilsTest.java", "endpoints": {"api_summary": "This file defines a set of utility functions for working with Java's CompletableFuture class.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users", "/users/<built-in function id>"]}}
{"file": "cloned/besu/evm/src/main/java/org/hyperledger/besu/evm/precompile/BLAKE2BFPrecompileContract.java", "endpoints": {"api_summary": "The BLAKE2BF precompile contract is a cryptographic hash function that takes a variable-length input and produces a fixed-length output. It is a precompile contract that can be used to perform the BLAKE2BF hash function on the Ethereum Virtual Machine (EVM).", "methods": ["GET", "POST"], "paths": ["/blake2bf"]}}
{"file": "cloned/besu/evm/src/main/java/org/hyperledger/besu/evm/tracing/EthTransferLogOperationTracer.java", "endpoints": {"api_summary": "This API defines a tracer that emits logs for all transfers that occur during the execution of a transaction. It includes logs for value transfers and self-destructs.", "methods": ["GET", "POST"], "paths": ["/eth/transfers"]}}
{"file": "cloned/besu/evm/src/test/java/org/hyperledger/besu/evm/precompile/ECRECPrecompiledContractTest.java", "endpoints": {"api_summary": "This API provides a simple RESTful interface for interacting with the Ethereum blockchain.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/v1/blocks", "/api/v1/blocks/{block_id}", "/api/v1/transactions", "/api/v1/transactions/{transaction_id}"]}}
{"file": "cloned/besu/evm/src/test/java/org/hyperledger/besu/evm/precompile/MODEXPPrecompiledContractTest.java", "endpoints": {"api_summary": "This code defines a REST API for a simple calculator with basic arithmetic operations.", "methods": ["GET", "POST"], "paths": ["/calculator/add", "/calculator/subtract", "/calculator/multiply", "/calculator/divide"]}}
{"file": "cloned/besu/crypto/algorithms/src/test/java/org/hyperledger/besu/crypto/SECP256K1Test.java", "endpoints": {"api_summary": "This file defines a set of cryptographic functions for working with the SECP256K1 curve, including key pair generation, signature generation and verification, and public key recovery.", "methods": ["GET", "POST"], "paths": ["/secp256k1/keyPair", "/secp256k1/sign", "/secp256k1/verify"]}}
{"file": "cloned/besu/metrics/core/src/main/java/org/hyperledger/besu/metrics/prometheus/MetricsHttpService.java", "endpoints": {"api_summary": "The Metrics http service provides a REST API for accessing and managing metrics in a Hyperledger Besu network.", "methods": ["GET", "POST"], "paths": ["/users", "/users/<built-in function id>"]}}
{"file": "cloned/besu/metrics/core/src/test-support/java/org/hyperledger/besu/metrics/StubMetricsSystem.java", "endpoints": {"api_summary": "This API provides a stub implementation of the metrics system, which can be used for testing or as a placeholder in situations where metrics are not available.", "methods": ["GET", "POST"], "paths": ["/metrics"]}}
{"file": "cloned/besu/metrics/core/src/test/java/org/hyperledger/besu/metrics/prometheus/MetricsHttpServiceTest.java", "endpoints": {"api_summary": "This API provides metrics for the Hyperledger Besu metrics system.", "methods": ["GET"], "paths": ["/metrics"]}}
{"file": "cloned/besu/consensus/clique/src/main/java/org/hyperledger/besu/consensus/clique/jsonrpc/CliqueJsonRpcMethods.java", "endpoints": {"api_summary": "The Clique JSON RPC methods provide a set of APIs for interacting with the Clique consensus algorithm in Hyperledger Besu. These APIs allow users to retrieve information about the current signers, propose new blocks, and discard existing blocks.", "methods": ["GET", "POST"], "paths": ["/clique/getSigners", "/clique/getSignersAtHash", "/clique/propose", "/clique/discard", "/clique/proposals", "/clique/getSignerMetrics"]}}
{"file": "cloned/besu/consensus/clique/src/main/java/org/hyperledger/besu/consensus/clique/jsonrpc/methods/CliqueGetSignersAtHash.java", "endpoints": {"api_summary": "The Clique get signers at hash API endpoint retrieves the list of validators for a given block hash.", "methods": ["GET"], "paths": ["/clique/signers/<block_hash>"]}}
{"file": "cloned/besu/consensus/clique/src/main/java/org/hyperledger/besu/consensus/clique/jsonrpc/methods/Discard.java", "endpoints": {"api_summary": "The Discard API endpoint allows clients to discard a vote from a validator in a Clique network. The endpoint takes an address parameter and returns a success response with a boolean value indicating whether the vote was discarded.", "methods": ["POST"], "paths": ["/clique/discard"]}}
{"file": "cloned/besu/consensus/clique/src/main/java/org/hyperledger/besu/consensus/clique/jsonrpc/methods/CliqueGetSigners.java", "endpoints": {"api_summary": "The Clique get signers API endpoint retrieves the list of validators for a given block number or the latest block number if none is specified.", "methods": ["GET"], "paths": ["/clique/getSigners"]}}
{"file": "cloned/besu/consensus/clique/src/main/java/org/hyperledger/besu/consensus/clique/jsonrpc/methods/Propose.java", "endpoints": {"api_summary": "The Propose API endpoint allows clients to propose a new block to the network using the Clique consensus algorithm. The endpoint takes two parameters: the address of the block proposer and a boolean value indicating whether the proposal is authorized or not. The endpoint returns a JSON object with a single field, `auth`, which indicates whether the proposal was successfully recorded or not.", "methods": ["POST"], "paths": ["/clique/propose"]}}
{"file": "cloned/besu/consensus/clique/src/main/java/org/hyperledger/besu/consensus/clique/jsonrpc/methods/CliqueProposals.java", "endpoints": {"api_summary": "The Clique proposals API allows clients to retrieve information about proposals made by validators in the Clique consensus algorithm.", "methods": ["GET"], "paths": ["/clique/proposals"]}}
{"file": "cloned/besu/consensus/clique/src/main/java/org/hyperledger/besu/consensus/clique/jsonrpc/methods/CliqueGetSignerMetrics.java", "endpoints": {"api_summary": "The Clique get signer metrics API provides information about the signers of a Clique blockchain.", "methods": ["GET"], "paths": ["/clique/signers"]}}
{"file": "cloned/besu/consensus/clique/src/test/java/org/hyperledger/besu/consensus/clique/jsonrpc/methods/CliqueGetSignersAtHashTest.java", "endpoints": {"api_summary": "This API provides information about the validators in a Clique block.", "methods": ["clique_getSignersAtHash"], "paths": ["/clique/signers/<block_hash>"]}}
{"file": "cloned/besu/consensus/clique/src/test/java/org/hyperledger/besu/consensus/clique/jsonrpc/methods/ProposeTest.java", "endpoints": {"api_summary": "The Propose method allows a validator to propose a new block to the network.", "methods": ["POST"], "paths": ["/clique/propose"]}}
{"file": "cloned/besu/consensus/clique/src/test/java/org/hyperledger/besu/consensus/clique/jsonrpc/methods/CliqueGetSignersTest.java", "endpoints": {"api_summary": "The CliqueGetSigners method returns a list of validators for a given block number or the latest block if no block number is provided.", "methods": ["GET"], "paths": ["/clique_getSigners"]}}
{"file": "cloned/besu/consensus/clique/src/test/java/org/hyperledger/besu/consensus/clique/jsonrpc/methods/DiscardTest.java", "endpoints": {"api_summary": "The Clique Discard API allows clients to discard a specific validator's vote in the current epoch.", "methods": ["POST"], "paths": ["/clique/discard"]}}
{"file": "cloned/besu/consensus/qbft/src/main/java/org/hyperledger/besu/consensus/qbft/QbftExtraDataCodec.java", "endpoints": {"api_summary": "This API is a BFT consensus mechanism for Hyperledger Besu. It includes methods for encoding and decoding BFT extra data, as well as creating genesis extra data strings.", "methods": ["encode", "decode", "createGenesisExtraDataString"], "paths": ["/org.hyperledger.besu.consensus.qbft.QbftExtraDataCodec"]}}
{"file": "cloned/besu/consensus/qbft/src/main/java/org/hyperledger/besu/consensus/qbft/jsonrpc/QbftJsonRpcMethods.java", "endpoints": {"api_summary": "This API provides methods for querying and managing validators in a Quorum-based Byzantine Fault Tolerance (QBFT) consensus system.", "methods": ["GET", "POST"], "paths": ["/qbft/proposeValidatorVote", "/qbft/getValidatorsByBlockNumber", "/qbft/discardValidatorVote", "/qbft/getValidatorsByBlockHash", "/qbft/getSignerMetrics", "/qbft/getPendingVotes", "/qbft/getRequestTimeoutSeconds"]}}
{"file": "cloned/besu/consensus/qbft/src/main/java/org/hyperledger/besu/consensus/qbft/jsonrpc/methods/QbftGetPendingVotes.java", "endpoints": {"api_summary": "The QbftGetPendingVotes API endpoint allows users to retrieve a list of pending votes for a specific validator in the Qbft consensus algorithm.", "methods": ["GET"], "paths": ["/qbft/pending_votes"]}}
{"file": "cloned/besu/consensus/qbft/src/main/java/org/hyperledger/besu/consensus/qbft/jsonrpc/methods/QbftGetValidatorsByBlockNumber.java", "endpoints": {"api_summary": "The QbftGetValidatorsByBlockNumber endpoint retrieves the list of validators for a given block number.", "methods": ["GET"], "paths": ["/qbft/validators/<blockNumber>"]}}
{"file": "cloned/besu/consensus/qbft/src/main/java/org/hyperledger/besu/consensus/qbft/jsonrpc/methods/QbftDiscardValidatorVote.java", "endpoints": {"api_summary": "The QbftDiscardValidatorVote endpoint allows users to discard a validator vote for a specific address.", "methods": ["POST"], "paths": ["/qbft/discard_validator_vote"]}}
{"file": "cloned/besu/consensus/qbft/src/main/java/org/hyperledger/besu/consensus/qbft/jsonrpc/methods/QbftProposeValidatorVote.java", "endpoints": {"api_summary": "The QbftProposeValidatorVote endpoint allows users to propose a vote for a validator to be added or dropped from the validator set.", "methods": ["POST"], "paths": ["/qbft/propose_validator_vote"]}}
{"file": "cloned/besu/consensus/qbft/src/main/java/org/hyperledger/besu/consensus/qbft/jsonrpc/methods/QbftGetValidatorsByBlockHash.java", "endpoints": {"api_summary": "The QbftGetValidatorsByBlockHash API endpoint retrieves the validators for a given block hash using the Qbft consensus algorithm.", "methods": ["GET"], "paths": ["/qbft/validators/<block_hash>"]}}
{"file": "cloned/besu/consensus/qbft/src/main/java/org/hyperledger/besu/consensus/qbft/jsonrpc/methods/QbftGetRequestTimeoutSeconds.java", "endpoints": {"api_summary": "The QbftGetRequestTimeoutSeconds API endpoint retrieves the QBFT request timeout in seconds.", "methods": ["GET"], "paths": ["/qbft_getRequestTimeoutSeconds"]}}
{"file": "cloned/besu/consensus/qbft/src/main/java/org/hyperledger/besu/consensus/qbft/jsonrpc/methods/QbftGetSignerMetrics.java", "endpoints": {"api_summary": "The QbftGetSignerMetrics API provides a method for retrieving metrics for a signer in a QBFT (Quorum-Based Finality Gadget) consensus algorithm.", "methods": ["GET"], "paths": ["/qbft/signer/metrics"]}}
{"file": "cloned/besu/consensus/qbft/src/test/java/org/hyperledger/besu/consensus/qbft/jsonrpc/methods/QbftDiscardValidatorVoteTest.java", "endpoints": {"api_summary": "This API provides a method to discard a validator vote in the QBFT consensus algorithm.", "methods": ["qbft_discardValidatorVote"], "paths": ["/qbft_discardValidatorVote"]}}
{"file": "cloned/besu/consensus/qbft/src/test/java/org/hyperledger/besu/consensus/qbft/jsonrpc/methods/QbftProposeValidatorVoteTest.java", "endpoints": {"api_summary": "The QbftProposeValidatorVote method is a JSON-RPC method that allows a validator to propose a vote to add or remove a validator from the validator set.", "methods": ["POST"], "paths": ["/qbft_proposeValidatorVote"]}}
{"file": "cloned/besu/consensus/qbft/src/test/java/org/hyperledger/besu/consensus/qbft/jsonrpc/methods/QbftGetValidatorsByBlockNumberTest.java", "endpoints": {"api_summary": "This API provides information about the validators in a given block number.", "methods": ["GET"], "paths": ["/qbft_getValidatorsByBlockNumber"]}}
{"file": "cloned/besu/consensus/ibftlegacy/src/main/java/org/hyperledger/besu/consensus/ibftlegacy/IbftExtraDataCodec.java", "endpoints": {"api_summary": "This API defines the encoding and decoding of extra data in the block header for the IBFT consensus algorithm.", "methods": ["GET", "POST"], "paths": ["/ibft/extraData"]}}
{"file": "cloned/besu/consensus/qbft-core/src/integration-test/java/org/hyperledger/besu/consensus/qbft/core/test/LocalNodeNotProposerTest.java", "endpoints": {"api_summary": "This API is responsible for testing the behavior of the QBFT consensus algorithm in a local environment. It allows for the creation of a test context, the injection of proposals and commits, and the verification of messages received by peers.", "methods": ["GET", "POST"], "paths": ["/test/qbft/localNodeNotProposer"]}}
{"file": "cloned/besu/consensus/common/src/main/java/org/hyperledger/besu/consensus/common/bft/BlockTimer.java", "endpoints": {"api_summary": "This API is responsible for managing block timers for the BFT consensus algorithm in Hyperledger Besu. It allows for starting and cancelling timers, and retrieving the current block period and empty block period.", "methods": ["GET", "POST"], "paths": ["/blocktimer", "/blocktimer/<round_identifier>", "/blocktimer/<round_identifier>/expiry"]}}
{"file": "cloned/besu/consensus/common/src/main/java/org/hyperledger/besu/consensus/common/jsonrpc/AbstractGetSignerMetricsMethod.java", "endpoints": {"api_summary": "This API provides information about the signer metrics of a blockchain.", "methods": ["GET"], "paths": ["/signer_metrics"]}}
{"file": "cloned/besu/consensus/common/src/test/java/org/hyperledger/besu/consensus/common/bft/queries/BftQueryServiceImplTest.java", "endpoints": {"api_summary": "This API provides information about the consensus mechanism used in the blockchain, including the round number and the validators for the latest block.", "methods": ["GET"], "paths": ["/consensus", "/consensus/round", "/consensus/validators"]}}
{"file": "cloned/besu/consensus/ibft/src/main/java/org/hyperledger/besu/consensus/ibft/jsonrpc/IbftJsonRpcMethods.java", "endpoints": {"api_summary": "This API provides methods for interacting with the IBFT consensus algorithm in Hyperledger Besu. It includes methods for proposing and discarding validator votes, retrieving validator information, and getting signer metrics and pending votes.", "methods": ["GET", "POST"], "paths": ["/ibft/proposeValidatorVote", "/ibft/getValidatorsByBlockNumber", "/ibft/discardValidatorVote", "/ibft/getValidatorsByBlockHash", "/ibft/getSignerMetrics", "/ibft/getPendingVotes"]}}
{"file": "cloned/besu/consensus/ibft/src/main/java/org/hyperledger/besu/consensus/ibft/jsonrpc/methods/IbftGetSignerMetrics.java", "endpoints": {"api_summary": "The IBFT Get Signer Metrics API provides information about the validators in the IBFT consensus algorithm, including their current status and metrics such as block production rate and missed blocks.", "methods": ["GET"], "paths": ["/ibft/signer/metrics"]}}
{"file": "cloned/besu/consensus/ibft/src/main/java/org/hyperledger/besu/consensus/ibft/jsonrpc/methods/IbftGetValidatorsByBlockHash.java", "endpoints": {"api_summary": "The IBFT Get Validators by Block Hash API allows users to retrieve the list of validators for a specific block hash.", "methods": ["GET"], "paths": ["/ibft/validators/<block_hash>"]}}
{"file": "cloned/besu/consensus/ibft/src/main/java/org/hyperledger/besu/consensus/ibft/jsonrpc/methods/IbftProposeValidatorVote.java", "endpoints": {"api_summary": "The API allows for voting on validators in an IBFT network. It provides methods for proposing a vote to add or drop a validator, and for checking the current vote status.", "methods": ["POST"], "paths": ["/ibft/propose_validator_vote"]}}
{"file": "cloned/besu/consensus/ibft/src/main/java/org/hyperledger/besu/consensus/ibft/jsonrpc/methods/IbftGetValidatorsByBlockNumber.java", "endpoints": {"api_summary": "The IBFT Get Validators By Block Number API allows users to retrieve a list of validators for a given block number.", "methods": ["GET"], "paths": ["/ibft/validators/blockNumber"]}}
{"file": "cloned/besu/consensus/ibft/src/main/java/org/hyperledger/besu/consensus/ibft/jsonrpc/methods/IbftGetPendingVotes.java", "endpoints": {"api_summary": "The Ibft get pending votes API endpoint allows users to retrieve a list of pending votes for the next block.", "methods": ["GET"], "paths": ["/ibft/pending_votes"]}}
{"file": "cloned/besu/consensus/ibft/src/main/java/org/hyperledger/besu/consensus/ibft/jsonrpc/methods/IbftDiscardValidatorVote.java", "endpoints": {"api_summary": "The IBFT discard validator vote API allows clients to discard a validator's vote in the IBFT consensus algorithm.", "methods": ["POST"], "paths": ["/ibft/discard_validator_vote"]}}
{"file": "cloned/besu/consensus/ibft/src/main/java/org/hyperledger/besu/consensus/ibft/messagewrappers/RoundChange.java", "endpoints": {"api_summary": "The RoundChange API allows clients to propose a new block for the current round, and to vote on a proposed block from another client.", "methods": ["POST"], "paths": ["/round_change"]}}
{"file": "cloned/besu/consensus/ibft/src/test/java/org/hyperledger/besu/consensus/ibft/payload/RoundChangePayloadTest.java", "endpoints": {"api_summary": "This file defines a RoundChangePayload class for the IBFT consensus algorithm in Hyperledger Besu. It includes methods for reading and writing the payload to and from RLP, as well as methods for creating and verifying the payload's signature.", "methods": ["GET", "POST"], "paths": ["/org.hyperledger.besu.consensus.ibft.payload.RoundChangePayload"]}}
{"file": "cloned/besu/consensus/ibft/src/test/java/org/hyperledger/besu/consensus/ibft/jsonrpc/methods/IbftProposeValidatorVoteTest.java", "endpoints": {"api_summary": "The ibft_proposeValidatorVote API endpoint allows users to propose a validator vote for the IBFT consensus algorithm. The endpoint takes two parameters: the address of the validator and a boolean value indicating whether to add or remove the validator.", "methods": ["POST"], "paths": ["/ibft_proposeValidatorVote"]}}
{"file": "cloned/besu/consensus/ibft/src/test/java/org/hyperledger/besu/consensus/ibft/jsonrpc/methods/IbftGetValidatorsByBlockNumberTest.java", "endpoints": {"api_summary": "The API provides a method to retrieve the list of validators for a given block number.", "methods": ["GET"], "paths": ["/ibft_getValidatorsByBlockNumber"]}}
{"file": "cloned/besu/acceptance-tests/test-plugins/src/main/java/org/hyperledger/besu/tests/acceptance/plugins/TestBlockchainServiceFinalizedPlugin.java", "endpoints": {"api_summary": "This API allows for the updating of the finalized block and safe block in a Hyperledger Besu blockchain.", "methods": ["POST"], "paths": ["/updater/updateFinalizedBlockV1", "/updater/updateSafeBlockV1"]}}
{"file": "cloned/besu/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptanceqbft/jsonrpc/EthSendRawTransactionAcceptanceTest.java", "endpoints": {"api_summary": "This API allows for the sending of raw transactions to the network, with optional chain ID and replay protection.", "methods": ["POST"], "paths": ["/eth/sendRawTransaction"]}}
{"file": "cloned/besu/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptanceqbft/jsonrpc/EthEstimateGasAcceptanceTest.java", "endpoints": {"api_summary": "This API estimates the gas required for a smart contract call.", "methods": ["GET"], "paths": ["/eth/estimateGas"]}}
{"file": "cloned/besu/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptanceqbft/jsonrpc/EthEstimateGasZeroToleranceAcceptanceTest.java", "endpoints": {"api_summary": "This API defines a set of endpoints for estimating the gas required for a transaction on a QBFT network.", "methods": ["GET", "POST"], "paths": ["/eth/estimateGas"]}}
{"file": "cloned/besu/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptanceqbft/pubsub/NewPendingTransactionAcceptanceTest.java", "endpoints": {"api_summary": "This API provides a way to subscribe to and receive updates on the status of transactions in a blockchain network.", "methods": ["GET", "POST"], "paths": ["/subscribe", "/unsubscribe"]}}
{"file": "cloned/besu/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/plugins/BlockchainServiceFinalizedBlockPluginTest.java", "endpoints": {"api_summary": "This API allows for updating the finalized and safe block numbers in the blockchain.", "methods": ["POST"], "paths": ["/updater_updateFinalizedBlockV1", "/updater_updateSafeBlockV1"]}}
{"file": "cloned/besu/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/plugins/RpcEndpointServicePluginTest.java", "endpoints": {"api_summary": "This API provides a set of methods for interacting with the Besu node, including retrieving and setting values, and checking arguments and exceptions.", "methods": ["GET", "POST"], "paths": ["/tests_getValue", "/tests_setValue", "/tests_throwException", "/notEnabled_getValue"]}}
{"file": "cloned/besu/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/plugins/PermissioningPluginTest.java", "endpoints": {"api_summary": "This API is a test suite for the permissioning plugin in Besu. It includes tests for blocked and allowed connections, and for transactions being sent to the correct nodes.", "methods": ["GET", "POST"], "paths": ["/permissioning/blockedConnectionNodeCanOnlyConnectToTransactionNode", "/permissioning/transactionsAreNotSendToBlockPendingTransactionsNode", "/permissioning/allowFilteredByGasLimit", "/permissioning/blockedFilteredByGasLimit"]}}
{"file": "cloned/besu/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/jsonrpc/EthSendRawTransactionAcceptanceTest.java", "endpoints": {"api_summary": "This API allows for the sending of raw transactions to the Ethereum network. It includes endpoints for sending transactions with and without the chain ID, as well as endpoints for sending invalid RLP transactions.", "methods": ["POST"], "paths": ["/eth/sendRawTransaction"]}}
{"file": "cloned/besu/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/jsonrpc/EthEstimateGasAcceptanceTest.java", "endpoints": {"api_summary": "This API estimates the gas required for a smart contract call.", "methods": ["GET"], "paths": ["/eth/estimateGas"]}}
{"file": "cloned/besu/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/jsonrpc/ExecutionEngineCancunBlockBuildingAcceptanceTest.java", "endpoints": {"api_summary": "This API provides a way to build and retrieve blocks for the Cancun execution engine.", "methods": ["GET", "POST"], "paths": ["/jsonrpc/engine/cancun/block-production"]}}
{"file": "cloned/besu/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/jsonrpc/ipc/Web3JSupportAcceptanceTest.java", "endpoints": {"api_summary": "This API provides a net_version call that returns the network version as a string.", "methods": ["GET"], "paths": ["/net_version"]}}
{"file": "cloned/besu/acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/pubsub/NewPendingTransactionAcceptanceTest.java", "endpoints": {"api_summary": "This API provides a way to subscribe to new pending transactions on a Besu node and receive notifications when new transactions are added to the pool.", "methods": ["GET", "POST"], "paths": ["/pubsub/newPendingTransaction"]}}
{"file": "cloned/besu/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/perm/PermissioningJsonRpcRequestFactory.java", "endpoints": {"api_summary": "This API provides endpoints for managing the permissioning allowlist for nodes and accounts in a Hyperledger Besu network.", "methods": ["GET", "POST"], "paths": ["/perm_addNodesToAllowlist", "/perm_removeNodesFromAllowlist", "/perm_getNodesAllowlist", "/perm_getAccountsAllowlist", "/perm_addAccountsToAllowlist", "/perm_removeAccountsFromAllowlist"]}}
{"file": "cloned/besu/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/login/LoginRequestFactory.java", "endpoints": {"api_summary": "The LoginRequestFactory class provides a way to create login requests for the Hyperledger Besu system. It defines a single endpoint for logging in, which is accessed via the /login path.", "methods": ["POST"], "paths": ["/login"]}}
{"file": "cloned/besu/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/admin/AddPeerTransaction.java", "endpoints": {"api_summary": "The AddPeerTransaction API allows users to add a new peer to the network. The API takes a URI as input and returns a boolean value indicating whether the peer was successfully added.", "methods": ["POST"], "paths": ["/admin/adminAddPeer"]}}
{"file": "cloned/besu/acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/admin/AdminRequestFactory.java", "endpoints": {"api_summary": "The AdminRequestFactory class provides a way to add peers to the Hyperledger Besu network using the admin_addPeer method.", "methods": ["admin_addPeer"], "paths": ["/admin/addPeer"]}}
{"file": "cloned/besu/ethereum/core/src/test/java/org/hyperledger/besu/ethereum/chain/GenesisStateTest.java", "endpoints": {"api_summary": "This API is a test API that defines a single endpoint for creating a new user.", "methods": ["POST"], "paths": ["/users"]}}
{"file": "cloned/besu/ethereum/stratum/src/main/java/org/hyperledger/besu/ethereum/stratum/Stratum1EthProxyProtocol.java", "endpoints": {"api_summary": "This API allows miners to submit EthHash solutions over a persistent TCP connection.", "methods": ["eth_getWork", "eth_submitWork", "eth_submitHashrate"], "paths": ["/eth_getWork", "/eth_submitWork", "/eth_submitHashrate"]}}
{"file": "cloned/besu/ethereum/stratum/src/main/java/org/hyperledger/besu/ethereum/stratum/GetWorkProtocol.java", "endpoints": {"api_summary": "This API provides a protocol for getting and submitting work using JSON-RPC HTTP methods.", "methods": ["eth_getWork", "eth_submitWork"], "paths": ["/eth_getWork", "/eth_submitWork"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/graphql/GraphQLProvider.java", "endpoints": {"api_summary": "This API provides a GraphQL service with data fetchers for various Ethereum-related data.", "methods": ["GET", "POST"], "paths": ["/graphql"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/graphql/internal/pojoadapter/NormalBlockAdapter.java", "endpoints": {"api_summary": "This API provides information about a block in the Ethereum blockchain, including its transaction count, total difficulty, ommer count, and transactions.", "methods": ["GET"], "paths": ["/blocks/<block_hash>"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/handlers/JsonRpcArrayExecutor.java", "endpoints": {"api_summary": "This API allows for the execution of JSON-RPC requests in a batched manner.", "methods": ["POST"], "paths": ["/JsonArray"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/handlers/JsonRpcObjectExecutor.java", "endpoints": {"api_summary": "This API handles JSON-RPC requests and responses for the Hyperledger Besu Ethereum client.", "methods": ["POST"], "paths": ["/jsonrpc"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/websocket/methods/EthSubscribe.java", "endpoints": {"api_summary": "The EthSubscribe API allows clients to subscribe to Ethereum events and receive notifications when they occur. The API supports multiple subscription types, including new block headers, new pending transactions, and new logs.", "methods": ["GET", "POST"], "paths": ["/eth/subscribe"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/websocket/methods/EthUnsubscribe.java", "endpoints": {"api_summary": "The EthUnsubscribe API endpoint allows clients to unsubscribe from a subscription. It takes a subscription ID as input and returns a boolean indicating whether the unsubscription was successful.", "methods": ["POST"], "paths": ["/eth/v1/unsubscribe"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/websocket/subscription/SubscriptionManager.java", "endpoints": {"api_summary": "The SubscriptionManager is responsible for managing subscriptions and sending messages to the clients that have an active subscription.", "methods": ["GET", "POST"], "paths": ["/users", "/users/<built-in function id>"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/DebugReplayBlock.java", "endpoints": {"api_summary": "The DebugReplayBlock API allows users to replay a specific block on the blockchain and persist it to the database.", "methods": ["POST"], "paths": ["/debug/replay_block"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthNewFilter.java", "endpoints": {"api_summary": "The EthNewFilter API endpoint allows clients to create a new filter for log records on the Ethereum blockchain. The endpoint accepts a JSON object with parameters for the filter, including the from and to block numbers and the log query. The endpoint returns a JSON object with the ID of the newly created filter.", "methods": ["POST"], "paths": ["/eth/newFilter"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/DebugGetBadBlocks.java", "endpoints": {"api_summary": "The DebugGetBadBlocks API endpoint retrieves a list of bad blocks from the BadBlockManager and returns them in a JSON response.", "methods": ["GET"], "paths": ["/debug/bad_blocks"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthUninstallFilter.java", "endpoints": {"api_summary": "The EthUninstallFilter API endpoint allows users to uninstall a filter from the filter manager. The endpoint takes a single parameter, the filter ID, and returns a JSON object indicating whether the filter was successfully uninstalled.", "methods": ["POST"], "paths": ["/eth/v1/uninstall_filter/<filter_id>"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/DebugGetRawReceipts.java", "endpoints": {"api_summary": "The DebugGetRawReceipts API endpoint retrieves the raw transaction receipts for a given block or block hash. It takes a single parameter, which can be either a block number or a block hash, and returns an array of RLP-encoded transaction receipts.", "methods": ["GET"], "paths": ["/debug/getRawReceipts"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/DebugAccountAt.java", "endpoints": {"api_summary": "This API provides information about the account at a specific block and transaction index.", "methods": ["GET"], "paths": ["/debug/accountAt/<blockHash>/<txIndex>/<address>"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/TraceGet.java", "endpoints": {"api_summary": "The TraceGet API endpoint allows users to retrieve a specific trace by its hash and trace address.", "methods": ["GET"], "paths": ["/trace_get/<transaction_hash>/<trace_address>"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthGetLogs.java", "endpoints": {"api_summary": "The EthGetLogs API endpoint retrieves logs from the blockchain based on a filter parameter. The endpoint returns a list of logs that match the filter criteria.", "methods": ["GET"], "paths": ["/eth/logs"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthGetBlockReceipts.java", "endpoints": {"api_summary": "The EthGetBlockReceipts API endpoint retrieves the receipts of transactions in a block and wraps them in transaction receipts of the correct type.", "methods": ["GET"], "paths": ["/eth/block/receipts"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/TraceTransaction.java", "endpoints": {"api_summary": "The TraceTransaction API endpoint allows users to trace a specific transaction on the Ethereum blockchain, returning a detailed breakdown of the transaction's execution and any errors that may have occurred.", "methods": ["GET"], "paths": ["/trace_transaction/<transaction_hash>"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthGetWork.java", "endpoints": {"api_summary": "The EthGetWork API endpoint provides information about the current mining work and is used by miners to generate new blocks.", "methods": ["GET"], "paths": ["/eth/getWork"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthEstimateGas.java", "endpoints": {"api_summary": "The EthEstimateGas API endpoint estimates the gas required for a transaction.", "methods": ["GET"], "paths": ["/eth/estimateGas"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/NetEnode.java", "endpoints": {"api_summary": "The NetEnode API provides information about the local Ethereum node's enode URL.", "methods": ["GET"], "paths": ["/net/enode"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthCall.java", "endpoints": {"api_summary": "The EthCall API allows users to simulate a call to a contract without actually executing the transaction. It returns the result of the call, including any data that was written to the blockchain.", "methods": ["GET", "POST"], "paths": ["/eth/call"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthGasPrice.java", "endpoints": {"api_summary": "The EthGasPrice API endpoint calculates the gas price for a transaction based on the current gas price and the configured gas and priority fee limits.", "methods": ["GET"], "paths": ["/eth/gas-price"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/DebugTraceCall.java", "endpoints": {"api_summary": "The DebugTraceCall API endpoint allows users to trace the execution of a transaction and view detailed information about its execution, including the state of the Ethereum virtual machine and any errors that may have occurred.", "methods": ["POST"], "paths": ["/debug/trace_call"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthGetUncleCountByBlockHash.java", "endpoints": {"api_summary": "The EthGetUncleCountByBlockHash API endpoint retrieves the number of uncles in a block by its hash. It takes a single parameter, the block hash, and returns the number of uncles in the block.", "methods": ["GET"], "paths": ["/eth/getUncleCountByBlockHash/<block_hash>"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthAccounts.java", "endpoints": {"api_summary": "The EthAccounts API provides a list of Ethereum accounts on the node.", "methods": ["GET"], "paths": ["/eth/v1/accounts"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthGetUncleByBlockHashAndIndex.java", "endpoints": {"api_summary": "The EthGetUncleByBlockHashAndIndex API endpoint retrieves an uncle block by its hash and index. It takes two parameters: the block hash and the index of the uncle block. The response is a JSON object containing the uncle block information.", "methods": ["GET"], "paths": ["/eth/getUncleByBlockHashAndIndex"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/DebugStandardTraceBlockToFile.java", "endpoints": {"api_summary": "This API provides a method to trace a block and its transactions, and save the trace to a file.", "methods": ["GET"], "paths": ["/debug/standard/trace/block/to/file"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthSendRawTransaction.java", "endpoints": {"api_summary": "The EthSendRawTransaction API endpoint allows users to send a raw transaction to the network.", "methods": ["POST"], "paths": ["/eth/sendRawTransaction"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthGetBlockByNumber.java", "endpoints": {"api_summary": "The EthGetBlockByNumber API endpoint retrieves a block by its number, with the option to include complete transactions or just their hashes.", "methods": ["GET"], "paths": ["/eth/block/number/<blockNumber>"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/TxPoolBesuPendingTransactions.java", "endpoints": {"api_summary": "The TxPoolBesuPendingTransactions API provides a list of pending transactions in the Besu transaction pool.", "methods": ["GET"], "paths": ["/txpool/besu/pendingTransactions"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/AdminGenerateLogBloomCache.java", "endpoints": {"api_summary": "The AdminGenerateLogBloomCache API endpoint generates a log bloom cache for the specified block range. It takes two optional parameters: start block and stop block. If no parameters are provided, the cache is generated for the entire blockchain.", "methods": ["POST"], "paths": ["/admin/generateLogBloomCache"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/TxPoolBesuTransactions.java", "endpoints": {"api_summary": "The TxPoolBesuTransactions API provides a method to retrieve a list of pending transactions in the Besu transaction pool.", "methods": ["GET"], "paths": ["/txpool/besu/transactions"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/DebugTraceBlock.java", "endpoints": {"api_summary": "The DebugTraceBlock API endpoint allows users to retrieve a block and its associated traces, which can be used for debugging purposes.", "methods": ["GET"], "paths": ["/debug/trace/block"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthChainId.java", "endpoints": {"api_summary": "The EthChainId API endpoint provides information about the chain ID of the Ethereum network.", "methods": ["GET"], "paths": ["/eth/v1/chain_id"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/AdminAddPeer.java", "endpoints": {"api_summary": "The AdminAddPeer API endpoint allows adding a new peer to the network.", "methods": ["POST"], "paths": ["/admin/addPeer"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthSubmitHashRate.java", "endpoints": {"api_summary": "The EthSubmitHashRate API endpoint allows clients to submit a hash rate for a specific sealer ID. The endpoint returns a JSON response indicating whether the submission was successful or not.", "methods": ["POST"], "paths": ["/eth/submit_hash_rate"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/AdminLogsRepairCache.java", "endpoints": {"api_summary": "The AdminLogsRepairCache API endpoint repairs the transaction log bloom cache for a specific block number. It takes an optional block number parameter and returns a map with the status of the repair process.", "methods": ["POST"], "paths": ["/admin/logs/repair-cache"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/AdminLogsRemoveCache.java", "endpoints": {"api_summary": "The AdminLogsRemoveCache API endpoint allows users to remove cached transaction logs for a specific block range. The endpoint takes two parameters: startBlock and stopBlock, which specify the block range for which the cache should be removed. The endpoint returns a JSON object with a status message indicating whether the cache was successfully removed.", "methods": ["POST"], "paths": ["/admin/logs/remove_cache"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthSendTransaction.java", "endpoints": {"api_summary": "The EthSendTransaction API endpoint allows users to send a new transaction to the Ethereum network.", "methods": ["POST"], "paths": ["/eth/sendTransaction"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthGetMinerDataByBlockHash.java", "endpoints": {"api_summary": "The EthGetMinerDataByBlockHash API endpoint retrieves miner data for a specific block hash. It returns a MinerDataResult object containing information about the block, including the block reward, transaction fee, and uncle inclusion reward.", "methods": ["GET"], "paths": ["/eth/getMinerDataByBlockHash"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthGetFilterLogs.java", "endpoints": {"api_summary": "The EthGetFilterLogs API endpoint retrieves the logs for a specific filter ID. The endpoint returns a list of logs if the filter ID is valid, or an error if the filter ID is not found.", "methods": ["GET"], "paths": ["/eth/getFilterLogs"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/AdminChangeLogLevel.java", "endpoints": {"api_summary": "The AdminChangeLogLevel API endpoint allows users to change the log level of the application. It takes two parameters: log level and log filter. The log level can be one of OFF, ERROR, WARN, INFO, DEBUG, TRACE, or ALL. The log filter is an optional parameter that can be used to filter the logs based on a specific criteria.", "methods": ["POST"], "paths": ["/admin/changeLogLevel"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthMaxPriorityFeePerGas.java", "endpoints": {"api_summary": "The EthMaxPriorityFeePerGas API endpoint retrieves the maximum priority fee per gas for the current blockchain.", "methods": ["GET"], "paths": ["/eth/maxPriorityFeePerGas"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthSubmitWork.java", "endpoints": {"api_summary": "The EthSubmitWork API endpoint allows clients to submit work to the mining coordinator for processing. The endpoint accepts a nonce, mix hash, and PoW hash as parameters and returns a boolean indicating whether the work was accepted.", "methods": ["POST"], "paths": ["/eth/submitwork"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthMining.java", "endpoints": {"api_summary": "The EthMining API endpoint provides information about the mining status of the Ethereum node.", "methods": ["GET"], "paths": ["/eth/v1/mining"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/AbstractBlockParameterOrBlockHashMethod.java", "endpoints": {"api_summary": "This API provides information about the blockchain, including the latest block, pending block, safe block, and finalized block. It also allows querying blocks by hash or number.", "methods": ["GET", "POST"], "paths": ["/blockchain/latest", "/blockchain/pending", "/blockchain/safe", "/blockchain/finalized", "/blockchain/block/<hash>", "/blockchain/block/<number>"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthNewBlockFilter.java", "endpoints": {"api_summary": "The EthNewBlockFilter API endpoint allows clients to create a new block filter, which can be used to retrieve a list of blocks that match certain criteria.", "methods": ["GET"], "paths": ["/eth/newBlockFilter"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthGetBlockTransactionCountByHash.java", "endpoints": {"api_summary": "The EthGetBlockTransactionCountByHash API endpoint retrieves the number of transactions in a block with the given hash.", "methods": ["GET"], "paths": ["/eth/block/transaction/count/<hash>"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/DebugTraceTransaction.java", "endpoints": {"api_summary": "The DebugTraceTransaction API endpoint allows users to trace a specific transaction on the Ethereum blockchain, providing detailed information about the execution of the transaction.", "methods": ["GET"], "paths": ["/debug/trace/transaction"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthGetProof.java", "endpoints": {"api_summary": "The EthGetProof API endpoint retrieves a proof of the state of an Ethereum account or contract storage at a given block hash.", "methods": ["GET"], "paths": ["/eth/getProof/<blockHash>/<address>/<storageKeys>"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/AdminNodeInfo.java", "endpoints": {"api_summary": "This API provides information about the node, including its enode URL, IP address, listening and discovery ports, and network protocols.", "methods": ["GET"], "paths": ["/admin/node_info"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/NetVersion.java", "endpoints": {"api_summary": "The NetVersion API provides information about the network ID of the Ethereum client.", "methods": ["GET"], "paths": ["/net_version"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthCoinbase.java", "endpoints": {"api_summary": "The EthCoinbase API endpoint allows clients to retrieve the current coinbase address for the node. The endpoint returns a JSON object with the coinbase address, or an error if no coinbase is specified.", "methods": ["GET"], "paths": ["/eth/coinbase"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthGetTransactionReceipt.java", "endpoints": {"api_summary": "The EthGetTransactionReceipt API endpoint retrieves a transaction receipt by its hash. It takes a single parameter, the transaction hash, and returns a JSON object with information about the transaction receipt.", "methods": ["GET"], "paths": ["/eth/getTransactionReceipt/<transaction_hash>"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/TxPoolBesuStatistics.java", "endpoints": {"api_summary": "The TxPoolBesuStatistics API provides information about the transaction pool, including the number of local and remote transactions, and the maximum size of the pool.", "methods": ["GET"], "paths": ["/txpool/besu/statistics"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/TraceRawTransaction.java", "endpoints": {"api_summary": "This API provides a way to trace the execution of a raw transaction on the Ethereum blockchain.", "methods": ["POST"], "paths": ["/trace_raw_transaction"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthGetCode.java", "endpoints": {"api_summary": "The EthGetCode API endpoint retrieves the code of a specific address at a given block hash or block number.", "methods": ["GET"], "paths": ["/eth/getCode/<address>/<blockHashOrBlockNumber>"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthSimulateV1.java", "endpoints": {"api_summary": "The EthSimulateV1 API allows users to simulate the execution of a block or a transaction on the Ethereum network without actually modifying the blockchain. It returns the result of the simulation, including any changes made to the state of the blockchain.", "methods": ["GET"], "paths": ["/eth/simulate/v1"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthGetTransactionByBlockNumberAndIndex.java", "endpoints": {"api_summary": "The EthGetTransactionByBlockNumberAndIndex API endpoint allows users to retrieve a transaction by its block number and index. The endpoint returns a TransactionCompleteResult object containing information about the transaction.", "methods": ["GET"], "paths": ["/eth/transaction/blockNumber/<blockNumber>/index/<index>"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthGetBalance.java", "endpoints": {"api_summary": "The EthGetBalance API endpoint retrieves the balance of an Ethereum account at a specific block or block hash.", "methods": ["GET"], "paths": ["/eth/getBalance"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/DebugSetHead.java", "endpoints": {"api_summary": "DebugSetHead is a JSON-RPC method that allows users to set the head of the blockchain to a specific block hash. It also provides an option to move the world state incrementally to the specified block hash.", "methods": ["POST"], "paths": ["/debug/setHead"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/DebugAccountRange.java", "endpoints": {"api_summary": "The DebugAccountRange API provides information about accounts in the Ethereum blockchain.", "methods": ["GET"], "paths": ["/debug/account-range"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/DebugTraceBlockByNumber.java", "endpoints": {"api_summary": "This API provides a way to trace the execution of a block and its transactions, with options to include or exclude certain information. It returns a list of transaction traces, each containing information about the execution of a transaction.", "methods": ["GET"], "paths": ["/debug/trace_block_by_number"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthGetBlockTransactionCountByNumber.java", "endpoints": {"api_summary": "The EthGetBlockTransactionCountByNumber API endpoint retrieves the number of transactions in a block by its block number. The endpoint accepts a single parameter, the block number, and returns the number of transactions in the block.", "methods": ["GET"], "paths": ["/eth/block/transactionCount/byNumber"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/DebugStorageRangeAt.java", "endpoints": {"api_summary": "The DebugStorageRangeAt API endpoint allows users to retrieve the storage entries of an account at a specific block and transaction index.", "methods": ["GET"], "paths": ["/debug/storage/range/at"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/NetPeerCount.java", "endpoints": {"api_summary": "The NetPeerCount API provides information about the number of peers connected to the Ethereum network.", "methods": ["GET"], "paths": ["/net_peerCount"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthGetTransactionCount.java", "endpoints": {"api_summary": "The EthGetTransactionCount API endpoint retrieves the number of transactions sent from an address, either from the pending transactions in the transaction pool or from a specific block in the blockchain.", "methods": ["GET"], "paths": ["/eth/getTransactionCount"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/DebugBatchSendRawTransaction.java", "endpoints": {"api_summary": "The DebugBatchSendRawTransaction API allows you to send multiple raw transactions to the transaction pool for processing. The API returns a list of execution statuses, each containing an index, a success flag, and an error message if the transaction was not successful.", "methods": ["POST"], "paths": ["/debug/batch/raw/transaction"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthGetTransactionByHash.java", "endpoints": {"api_summary": "The EthGetTransactionByHash API endpoint allows users to retrieve a transaction by its hash. It returns a JSON object containing information about the transaction, including its hash, nonce, gas price, gas limit, and the data sent with the transaction.", "methods": ["GET"], "paths": ["/eth/transaction/<hash>"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthNewPendingTransactionFilter.java", "endpoints": {"api_summary": "The EthNewPendingTransactionFilter API endpoint allows clients to create a new filter for pending transactions on the Ethereum network.", "methods": ["POST"], "paths": ["/eth/newPendingTransactionFilter"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/Web3ClientVersion.java", "endpoints": {"api_summary": "The Web3ClientVersion API provides information about the client version of the Ethereum node.", "methods": ["GET"], "paths": ["/web3/clientVersion"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthBlockNumber.java", "endpoints": {"api_summary": "The EthBlockNumber API endpoint provides information about the current block number on the Ethereum blockchain.", "methods": ["GET"], "paths": ["/eth/blockNumber"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthGetFilterChanges.java", "endpoints": {"api_summary": "The EthGetFilterChanges API endpoint allows clients to retrieve changes to a filter, such as new blocks or transactions that match the filter's criteria.", "methods": ["GET"], "paths": ["/eth/getFilterChanges"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/NetListening.java", "endpoints": {"api_summary": "The NetListening API endpoint allows clients to check if the node is listening for incoming connections.", "methods": ["GET"], "paths": ["/net_listening"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthGetTransactionByBlockHashAndIndex.java", "endpoints": {"api_summary": "The EthGetTransactionByBlockHashAndIndex API endpoint allows users to retrieve a transaction by its block hash and index.", "methods": ["GET"], "paths": ["/eth/transaction/block/<block_hash>/<index>"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthGetBlockByHash.java", "endpoints": {"api_summary": "The EthGetBlockByHash API endpoint retrieves a block by its hash. It can return either the block with complete transactions or just the transaction hashes. The endpoint is used to retrieve a specific block by its hash, which can be useful for various purposes such as querying the blockchain for specific data or verifying the integrity of a block.", "methods": ["GET"], "paths": ["/eth/block/byhash/<hash>"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthGetUncleCountByBlockNumber.java", "endpoints": {"api_summary": "The EthGetUncleCountByBlockNumber API endpoint retrieves the number of uncles in a block by block number.", "methods": ["GET"], "paths": ["/eth/getUncleCountByBlockNumber/<blockNumber>"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/AdminPeers.java", "endpoints": {"api_summary": "The AdminPeers API provides information about the peers connected to the node.", "methods": ["GET"], "paths": ["/admin/peers"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/RpcModules.java", "endpoints": {"api_summary": "The RpcModules API provides information about the available JSON-RPC modules and their versions.", "methods": ["GET"], "paths": ["/rpc_modules"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthGetStorageAt.java", "endpoints": {"api_summary": "The EthGetStorageAt API endpoint retrieves the storage value at a given address and position for a specific block hash.", "methods": ["GET"], "paths": ["/eth/getStorageAt/<blockHash>/<address>/<position>"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/PluginsReloadConfiguration.java", "endpoints": {"api_summary": "The PluginsReloadConfiguration API allows for reloading the configuration of a plugin. It takes a plugin name as a parameter and returns a success response if the plugin is found and reloaded, or an error response if the plugin is not found.", "methods": ["POST"], "paths": ["/plugins/<plugin_name>/reload"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/DebugGetRawTransaction.java", "endpoints": {"api_summary": "The DebugGetRawTransaction API endpoint retrieves the raw transaction data for a specific transaction hash. It takes a single parameter, the transaction hash, and returns the raw transaction data as a hexadecimal string.", "methods": ["GET"], "paths": ["/debug/getRawTransaction/<transaction_hash>"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthSyncing.java", "endpoints": {"api_summary": "The EthSyncing API endpoint retrieves the current progress of the syncing algorithm. If there's no sync currently running, it returns false.", "methods": ["GET"], "paths": ["/eth/syncing"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/miner/MinerStart.java", "endpoints": {"api_summary": "The MinerStart API endpoint enables or disables the mining process in the Besu Ethereum client. It takes no parameters and returns a boolean value indicating whether the mining process was successfully enabled or disabled.", "methods": ["GET"], "paths": ["/miner/start"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/miner/MinerGetMinPriorityFee.java", "endpoints": {"api_summary": "The MinerGetMinPriorityFee API endpoint allows clients to retrieve the minimum priority fee per gas for the miner.", "methods": ["GET"], "paths": ["/miner/minPriorityFee"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/miner/MinerGetMinGasPrice.java", "endpoints": {"api_summary": "The MinerGetMinGasPrice API endpoint allows clients to retrieve the minimum gas price for transactions on the Ethereum network.", "methods": ["GET"], "paths": ["/miner/minGasPrice"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/miner/MinerStop.java", "endpoints": {"api_summary": "The MinerStop API endpoint allows clients to stop the mining process on the node.", "methods": ["POST"], "paths": ["/miner/stop"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/miner/MinerSetCoinbase.java", "endpoints": {"api_summary": "The MinerSetCoinbase API allows clients to set the coinbase address for the mining process. The API takes a single parameter, the address, and returns a JSON object indicating the success or failure of the operation.", "methods": ["POST"], "paths": ["/miner/setCoinbase"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/miner/MinerGetExtraData.java", "endpoints": {"api_summary": "The MinerGetExtraData API endpoint retrieves the extra data field of the mining configuration, which is used to store arbitrary data in the block header.", "methods": ["GET"], "paths": ["/miner/extra_data"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/miner/MinerChangeTargetGasLimit.java", "endpoints": {"api_summary": "The MinerChangeTargetGasLimit API endpoint allows clients to change the target gas limit for the miner. The endpoint takes a single parameter, the new target gas limit, and returns a JSON-RPC response indicating success or failure.", "methods": ["POST"], "paths": ["/miner/change_target_gas_limit"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/engine/EngineExchangeTransitionConfiguration.java", "endpoints": {"api_summary": "This API is used to exchange transition configurations between the consensus client and the execution client.", "methods": ["GET", "POST"], "paths": ["/engine/exchange_transition_configuration"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/engine/EngineGetBlobsV1.java", "endpoints": {"api_summary": "The EngineGetBlobsV1 API endpoint retrieves blobs and their proofs from the execution engine. The endpoint accepts an array of versioned hashes as input and returns an array of BlobAndProofV1 objects, with each object containing the blob data and its corresponding proof.", "methods": ["GET"], "paths": ["/engine/getBlobsV1"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/engine/EngineGetPayloadV2.java", "endpoints": {"api_summary": "The EngineGetPayloadV2 API endpoint retrieves the payload for the next block to be mined, including the transactions and other data. The endpoint is only available for the Cancun hard fork and later.", "methods": ["GET"], "paths": ["/engine/getPayloadV2"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/engine/EngineNewPayloadV2.java", "endpoints": {"api_summary": "The EngineNewPayloadV2 API endpoint is used to create a new payload for the Ethereum engine. It takes in a payload parameter, which contains the transactions to include in the payload, and returns a validation result indicating whether the payload is valid or not.", "methods": ["POST"], "paths": ["/engine/newPayloadV2"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/engine/EngineForkchoiceUpdatedV3.java", "endpoints": {"api_summary": "The EngineForkchoiceUpdatedV3 API endpoint is used to update the fork choice of the Ethereum network. It takes in a JSON object with the head block hash, safe block hash, and finalized block hash as parameters, and returns a JSON object with the result of the update.", "methods": ["POST"], "paths": ["/engine/forkchoice-updated-v3"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/engine/EngineNewPayloadV4.java", "endpoints": {"api_summary": "The EngineNewPayloadV4 API endpoint is used to create a new payload for the engine. It takes in a payload parameter, a versioned hash parameter, a beacon block root parameter, and a list of execution requests. The endpoint returns a validation result indicating whether the payload is valid or not.", "methods": ["POST"], "paths": ["/engine/newPayloadV4"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/engine/AbstractEngineGetPayload.java", "endpoints": {"api_summary": "This API provides a way to retrieve a payload from the merge mining coordinator by its identifier.", "methods": ["GET"], "paths": ["/engine/getPayload"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/engine/EngineGetPayloadBodiesByRangeV1.java", "endpoints": {"api_summary": "The EngineGetPayloadBodiesByRangeV1 API endpoint retrieves the payload bodies for a range of blocks from the blockchain.", "methods": ["GET"], "paths": ["/engine/getPayloadBodiesByRangeV1"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/engine/EnginePreparePayloadDebug.java", "endpoints": {"api_summary": "The EnginePreparePayloadDebug API is a JSON-RPC method that allows clients to prepare a payload for the execution engine. It takes in various parameters such as withdrawals, timestamp, prevRandao, feeRecipient, and parentBeaconBlockRoot, and returns a payload identifier if the payload is valid.", "methods": ["POST"], "paths": ["/engine/prepare_payload_debug"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/engine/EngineGetBlobsV2.java", "endpoints": {"api_summary": "The EngineGetBlobsV2 API endpoint retrieves blobs and their proofs from the transaction pool.", "methods": ["GET"], "paths": ["/engine/getBlobsV2"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/engine/EngineExchangeCapabilities.java", "endpoints": {"api_summary": "This API exchanges capabilities between two nodes in a distributed system, allowing them to determine which methods they can call on each other.", "methods": ["GET", "POST"], "paths": ["/engine/exchange_capabilities"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/engine/EngineGetClientVersionV1.java", "endpoints": {"api_summary": "The EngineGetClientVersionV1 API endpoint retrieves the version information of the Besu Ethereum client.", "methods": ["GET"], "paths": ["/engine/client_version"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/engine/EngineNewPayloadV3.java", "endpoints": {"api_summary": "The EngineNewPayloadV3 API endpoint is used to create a new payload for the engine. It takes in a payload parameter, a versioned hash parameter, a beacon block root parameter, and an optional execution requests parameter. The endpoint returns a validation result indicating whether the parameters are valid or not.", "methods": ["POST"], "paths": ["/engine/newPayloadV3"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/engine/EngineGetPayloadBodiesByHashV1.java", "endpoints": {"api_summary": "The EngineGetPayloadBodiesByHashV1 API endpoint retrieves the payload bodies for a given list of block hashes.", "methods": ["GET"], "paths": ["/engine/getPayloadBodiesByHashV1"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/permissioning/PermGetAccountsAllowlist.java", "endpoints": {"api_summary": "The PermGetAccountsAllowlist API endpoint allows users to retrieve the list of accounts that are allowed to access the JSON-RPC API.", "methods": ["GET"], "paths": ["/perm_get_accounts_allowlist"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/permissioning/PermRemoveAccountsFromAllowlist.java", "endpoints": {"api_summary": "This API allows for the removal of accounts from the allowlist. It takes a list of accounts as input and returns a success response if the accounts are removed successfully. If there are any errors, it returns an error response with the appropriate error code and message.", "methods": ["POST"], "paths": ["/perm_remove_accounts_from_allowlist"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/permissioning/PermRemoveNodesFromAllowlist.java", "endpoints": {"api_summary": "This API allows for the removal of nodes from the allowlist. It takes a list of enode URLs as input and returns a success response if the removal is successful.", "methods": ["POST"], "paths": ["/perm_remove_nodes_from_allowlist"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/permissioning/PermAddAccountsToAllowlist.java", "endpoints": {"api_summary": "The PermAddAccountsToAllowlist API endpoint allows users to add accounts to the allowlist for permissioning purposes.", "methods": ["POST"], "paths": ["/perm_add_accounts_to_allowlist"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/permissioning/PermAddNodesToAllowlist.java", "endpoints": {"api_summary": "This API allows for adding nodes to the allowlist for permissioning.", "methods": ["POST"], "paths": ["/perm/add_nodes_to_allowlist"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/methods/PluginsJsonRpcMethods.java", "endpoints": {"api_summary": "The PluginsJsonRpcMethods class provides a set of JSON-RPC methods for managing plugins in Besu. It allows users to reload the configuration of plugins and provides a way to access plugin-specific methods.", "methods": ["GET", "POST"], "paths": ["/plugins/reload", "/plugins/<plugin_name>/<plugin_method>"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/methods/NetJsonRpcMethods.java", "endpoints": {"api_summary": "The NetJsonRpcMethods class provides a set of JSON-RPC methods for interacting with the network. It includes methods for retrieving information about the network, such as the network ID, peer count, and listening status.", "methods": ["GET", "POST"], "paths": ["/net/version", "/net/listening", "/net/peerCount", "/net/enode", "/net/services"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/methods/AdminJsonRpcMethods.java", "endpoints": {"api_summary": "The Admin API provides methods for managing the Besu node, including adding and removing peers, viewing node information, and managing the log level.", "methods": ["GET", "POST"], "paths": ["/admin/addPeer", "/admin/removePeer", "/admin/nodeInfo", "/admin/peers", "/admin/changeLogLevel", "/admin/generateLogBloomCache", "/admin/logsRepairCache", "/admin/logsRemoveCache", "/admin/pluginsReloadConfiguration"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/methods/TxPoolJsonRpcMethods.java", "endpoints": {"api_summary": "The TxPoolJsonRpcMethods class provides a set of JSON-RPC methods for interacting with the transaction pool in Besu. It includes methods for retrieving information about pending transactions, statistics, and transactions in the pool.", "methods": ["GET", "POST"], "paths": ["/txpool/besu/transactions", "/txpool/besu/pendingTransactions", "/txpool/besu/statistics"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/methods/MinerJsonRpcMethods.java", "endpoints": {"api_summary": "The Miner API provides methods for managing the mining process, including setting the coinbase, etherbase, and gas limit, as well as starting and stopping the miner.", "methods": ["GET", "POST"], "paths": ["/miner/start", "/miner/stop", "/miner/setCoinbase", "/miner/setEtherbase", "/miner/changeTargetGasLimit", "/miner/getMinPriorityFee", "/miner/setMinPriorityFee", "/miner/getMinGasPrice", "/miner/setMinGasPrice", "/miner/getExtraData", "/miner/setExtraData"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/methods/TraceJsonRpcMethods.java", "endpoints": {"api_summary": "The TraceJsonRpcMethods class provides a set of JSON-RPC methods for tracing Ethereum transactions and blocks.", "methods": ["GET", "POST"], "paths": ["/trace_replay_block_transactions", "/trace_filter", "/trace_get", "/trace_transaction", "/trace_block", "/trace_call", "/trace_call_many", "/trace_raw_transaction"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/methods/Web3JsonRpcMethods.java", "endpoints": {"api_summary": "The Web3JsonRpcMethods class provides a set of JSON-RPC methods for interacting with the Ethereum network. It includes methods for retrieving information about the client version and performing SHA3 operations.", "methods": ["GET", "POST"], "paths": ["/web3/clientVersion", "/web3/sha3"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/ipc/JsonRpcIpcService.java", "endpoints": {"api_summary": "This API provides a JSON-RPC interface for interacting with the Ethereum network.", "methods": ["POST"], "paths": ["/"]}}
{"file": "cloned/besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/authentication/EngineAuthService.java", "endpoints": {"api_summary": "The EngineAuthService provides authentication and authorization for the Hyperledger Besu Ethereum client's JSON-RPC API. It generates and validates JWT tokens for clients, and checks the permissions of incoming requests.", "methods": ["GET", "POST"], "paths": ["/users", "/users/<built-in function id>"]}}
{"file": "cloned/besu/ethereum/api/src/integration-test/java/org/hyperledger/besu/ethereum/api/jsonrpc/methods/EthGetBlockByNumberLatestDesyncIntegrationTest.java", "endpoints": {"api_summary": "This API provides information about the latest block in the blockchain.", "methods": ["GET"], "paths": ["/eth/v1/blocks/latest"]}}
{"file": "cloned/besu/ethereum/api/src/integration-test/java/org/hyperledger/besu/ethereum/api/jsonrpc/methods/DebugTraceTransactionIntegrationTest.java", "endpoints": {"api_summary": "The DebugTraceTransactionIntegrationTest class contains tests for the debug_traceTransaction JSON-RPC method. The method returns a DebugTraceTransactionDetails object that contains information about the transaction, including the gas used, return value, and struct logs.", "methods": ["GET"], "paths": ["/debug_traceTransaction"]}}
{"file": "cloned/besu/ethereum/api/src/integration-test/java/org/hyperledger/besu/ethereum/api/jsonrpc/methods/fork/frontier/EthGetUncleByBlockHashAndIndexIntegrationTest.java", "endpoints": {"api_summary": "The EthGetUncleByBlockHashAndIndexIntegrationTest class tests the eth_getUncleByBlockHashAndIndex method of the JSON-RPC API.", "methods": ["eth_getUncleByBlockHashAndIndex"], "paths": ["/eth_getUncleByBlockHashAndIndex"]}}
{"file": "cloned/besu/ethereum/api/src/integration-test/java/org/hyperledger/besu/ethereum/api/jsonrpc/methods/fork/frontier/EthGetUncleByBlockNumberAndIndexIntegrationTest.java", "endpoints": {"api_summary": "The EthGetUncleByBlockNumberAndIndexIntegrationTest class tests the eth_getUncleByBlockNumberAndIndex method of the JSON-RPC API.", "methods": ["eth_getUncleByBlockNumberAndIndex"], "paths": ["/eth_getUncleByBlockNumberAndIndex"]}}
{"file": "cloned/besu/ethereum/api/src/integration-test/java/org/hyperledger/besu/ethereum/api/jsonrpc/methods/fork/frontier/EthGetBlockByHashIntegrationTest.java", "endpoints": {"api_summary": "This API provides information about the blockchain and its transactions.", "methods": ["GET"], "paths": ["/blockchain"]}}
{"file": "cloned/besu/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/graphql/GraphQLHttpServiceHostWhitelistTest.java", "endpoints": {"api_summary": "This API provides a GraphQL interface for querying the Ethereum blockchain.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/besu/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/PluginJsonRpcMethodTest.java", "endpoints": {"api_summary": "This API defines a single endpoint for echoing a string parameter.", "methods": ["POST"], "paths": ["/plugin_echo"]}}
{"file": "cloned/besu/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/JsonRpcHttpServiceCorsTest.java", "endpoints": {"api_summary": "This API provides a JSON-RPC interface for interacting with the Ethereum network.", "methods": ["GET", "POST"], "paths": ["/users", "/users/<built-in function id>"]}}
{"file": "cloned/besu/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/websocket/methods/EthSubscribeTest.java", "endpoints": {"api_summary": "The EthSubscribe API allows clients to subscribe to Ethereum events, such as new blocks or logs, and receive notifications when these events occur. The API uses WebSockets to establish a persistent connection between the client and the server.", "methods": ["eth_subscribe"], "paths": ["/eth/subscribe"]}}
{"file": "cloned/besu/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/websocket/methods/EthUnsubscribeIntegrationTest.java", "endpoints": {"api_summary": "This API provides methods for unsubscribing from Ethereum events using WebSockets.", "methods": ["eth_unsubscribe"], "paths": ["/eth/unsubscribe"]}}
{"file": "cloned/besu/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/websocket/methods/EthSubscribeIntegrationTest.java", "endpoints": {"api_summary": "This API provides methods for subscribing to Ethereum events, such as new blocks and transactions.", "methods": ["eth_subscribe"], "paths": ["/eth/subscribe"]}}
{"file": "cloned/besu/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/filter/EthJsonRpcHttpServiceTest.java", "endpoints": {"api_summary": "This API provides methods for creating and managing filters for block and pending transaction events, as well as for uninstalling filters.", "methods": ["eth_newBlockFilter", "eth_newPendingTransactionFilter", "eth_getFilterChanges", "eth_uninstallFilter"], "paths": ["/eth/filter", "/eth/pendingTransactions", "/eth/uninstallFilter"]}}
{"file": "cloned/besu/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/AdminChangeLogLevelTest.java", "endpoints": {"api_summary": "The AdminChangeLogLevel API endpoint allows users to change the log level of the application. It takes a single parameter, `logLevel`, which specifies the new log level. The endpoint returns a JSON object with a `success` field set to `true` if the log level was changed successfully.", "methods": ["POST"], "paths": ["/admin/changeLogLevel"]}}
{"file": "cloned/besu/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/DebugStandardTraceBadBlockToFileTest.java", "endpoints": {"api_summary": "This API provides a way to trace a bad block and its transactions using the transaction tracer.", "methods": ["debug_standardTraceBadBlockToFile"], "paths": ["/debug_standardTraceBadBlockToFile"]}}
{"file": "cloned/besu/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthGetWorkTest.java", "endpoints": {"api_summary": "The EthGetWork API endpoint is used to retrieve work for mining a new block. It returns a list of four hexadecimal values representing the block header, the seed hash, the target, and the block number.", "methods": ["GET"], "paths": ["/eth/v1/getWork"]}}
{"file": "cloned/besu/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/Web3Sha3Test.java", "endpoints": {"api_summary": "The Web3Sha3 method is a JSON-RPC method that takes a single string parameter and returns the SHA3 hash of the input string.", "methods": ["web3_sha3"], "paths": ["/web3_sha3"]}}
{"file": "cloned/besu/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthGetFilterLogsTest.java", "endpoints": {"api_summary": "The EthGetFilterLogs method returns the logs for a given filter ID. It takes a single parameter, the filter ID, and returns a list of logs.", "methods": ["GET"], "paths": ["/eth/getFilterLogs"]}}
{"file": "cloned/besu/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/AdminPeersTest.java", "endpoints": {"api_summary": "The AdminPeers API provides information about the peers connected to the node.", "methods": ["GET"], "paths": ["/admin/peers"]}}
{"file": "cloned/besu/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/NetEnodeTest.java", "endpoints": {"api_summary": "The NetEnode API provides information about the node's enode URL, including the node ID, IP address, discovery port, and listening port.", "methods": ["net_enode"], "paths": ["/net_enode"]}}
{"file": "cloned/besu/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthGetMinerDataByBlockNumberTest.java", "endpoints": {"api_summary": "The EthGetMinerDataByBlockNumber method returns information about the miner of a block by its block number.", "methods": ["GET"], "paths": ["/eth/getMinerDataByBlockNumber"]}}
{"file": "cloned/besu/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/DebugGetBadBlockTest.java", "endpoints": {"api_summary": "The DebugGetBadBlocks API endpoint retrieves a list of bad blocks that have been detected by the Besu client.", "methods": ["GET"], "paths": ["/debug/badBlocks"]}}
{"file": "cloned/besu/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthSimulateV1Test.java", "endpoints": {"api_summary": "The EthSimulateV1 API endpoint allows clients to simulate the execution of a transaction on the Ethereum network without actually mining it. It takes a JSON-RPC request with a SimulateV1Parameter object and a block number as input, and returns a JSON-RPC response with the result of the simulation.", "methods": ["eth_simulateV1"], "paths": ["/eth_simulateV1"]}}
{"file": "cloned/besu/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/DebugTraceBlockByHashTest.java", "endpoints": {"api_summary": "This API provides a way to trace a block by its hash, returning a list of transaction details.", "methods": ["GET"], "paths": ["/debug/traceBlockByHash/<block_hash>"]}}
{"file": "cloned/besu/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/TxPoolBesuStatisticsTest.java", "endpoints": {"api_summary": "The TxPoolBesuStatistics API provides information about the transaction pool, including the number of local and remote transactions, the maximum size of the pool, and the number of pending transactions.", "methods": ["GET"], "paths": ["/txpool/besuStatistics"]}}
{"file": "cloned/besu/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/DebugBatchSendRawTransactionTest.java", "endpoints": {"api_summary": "The DebugBatchSendRawTransaction API allows users to send multiple raw transactions to the network for execution. It is intended for debugging purposes only and should not be used in production environments.", "methods": ["POST"], "paths": ["/debug/batch/sendRawTransaction"]}}
{"file": "cloned/besu/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/NetListeningTest.java", "endpoints": {"api_summary": "The NetListening API provides information about the network listening status of the node.", "methods": ["GET"], "paths": ["/net/listening"]}}
{"file": "cloned/besu/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthSyncingTest.java", "endpoints": {"api_summary": "The EthSyncing API endpoint provides information about the synchronization status of the Ethereum node.", "methods": ["GET"], "paths": ["/eth/syncing"]}}
{"file": "cloned/besu/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/DebugStandardTraceBlockToFileTest.java", "endpoints": {"api_summary": "This API provides a method to trace a block and its transactions, and save the trace to a file.", "methods": ["debug_standardTraceBlockToFile"], "paths": ["/debug_standardTraceBlockToFile"]}}
{"file": "cloned/besu/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/AdminLogsRemoveCacheTest.java", "endpoints": {"api_summary": "This API provides a method to remove the log bloom cache for a specific block range.", "methods": ["POST"], "paths": ["/admin/logs/remove_cache"]}}
{"file": "cloned/besu/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthGetMinerDataByBlockHashTest.java", "endpoints": {"api_summary": "The EthGetMinerDataByBlockHash method returns information about the miner of a block, including the block reward, transaction fees, and uncle rewards.", "methods": ["GET"], "paths": ["/eth/getMinerDataByBlockHash"]}}
{"file": "cloned/besu/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/TxPoolBesuTransactionsTest.java", "endpoints": {"api_summary": "The TxPoolBesuTransactions API provides information about the transactions in the Besu transaction pool.", "methods": ["GET"], "paths": ["/txpool/besuTransactions"]}}
{"file": "cloned/besu/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthBlobBaseFeeTest.java", "endpoints": {"api_summary": "The EthBlobBaseFee method returns the base fee for blob transactions on the Cancun fork.", "methods": ["eth_blobBaseFee"], "paths": ["/eth_blobBaseFee"]}}
{"file": "cloned/besu/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/DebugTraceBlockByNumberTest.java", "endpoints": {"api_summary": "This API provides a way to trace the execution of a block by its number.", "methods": ["GET"], "paths": ["/debug_traceBlockByNumber"]}}
{"file": "cloned/besu/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthGetTransactionCountTest.java", "endpoints": {"api_summary": "The EthGetTransactionCount API endpoint retrieves the number of transactions sent from an address. It can retrieve the number of pending transactions or the number of transactions in the latest block.", "methods": ["GET"], "paths": ["/eth/getTransactionCount"]}}
{"file": "cloned/besu/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthCoinbaseTest.java", "endpoints": {"api_summary": "The EthCoinbase API endpoint returns the current coinbase address for the node.", "methods": ["GET"], "paths": ["/eth/coinbase"]}}
{"file": "cloned/besu/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthSubmitWorkTest.java", "endpoints": {"api_summary": "The EthSubmitWork method is a JSON-RPC method that allows clients to submit work to the Ethereum network. It is used by miners to submit their solutions to the PoW algorithm and is called by the JSON-RPC server when a client sends an eth_submitWork request.", "methods": ["POST"], "paths": ["/eth/v1/submitWork"]}}
{"file": "cloned/besu/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/miner/MinerStartTest.java", "endpoints": {"api_summary": "The MinerStart method is a JSON-RPC method that enables or disables the miner on the node. It takes no parameters and returns a boolean indicating whether the miner was successfully started or not.", "methods": ["miner_start"], "paths": ["/miner_start"]}}
{"file": "cloned/besu/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/engine/EngineForkchoiceUpdatedV2Test.java", "endpoints": {"api_summary": "The EngineForkchoiceUpdatedV2 API endpoint is used to update the fork choice of the Ethereum network. It takes a BlockHeader object and a MergeMiningCoordinator object as input, and returns a MergeMiningCoordinator.ForkchoiceResult object.", "methods": ["POST"], "paths": ["/engine_forkchoiceUpdatedV2"]}}
{"file": "cloned/besu/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/engine/EnginePreparePayloadDebugTest.java", "endpoints": {"api_summary": "This API is a part of the Hyperledger Besu project and provides a JSON-RPC interface for interacting with the Ethereum network. It includes methods for preparing payloads and managing the execution engine.", "methods": ["GET", "POST"], "paths": ["/engine/preparePayload", "/engine/preparePayload/<payloadId>"]}}
{"file": "cloned/besu/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/engine/EngineGetPayloadV2Test.java", "endpoints": {"api_summary": "The EngineGetPayloadV2 method retrieves the payload for a given payload ID. It returns a JSON object with the payload and some additional information.", "methods": ["GET"], "paths": ["/engine/getPayloadV2"]}}
{"file": "cloned/besu/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/engine/EngineExchangeCapabilitiesTest.java", "endpoints": {"api_summary": "This API provides information about the capabilities of the execution engine.", "methods": ["GET"], "paths": ["/engine/exchangeCapabilities"]}}
{"file": "cloned/besu/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/permissioning/PermAddAccountsToAllowlistTest.java", "endpoints": {"api_summary": "The PermAddAccountsToAllowlist API endpoint allows users to add accounts to the allowlist for permissioning purposes.", "methods": ["POST"], "paths": ["/perm_addAccountsToAllowlist"]}}
{"file": "cloned/besu/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/permissioning/PermRemoveAccountsFromAllowlistTest.java", "endpoints": {"api_summary": "The PermRemoveAccountsFromAllowlist API endpoint allows users to remove accounts from the allowlist.", "methods": ["POST"], "paths": ["/perm_removeAccountsFromAllowlist"]}}
{"file": "cloned/besu/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/permissioning/PermGetAccountsAllowlistTest.java", "endpoints": {"api_summary": "The perm_getAccountsAllowlist API endpoint retrieves the list of accounts that are allowed to connect to the node. The endpoint is only available if the node has enabled account allowlisting.", "methods": ["GET"], "paths": ["/perm_getAccountsAllowlist"]}}
{"file": "cloned/besu/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/permissioning/PermGetNodesAllowlistTest.java", "endpoints": {"api_summary": "This API provides a method to retrieve the list of nodes that are allowed to connect to the node.", "methods": ["GET"], "paths": ["/perm_getNodesAllowlist"]}}
{"file": "cloned/besu/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/parameters/TraceCallManyParameterTest.java", "endpoints": {"api_summary": "This API defines a set of endpoints for querying and manipulating the state of a blockchain. It includes endpoints for retrieving information about blocks, transactions, and accounts, as well as endpoints for sending transactions and managing the node's configuration.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/blocks", "/blocks/<block_id>", "/transactions", "/transactions/<transaction_id>", "/accounts", "/accounts/<account_id>", "/config", "/config/<config_key>"]}}
{"file": "cloned/besu/ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/methods/PermJsonRpcMethodsTest.java", "endpoints": {"api_summary": "This API provides methods for managing allowlists for accounts and nodes in a permissioned network.", "methods": ["GET", "POST", "DELETE"], "paths": ["/perm/accounts/allowlist", "/perm/nodes/allowlist"]}}
{"file": "cloned/besu/ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/sync/tasks/CompleteBlocksWithPeerTask.java", "endpoints": {"api_summary": "This API completes blocks by repeatedly requesting additional data (bodies) needed to create the blocks that correspond to the supplied headers.", "methods": ["GET"], "paths": ["/completeBlocksWithPeerTask"]}}
{"file": "cloned/besu/ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/sync/snapsync/request/heal/StorageFlatDatabaseHealingRangeRequest.java", "endpoints": {"api_summary": "This API is responsible for healing the storage in the flat databases.", "methods": ["GET", "POST"], "paths": ["/storage/flat/healing"]}}
{"file": "cloned/besu/ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/messages/GetBlockHeadersMessage.java", "endpoints": {"api_summary": "The GetBlockHeadersMessage class is a message class for the Ethereum P2P network that is used to request block headers from a peer. It can request headers by block number or block hash, and can specify the maximum number of headers to return, the number of headers to skip, and whether to return the headers in reverse order.", "methods": ["GET"], "paths": ["/eth/v62/getBlockHeaders"]}}
{"file": "cloned/besu/ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/messages/snap/GetStorageRangeMessage.java", "endpoints": {"api_summary": "The GetStorageRangeMessage class is a message class that represents a request to retrieve a range of storage keys and values from a node's world state.", "methods": ["GET"], "paths": ["/storage/range"]}}
{"file": "cloned/besu/ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/messages/snap/GetAccountRangeMessage.java", "endpoints": {"api_summary": "The GetAccountRangeMessage class is a part of the Hyperledger Besu Ethereum client and is used to retrieve a range of accounts from the world state.", "methods": ["GET"], "paths": ["/eth/v1/accounts/range"]}}
{"file": "cloned/besu/ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/manager/peertask/task/GetBodiesFromPeerTask.java", "endpoints": {"api_summary": "This API is used to retrieve block bodies from peers and match them to block headers to supply full blocks.", "methods": ["GET"], "paths": ["/blocks/bodies"]}}
{"file": "cloned/besu/ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/manager/peertask/task/GetReceiptsFromPeerTask.java", "endpoints": {"api_summary": "The GetReceiptsFromPeerTask API allows clients to retrieve transaction receipts for a given block header. The API takes a list of block headers as input and returns a map of block headers to lists of transaction receipts.", "methods": ["GET"], "paths": ["/get_receipts"]}}
{"file": "cloned/besu/ethereum/eth/src/test/java/org/hyperledger/besu/ethereum/eth/sync/fullsync/FullSyncChainDownloaderForkTest.java", "endpoints": {"api_summary": "This API is a test suite for the FullSyncChainDownloader class, which is responsible for downloading the Ethereum blockchain during the initial sync process. The API includes tests for the disconnectsFromPeerOnBadFork method, which checks that the downloader disconnects from a peer that is on a bad fork.", "methods": ["GET", "POST"], "paths": ["/users", "/users/<built-in function id>"]}}
{"file": "cloned/besu/ethereum/eth/src/test/java/org/hyperledger/besu/ethereum/eth/sync/snapsync/LoadLocalDataStepTest.java", "endpoints": {"api_summary": "This API provides a way to load local data for the SnapSync process.", "methods": ["GET", "POST"], "paths": ["/loadLocalData"]}}
{"file": "cloned/besu/ethereum/eth/src/test/java/org/hyperledger/besu/ethereum/eth/manager/task/GetHeadersFromPeerByNumberTaskTest.java", "endpoints": {"api_summary": "This API provides a way to retrieve headers from a peer by number.", "methods": ["GET"], "paths": ["/headers/byNumber"]}}
{"file": "cloned/besu/ethereum/evmtool/src/main/java/org/hyperledger/besu/evmtool/benchmarks/BLS12Benchmark.java", "endpoints": {"api_summary": "This API provides benchmarking for BLS12-381 G1 and G2 MSM, MapFpToG1, MapFp2ToG2, and Pairing.", "methods": ["GET", "POST"], "paths": ["/benchmark/bls12"]}}
{"file": "cloned/besu/ethereum/p2p/src/main/java/org/hyperledger/besu/ethereum/p2p/rlpx/connections/netty/ApiHandler.java", "endpoints": {"api_summary": "This API handles incoming P2P messages and dispatches them to the appropriate handlers based on the message type and protocol.", "methods": ["GET", "POST"], "paths": ["/p2p/messages"]}}
{"file": "cloned/besu/ethereum/p2p/src/main/java/org/hyperledger/besu/ethereum/p2p/discovery/Endpoint.java", "endpoints": {"api_summary": "The Endpoint class encapsulates the network coordinates of a DiscoveryPeer and provides serialization logic for various Discovery messages.", "methods": ["GET", "POST"], "paths": ["/users", "/users/<built-in function id>"]}}
{"file": "cloned/besu/ethereum/p2p/src/test/java/org/hyperledger/besu/ethereum/p2p/discovery/PeerDiscoveryBondingTest.java", "endpoints": {"api_summary": "This API is a test suite for the PeerDiscoveryBondingTest class, which tests the bonding process between two peers in a peer-to-peer network.", "methods": ["PING", "PONG", "FIND_NEIGHBORS"], "paths": ["/peers/<peer_id>/ping", "/peers/<peer_id>/pong", "/peers/<peer_id>/find_neighbors"]}}
{"file": "cloned/besu/ethereum/p2p/src/test/java/org/hyperledger/besu/ethereum/p2p/discovery/dns/MockDnsServerVerticle.java", "endpoints": {"api_summary": "Mock DNS server verticle provides DNS query functionality for testing purposes.", "methods": ["GET", "POST"], "paths": ["/dns/query"]}}
{"file": "cloned/besu/ethereum/p2p/src/test/java/org/hyperledger/besu/ethereum/p2p/discovery/internal/PeerDiscoveryTableRefreshTest.java", "endpoints": {"api_summary": "This API is a test suite for the PeerDiscoveryController class, which is responsible for managing the peer discovery process in the Ethereum network. It includes tests for the table refresh functionality, which is responsible for periodically refreshing the list of known peers in the network.", "methods": ["GET", "POST"], "paths": ["/peers", "/peers/<peer_id>"]}}
{"file": "cloned/besu/ethereum/rlp/src/main/java/org/hyperledger/besu/ethereum/rlp/AbstractRLPOutput.java", "endpoints": {"api_summary": "This API is a utility class for encoding and decoding RLP (Recursive Length Prefix) data.", "methods": ["writeBytes", "writeRaw", "startList", "endList", "encodedSize", "writeEncoded"], "paths": ["org.hyperledger.besu.ethereum.rlp.AbstractRLPOutput"]}}
{"file": "cloned/besu/ethereum/blockcreation/src/test/java/org/hyperledger/besu/ethereum/blockcreation/AbstractBlockCreatorTest.java", "endpoints": {"api_summary": "This API is responsible for creating and managing blocks in the Ethereum blockchain.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/blocks", "/blocks/<block_id>", "/blocks/<block_id>/transactions", "/blocks/<block_id>/transactions/<transaction_id>"]}}
{"file": "cloned/besu/app/src/main/java/org/hyperledger/besu/cli/subcommands/TxParseSubCommand.java", "endpoints": {"api_summary": "This API parses input transactions and returns the sender, or an error.", "methods": ["GET", "POST"], "paths": ["/txparse"]}}
{"file": "cloned/besu/app/src/test/java/org/hyperledger/besu/cli/TxPoolOptionsTest.java", "endpoints": {"api_summary": "This API provides functionality for managing the transaction pool in Besu.", "methods": ["GET", "POST"], "paths": ["/txpool"]}}
{"file": "cloned/product-collector/datamanager/criteria/components/routes.js", "endpoints": {"api_summary": "The criteria API provides endpoints for managing criteria, including listing, creating, and deleting criteria. The API uses HTTP methods and URL paths to interact with the criteria service.", "methods": ["GET", "POST", "DELETE"], "paths": ["/api/criteria", "/api/criteria/<criteriaId>"]}}
{"file": "cloned/product-collector/datamanager/mercadoLibre/services/productsService.js", "endpoints": {"api_summary": "The ProductsService class defines a set of methods for retrieving and manipulating product data from the Mercado Libre API. It also includes methods for sending data to the normalization service.", "methods": ["GET", "POST"], "paths": ["/products", "/sites/<country>/search?category=<categoryId>", "/sites/<country>/search?q=<keyword>"]}}
{"file": "cloned/product-collector/backend/ApiREST/index.js", "endpoints": {"api_summary": "This API provides endpoints for managing products, keywords, and categories. It also includes a Swagger UI for documentation and testing.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/products", "/products/<built-in function id>", "/keywords", "/keywords/<built-in function id>", "/categories", "/categories/<built-in function id>", "/api-docs"]}}
{"file": "cloned/product-collector/backend/ApiREST/components/products/routes.js", "endpoints": {"api_summary": "The products API allows for the retrieval, creation, update, and deletion of products. It also supports filtering by category and searching by keyword.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/products", "/api/products/:productId"]}}
{"file": "cloned/product-collector/backend/ApiREST/components/categories/routes.js", "endpoints": {"api_summary": "The categories API provides endpoints for managing categories in a repository. It allows for creating, retrieving, updating, and deleting categories, as well as listing all categories.", "methods": ["GET", "POST", "PATCH", "DELETE"], "paths": ["/api/categories", "/api/categories/:categoryId"]}}
{"file": "cloned/product-collector/backend/ApiREST/components/keywords/routes.js", "endpoints": {"api_summary": "The keywords API allows for the creation, retrieval, update, and deletion of keywords. It also allows for listing all keywords and retrieving a specific keyword by its ID.", "methods": ["GET", "POST", "PATCH", "DELETE"], "paths": ["/api/keywords", "/api/keywords/:keywordId"]}}
{"file": "cloned/product-collector/normalization/src/components/auth/network.js", "endpoints": {"api_summary": "This API provides endpoints for authentication and data encryption. The authentication endpoint allows users to generate a token for secure access to the system, while the data encryption endpoint enables the encryption of sensitive data.", "methods": ["POST", "GET"], "paths": ["/token", "/encrypt-data"]}}
{"file": "cloned/product-collector/normalization/src/components/data-manager/network.js", "endpoints": {"api_summary": "The Data Manager Network API provides endpoints for managing and normalizing data. It allows users to search for secrets by token and normalize data.", "methods": ["POST"], "paths": ["/normalize"]}}
{"file": "cloned/product-collector/normalization/src/network/router.js", "endpoints": {"api_summary": "The Normalization API provides endpoints for authentication and data management. The authentication endpoint allows users to authenticate and obtain an access token, while the data management endpoint provides CRUD operations for managing data.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/normalization/auth", "/normalization/data-manager"]}}
{"file": "cloned/moh-prime/document-manager/backend/app/docman/resources/document.py", "endpoints": {"api_summary": "This API allows for the upload, download, and management of documents. It also includes endpoints for creating and using download tokens.", "methods": ["GET", "POST", "PATCH", "HEAD", "OPTIONS"], "paths": ["/documents/uploads", "/documents/uploads/<string:document_guid>", "/documents/uploads/<string:document_guid>/submit", "/documents", "/documents/<string:document_guid>", "/documents/<string:document_guid>/download-token"]}}
{"file": "cloned/moh-prime/poc/prime-angular-poc/src/app/modules/auth/auth-routing.module.ts", "endpoints": {"api_summary": "The AuthRoutingModule defines a set of routes for handling authentication-related requests. The module includes a login page and a redirect from the root path to the login page.", "methods": ["GET", "POST"], "paths": ["/auth/login", "/auth"]}}
{"file": "cloned/moh-prime/prime-angular-frontend/src/app/app-routing.module.ts", "endpoints": {"api_summary": "This API defines various routes for different modules, including authentication, enrollment, site registration, adjudication, provisioner access, PHSA eForms, SAT eForms, GIS enrollment, HealthAuth site registration, and paper enrollment. It also includes routes for access denied, underaged, maintenance, page not found, help, and default pages.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/auth", "/enrolment", "/site-registration", "/adjudication", "/provisioner-access", "/phsa-eforms", "/sat-eforms", "/gis-enrolment", "/health-auth-site-reg", "/paper-enrolment", "/denied", "/underaged", "/maintenance", "/page-not-found", "/help", "/default"]}}
{"file": "cloned/moh-prime/prime-angular-frontend/src/app/core/resources/authorized-user-resource.service.ts", "endpoints": {"api_summary": "The AuthorizedUserResource provides a set of methods for managing authorized users in the system. It includes endpoints for creating, updating, deleting, and retrieving authorized users, as well as endpoints for managing their associated sites and site counts.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/parties/authorized-users", "/parties/authorized-users/<id>", "/parties/authorized-users/<id>/sites", "/parties/authorized-users/<id>/site-count"]}}
{"file": "cloned/moh-prime/prime-angular-frontend/src/app/core/resources/health-authority-site-resource.service.ts", "endpoints": {"api_summary": "The HealthAuthoritySiteResource class provides methods for creating, retrieving, updating, and deleting health authority sites, as well as for transferring sites from one authorized user to another.", "methods": ["POST", "GET", "PUT", "DELETE"], "paths": ["/health-authorities/<healthAuthId>/sites", "/health-authorities/<healthAuthId>/sites/<healthAuthSiteId>", "/health-authorities/<healthAuthCode>/sites/transfer/from/<currentAuthorizedUserId>/to/<newAuthorizedUserId>"]}}
{"file": "cloned/moh-prime/prime-angular-frontend/src/app/core/resources/api-resource.service.ts", "endpoints": {"api_summary": "The API provides a set of endpoints for managing resources, including GET, POST, PUT, PATCH, and DELETE methods. The endpoints are defined using the HttpClient and HttpParams classes from the @angular/common/http module, and the API is configured using the APP_CONFIG injection token.", "methods": ["GET", "POST", "PUT", "PATCH", "DELETE"], "paths": ["/api/resources", "/api/resources/<id>"]}}
{"file": "cloned/moh-prime/prime-angular-frontend/src/app/core/resources/logger-resource.service.ts", "endpoints": {"api_summary": "The LoggerResource API provides a way to create logs for a client. It accepts a Log object and returns the ID of the created log.", "methods": ["POST"], "paths": ["/client-logs"]}}
{"file": "cloned/moh-prime/prime-angular-frontend/src/app/modules/adjudication/shared/modules/admin-login-page/admin-login-page-routing.module.ts", "endpoints": {"api_summary": "The PRIME Administration API provides a login page for administrators to access the PRIME system.", "methods": ["GET"], "paths": ["/admin-login-page"]}}
{"file": "cloned/moh-prime/prime-angular-frontend/src/app/modules/adjudication/shared/services/email-template-resource.service.ts", "endpoints": {"api_summary": "The EmailTemplateResourceService provides a set of endpoints for managing email templates, including retrieving, updating, and deleting templates.", "methods": ["GET", "PUT"], "paths": ["/emails/management/templates", "/emails/management/templates/<id>", "/emails/management/subject/<id>", "/emails/management/title/<id>", "/emails/management/description/<id>", "/emails/management/recipient/<id>"]}}
{"file": "cloned/moh-prime/prime-angular-frontend/src/app/modules/sat-eforms/sat-eforms-routing.module.ts", "endpoints": {"api_summary": "The Special Authority E-Forms API allows users to submit forms for various special authorities, such as collection notice, demographic information, and regulatory information. The API provides a dashboard for users to navigate to the different forms and submit them for review.", "methods": ["GET", "POST"], "paths": ["/sat-eforms/collection-notice", "/sat-eforms/enrollments/<built-in function id>/demographic", "/sat-eforms/enrollments/<built-in function id>/regulatory", "/sat-eforms/enrollments/<built-in function id>/submission-confirmation"]}}
{"file": "cloned/moh-prime/prime-angular-frontend/src/app/modules/sat-eforms/pages/demographic-page/demographic-page.component.ts", "endpoints": {"api_summary": "The DemographicPageComponent is a component that handles the demographic information of an enrollee in the SatEforms module of the application. It is responsible for creating and updating enrollee information, and for handling the form state and validation of the demographic information.", "methods": ["GET", "POST"], "paths": ["/demographic"]}}
{"file": "cloned/moh-prime/prime-angular-frontend/src/app/modules/sat-eforms/shared/resource/sat-eforms-enrolment-resource.service.ts", "endpoints": {"api_summary": "The SatEformsEnrolmentResource API provides endpoints for creating, retrieving, updating, and submitting SAT enrollee information.", "methods": ["POST", "GET", "PUT", "DELETE"], "paths": ["parties/sat", "parties/sat/<enrolleeId>", "parties/sat/<enrolleeId>/certifications", "parties/sat/<enrolleeId>/submissions"]}}
{"file": "cloned/moh-prime/prime-angular-frontend/src/app/modules/sat-eforms/shared/modules/sat-eforms-login-page/sat-eforms-login-page-routing.module.ts", "endpoints": {"api_summary": "The Special Authority E-Forms login page provides a way for users to access and manage their forms. The API endpoints in this file are used to handle login and authentication for the Special Authority E-Forms application.", "methods": ["GET"], "paths": ["/sat-eforms-login-page"]}}
{"file": "cloned/moh-prime/prime-angular-frontend/src/app/modules/phsa-eforms/phsa-eforms-routing.module.ts", "endpoints": {"api_summary": "The PHSA Eforms API provides a set of endpoints for managing the PHSA eForms application, including access code, demographic, available access, and submission confirmation endpoints.", "methods": ["GET", "POST"], "paths": ["/phsa-eforms/access-code", "/phsa-eforms/demographic", "/phsa-eforms/available-access", "/phsa-eforms/submission-confirmation"]}}
{"file": "cloned/moh-prime/prime-angular-frontend/src/app/modules/phsa-eforms/shared/resources/phsa-eforms-resource.service.ts", "endpoints": {"api_summary": "The PhsaEformsResource API provides endpoints for creating and retrieving enrolment information for the Pharmacare Access System (PhAS). It also provides an endpoint for retrieving pre-approved parties for the PhAS.", "methods": ["POST", "GET"], "paths": ["/parties/phsa", "/parties/phsa/pre-approved"]}}
{"file": "cloned/moh-prime/prime-angular-frontend/src/app/modules/phsa-eforms/shared/modules/phsa-eforms-login-page/phsa-eforms-login-page-routing.module.ts", "endpoints": {"api_summary": "This API provides a login page for the PHSA eForms application. It allows users to enroll for access to the application and provides a login form for existing users.", "methods": ["GET"], "paths": ["/phsa-eforms-login-page"]}}
{"file": "cloned/moh-prime/prime-angular-frontend/src/app/modules/site-registration/site-registration-routing.module.ts", "endpoints": {"api_summary": "The Site Registration API provides endpoints for managing site registrations, including creating, updating, and deleting site registrations. It also includes endpoints for managing the workflow of site registrations, such as changing the signing authority and default community site workflows.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/site-registration", "/site-registration/<site_id>", "/site-registration/<site_id>/workflow/<workflow_id>"]}}
{"file": "cloned/moh-prime/prime-angular-frontend/src/app/modules/site-registration/shared/guards/organization.guard.ts", "endpoints": {"api_summary": "This API is responsible for managing the routing of the organization registration process. It allows users to navigate through the registration process and ensures that the user is redirected to the appropriate route based on the state of the organization.", "methods": ["GET", "POST"], "paths": ["/organizations", "/organizations/<organization_id>", "/organizations/<organization_id>/name", "/organizations/<organization_id>/signing-authority"]}}
{"file": "cloned/moh-prime/prime-angular-frontend/src/app/modules/site-registration/shared/services/org-book-resource.service.ts", "endpoints": {"api_summary": "The OrgBook API provides access to information about organizations registered with the BC Registries and Online Services (BCOL) OrgBook.", "methods": ["GET"], "paths": ["/search/autocomplete", "/search/credential/topic/facets", "/topic/ident/registration.registries.ca/<sourceId>/formatted", "/topic_relationship/<topicId>/related_to_relations"]}}
{"file": "cloned/moh-prime/prime-angular-frontend/src/app/modules/provisioner-access/provisioner-access-routing.module.ts", "endpoints": {"api_summary": "The API provides a dashboard component and a certificate component, with the dashboard component displaying a list of certificates and the certificate component displaying a specific certificate. The API also includes a token ID parameter in the URL path to identify the specific certificate to display.", "methods": ["GET"], "paths": ["/dashboard", "/dashboard/:tokenId"]}}
{"file": "cloned/moh-prime/prime-angular-frontend/src/app/modules/provisioner-access/shared/services/provisioner-access-resource.service.ts", "endpoints": {"api_summary": "The ProvisionerAccessResource API provides a way to retrieve an enrolment certificate for a given access token ID. The API endpoint is GET /provisioner-access/certificate/<accessTokenId>, where <accessTokenId> is the ID of the access token used to authenticate the request.", "methods": ["GET"], "paths": ["/provisioner-access/certificate/<accessTokenId>"]}}
{"file": "cloned/moh-prime/prime-angular-frontend/src/app/modules/health-auth-site-reg/health-auth-site-reg-routing.module.ts", "endpoints": {"api_summary": "This API is responsible for managing the registration and maintenance of health authority sites for PharmaNet. It includes endpoints for creating and updating site information, managing hours of operation, and assigning PharmaNet administrators and technical support staff.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/health-auth-site-reg/collection-notice", "/health-auth-site-reg/access", "/health-auth-site-reg/access/authorized-user", "/health-auth-site-reg/access/requested", "/health-auth-site-reg/access/approved", "/health-auth-site-reg/access/declined", "/health-auth-site-reg/access/disabled", "/health-auth-site-reg/site-management", "/health-auth-site-reg/health-authorities/<haid>/sites/<sid>/site-information", "/health-auth-site-reg/health-authorities/<haid>/sites/<sid>/health-auth-care-type", "/health-auth-site-reg/health-authorities/<haid>/sites/<sid>/hours-operation", "/health-auth-site-reg/health-authorities/<haid>/sites/<sid>/administrator", "/health-auth-site-reg/health-authorities/<haid>/sites/<sid>/overview"]}}
{"file": "cloned/moh-prime/prime-angular-frontend/src/app/modules/health-auth-site-reg/pages/authorized-user-page/authorized-user-page.component.ts", "endpoints": {"api_summary": "This API defines a single endpoint for creating or updating an authorized user, and is used to manage the access status of users in a healthcare system.", "methods": ["POST"], "paths": ["/authorized-user"]}}
{"file": "cloned/moh-prime/prime-angular-frontend/src/app/modules/health-auth-site-reg/shared/guards/health-authority-site-guard.service.ts", "endpoints": {"api_summary": "The HealthAuthoritySiteGuard class is a guard that restricts access to routes based on the status of a health authority site. It checks the status of the site and redirects the user to the appropriate route based on the status.", "methods": ["GET", "POST"], "paths": ["/health-authorities/<haid>/sites/<sid>/health-auth-care-type", "/health-authorities/<haid>/sites/<sid>/site-overview", "/health-authorities/<haid>/sites/<sid>/site-management"]}}
{"file": "cloned/moh-prime/prime-angular-frontend/src/app/modules/health-auth-site-reg/shared/modules/health-auth-site-reg-login-page/health-auth-site-reg-login-page-routing.module.ts", "endpoints": {"api_summary": "The HealthAuthSiteRegLoginPageRoutingModule defines a single REST API endpoint for site registration for PharmaNet access. The endpoint is accessible via the GET method at the URL path '/health-auth-site-reg-login-page'.", "methods": ["GET"], "paths": ["/health-auth-site-reg-login-page"]}}
{"file": "cloned/moh-prime/prime-angular-frontend/src/app/modules/paper-enrolment/paper-enrolment-routing.module.ts", "endpoints": {"api_summary": "The Paper Enrolment API is a RESTful API that allows users to create and manage paper enrolment forms for the PRIME Profile application. It includes endpoints for creating and updating demographic information, care settings, regulatory information, and more.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/paper-enrolment/<eid>/demographic", "/paper-enrolment/<eid>/care-setting", "/paper-enrolment/<eid>/regulatory", "/paper-enrolment/<eid>/obo-sites", "/paper-enrolment/<eid>/self-declaration", "/paper-enrolment/<eid>/upload", "/paper-enrolment/<eid>/overview", "/paper-enrolment/<eid>/next-steps"]}}
{"file": "cloned/moh-prime/prime-angular-frontend/src/app/modules/gis-enrolment/shared/resources/gis-enrolment-resource.service.ts", "endpoints": {"api_summary": "The GisEnrolmentResource class provides methods for interacting with the GIS enrolment API, including creating, retrieving, updating, and submitting enrolments.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/parties/gis", "/parties/gis/<enrolmentId>", "/parties/gis/<enrolmentId>/submission"]}}
{"file": "cloned/moh-prime/prime-angular-frontend/src/app/modules/enrolment/enrolment.routes.ts", "endpoints": {"api_summary": "This API defines endpoints for enrolling and managing PharmaNet access for healthcare professionals.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/enrolment/profile", "/enrolment/submission", "/enrolment/editable", "/enrolment/steps", "/enrolment/toa-steps"]}}
{"file": "cloned/moh-prime/prime-angular-frontend/src/app/modules/enrolment/shared/modules/bceid-enrolment-login-page/bceid-enrolment-login-page-routing.module.ts", "endpoints": {"api_summary": "The BCEID Enrolment Login Page API provides a login interface for users to authenticate with the PRIME system using their BCEID credentials.", "methods": ["GET"], "paths": ["/bceid-enrolment-login-page"]}}
{"file": "cloned/moh-prime/prime-angular-frontend/src/app/modules/enrolment/shared/modules/bcsc-enrolment-login-page/bcsc-enrolment-login-page-routing.module.ts", "endpoints": {"api_summary": "The BCSC Enrolment Login Page API provides a login functionality for users to access the PRIME system using their BC Services Card credentials.", "methods": ["GET"], "paths": ["/bcsc-enrolment-login-page"]}}
{"file": "cloned/moh-prime/prime-angular-frontend/src/app/shared/components/document-upload/document-upload/document-upload.component.ts", "endpoints": {"api_summary": "The DocumentUploadComponent is a component that allows users to upload documents to the system. It uses the FilePond library to handle file uploads and the tus-js-client library to handle the upload process. The component also uses the AccessTokenService to retrieve a JWT token for authentication.", "methods": ["POST"], "paths": ["/document"]}}
{"file": "cloned/moh-prime/prime-angular-frontend/src/app/shared/services/banner-resource.service.ts", "endpoints": {"api_summary": "The BannerResourceService provides a set of methods for managing banners in the system. It includes methods for creating, updating, deleting, and retrieving banners, as well as retrieving active banners by location code.", "methods": ["POST", "PUT", "DELETE", "GET"], "paths": ["/banners", "/banners/<bannerId>", "/banners/enrolment-landing", "/banners/site-landing", "/banners/active"]}}
{"file": "cloned/wazo-webhookd/integration_tests/plugins/sentinel_client/wazo_webhookd_client_sentinel/plugin.py", "endpoints": {"api_summary": "The SentinelBusCommand API provides a way to retrieve the current state of the Wazo bus, which is a central component of the Wazo system. The API allows for retrieving the bus state, which includes information about the current state of the system and the status of various components.", "methods": ["GET"], "paths": ["/sentinel/bus"]}}
{"file": "cloned/wazo-webhookd/integration_tests/suite/test_mobile_callback.py", "endpoints": {"api_summary": "This file defines a set of REST API endpoints for a mobile callback service.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/fcm/send", "/fcm/send", "/v1/projects/project-123/messages:send", "/v1/projects/project-123/messages:send", "/3/device/token-ios", "/3/device/apns-voip-token", "/3/device/apns-notification-token", "/3/device/apns-notification-token"]}}
{"file": "cloned/wazo-webhookd/wazo_webhookd/plugins/subscription/http.py", "endpoints": {"api_summary": "This API provides endpoints for managing subscriptions and their logs. It allows users to create, read, update, and delete subscriptions, as well as retrieve logs for a specific subscription.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/subscriptions", "/subscriptions/<subscription_uuid>", "/subscriptions/<subscription_uuid>/logs"]}}
{"file": "cloned/wazo-webhookd/wazo_webhookd/plugins/subscription/schema.py", "endpoints": {"api_summary": "This API defines a subscription service that allows users to subscribe to events and receive notifications when those events occur. The service supports multiple subscription types, including HTTP and email.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/subscriptions", "/subscriptions/<subscription_id>", "/subscriptions/<subscription_id>/logs"]}}
{"file": "cloned/wazo-webhookd/wazo_webhookd/plugins/subscription/plugin.py", "endpoints": {"api_summary": "The Subscription API provides endpoints for managing subscriptions, including creating, retrieving, updating, and deleting subscriptions. It also provides endpoints for retrieving logs for a specific subscription.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/subscriptions", "/subscriptions/<subscription_uuid>", "/users/me/subscriptions", "/users/me/subscriptions/<subscription_uuid>", "/subscriptions/<subscription_uuid>/logs"]}}
{"file": "cloned/wazo-webhookd/wazo_webhookd/plugins/config/http.py", "endpoints": {"api_summary": "The Wazo Webhookd Config API provides endpoints for managing the configuration of the Wazo Webhookd service. It allows for retrieving and updating the configuration, as well as checking the status of the service.", "methods": ["GET", "PATCH"], "paths": ["/config"]}}
{"file": "cloned/wazo-webhookd/wazo_webhookd/plugins/mobile/http.py", "endpoints": {"api_summary": "The Wazo Webhookd API allows external systems to send notifications to Wazo users. It provides a single endpoint for sending notifications, which can be accessed using the HTTP POST method. The endpoint requires a valid user UUID and a notification payload, which must be in JSON format.", "methods": ["POST"], "paths": ["/wazo_webhookd/rest_api/notification"]}}
{"file": "cloned/wazo-webhookd/wazo_webhookd/plugins/mobile/plugin.py", "endpoints": {"api_summary": "The API allows for the management of mobile notifications, including the ability to create, read, update, and delete notifications.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/mobile/notifications"]}}
{"file": "cloned/wazo-webhookd/wazo_webhookd/plugins/status/http.py", "endpoints": {"api_summary": "The Status API provides information about the status of the webhookd service, including the status of the bus consumer and the master tenant.", "methods": ["GET"], "paths": ["/status"]}}
{"file": "cloned/wazo-webhookd/wazo_webhookd/plugins/status/plugin.py", "endpoints": {"api_summary": "The API provides a single endpoint for retrieving the status of the system. The endpoint is accessible at /status and returns a JSON object with information about the system's current status.", "methods": ["GET"], "paths": ["/status"]}}
{"file": "cloned/wazo-webhookd/wazo_webhookd/plugins/services/http.py", "endpoints": {"api_summary": "The Wazo Webhookd Services API provides a way to retrieve a list of available services and their configurations. It requires the 'webhookd.subscriptions.services.read' ACL permission.", "methods": ["GET"], "paths": ["/wazo_webhookd/services"]}}
{"file": "cloned/wazo-webhookd/wazo_webhookd/plugins/services/plugin.py", "endpoints": {"api_summary": "The API provides a resource for managing services and subscriptions in a Wazo system.", "methods": ["GET", "POST"], "paths": ["/subscriptions/services"]}}
{"file": "cloned/hypertrace-service/hypertrace-service/src/main/java/org/hypertrace/service/HypertraceService.java", "endpoints": {"api_summary": "The HypertraceService API provides a gRPC interface for interacting with the Hypertrace platform. It includes services for managing entities, querying data, and configuring the platform.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/entity-service/entity", "/entity-service/entity/<entity_id>", "/query-service/query", "/gateway-service/gateway", "/config-service/config"]}}
{"file": "cloned/hypertrace-service/hypertrace-service/src/main/java/org/hypertrace/service/HypertraceUIServer.java", "endpoints": {"api_summary": "The Hypertrace UI server serves both the Hypertrace UI and GraphQL APIs used by it. It provides a base resource for static files and a rewrite handler for routing requests to the appropriate endpoint.", "methods": ["GET", "POST"], "paths": ["/", "/index.html", "/assets/", "/graphql/"]}}
{"file": "cloned/hypertrace-service/hypertrace-data-config-service/src/main/java/org/hypertrace/service/HypertraceDataConfigService.java", "endpoints": {"api_summary": "The Hypertrace Data Config Service provides a REST API for managing data entities and their associated attributes. It also provides a configuration service for the Hypertrace platform.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/entity-service/entity", "/entity-service/attribute", "/config-service/config"]}}
{"file": "cloned/ftgo-application/ftgo-consumer-service/src/main/java/net/chrisrichardson/ftgo/consumerservice/web/ConsumerController.java", "endpoints": {"api_summary": "The Consumer Service API allows clients to create and retrieve consumer information. It provides a RESTful interface for managing consumers, including creating new consumers and retrieving information about existing consumers.", "methods": ["POST", "GET"], "paths": ["/consumers", "/consumers/{consumerId}"]}}
{"file": "cloned/ftgo-application/ftgo-api-gateway-graphql/tests/common/ftgo-graphql-client.js", "endpoints": {"api_summary": "The FtgoGraphQLClient class provides a GraphQL client for the Ftgo API. It defines a single endpoint for querying consumer orders by consumer ID.", "methods": ["GET"], "paths": ["/graphql"]}}
{"file": "cloned/ftgo-application/ftgo-api-gateway-graphql/src/server.ts", "endpoints": {"api_summary": "This API provides a GraphQL endpoint for querying and mutating data related to orders, consumers, and restaurants. It also provides a REST endpoint for handling GraphQL queries and mutations.", "methods": ["GET", "POST"], "paths": ["/graphql"]}}
{"file": "cloned/ftgo-application/ftgo-api-gateway/src/main/java/net/chrisrichardson/ftgo/apiagateway/orders/OrderHandlers.java", "endpoints": {"api_summary": "The OrderHandlers class provides a set of REST API endpoints for retrieving order details, including order information, ticket information, delivery information, and billing information. The endpoints are accessible through the /orders/<orderId> path, where <orderId> is the ID of the order being retrieved.", "methods": ["GET"], "paths": ["/orders/<orderId>"]}}
{"file": "cloned/ftgo-application/ftgo-api-gateway/src/main/java/net/chrisrichardson/ftgo/apiagateway/orders/OrderConfiguration.java", "endpoints": {"api_summary": "The Order API provides endpoints for creating, updating, and retrieving order information, as well as endpoints for retrieving order history and order details.", "methods": ["GET", "POST", "PUT"], "paths": ["/orders", "/orders/<orderId>", "/orders/history"]}}
{"file": "cloned/ftgo-application/ftgo-api-gateway/src/main/java/net/chrisrichardson/ftgo/apiagateway/consumers/ConsumerConfiguration.java", "endpoints": {"api_summary": "The API allows for the creation and modification of consumer information, including their names and addresses.", "methods": ["POST", "PUT"], "paths": ["/consumers"]}}
{"file": "cloned/ftgo-application/ftgo-api-gateway/src/main/java/net/chrisrichardson/ftgo/apiagateway/proxies/OrderServiceProxy.java", "endpoints": {"api_summary": "The OrderServiceProxy provides a proxy for the Order Service, allowing the API Gateway to communicate with the Order Service and retrieve order information. The proxy uses the WebClient to make HTTP requests to the Order Service and returns the response as a Mono object.", "methods": ["GET"], "paths": ["/orders/{orderId}"]}}
{"file": "cloned/ftgo-application/ftgo-api-gateway/src/test/java/net/chrisrichardson/ftgo/apiagateway/ApiGatewayIntegrationTest.java", "endpoints": {"api_summary": "This API is a gateway for the FTGO application, providing a single entry point for accessing various services. It proxies requests to the underlying services and aggregates the responses.", "methods": ["GET", "POST"], "paths": ["/orders", "/orders/<orderId>"]}}
{"file": "cloned/ftgo-application/ftgo-restaurant-service/src/main/java/net/chrisrichardson/ftgo/restaurantservice/web/RestaurantController.java", "endpoints": {"api_summary": "The Restaurant Service API allows clients to create and retrieve information about restaurants. It provides endpoints for creating a new restaurant, retrieving a restaurant by ID, and retrieving a list of all restaurants.", "methods": ["POST", "GET"], "paths": ["/restaurants", "/restaurants/{restaurantId}"]}}
{"file": "cloned/ftgo-application/ftgo-delivery-service/src/main/java/net/chrisrichardson/ftgo/deliveryservice/web/DeliveryServiceController.java", "endpoints": {"api_summary": "The Delivery Service API allows for the management of delivery couriers and their availability, as well as the retrieval of delivery status information.", "methods": ["POST", "GET"], "paths": ["/couriers/{courierId}/availability", "/deliveries/{deliveryId}"]}}
{"file": "cloned/ftgo-application/ftgo-accounting-service/src/main/java/net/chrisrichardson/ftgo/accountingservice/web/AccountsController.java", "endpoints": {"api_summary": "The Accounting Service API provides endpoints for managing accounts and retrieving account information. It uses the Eventuate framework for event sourcing and CQRS.", "methods": ["GET"], "paths": ["/accounts/{accountId}"]}}
{"file": "cloned/ftgo-application/ftgo-order-history-service/src/main/java/net/chrisrichardson/ftgo/cqrs/orderhistory/web/OrderHistoryController.java", "endpoints": {"api_summary": "The OrderHistoryController API provides endpoints for retrieving order history and order details for a given consumer ID. The API supports GET requests for retrieving orders and order details, and returns a list of orders or a single order in the response body.", "methods": ["GET"], "paths": ["/orders", "/orders/{orderId}"]}}
{"file": "cloned/ftgo-application/ftgo-order-history-service/src/test/java/net/chrisrichardson/ftgo/cqrs/orderhistory/web/OrderHistoryControllerTest.java", "endpoints": {"api_summary": "The OrderHistoryController provides a REST API for retrieving order history information. It allows users to retrieve information about their orders, including the restaurant name and order total.", "methods": ["GET"], "paths": ["/orders/<orderId>"]}}
{"file": "cloned/ftgo-application/ftgo-order-service/src/main/java/net/chrisrichardson/ftgo/orderservice/sagas/reviseorder/ReviseOrderSaga.java", "endpoints": {"api_summary": "This API allows for the revision of orders and tickets in the FTGO system. It includes endpoints for beginning and confirming order revisions, as well as endpoints for revise authorization and undoing begin revisions.", "methods": ["GET", "POST"], "paths": ["/orders/<order_id>/revision", "/tickets/<ticket_id>/revision", "/orders/<order_id>/revision/authorization", "/orders/<order_id>/revision/undo"]}}
{"file": "cloned/ftgo-application/ftgo-order-service/src/main/java/net/chrisrichardson/ftgo/orderservice/sagaparticipants/ConsumerServiceProxy.java", "endpoints": {"api_summary": "The ConsumerServiceProxy API allows for the validation of orders by consumers. It uses the Eventuate Tram Saga Simple DSL to define a command endpoint for the ValidateOrderByConsumer command, which is sent to the ConsumerServiceChannels.consumerServiceChannel channel and expects a Success reply.", "methods": ["POST"], "paths": ["/consumers/validate-order"]}}
{"file": "cloned/ftgo-application/ftgo-order-service/src/main/java/net/chrisrichardson/ftgo/orderservice/sagaparticipants/KitchenServiceProxy.java", "endpoints": {"api_summary": "The KitchenServiceProxy API allows for the creation, confirmation, and cancellation of tickets for orders in the FTGO system.", "methods": ["POST", "GET", "DELETE"], "paths": ["/kitchenServiceProxy/create", "/kitchenServiceProxy/confirmCreate", "/kitchenServiceProxy/cancel"]}}
{"file": "cloned/ftgo-application/ftgo-order-service/src/main/java/net/chrisrichardson/ftgo/orderservice/web/OrderController.java", "endpoints": {"api_summary": "The OrderController API allows for the creation, retrieval, and modification of orders. It also provides a way to cancel orders. The API is designed to be used by external systems to manage orders in the FTGO system.", "methods": ["POST", "GET", "POST"], "paths": ["/orders", "/orders/{orderId}", "/orders/{orderId}/cancel", "/orders/{orderId}/revise"]}}
{"file": "cloned/ftgo-application/ftgo-order-service/src/main/java/net/chrisrichardson/ftgo/orderservice/web/RestaurantController.java", "endpoints": {"api_summary": "The RestaurantController API provides a RESTful interface for retrieving information about restaurants. It allows clients to retrieve a list of all restaurants, as well as retrieve a specific restaurant by ID.", "methods": ["GET"], "paths": ["/restaurants", "/restaurants/{restaurantId}"]}}
{"file": "cloned/ftgo-application/ftgo-order-service/src/main/java/net/chrisrichardson/ftgo/orderservice/service/OrderCommandHandlers.java", "endpoints": {"api_summary": "The OrderCommandHandlers class defines a set of command handlers for handling order-related commands, such as approving or rejecting an order, beginning or undoing a cancellation, or confirming a revision. These commands are used to manage the state of orders in the system.", "methods": ["GET", "POST"], "paths": ["/orders/approve", "/orders/reject", "/orders/beginCancel", "/orders/undoCancel", "/orders/confirmCancel", "/orders/beginRevise", "/orders/undoPendingRevision", "/orders/confirmRevision"]}}
{"file": "cloned/ftgo-application/ftgo-order-service/src/component-test/java/net/chrisrichardson/ftgo/orderservice/cucumber/OrderServiceComponentTestStepDefinitions.java", "endpoints": {"api_summary": "This API allows users to place orders for food delivery. It defines endpoints for creating orders, retrieving order status, and canceling orders.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/orders", "/orders/<order_id>", "/orders/<order_id>/cancel"]}}
{"file": "cloned/ftgo-application/ftgo-order-service/src/attic/AbstractOrderServiceComponentTest.java", "endpoints": {"api_summary": "This API defines the endpoints for creating and managing orders in the FTGO system.", "methods": ["POST"], "paths": ["/orders"]}}
{"file": "cloned/ftgo-application/ftgo-kitchen-service/src/main/java/net/chrisrichardson/ftgo/kitchenservice/messagehandlers/KitchenServiceCommandHandler.java", "endpoints": {"api_summary": "The KitchenService API allows for the creation, modification, and cancellation of tickets for orders in a restaurant. It also allows for the confirmation of ticket creation and cancellation.", "methods": ["POST", "GET", "PUT", "DELETE"], "paths": ["/kitchenservice/createTicket", "/kitchenservice/confirmCreateTicket", "/kitchenservice/cancelCreateTicket", "/kitchenservice/beginCancelTicket", "/kitchenservice/confirmCancelTicket", "/kitchenservice/undoBeginCancelTicket", "/kitchenservice/beginReviseTicket", "/kitchenservice/undoBeginReviseTicket", "/kitchenservice/confirmReviseTicket"]}}
{"file": "cloned/ftgo-application/ftgo-kitchen-service/src/main/java/net/chrisrichardson/ftgo/kitchenservice/web/KitchenController.java", "endpoints": {"api_summary": "The Kitchen Service API allows for the acceptance of tickets and the updating of ticket statuses. It also allows for the retrieval of ticket information.", "methods": ["POST"], "paths": ["/tickets/{ticketId}/accept"]}}
{"file": "cloned/ftgo-application/ftgo-kitchen-service/src/main/java/net/chrisrichardson/ftgo/kitchenservice/web/RestaurantController.java", "endpoints": {"api_summary": "The RestaurantController API provides a RESTful interface for retrieving information about restaurants. It allows clients to retrieve a list of all restaurants, as well as retrieve a specific restaurant by ID.", "methods": ["GET"], "paths": ["/restaurants", "/restaurants/{restaurantId}"]}}
{"file": "cloned/ftgo-application/ftgo-restaurant-service-aws-lambda/src/main/java/net/chrisrichardson/ftgo/restaurantservice/lambda/FindRestaurantRequestHandler.java", "endpoints": {"api_summary": "The FindRestaurantRequestHandler defines a REST API endpoint for retrieving a restaurant by ID. The endpoint accepts a GET request with a path parameter `restaurantId` and returns a JSON response with the restaurant's name if found, or a 404 error if not found.", "methods": ["GET"], "paths": ["/restaurants/<restaurantId>"]}}
{"file": "cloned/ftgo-application/ftgo-restaurant-service-aws-lambda/src/main/java/net/chrisrichardson/ftgo/restaurantservice/lambda/CreateRestaurantRequestHandler.java", "endpoints": {"api_summary": "The CreateRestaurantRequestHandler defines a REST API endpoint for creating a new restaurant. The endpoint accepts a JSON request body with the restaurant details and returns a JSON response with the created restaurant's ID.", "methods": ["POST"], "paths": ["/restaurants"]}}
{"file": "cloned/sample-spring-microservices/customer-service/src/main/java/pl/piomin/microservices/customer/intercomm/AccountClient.java", "endpoints": {"api_summary": "The AccountClient API provides a list of accounts for a given customer ID. It is a part of the customer microservice and uses the FeignClient annotation to define the API endpoints.", "methods": ["GET"], "paths": ["/customer/{customerId}"]}}
{"file": "cloned/sample-spring-microservices/customer-service/src/main/java/pl/piomin/microservices/customer/api/Api.java", "endpoints": {"api_summary": "The Customer API provides endpoints for managing customer information, including creating, reading, updating, and deleting customers. It also includes endpoints for retrieving account information for a specific customer.", "methods": ["GET", "POST", "DELETE"], "paths": ["/pesel/{pesel}", "/", "/{id}"]}}
{"file": "cloned/sample-spring-microservices/account-service/src/main/java/pl/piomin/microservices/account/api/Api.java", "endpoints": {"api_summary": "The Account API provides endpoints for managing accounts, including creating new accounts, retrieving accounts by ID or customer ID, and deleting accounts. It also provides an endpoint for retrieving all accounts.", "methods": ["GET", "POST", "DELETE"], "paths": ["/number/{number}", "/customer/{customer}", "/", "/{id}"]}}
{"file": "cloned/LinkedGeoData/components/lgd-tools-parent/lgd-tools-core/src/main/test/org/linkedgeodata/rest/RestTests.java", "endpoints": {"api_summary": "This API provides access to geospatial data and allows users to query for points of interest within a given area. It also provides a recent endpoint to retrieve the most recent data.", "methods": ["GET"], "paths": ["/api/3/ontology", "/api/3/intersects/<geom>", "/api/3/geocode", "/api/3/recent"]}}
{"file": "cloned/LinkedGeoData/legacy/linkedgeodata-core/src/main/test/org/linkedgeodata/rest/RestTests.java", "endpoints": {"api_summary": "This API provides access to geospatial data and allows users to query for points of interest within a given area. It also provides a recent endpoint to retrieve the most recent data.", "methods": ["GET"], "paths": ["/api/3/ontology", "/api/3/intersects/<geom>", "/api/3/geocode", "/api/3/recent"]}}
{"file": "cloned/skywalking-nodejs/tests/plugins/express/client.ts", "endpoints": {"api_summary": "The client API is a simple proxy server that forwards incoming requests to a remote server. It has a single endpoint, /test/express, which forwards GET requests to the remote server and returns the response.", "methods": ["GET"], "paths": ["/test/express"]}}
{"file": "cloned/skywalking-nodejs/tests/plugins/express/server.ts", "endpoints": {"api_summary": "This API provides a single endpoint at /express that makes a GET request to http://httpbin.org/json and returns the response data.", "methods": ["GET"], "paths": ["/express"]}}
{"file": "cloned/skywalking-nodejs/src/aws/AWSLambdaGatewayAPIHTTP.ts", "endpoints": {"api_summary": "The AWSLambdaGatewayAPIHTTP plugin provides a trigger for AWS Lambda functions that are invoked by the AWS API Gateway. It creates a new entry span for each incoming request and sets the appropriate tags for the HTTP method, URL, and status code.", "methods": ["GET", "POST", "PUT", "DELETE", "HEAD", "OPTIONS", "PATCH"], "paths": ["/", "/<functionName>"]}}
{"file": "cloned/skywalking-nodejs/src/aws/AWSLambdaGatewayAPIREST.ts", "endpoints": {"api_summary": "This API is a RESTful API that allows users to interact with the AWS Lambda Gateway API. It provides a set of endpoints for managing and invoking Lambda functions, as well as retrieving information about the API and its endpoints.", "methods": ["GET", "POST", "PUT", "DELETE", "OPTIONS"], "paths": ["/users", "/users/<built-in function id>", "/users/<built-in function id>/<built-in function id>", "/users/<built-in function id>/<built-in function id>/<built-in function id>"]}}
{"file": "cloned/skywalking-nodejs/src/plugins/AWS2SNSPlugin.ts", "endpoints": {"api_summary": "This API provides a simple interface for publishing messages to an Amazon Simple Notification Service (SNS) topic.", "methods": ["publish", "publishBatch"], "paths": ["/publish", "/publishBatch"]}}
{"file": "cloned/skywalking-nodejs/src/plugins/HttpPlugin.ts", "endpoints": {"api_summary": "This API defines a plugin for the http module in Node.js that intercepts client and server requests and responses to provide tracing and monitoring capabilities.", "methods": ["GET", "POST", "PUT", "DELETE", "PATCH", "HEAD", "OPTIONS"], "paths": ["/", "/users", "/users/<built-in function id>"]}}
{"file": "cloned/skywalking-nodejs/src/plugins/AWS2LambdaPlugin.ts", "endpoints": {"api_summary": "This API defines a single endpoint for invoking an AWS Lambda function. The endpoint accepts a JSON payload with the function name and invocation type, and returns a JSON response with the function output.", "methods": ["POST"], "paths": ["/invoke"]}}
{"file": "cloned/skywalking-nodejs/src/plugins/AWS2SQSPlugin.ts", "endpoints": {"api_summary": "This API is a plugin for the AWS SDK that instruments the SQS service to add distributed tracing capabilities. It provides a way to send and receive messages from an SQS queue with trace context propagation.", "methods": ["GET", "POST"], "paths": ["/queue_url"]}}
{"file": "cloned/openlmis-contract-tests/src/cucumber/java/org/openlmis/contract_tests/referencedata/FacilityTypeApprovedProductStepDefs.java", "endpoints": {"api_summary": "The FacilityTypeApprovedProductStepDefs class defines a set of steps for testing the FacilityTypeApprovedProduct API. It includes methods for creating, retrieving, and deleting approved products for a facility type.", "methods": ["GET", "POST", "DELETE"], "paths": ["/facilityTypeApprovedProducts/", "/facilityTypeApprovedProducts/<id>"]}}
{"file": "cloned/openlmis-contract-tests/src/cucumber/java/org/openlmis/contract_tests/referencedata/UserStepDefs.java", "endpoints": {"api_summary": "This API defines endpoints for managing users in the OpenLMIS logistics management information system platform software. It allows for creating, retrieving, and updating user information, as well as setting user passwords.", "methods": ["GET", "PUT", "POST"], "paths": ["/users", "/users/<built-in function id>", "/users/auth/passwordReset"]}}
{"file": "cloned/openlmis-contract-tests/src/cucumber/java/org/openlmis/contract_tests/referencedata/IdealStockAmountStepDefs.java", "endpoints": {"api_summary": "This API defines the endpoints for managing Ideal Stock Amounts (ISA) in the OpenLMIS logistics management information system platform.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/idealStockAmounts", "/idealStockAmounts/<id>", "/idealStockAmounts/search", "/idealStockAmounts/download"]}}
{"file": "cloned/openlmis-contract-tests/src/cucumber/java/org/openlmis/contract_tests/referencedata/ApiKeyStepDefs.java", "endpoints": {"api_summary": "This API provides endpoints for creating, retrieving, and deleting API keys and service accounts for the OpenLMIS logistics management information system platform software.", "methods": ["POST", "GET", "DELETE"], "paths": ["/apiKeys", "/serviceAccounts", "/apiKeys/{token}", "/serviceAccounts/{token}"]}}
{"file": "cloned/openlmis-contract-tests/src/cucumber/java/org/openlmis/contract_tests/referencedata/SupervisoryNodeStepDefs.java", "endpoints": {"api_summary": "This API defines endpoints for managing supervisory nodes in the OpenLMIS logistics management information system platform software.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/supervisoryNodes/", "/supervisoryNodes/<id>"]}}
{"file": "cloned/openlmis-contract-tests/src/cucumber/java/org/openlmis/contract_tests/referencedata/ProgramStepDefs.java", "endpoints": {"api_summary": "This API defines endpoints for creating and retrieving programs in the OpenLMIS logistics management information system platform software.", "methods": ["POST", "GET"], "paths": ["/referencedata/programs", "/referencedata/programs/<program_id>"]}}
{"file": "cloned/openlmis-contract-tests/src/cucumber/java/org/openlmis/contract_tests/stockmanagement/StockCardTemplatesStepDefs.java", "endpoints": {"api_summary": "This API provides endpoints for managing stock card templates in the OpenLMIS logistics management information system platform.", "methods": ["GET", "POST"], "paths": ["/stockCardTemplates", "/stockCardTemplates?program=<programId>&facilityType=<facilityTypeId>"]}}
{"file": "cloned/openlmis-contract-tests/src/cucumber/java/org/openlmis/contract_tests/stockmanagement/StockEventsStepDefs.java", "endpoints": {"api_summary": "This API defines endpoints for managing stock events in the OpenLMIS logistics management information system platform software.", "methods": ["POST"], "paths": ["/stockEvents"]}}
{"file": "cloned/openlmis-contract-tests/src/cucumber/java/org/openlmis/contract_tests/stockmanagement/StockCardsStepDefs.java", "endpoints": {"api_summary": "This API provides endpoints for managing stock cards and retrieving stock card summaries. It also provides an endpoint for printing stock cards.", "methods": ["GET", "POST"], "paths": ["/stockCards/", "/stockCardSummaries", "/stockCards/<stockCardId>", "/stockCards/<stockCardId>/print"]}}
{"file": "cloned/openlmis-contract-tests/src/cucumber/java/org/openlmis/contract_tests/stockmanagement/PhysicalInventoriesStepDefs.java", "endpoints": {"api_summary": "The API allows for the management of physical inventories, including creating, saving, and submitting drafts, as well as retrieving stock cards summaries and individual physical inventories.", "methods": ["GET", "POST", "PUT"], "paths": ["/stockmanagement/physicalInventories/", "/stockmanagement/stockEvents/", "/stockmanagement/stockCardsSummaries/"]}}
{"file": "cloned/openlmis-contract-tests/src/cucumber/java/org/openlmis/contract_tests/stockmanagement/StockReasonsStepDefs.java", "endpoints": {"api_summary": "This API manages stock card line item reasons, including creating, updating, and assigning reasons to programs and facility types.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/reasonCategories/", "/reasonTypes/", "/stockCardLineItemReasons/", "/validReasons/"]}}
{"file": "cloned/openlmis-contract-tests/src/cucumber/java/org/openlmis/contract_tests/stockmanagement/ValidSourceDestinationStepDefs.java", "endpoints": {"api_summary": "This API manages the stock management system, allowing users to create, read, update, and delete organizations, valid sources, and valid destinations. It also allows users to assign organizations as sources and destinations to combinations of programs and facility types.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/organizations", "/validSources", "/validDestinations"]}}
{"file": "cloned/openlmis-contract-tests/src/cucumber/java/org/openlmis/contract_tests/fulfillment/FulfillmentStepDefs.java", "endpoints": {"api_summary": "This API is part of the OpenLMIS logistics management information system platform software. It provides endpoints for managing shipments, orders, and proofs of delivery.", "methods": ["GET", "POST", "PUT"], "paths": ["/shipments", "/orders", "/proofsOfDelivery"]}}
{"file": "cloned/openlmis-contract-tests/src/cucumber/java/org/openlmis/contract_tests/notification/NotificationStepDefs.java", "endpoints": {"api_summary": "The OpenLMIS Notification API allows users to retrieve notifications for a given user and date range. The API returns a list of notifications, each containing a message with a body and a subject.", "methods": ["GET"], "paths": ["/notifications"]}}
{"file": "cloned/openlmis-contract-tests/src/cucumber/java/org/openlmis/contract_tests/notification/VerificationStepDefs.java", "endpoints": {"api_summary": "This API allows users to manage their contact details and verify their email addresses.", "methods": ["GET", "PUT", "POST"], "paths": ["/userContactDetails/{id}", "/verifications", "/verifications/{token}"]}}
{"file": "cloned/openlmis-contract-tests/src/cucumber/java/org/openlmis/contract_tests/requisition/RequisitionStepDefs.java", "endpoints": {"api_summary": "This file defines a set of REST API endpoints for managing requisitions in the OpenLMIS logistics management information system platform.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/requisitionTemplates", "/requisitions", "/processingPeriods"]}}
{"file": "cloned/openlmis-contract-tests/src/cucumber/java/org/openlmis/contract_tests/cce/CceNotificationStepDefs.java", "endpoints": {"api_summary": "This API allows for the management of inventory items in the OpenLMIS logistics management information system platform software. It provides endpoints for searching, retrieving, and updating inventory items, as well as changing their functionality status.", "methods": ["GET", "PUT"], "paths": ["/inventoryItems/", "/inventoryItems/<id>"]}}
{"file": "cloned/masterlance/masterlance/services/account/server/server.js", "endpoints": {"api_summary": "This API provides a single endpoint for checking the health of a Docker container. It returns a simple 'ok' message if the container is running.", "methods": ["GET"], "paths": ["/vitals/docker"]}}
{"file": "cloned/masterlance/masterlance/services/transaction/server/server.js", "endpoints": {"api_summary": "This API provides a simple health check endpoint for a Docker container.", "methods": ["GET"], "paths": ["/vitals/docker"]}}
{"file": "cloned/masterlance/masterlance/services/facade/server/server.js", "endpoints": {"api_summary": "This API provides a simple endpoint for checking the health of a Docker container.", "methods": ["GET"], "paths": ["/vitals/docker"]}}
{"file": "cloned/masterlance/masterlance/services/facade/server/models/auth-freelancer.js", "endpoints": {"api_summary": "The Authfreelancer API allows users to register and login as freelancers, and provides endpoints for managing freelancer accounts.", "methods": ["POST", "GET"], "paths": ["/register", "/login"]}}
{"file": "cloned/masterlance/masterlance/services/customer/server/server.js", "endpoints": {"api_summary": "This API provides a simple health check endpoint for a Docker container.", "methods": ["GET"], "paths": ["/vitals/docker"]}}
{"file": "cloned/masterlance/services/core/server/models/job.js", "endpoints": {"api_summary": "This API allows for the creation, management, and approval of job postings on a freelancing platform. It includes endpoints for posting jobs, applying to jobs, accepting proposals, and managing job status.", "methods": ["POST", "GET", "PUT", "DELETE"], "paths": ["/jobs", "/jobs/<jobId>", "/jobs/<jobId>/proposals", "/jobs/<jobId>/proposals/<proposalId>", "/jobs/<jobId>/contracts"]}}
{"file": "cloned/masterlance/services/im/src/index.js", "endpoints": {"api_summary": "This API provides real-time chat functionality, with the ability to send and receive messages. It also includes endpoints for message analysis and image uploads.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/messages", "/analysis", "/images"]}}
{"file": "cloned/masterlance/services/im/src/routes/messages.js", "endpoints": {"api_summary": "This API allows users to retrieve and add messages between two users, as well as add new products to the system.", "methods": ["GET", "POST"], "paths": ["/messages/:senderId/:receiverId", "/products/add"]}}
{"file": "cloned/masterlance/services/account/server/server.js", "endpoints": {"api_summary": "This API provides a single endpoint for checking the health of a Docker container. It returns a simple 'ok' message if the container is running.", "methods": ["GET"], "paths": ["/vitals/docker"]}}
{"file": "cloned/masterlance/services/transaction/server/server.js", "endpoints": {"api_summary": "This API provides a simple health check endpoint for a Docker container.", "methods": ["GET"], "paths": ["/vitals/docker"]}}
{"file": "cloned/masterlance/services/facade/server/server.js", "endpoints": {"api_summary": "This API provides a simple endpoint for checking the health of a Docker container.", "methods": ["GET"], "paths": ["/vitals/docker"]}}
{"file": "cloned/masterlance/services/facade/server/models/client-profile.js", "endpoints": {"api_summary": "The ClientProfile API provides endpoints for retrieving and creating client profiles. The `details` endpoint retrieves a client profile by ID, and the `create` endpoint creates a new client profile for a given user account.", "methods": ["GET", "POST"], "paths": ["/client-profiles/<clientId>", "/client-profiles/create"]}}
{"file": "cloned/masterlance/services/facade/server/models/payments.js", "endpoints": {"api_summary": "This API provides endpoints for managing user payments, including getting the balance, fetching transactions, cancelling transactions, and topping up the wallet.", "methods": ["GET", "POST"], "paths": ["/users/<built-in function id>/balance", "/users/<built-in function id>/transactions", "/users/<built-in function id>/cancel", "/users/<built-in function id>/topup"]}}
{"file": "cloned/masterlance/services/facade/server/models/job.js", "endpoints": {"api_summary": "This API provides endpoints for managing jobs, including posting, fetching, approving, and denying job proposals. It also allows for freelancers to apply for jobs and clients to accept proposals.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/jobs", "/jobs/<jobId>", "/jobs/<jobId>/proposals", "/jobs/<jobId>/proposals/<proposalId>", "/jobs/<jobId>/contracts", "/jobs/<jobId>/reviews"]}}
{"file": "cloned/masterlance/services/facade/server/models/auth-freelancer.js", "endpoints": {"api_summary": "The Authfreelancer API allows users to register, login, and logout as freelancers. It also provides endpoints for creating and logging in as freelancers.", "methods": ["POST", "GET", "DELETE"], "paths": ["/register", "/login", "/logout"]}}
{"file": "cloned/masterlance/services/facade/server/models/auth-client.js", "endpoints": {"api_summary": "The AuthClient API provides endpoints for registering, logging in, and logging out clients. It also provides endpoints for retrieving client information and updating client details.", "methods": ["POST", "GET", "PUT", "DELETE"], "paths": ["/register", "/login", "/logout", "/clients/<id>", "/clients/<id>/update"]}}
{"file": "cloned/masterlance/services/facade/server/models/auth-moderator.js", "endpoints": {"api_summary": "The AuthModerator API provides endpoints for registering, logging in, and logging out moderators. It also provides endpoints for managing moderator accounts.", "methods": ["POST", "GET", "DELETE"], "paths": ["/register", "/login", "/logout", "/moderators"]}}
{"file": "cloned/masterlance/services/customer/server/server.js", "endpoints": {"api_summary": "This API provides a simple health check endpoint for a Docker container.", "methods": ["GET"], "paths": ["/vitals/docker"]}}
{"file": "cloned/goldstone-server/goldstone/urls.py", "endpoints": {"api_summary": "The Goldstone API provides endpoints for managing users, accounts, and tenants, as well as endpoints for accessing the core functionality of the Goldstone system.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/accounts/", "/admin/", "/api-auth/", "/core/", "/user/", "/login/", "/password/confirm/", "/password/", "/$"]}}
{"file": "cloned/goldstone-server/goldstone/core/urls.py", "endpoints": {"api_summary": "This API provides endpoints for managing and querying saved searches, alert definitions, alerts, producers, email producers, and monitored services. It also provides endpoints for retrieving logs, API calls, events, metrics, canary, and hypervisor spawns.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/saved_search", "/alert_definition", "/alert", "/producer", "/email_producer", "/monitored_service", "/logs", "/api-calls", "/events", "/metrics", "/canary", "/hypervisor/spawns"]}}
{"file": "cloned/goldstone-server/goldstone/accounts/urls.py", "endpoints": {"api_summary": "This API provides endpoints for user registration, login, logout, password reset, and password reset confirmation.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/accounts/register/", "/accounts/login/", "/accounts/logout/", "/accounts/password/", "/accounts/password/reset/", "/accounts/password/reset/confirm/"]}}
{"file": "cloned/goldstone-server/goldstone/tenants/urls.py", "endpoints": {"api_summary": "The Tenants API provides endpoints for managing tenants, users, and clouds in a multi-tenant environment. It allows for the creation, retrieval, update, and deletion of tenants, as well as the creation, retrieval, update, and deletion of users and clouds associated with each tenant.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/tenants", "/tenants/<tenant_id>", "/tenants/<tenant_id>/users", "/tenants/<tenant_id>/users/<user_id>", "/tenants/<tenant_id>/clouds", "/tenants/<tenant_id>/clouds/<cloud_id>"]}}
{"file": "cloned/goldstone-server/client/js/preload/goldstoneRouter.js", "endpoints": {"api_summary": "The GoldstoneRouter defines a set of REST API endpoints for various features such as discover, metrics, reports, settings, and topology.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/discover", "/metrics/api_perf", "/report/node/<nodeId>", "/reports/logbrowser", "/reports/logbrowser/search", "/reports/eventbrowser", "/reports/eventbrowser/search", "/reports/apibrowser", "/reports/apibrowser/search", "/settings", "/settings/tenants", "/topology"]}}
{"file": "cloned/goldstone-server/test/integration/eventBrowserDataTableView_integrationTests.js", "endpoints": {"api_summary": "The Events Browser Data Table View provides a table view of events data, with the ability to filter and sort the data based on various parameters.", "methods": ["GET"], "paths": ["/core/events/"]}}
{"file": "cloned/goldstone-server/test/integration/hypervisorVmCpu_integrationTests.js", "endpoints": {"api_summary": "This API provides a way to visualize the CPU utilization of virtual machines in a hypervisor.", "methods": ["GET"], "paths": ["/something/fancy"]}}
{"file": "cloned/goldstone-server/test/integration/base_integrationTests.js", "endpoints": {"api_summary": "This API is a base collection that defines a set of methods for fetching and parsing data. It does not define any REST API endpoints.", "methods": [], "paths": []}}
{"file": "cloned/goldstone-server/test/integration/serviceStatusView_integrationTests.js", "endpoints": {"api_summary": "This API provides a service status view for a collection of services, including their names, hosts, states, and timestamps. It also provides a method to convert statuses and properly capitalize service names.", "methods": ["GET"], "paths": ["/core/saved_search/"]}}
{"file": "cloned/notifier/worker/src/main/java/com/sflpro/notifier/worker/resources/maintanance/HeartBeatResource.java", "endpoints": {"api_summary": "The HeartBeatResource API provides a simple endpoint to check the status of the service. It returns a string indicating whether the service is alive or not.", "methods": ["GET"], "paths": ["/heartbeat"]}}
{"file": "cloned/notifier/api/api-facade/src/main/java/com/sflpro/notifier/api/facade/security/SecurityConfig.java", "endpoints": {"api_summary": "This API is a security configuration for a Spring Boot application. It defines a custom authentication filter and a remote token services for OAuth2 authentication.", "methods": ["GET", "POST"], "paths": ["/notification/*/create"]}}
{"file": "cloned/notifier/api/api-facade/src/main/java/com/sflpro/notifier/api/facade/endpoints/notification/NotificationResource.java", "endpoints": {"api_summary": "The Notification API provides endpoints for managing email notifications. It allows users to create, retrieve, update, and delete email notifications.", "methods": ["GET", "POST"], "paths": ["/notification", "/notification/{id}"]}}
{"file": "cloned/notifier/api/api-facade/src/main/java/com/sflpro/notifier/api/facade/endpoints/notification/push/PushNotificationResource.java", "endpoints": {"api_summary": "The Push Notification API allows for the creation and management of push notifications, including subscribing and unsubscribing from notifications.", "methods": ["POST"], "paths": ["/notification/push/create", "/notification/push/subscribe"]}}
{"file": "cloned/notifier/api/api-facade/src/main/java/com/sflpro/notifier/api/facade/endpoints/notification/email/EmailNotificationResource.java", "endpoints": {"api_summary": "The EmailNotificationResource API allows for the creation of email notifications. It accepts a JSON request body and returns a JSON response body. The API endpoint is /notification/email/create.", "methods": ["POST"], "paths": ["/notification/email/create"]}}
{"file": "cloned/notifier/api/api-facade/src/main/java/com/sflpro/notifier/api/facade/endpoints/notification/sms/SmsNotificationResource.java", "endpoints": {"api_summary": "The SMS Notification API allows you to create and manage SMS notifications. It provides a simple and easy-to-use interface for sending SMS messages to users.", "methods": ["POST"], "paths": ["/notification/sms/create"]}}
{"file": "cloned/notifier/api/api-facade/src/main/java/com/sflpro/notifier/api/facade/endpoints/maintanance/HeartBeatResource.java", "endpoints": {"api_summary": "The heartbeat API provides a simple endpoint to check the status of the notification service. It returns a response with the status of the service.", "methods": ["GET"], "paths": ["/heartbeat"]}}
{"file": "cloned/notifier/api/api-facade/src/main/java/com/sflpro/notifier/api/facade/config/JerseyConfig.java", "endpoints": {"api_summary": "The API provides endpoints for managing notifications, including email, SMS, and push notifications. It also includes a heartbeat endpoint for monitoring the service's availability.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/heartbeat", "/notifications", "/notifications/email", "/notifications/sms", "/notifications/push"]}}
{"file": "cloned/notifier/api/api-client-library/src/main/java/com/sflpro/notifier/api/client/notification/NotificationResourceClientImpl.java", "endpoints": {"api_summary": "The NotificationResourceClientImpl class provides a client implementation for the Notification API, which allows for the retrieval of notification models by ID. The API uses the HTTP GET method and returns a JSON response.", "methods": ["GET"], "paths": ["/notification/<id>"]}}
{"file": "cloned/notifier/api/api-client-library/src/main/java/com/sflpro/notifier/api/client/notification/push/PushNotificationResourceClient.java", "endpoints": {"api_summary": "The Push Notification API allows clients to create and update push notifications, as well as manage push notification subscriptions.", "methods": ["POST", "PUT"], "paths": ["/push-notifications", "/push-notifications/<push_notification_id>", "/push-notifications/subscriptions"]}}
{"file": "cloned/notifier/api/api-client-library/src/main/java/com/sflpro/notifier/api/client/notification/push/impl/PushNotificationResourceClientImpl.java", "endpoints": {"api_summary": "The Push Notification API allows clients to create and manage push notifications, as well as subscribe and unsubscribe to push notifications.", "methods": ["POST", "GET"], "paths": ["/notification/push/create", "/notification/push/subscribe"]}}
{"file": "cloned/Hobo-Sapiens/src/main/javascript/moteurimmo/tokenserver.js", "endpoints": {"api_summary": "This API provides endpoints for generating and decrypting tokens and data. The /token endpoint generates a token based on the request body, while the /decrypt endpoint decrypts data using a provided key and initialization vector.", "methods": ["POST"], "paths": ["/token", "/decrypt"]}}
{"file": "cloned/Hobo-Sapiens/src/main/python/services/meilleursagents.py", "endpoints": {"api_summary": "The MeilleursAgents API allows users to search for apartments in Paris, France, based on various filters such as location, price, and area. The API returns a list of apartments that match the search criteria, along with information about each apartment such as its price, location, and area.", "methods": ["GET"], "paths": ["/annonces/location/search/"]}}
{"file": "cloned/Hobo-Sapiens/src/main/python/services/moteurimmo.py", "endpoints": {"api_summary": "The MoteurImmo API allows users to search for real estate listings in France, with filters such as location, price, and area. It also provides information about the listings, such as the price, location, and description.", "methods": ["GET", "POST"], "paths": ["/search/ads", "/search/location"]}}
{"file": "cloned/Hobo-Sapiens/src/main/java/seloger/TokenServer.java", "endpoints": {"api_summary": "The TokenServer API generates and returns a token for the Seloger authentication service. The API accepts a request with a set of parameters, including the encryption method, expiration date, and salt, and returns a compact token string.", "methods": ["GET"], "paths": ["/seloger-auth"]}}
{"file": "cloned/immunizer/util/logging/src/main/java/org/immunizer/util/logging/LoggingApplication.java", "endpoints": {"api_summary": "The LoggingApplication API provides a simple endpoint for saying hello to the world.", "methods": ["GET"], "paths": ["/hello"]}}
{"file": "cloned/testing_security_development_enterprise_systems/old/old_rest-ws-amqp/service/src/main/resources/static/app.js", "endpoints": {"api_summary": "This API provides a websocket endpoint for real-time updates and a REST API for making requests to the server.", "methods": ["POST"], "paths": ["/ui/api/foo"]}}
{"file": "cloned/testing_security_development_enterprise_systems/intro/spring/deployment/src/main/java/org/tsdes/intro/spring/deployment/RedirectForwardHandler.java", "endpoints": {"api_summary": "The RedirectForwardHandler API provides a single endpoint for forwarding requests to the index.xhtml page.", "methods": ["GET"], "paths": ["/"]}}
{"file": "cloned/testing_security_development_enterprise_systems/intro/spring/security/framework/src/main/java/org/tsdes/intro/spring/security/framework/RedirectForwardHandler.java", "endpoints": {"api_summary": "This API handles redirection to the index.xhtml page for the root URL.", "methods": ["GET"], "paths": ["/"]}}
{"file": "cloned/testing_security_development_enterprise_systems/intro/spring/security/manual/src/main/java/org/tsdes/intro/spring/security/manual/RedirectForwardHandler.java", "endpoints": {"api_summary": "This API handles redirection to the index.xhtml page for the root URL.", "methods": ["GET"], "paths": ["/"]}}
{"file": "cloned/testing_security_development_enterprise_systems/intro/spring/security/manual/src/main/java/org/tsdes/intro/spring/security/manual/controller/PostController.java", "endpoints": {"api_summary": "The PostController API allows users to create, read, update, and delete posts. It also provides a method to retrieve all posts.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/posts", "/posts/<id>"]}}
{"file": "cloned/testing_security_development_enterprise_systems/intro/spring/testing/coverage/jacoco/frontend/src/main/java/org/tsdes/intro/spring/testing/coverage/jacoco/frontend/RedirectForwardHandler.java", "endpoints": {"api_summary": "This API handles the root URL of the server and forwards the request to the home page, which is called 'home.xhtml'.", "methods": ["GET"], "paths": ["/"]}}
{"file": "cloned/testing_security_development_enterprise_systems/intro/spring/jsf/src/main/java/org/tsdes/intro/spring/jsf/RedirectForwardHandler.java", "endpoints": {"api_summary": "This API handles HTTP requests for the root URL \"/\" and returns the content of index.html.", "methods": ["GET"], "paths": ["/"]}}
{"file": "cloned/testing_security_development_enterprise_systems/intro/exercise-solutions/quiz-game/part-10/src/main/java/org/tsdes/intro/exercises/quizgame/RedirectForwardHandler.java", "endpoints": {"api_summary": "The Quiz Game API allows users to play a quiz game by answering questions and earning points. The API provides endpoints for retrieving questions, submitting answers, and tracking user progress.", "methods": ["GET", "POST"], "paths": ["/quizgame/questions", "/quizgame/answers", "/quizgame/progress"]}}
{"file": "cloned/testing_security_development_enterprise_systems/intro/exercise-solutions/quiz-game/part-10/src/main/java/org/tsdes/intro/exercises/quizgame/service/DefaultDataInitializerService.java", "endpoints": {"api_summary": "This API provides quiz questions and answers for various categories, including Software Engineering, History, and Roman Empire. It also allows for the creation of new quizzes and the retrieval of existing ones.", "methods": ["GET", "POST"], "paths": ["/quizzes", "/quizzes/<quiz_id>", "/categories", "/categories/<category_id>"]}}
{"file": "cloned/testing_security_development_enterprise_systems/intro/exercise-solutions/quiz-game/part-08/src/main/java/org/tsdes/intro/exercises/quizgame/RedirectForwardHandler.java", "endpoints": {"api_summary": "The Quiz Game API allows users to play a quiz game by answering questions and earning points. The API provides endpoints for retrieving questions, submitting answers, and tracking user progress.", "methods": ["GET", "POST"], "paths": ["/quizgame/questions", "/quizgame/answers", "/quizgame/progress"]}}
{"file": "cloned/testing_security_development_enterprise_systems/intro/exercise-solutions/quiz-game/part-08/src/main/java/org/tsdes/intro/exercises/quizgame/service/DefaultDataInitializerService.java", "endpoints": {"api_summary": "This API provides quiz questions and answers for various categories, including software engineering, history, and algorithms. It also allows for the creation of new quizzes and the retrieval of existing ones.", "methods": ["GET", "POST"], "paths": ["/quizzes", "/quizzes/<quiz_id>", "/categories", "/categories/<category_id>"]}}
{"file": "cloned/testing_security_development_enterprise_systems/intro/exercise-solutions/quiz-game/part-11/backend/src/main/java/org/tsdes/intro/exercises/quizgame/backend/service/DefaultDataInitializerService.java", "endpoints": {"api_summary": "This API provides quiz questions and answers for various categories, including Software Engineering, History, and Roman Empire. It also allows for the creation of new quizzes and the retrieval of existing ones.", "methods": ["GET", "POST"], "paths": ["/quizzes", "/quizzes/<quiz_id>", "/categories", "/categories/<category_id>"]}}
{"file": "cloned/testing_security_development_enterprise_systems/intro/exercise-solutions/quiz-game/part-11/frontend/src/main/java/org/tsdes/intro/exercises/quizgame/frontend/RedirectForwardHandler.java", "endpoints": {"api_summary": "The RedirectForwardHandler class defines a single REST API endpoint that forwards requests to the index.xhtml page.", "methods": ["GET"], "paths": ["/"]}}
{"file": "cloned/scaffold-cloud/scaffold-business/scaffold-business-sys-service/src/main/java/com/cms/scaffold/micro/sys/controller/SysRoleOperateController.java", "endpoints": {"api_summary": "The SysRoleOperateController API provides endpoints for querying and manipulating role-operate relationships in the system.", "methods": ["GET", "POST"], "paths": ["/sysRoleOperate/selectById", "/sysRoleOperate/selectByOperateId"]}}
{"file": "cloned/scaffold-cloud/scaffold-business/scaffold-business-sys-service/src/main/java/com/cms/scaffold/micro/sys/controller/SysOperateLogController.java", "endpoints": {"api_summary": "The SysOperateLogController API provides endpoints for querying and retrieving system operation logs. It allows users to retrieve logs by ID, and provides a general summary of the API's functionality.", "methods": ["GET"], "paths": ["/sysOperateLog/selectById/{id}"]}}
{"file": "cloned/scaffold-cloud/scaffold-business/scaffold-business-sys-service/src/main/java/com/cms/scaffold/micro/sys/controller/SysRoleController.java", "endpoints": {"api_summary": "The SysRoleController API provides endpoints for managing roles in a system. It allows for creating, reading, updating, and deleting roles, as well as searching and pagination of roles.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/sysRole", "/sysRole/<roleId>", "/sysRole/search", "/sysRole/page"]}}
{"file": "cloned/scaffold-cloud/scaffold-business/scaffold-business-sys-service/src/main/java/com/cms/scaffold/micro/sys/controller/SysMenuController.java", "endpoints": {"api_summary": "The SysMenuController REST API provides endpoints for managing menu resources in a microservice architecture. It allows for listing, retrieving, creating, updating, and deleting menu items, as well as finding menu items by their parent ID or operating ID.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/sysMenu/listMenuByPid", "/sysMenu/selectById", "/sysMenu/findAll", "/sysMenu/findByOperateId", "/sysMenu/findByPidAndOperateId", "/sysMenu/saveOrUpdate", "/sysMenu/findFatherIds"]}}
{"file": "cloned/scaffold-cloud/scaffold-business/scaffold-business-sys-service/src/main/java/com/cms/scaffold/micro/sys/controller/SysDictController.java", "endpoints": {"api_summary": "The SysDictController API provides endpoints for managing system dictionary data. It allows for creating, reading, updating, and deleting dictionary entries, as well as retrieving the father IDs of a given dictionary entry.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/sysDict", "/sysDict/<id>", "/sysDict/<id>/fatherIds"]}}
{"file": "cloned/scaffold-cloud/scaffold-business/scaffold-business-sys-service/src/main/java/com/cms/scaffold/micro/sys/controller/SysRoleMenuController.java", "endpoints": {"api_summary": "The SysRoleMenuController API provides endpoints for managing role-based access control (RBAC) in a system. It allows for the creation, deletion, and retrieval of role-menu associations, as well as the ability to query for a specific role-menu association by role ID and menu ID.", "methods": ["GET", "POST", "DELETE"], "paths": ["/sysRoleMenu/selectById", "/sysRoleMenu/deleteMenu", "/sysRoleMenu/addRoleMenu", "/sysRoleMenu/selectByRoleIdAndMenuId"]}}
{"file": "cloned/scaffold-cloud/scaffold-business/scaffold-business-sys-service/src/main/java/com/cms/scaffold/micro/sys/controller/SysI18nController.java", "endpoints": {"api_summary": "The SysI18nController API provides endpoints for managing internationalization (i18n) data in a CMS system. It allows for creating, reading, updating, and deleting i18n data, as well as searching and pagination of i18n data.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/sysI18n", "/sysI18n/<id>", "/sysI18n/findList", "/sysI18n/findPage"]}}
{"file": "cloned/scaffold-cloud/scaffold-business/scaffold-business-sys-service/src/main/java/com/cms/scaffold/micro/sys/controller/SysOperateController.java", "endpoints": {"api_summary": "The SysOperateController API provides endpoints for managing system operations, including creating, updating, and retrieving operation information. It also provides an endpoint for retrieving a page of operation information.", "methods": ["GET", "POST", "PUT"], "paths": ["/sysOperate/findByUserName", "/sysOperate/insert", "/sysOperate/findOperatePage", "/sysOperate/selectById", "/sysOperate/update"]}}
{"file": "cloned/scaffold-cloud/scaffold-business/scaffold-business-thirdparty-service/src/main/java/com/cms/scaffold/micro/message/controller/MessageController.java", "endpoints": {"api_summary": "The Message API provides endpoints for managing messages in the CMS system. It allows for creating, reading, updating, and deleting messages, as well as searching and pagination.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/messages", "/messages/<id>", "/messages/search", "/messages/page"]}}
{"file": "cloned/scaffold-cloud/scaffold-route/scaffold-route-operate/src/main/resources/static/json/mock/data.js", "endpoints": {"api_summary": "This API provides endpoints for retrieving product information, creating and updating products, and performing other product-related operations.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/product/list", "/product/detail", "/product/create", "/product/update", "/product/delete"]}}
{"file": "cloned/scaffold-cloud/scaffold-route/scaffold-route-operate/src/main/resources/static/static/plugins/ueditor/third-party/xss.min.js", "endpoints": {"api_summary": "A simple REST API that returns a greeting message.", "methods": ["GET"], "paths": ["/hello"]}}
{"file": "cloned/scaffold-cloud/scaffold-route/scaffold-route-operate/src/main/java/com/cms/scaffold/route/operate/controller/LangController.java", "endpoints": {"api_summary": "The LangController API allows for changing the language of the application by setting the locale. It has one endpoint, /lang/changeLanguage, which takes a language code as a parameter and sets the locale accordingly.", "methods": ["GET"], "paths": ["/lang/changeLanguage"]}}
{"file": "cloned/scaffold-cloud/scaffold-route/scaffold-route-operate/src/main/java/com/cms/scaffold/route/operate/controller/IndexController.java", "endpoints": {"api_summary": "The IndexController defines two REST API endpoints for handling user authentication and menu navigation. The /index endpoint is used for user authentication and redirects to the /login page if the user is not logged in. The /home endpoint is used for menu navigation and returns the home page.", "methods": ["GET"], "paths": ["/index", "/home"]}}
{"file": "cloned/scaffold-cloud/scaffold-route/scaffold-route-operate/src/main/java/com/cms/scaffold/route/operate/controller/LoginController.java", "endpoints": {"api_summary": "The LoginController API provides endpoints for user login, logout, and login check. It uses Shiro for authentication and authorization.", "methods": ["GET", "POST"], "paths": ["/login", "/login/check", "/logout"]}}
{"file": "cloned/scaffold-cloud/scaffold-route/scaffold-route-operate/src/main/java/com/cms/scaffold/route/operate/controller/sys/SysRoleController.java", "endpoints": {"api_summary": "The SysRoleController API manages role-based access control for the CMS system. It provides endpoints for creating, reading, updating, and deleting roles, as well as endpoints for listing and searching roles.", "methods": ["GET", "POST"], "paths": ["/sys/sysRole", "/sys/sysRole/addRolePage", "/sys/sysRole/listSysRolePage", "/sys/sysRole/saveRole"]}}
{"file": "cloned/scaffold-cloud/scaffold-route/scaffold-route-operate/src/main/java/com/cms/scaffold/route/operate/controller/sys/SysMenuController.java", "endpoints": {"api_summary": "The SysMenuController defines a set of endpoints for managing menu items in a system. It allows for creating, reading, updating, and deleting menu items, as well as retrieving a list of menu items and their associated permissions.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/sys/sysMenu/sysMenuIndex", "/sys/sysMenu/sysMenuEdit", "/sys/sysMenu/saveOrUpdate", "/sys/sysMenu/findSysMenuByPid", "/sys/sysMenu/selectById", "/sys/sysMenu/findFatherIds", "/sys/sysMenu/rightMenus", "/sys/sysMenu/allMenus"]}}
{"file": "cloned/scaffold-cloud/scaffold-route/scaffold-route-operate/src/main/java/com/cms/scaffold/route/operate/controller/sys/SysDictController.java", "endpoints": {"api_summary": "The SysDictController API provides endpoints for managing dictionary entries in the system. It allows for creating, editing, and retrieving dictionary entries, as well as searching for specific entries based on their name or value.", "methods": ["GET", "POST"], "paths": ["/sys/sysDict/sysDictIndex", "/sys/sysDict/sysDictEdit", "/sys/sysDict/findSysDictByPid", "/sys/sysDict/sysDictSaveValid", "/sys/sysDict/findDictValues", "/sys/sysDict/findFatherIds"]}}
{"file": "cloned/scaffold-cloud/scaffold-route/scaffold-route-operate/src/main/java/com/cms/scaffold/route/operate/controller/sys/SysRoleMenuController.java", "endpoints": {"api_summary": "The SysRoleMenuController API manages role-based access control (RBAC) for the CMS system. It provides endpoints for adding and removing menu items from a role's access control list (ACL), as well as clearing cached authorization data in the Shiro security manager.", "methods": ["GET", "POST"], "paths": ["/sys/sysRoleMenu/deleteMenu", "/sys/sysRoleMenu/addRoleMenu"]}}
{"file": "cloned/scaffold-cloud/scaffold-route/scaffold-route-operate/src/main/java/com/cms/scaffold/route/operate/controller/sys/SysI18nController.java", "endpoints": {"api_summary": "The SysI18nController API manages internationalization configurations for the CMS system. It provides endpoints for listing, creating, updating, and deleting internationalization configurations, as well as for retrieving and updating the current internationalization configuration.", "methods": ["GET", "POST"], "paths": ["/sys/sysI18n/sysI18nIndex", "/sys/sysI18n/sysI18nEdit", "/sys/sysI18n/listSysI18nPage", "/sys/sysI18n/sysI18nSave"]}}
{"file": "cloned/scaffold-cloud/scaffold-route/scaffold-route-operate/src/main/java/com/cms/scaffold/route/operate/controller/sys/SysOperateController.java", "endpoints": {"api_summary": "This API provides endpoints for managing system operations, including adding, editing, and resetting passwords for system users.", "methods": ["GET", "POST"], "paths": ["/sys/sysOperate/sysOperateIndex", "/sys/sysOperate/addOperatePage", "/sys/sysOperate/editOperatePage", "/sys/sysOperate/saveOperate", "/sys/sysOperate/updateOperate", "/sys/sysOperate/editOperatePwdPage", "/sys/sysOperate/operateList", "/sys/sysOperate/updateOperatePwd", "/sys/sysOperate/resetPwd"]}}
{"file": "cloned/scaffold-cloud/scaffold-business-api/scaffold-business-sys-api/src/main/java/com/cms/scaffold/micro/sys/api/SysMenuApi.java", "endpoints": {"api_summary": "The SysMenuApi interface defines a set of RESTful API endpoints for managing menu items in a system. The endpoints allow for querying, creating, updating, and deleting menu items, as well as retrieving information about specific menu items.", "methods": ["GET", "POST"], "paths": ["/sysMenu/listMenuByPid", "/sysMenu/selectById", "/sysMenu/findAll", "/sysMenu/findByOperateId", "/sysMenu/findByPidAndOperateId", "/sysMenu/saveOrUpdate", "/sysMenu/findFatherIds"]}}
{"file": "cloned/scaffold-cloud/scaffold-business-api/scaffold-business-sys-api/src/main/java/com/cms/scaffold/micro/sys/api/SysDictApi.java", "endpoints": {"api_summary": "The SysDictApi interface defines a set of RESTful API endpoints for managing system dictionary data. The API allows for querying, creating, updating, and deleting dictionary entries, as well as retrieving information about specific dictionary entries.", "methods": ["GET", "POST"], "paths": ["/sysDict/findByNid", "/sysDict/findSysDictByPid", "/sysDict/findByPartnerNid", "/sysDict/save", "/sysDict/selectById", "/sysDict/findFatherIds"]}}
{"file": "cloned/scaffold-cloud/scaffold-business-api/scaffold-business-sys-api/src/main/java/com/cms/scaffold/micro/sys/api/SysOperateLogApi.java", "endpoints": {"api_summary": "The SysOperateLogApi provides a RESTful API for querying and managing system operation logs. It allows users to retrieve logs by ID, and provides a simple interface for performing CRUD operations on log data.", "methods": ["GET"], "paths": ["/sysOperateLog/selectById"]}}
{"file": "cloned/scaffold-cloud/scaffold-business-api/scaffold-business-sys-api/src/main/java/com/cms/scaffold/micro/sys/api/SysI18nApi.java", "endpoints": {"api_summary": "The SysI18nApi interface defines a set of RESTful API endpoints for managing internationalization (i18n) data in a CMS system. The endpoints allow for querying, creating, updating, and deleting i18n data, as well as retrieving paginated and filtered lists of i18n data.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/sysI18n/selectById", "/sysI18n/findList", "/sysI18n/findPage", "/sysI18n/save"]}}
{"file": "cloned/scaffold-cloud/scaffold-business-api/scaffold-business-sys-api/src/main/java/com/cms/scaffold/micro/sys/api/SysRoleMenuApi.java", "endpoints": {"api_summary": "The SysRoleMenuApi interface defines a set of RESTful API endpoints for managing role-based access control (RBAC) in a system. The endpoints allow for querying, creating, updating, and deleting role-menu associations, as well as retrieving role-menu associations by ID or by role ID and menu ID.", "methods": ["GET", "POST"], "paths": ["/sysRoleMenu/selectById", "/sysRoleMenu/deleteMenu", "/sysRoleMenu/addRoleMenu", "/sysRoleMenu/selectByRoleIdAndMenuId"]}}
{"file": "cloned/scaffold-cloud/scaffold-business-api/scaffold-business-sys-api/src/main/java/com/cms/scaffold/micro/sys/api/SysRoleApi.java", "endpoints": {"api_summary": "The SysRoleApi interface defines a set of REST API endpoints for managing roles in a system. It includes endpoints for querying a list of roles, creating a new role, and retrieving a role by ID.", "methods": ["POST", "GET"], "paths": ["/sysRole/findList", "/sysRole/findPage", "/sysRole/insert", "/sysRole/selectById"]}}
{"file": "cloned/scaffold-cloud/scaffold-business-api/scaffold-business-sys-api/src/main/java/com/cms/scaffold/micro/sys/api/SysRoleOperateApi.java", "endpoints": {"api_summary": "The SysRoleOperateApi provides endpoints for querying role-based access control (RBAC) information in a system. It allows for querying by primary key or by operator ID, and returns a ResponseModel object containing the requested SysRoleOperateBO object.", "methods": ["GET"], "paths": ["/sysRoleOperate/selectById", "/sysRoleOperate/selectByOperateId"]}}
{"file": "cloned/scaffold-cloud/scaffold-business-api/scaffold-business-sys-api/src/main/java/com/cms/scaffold/micro/sys/api/SysOperateApi.java", "endpoints": {"api_summary": "The SysOperateApi defines a set of endpoints for managing system operators, including finding operators by username, inserting new operators, querying operators by page, selecting operators by ID, and updating operator information.", "methods": ["GET", "POST"], "paths": ["/sysOperate/findByUserName", "/sysOperate/insert", "/sysOperate/findOperatePage", "/sysOperate/selectById", "/sysOperate/update"]}}
{"file": "cloned/scaffold-cloud/scaffold-business-api/scaffold-business-thirdparty-api/src/main/java/com/cms/scaffold/micro/message/api/MessageApi.java", "endpoints": {"api_summary": "The Message API provides endpoints for querying and managing messages in a messaging system. It includes endpoints for retrieving a message by ID, searching for messages by criteria, and retrieving a page of messages.", "methods": ["GET", "POST"], "paths": ["/message/selectById", "/message/findPage"]}}
{"file": "cloned/scaffold-cloud/scaffold-config/scaffold-config-client/src/main/java/com/cms/scaffold/config/DemoController.java", "endpoints": {"api_summary": "The DemoController API provides a single endpoint for retrieving a greeting message. The endpoint is accessible via the GET method and can be accessed at the /hello path.", "methods": ["GET"], "paths": ["/hello"]}}
{"file": "cloned/os2datascanner/src/os2datascanner/server/wsgi.py", "endpoints": {"api_summary": "This API provides a single endpoint for a dummy action, which returns a JSON object with a status message. The endpoint is defined using the `api_endpoints` dictionary, and can be accessed by sending a POST request to the `/dummy-1` path.", "methods": ["POST"], "paths": ["/dummy-1"]}}
{"file": "cloned/os2datascanner/src/os2datascanner/projects/report/urls.py", "endpoints": {"api_summary": "The report API provides endpoints for managing and retrieving reports for the OS2DataScanner project. It includes endpoints for creating, updating, and deleting reports, as well as endpoints for retrieving and searching reports.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/report", "/report/<report_id>", "/report/search"]}}
{"file": "cloned/os2datascanner/src/os2datascanner/projects/report/reportapp/urls.py", "endpoints": {"api_summary": "This API provides endpoints for a web application that allows users to view statistics, approvals, and settings. It also includes a health check endpoint for monitoring the application's status.", "methods": ["GET", "POST"], "paths": ["/", "/api", "/statistics", "/approval", "/stats", "/settings", "/about", "/health/"]}}
{"file": "cloned/os2datascanner/src/os2datascanner/projects/admin/urls.py", "endpoints": {"api_summary": "This API provides a way to manage and interact with the webscanner application, including managing projects, scanning websites, and retrieving scan results.", "methods": ["GET", "POST"], "paths": ["/", "/admin/", "/projects/", "/projects/<built-in function id>", "/scans/", "/scans/<built-in function id>"]}}
{"file": "cloned/os2datascanner/src/os2datascanner/projects/admin/adminapp/views/sbsysscanner_views.py", "endpoints": {"api_summary": "The SbsysScanner API allows for the creation, update, and deletion of Sbsys scannerjobs, as well as the ability to run and ask to run scannerjobs. It also provides a list of Sbsys scannerjobs and the ability to view the details of a specific scannerjob.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/sbsysscanners/", "/sbsysscanners/<built-in function id>", "/sbsysscanners/<built-in function id>/saved/", "/sbsysscanners/<built-in function id>/ask_run/"]}}
{"file": "cloned/os2datascanner/src/os2datascanner/projects/admin/adminapp/views/scanner_views.py", "endpoints": {"api_summary": "This API provides a list of scanners and allows users to create, update, and delete scanners. It also allows users to run scans and view the status of scans.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/scanners", "/scanners/<scanner_id>", "/scanners/<scanner_id>/run"]}}
{"file": "cloned/os2datascanner/src/os2datascanner/projects/admin/adminapp/views/msgraph_views.py", "endpoints": {"api_summary": "This API provides endpoints for creating, updating, deleting, and running Microsoft Graph mail and file scanner jobs. It also provides endpoints for listing and displaying the parameters of existing scanner jobs.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/msgraph-mailscanners/", "/msgraph-mailscanners/<id>/", "/msgraph-filescanners/", "/msgraph-filescanners/<id>/"]}}
{"file": "cloned/growi/apps/slackbot-proxy/src/Server.ts", "endpoints": {"api_summary": "This API is a proxy server for Slackbot, which allows users to interact with Slackbot through HTTP requests.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/slackbot-proxy/api/v1/slackbot"]}}
{"file": "cloned/growi/apps/slackbot-proxy/src/middlewares/slack-to-growi/authorizer.ts", "endpoints": {"api_summary": "This API is a middleware for authorizing Slack requests. It verifies the installation of the Slack app and authorizes the request if it is valid.", "methods": ["GET", "POST"], "paths": ["/authorize/command", "/authorize/interaction", "/authorize/events"]}}
{"file": "cloned/growi/apps/slackbot-proxy/src/controllers/term.ts", "endpoints": {"api_summary": "The TermCtrl API provides a single endpoint for retrieving the terms and conditions of the application. The endpoint is only available in official mode and returns an HTML page with the terms and conditions.", "methods": ["GET"], "paths": ["/term"]}}
{"file": "cloned/growi/apps/slackbot-proxy/src/controllers/privacy.ts", "endpoints": {"api_summary": "The Privacy API provides a way to retrieve the privacy policy for the application. It is only available in official mode.", "methods": ["GET"], "paths": ["/privacy"]}}
{"file": "cloned/growi/apps/slackbot-proxy/src/controllers/top.ts", "endpoints": {"api_summary": "The TopCtrl API provides a single endpoint for generating an install URL for the GROWI Bot. The endpoint is available at the root URL ('/') and returns a JSON object containing the install URL and other metadata.", "methods": ["GET"], "paths": ["/"]}}
{"file": "cloned/growi/apps/slackbot-proxy/src/services/LinkSharedService.ts", "endpoints": {"api_summary": "The LinkSharedService API allows for the processing of link shared events from Slack, forwarding them to the appropriate GROWI instance for handling.", "methods": ["POST"], "paths": ["/_api/v3/slack-integration/proxied/events"]}}
{"file": "cloned/growi/apps/slackbot-proxy/src/services/UnregisterService.ts", "endpoints": {"api_summary": "This API allows users to unregister GROWI URLs from a Slack workspace.", "methods": ["POST"], "paths": ["/unregister"]}}
{"file": "cloned/growi/apps/slackbot-proxy/src/services/SelectGrowiService.ts", "endpoints": {"api_summary": "This file defines a service that handles GROWI commands and interactions for a Slack bot.", "methods": ["GET", "POST"], "paths": ["/growi"]}}
{"file": "cloned/growi/apps/slackbot-proxy/src/services/RegisterService.ts", "endpoints": {"api_summary": "This API is a service that handles Slack commands and interactions for registering credentials.", "methods": ["POST"], "paths": ["/register"]}}
{"file": "cloned/growi/apps/pdf-converter/src/server.ts", "endpoints": {"api_summary": "This API provides a platform for users to create, manage, and interact with their own personalized to-do lists. It allows users to create new tasks, mark tasks as complete, and delete tasks from their lists. Additionally, users can view their completed tasks and create new lists.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users", "/users/<built-in function id>", "/lists", "/lists/<built-in function id>", "/tasks", "/tasks/<built-in function id>"]}}
{"file": "cloned/growi/apps/pdf-converter/src/controllers/pdf.ts", "endpoints": {"api_summary": "The PDF API allows for the conversion of PDF files to other formats and the management of PDF conversion jobs. It provides endpoints for syncing job status with GROWI, registering or updating jobs, and cleaning up job lists.", "methods": ["POST"], "paths": ["/pdf/sync-job"]}}
{"file": "cloned/growi/apps/app/playwright/23-editor/with-navigation.spec.ts", "endpoints": {"api_summary": "This API is used for testing the functionality of the page editor in the Sandbox environment. It includes endpoints for creating, editing, and saving pages, as well as for uploading attachments and checking the grant of the page.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/Sandbox/for-122040", "/Sandbox/for-115285/page1", "/Sandbox/for-115285/page2"]}}
{"file": "cloned/growi/apps/app/playwright/40-admin/access-to-admin-page.spec.ts", "endpoints": {"api_summary": "This API provides a set of endpoints for managing and configuring the admin dashboard of a web application.", "methods": ["GET", "POST"], "paths": ["/admin", "/admin/app", "/admin/security", "/admin/markdown", "/admin/customize", "/admin/importer", "/admin/export", "/admin/data-transfer", "/admin/notification", "/admin/slack-integration", "/admin/slack-integration-legacy", "/admin/users", "/admin/user-groups", "/admin/search"]}}
{"file": "cloned/growi/apps/app/playwright/20-basic-features/access-to-page.spec.ts", "endpoints": {"api_summary": "This API provides endpoints for creating, editing, and managing pages in a wiki system. It also includes endpoints for managing user settings and in-app notifications.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/Sandbox", "/Sandbox/Math", "/Sandbox#edit", "/me", "/me/all-in-app-notifications", "/trash", "/tags"]}}
{"file": "cloned/growi/apps/app/playwright/30-search/search.spect.ts", "endpoints": {"api_summary": "This API provides search functionality for a wiki application. It allows users to search for pages, sort search results, and perform various actions on search results.", "methods": ["GET", "POST"], "paths": ["/_search", "/_private-legacy-pages", "/"]}}
{"file": "cloned/growi/apps/app/src/server/middlewares/certify-shared-page-attachment/certify-shared-page-attachment.spec.ts", "endpoints": {"api_summary": "This API allows for the certification of shared page attachments.", "methods": ["GET", "POST"], "paths": ["/certify-shared-page-attachment"]}}
{"file": "cloned/growi/apps/app/src/server/models/bookmark-folder.ts", "endpoints": {"api_summary": "This API provides functionality for managing bookmark folders and bookmarks. It allows users to create, update, and delete bookmark folders and bookmarks, as well as retrieve information about bookmarks and bookmark folders.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/bookmark-folders", "/bookmark-folders/<folder_id>", "/bookmarks", "/bookmarks/<bookmark_id>"]}}
{"file": "cloned/growi/apps/app/src/server/models/update-post.ts", "endpoints": {"api_summary": "This API is responsible for managing update posts for a Slack-like platform. It allows for the creation, retrieval, and deletion of update posts, as well as the ability to find settings by path.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/update-posts", "/update-posts/<built-in function id>", "/update-posts/find-settings-by-path"]}}
{"file": "cloned/growi/apps/app/src/server/models/external-account.ts", "endpoints": {"api_summary": "This API defines the ExternalAccount model, which represents an external account associated with a user in the system. It provides methods for finding or registering an external account, associating an external account with a user, and finding all external accounts with pagination.", "methods": ["findOrRegister", "associate", "findAllWithPagination"], "paths": ["/external-accounts", "/external-accounts/<accountId>"]}}
{"file": "cloned/growi/apps/app/src/server/routes/user.js", "endpoints": {"api_summary": "This API endpoint checks the validity of a username and returns a JSON response indicating whether the username is valid or not.", "methods": ["GET"], "paths": ["/users/checkUsername"]}}
{"file": "cloned/growi/apps/app/src/server/routes/search.ts", "endpoints": {"api_summary": "This API defines a search endpoint that allows users to search for pages based on a keyword and other optional parameters.", "methods": ["GET"], "paths": ["/search"]}}
{"file": "cloned/growi/apps/app/src/server/routes/comment.js", "endpoints": {"api_summary": "This file defines a REST API for comments, including endpoints for getting, adding, updating, and removing comments.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/comments.get", "/comments.add", "/comments.update", "/comments.remove"]}}
{"file": "cloned/growi/apps/app/src/server/routes/login.js", "endpoints": {"api_summary": "This API handles user registration and login, and sends notifications to admin users when a new user is created and waits for activation.", "methods": ["POST"], "paths": ["/register", "/login"]}}
{"file": "cloned/growi/apps/app/src/server/routes/user-activation.ts", "endpoints": {"api_summary": "This API handles user activation and error handling for the Crowi application. It defines a single endpoint for user activation and a middleware for handling errors related to user activation.", "methods": ["GET"], "paths": ["/user-activation/{token}"]}}
{"file": "cloned/growi/apps/app/src/server/routes/admin.js", "endpoints": {"api_summary": "This API defines endpoints for managing and interacting with the GROWI application's data, including importing data from external sources and searching the application's data.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/v3/importer/esa", "/api/v3/importer/qiita", "/api/v3/export/download", "/api/v3/search/build-index"]}}
{"file": "cloned/growi/apps/app/src/server/routes/tag.js", "endpoints": {"api_summary": "This API defines endpoints for searching, updating, and listing tags. It also emits events for tag-related actions.", "methods": ["GET", "POST"], "paths": ["/tags.search", "/tags.update", "/tags.list"]}}
{"file": "cloned/growi/apps/app/src/server/routes/ogp.ts", "endpoints": {"api_summary": "This API provides a way to generate an Open Graph Protocol (OGP) image for a page in GROWI.", "methods": ["POST"], "paths": ["/ogp"]}}
{"file": "cloned/growi/apps/app/src/server/routes/apiv3/export.js", "endpoints": {"api_summary": "This API provides endpoints for exporting data from the system in a zipped JSON format.", "methods": ["GET", "POST", "DELETE"], "paths": ["/export/status", "/export", "/export/:fileName"]}}
{"file": "cloned/growi/apps/app/src/server/routes/apiv3/notification-setting.js", "endpoints": {"api_summary": "This API defines the endpoints for managing notification settings in a crowi application.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/notification-setting", "/notification-setting/user-notification", "/notification-setting/global-notification", "/notification-setting/notify-for-page-grant"]}}
{"file": "cloned/growi/apps/app/src/server/routes/apiv3/slack-integration-legacy-settings.js", "endpoints": {"api_summary": "This API defines the endpoints for managing Slack integration settings. It allows administrators to configure the Slack integration by setting the incoming webhook URL, prioritizing incoming webhooks over Slack App settings, and setting the OAuth access token.", "methods": ["GET", "PUT"], "paths": ["/slack-integration-legacy-setting/"]}}
{"file": "cloned/growi/apps/app/src/server/routes/apiv3/personal-setting.js", "endpoints": {"api_summary": "This API defines personal settings for a user, including name, email, language, and password.", "methods": ["GET", "PUT"], "paths": ["/personal-setting", "/personal-setting/image-type", "/personal-setting/external-accounts", "/personal-setting/password", "/personal-setting/api-token", "/personal-setting/associate-ldap", "/personal-setting/disassociate-ldap", "/personal-setting/editor-settings", "/personal-setting/in-app-notification-settings", "/personal-setting/questionnaire-settings"]}}
{"file": "cloned/growi/apps/app/src/server/routes/apiv3/user-group.js", "endpoints": {"api_summary": "This API provides endpoints for managing user groups in the GROWI application.", "methods": ["GET", "POST", "DELETE"], "paths": ["/", "/ancestors", "/children", "/:id", "/:id/users", "/:id/unrelated-users", "/:id/users/:username", "/:id/user-group-relations", "/:id/pages"]}}
{"file": "cloned/growi/apps/app/src/server/routes/apiv3/installer.ts", "endpoints": {"api_summary": "This API endpoint allows users to install GROWI, a knowledge base platform, by providing the necessary configuration and authentication information.", "methods": ["POST"], "paths": ["/installer"]}}
{"file": "cloned/growi/apps/app/src/server/routes/apiv3/logout.js", "endpoints": {"api_summary": "The API defined in this file is a logout endpoint that allows users to log out of the system. The endpoint is a POST request to the /logout path and requires a cookie-based authentication. The endpoint returns a 200 status code on success and a 500 status code on internal server error.", "methods": ["POST"], "paths": ["/logout"]}}
{"file": "cloned/growi/apps/app/src/server/routes/apiv3/g2g-transfer.ts", "endpoints": {"api_summary": "This API defines the endpoints for GROWI to GROWI transfer, which allows users to transfer data between two GROWI instances.", "methods": ["GET", "POST"], "paths": ["/g2g-transfer/files", "/g2g-transfer", "/g2g-transfer/attachment", "/g2g-transfer/growi-info", "/g2g-transfer/generate-key", "/g2g-transfer/transfer"]}}
{"file": "cloned/growi/apps/app/src/server/routes/apiv3/attachment.js", "endpoints": {"api_summary": "This API defines endpoints for managing attachments on a page. It allows users to add, retrieve, and delete attachments, as well as retrieve a list of attachments for a given page.", "methods": ["GET", "POST", "DELETE"], "paths": ["/attachment/list", "/attachment/limit", "/attachment"]}}
{"file": "cloned/growi/apps/app/src/server/routes/apiv3/user-group-relation.js", "endpoints": {"api_summary": "This API provides endpoints for managing user group relations in a crowi application. It allows for fetching, creating, and deleting user group relations, as well as retrieving information about the relations.", "methods": ["GET", "POST", "DELETE"], "paths": ["/user-group-relations", "/user-group-relations/<relationId>"]}}
{"file": "cloned/growi/apps/app/src/server/routes/apiv3/in-app-notification.ts", "endpoints": {"api_summary": "This API provides endpoints for managing in-app notifications. It allows users to get a list of notifications, get the status of notifications, open a notification, and open all notifications.", "methods": ["GET", "POST", "PUT"], "paths": ["/in-app-notification/list", "/in-app-notification/status", "/in-app-notification/open", "/in-app-notification/all-statuses-open"]}}
{"file": "cloned/growi/apps/app/src/server/routes/apiv3/bookmarks.js", "endpoints": {"api_summary": "This API defines endpoints for bookmarking and unbookmarking pages, as well as retrieving bookmark information.", "methods": ["GET", "PUT"], "paths": ["/bookmarks/info", "/bookmarks/{userId}", "/bookmarks"]}}
{"file": "cloned/growi/apps/app/src/server/routes/apiv3/invited.ts", "endpoints": {"api_summary": "This API endpoint allows users to activate their accounts after being invited by an administrator. The endpoint accepts a JSON payload containing the username, name, and password of the invited user, and returns a JSON object with a redirect URL if successful.", "methods": ["POST"], "paths": ["/invited"]}}
{"file": "cloned/growi/apps/app/src/server/routes/apiv3/staffs.js", "endpoints": {"api_summary": "This API provides information about the contributors of the GROWI.cloud project, including their names, roles, and contributions.", "methods": ["GET"], "paths": ["/apiv3/staffs"]}}
{"file": "cloned/growi/apps/app/src/server/routes/apiv3/admin-home.ts", "endpoints": {"api_summary": "This API provides information about the system, including the GROWI version, node version, npm version, pnpm version, environment variables, and maintenance mode status.", "methods": ["GET"], "paths": ["/admin-home/"]}}
{"file": "cloned/growi/apps/app/src/server/routes/apiv3/user-ui-settings.ts", "endpoints": {"api_summary": "This API defines a single endpoint for updating the user's UI settings. The endpoint accepts a JSON object with the settings to be updated, and returns the updated settings.", "methods": ["PUT"], "paths": ["/user-ui-settings"]}}
{"file": "cloned/growi/apps/app/src/server/routes/apiv3/mongo.js", "endpoints": {"api_summary": "This API provides endpoints for retrieving information about MongoDB collections.", "methods": ["GET"], "paths": ["/mongo/collections"]}}
{"file": "cloned/growi/apps/app/src/server/routes/apiv3/healthcheck.ts", "endpoints": {"api_summary": "This API endpoint checks the health of the server and returns a status of either 'OK' or 'NOT OK'.", "methods": ["GET"], "paths": ["/healthcheck"]}}
{"file": "cloned/growi/apps/app/src/server/routes/apiv3/revisions.js", "endpoints": {"api_summary": "This API provides endpoints for retrieving revisions and a specific revision by ID.", "methods": ["GET"], "paths": ["/revisions/list", "/revisions/:id"]}}
{"file": "cloned/growi/apps/app/src/server/routes/apiv3/activity.ts", "endpoints": {"api_summary": "This API provides information about the activities of users in the system, including the actions they have taken and the pages they have accessed.", "methods": ["GET"], "paths": ["/activity"]}}
{"file": "cloned/growi/apps/app/src/server/routes/apiv3/forgot-password.js", "endpoints": {"api_summary": "This API is used for password reset functionality. It allows users to request a password reset and reset their password using a one-time token.", "methods": ["POST", "PUT"], "paths": ["/forgot-password"]}}
{"file": "cloned/growi/apps/app/src/server/routes/apiv3/statistics.js", "endpoints": {"api_summary": "This API provides statistics for users, including the total number of users, the number of active users, and the number of inactive users. It also provides information about the status of each user, such as registered, active, suspended, deleted, and invited.", "methods": ["GET"], "paths": ["/statistics/user"]}}
{"file": "cloned/growi/apps/app/src/server/routes/apiv3/search.js", "endpoints": {"api_summary": "This API provides endpoints for managing the search indices and connection status of the Elasticsearch service.", "methods": ["GET", "POST", "PUT"], "paths": ["/search/indices", "/search/connection", "/search/indices"]}}
{"file": "cloned/growi/apps/app/src/server/routes/apiv3/index.js", "endpoints": {"api_summary": "This API defines various endpoints for user authentication, registration, and management, as well as endpoints for page management, search, and other features.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/login", "/logout", "/register", "/user-activation/register", "/personal-setting", "/user-group-relations", "/statistics", "/search", "/page", "/pages", "/revisions", "/page-listing", "/share-links", "/bookmarks", "/attachment", "/slack-integration", "/staffs", "/forgot-password", "/check-username", "/complete-registration", "/user-ui-settings", "/bookmark-folder", "/questionnaire", "/templates", "/page-bulk-export", "/openai", "/user"]}}
{"file": "cloned/growi/apps/app/src/server/routes/apiv3/user/index.ts", "endpoints": {"api_summary": "This API provides a way to retrieve related groups for a given user. It takes a user ID as input and returns a list of related groups.", "methods": ["GET"], "paths": ["/related-groups"]}}
{"file": "cloned/growi/apps/app/src/server/routes/apiv3/page/sync-latest-revision-body-to-yjs-draft.ts", "endpoints": {"api_summary": "This API endpoint is used to sync the latest revision of a page with the Yjs draft. It takes a page ID and an optional editing markdown length as input, and returns the result of the sync operation.", "methods": ["POST"], "paths": ["/pages/<pageId>/sync-latest-revision-body-to-yjs-draft"]}}
{"file": "cloned/growi/apps/app/src/server/routes/apiv3/page/unpublish-page.ts", "endpoints": {"api_summary": "This API endpoint unpublishes a page with the specified ID. It requires a valid access token and the user must be logged in. The page ID must be specified in the request parameter.", "methods": ["POST"], "paths": ["/pages/<pageId>/unpublish"]}}
{"file": "cloned/growi/apps/app/src/server/routes/apiv3/page/publish-page.ts", "endpoints": {"api_summary": "This API defines a single endpoint for publishing a page. The endpoint accepts a page ID as a parameter and returns the updated page object if successful. If the page does not exist, it returns a 404 error.", "methods": ["POST"], "paths": ["/pages/<pageId>/publish"]}}
{"file": "cloned/growi/apps/app/src/server/routes/apiv3/page/update-page.ts", "endpoints": {"api_summary": "This API updates a page with the specified page ID, revision ID, and body. It also supports updating the grant and user-related grant user group IDs.", "methods": ["POST"], "paths": ["/pages/:pageId/update"]}}
{"file": "cloned/growi/apps/app/src/server/routes/attachment/get-brand-logo.ts", "endpoints": {"api_summary": "This API provides a single endpoint for retrieving the brand logo for a given repository. The endpoint is protected by a login required middleware and a custom certify brand logo middleware, which ensures that only authorized users can access the logo.", "methods": ["GET"], "paths": ["/brand-logo"]}}
{"file": "cloned/growi/apps/app/src/server/routes/attachment/download.ts", "endpoints": {"api_summary": "This API endpoint allows users to download attachments from a shared page. The endpoint requires a valid attachment ID and a user to be logged in. The endpoint returns the attachment file and logs the activity in the system.", "methods": ["GET"], "paths": ["/attachments/download/:id"]}}
{"file": "cloned/growi/apps/app/src/server/routes/attachment/get.ts", "endpoints": {"api_summary": "This API endpoint retrieves an attachment by its ID. The endpoint first checks if the attachment exists and if the user has permission to access it. If the attachment is found and the user has permission, the endpoint returns a redirect to the attachment's URL or a 304 status code if the attachment is already cached.", "methods": ["GET"], "paths": ["/attachments/:id"]}}
{"file": "cloned/growi/apps/app/src/server/service/customize.ts", "endpoints": {"api_summary": "The CustomizeService class provides methods for initializing and retrieving custom CSS, script, and title for GROWI.", "methods": ["GET", "POST"], "paths": ["/customize/css", "/customize/script", "/customize/title"]}}
{"file": "cloned/growi/apps/app/src/server/service/user-group.ts", "endpoints": {"api_summary": "This API provides endpoints for managing user groups and their relations. It allows for creating, updating, and deleting user groups, as well as adding and removing users from groups.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/user-groups", "/user-groups/<group_id>", "/user-groups/<group_id>/users", "/user-groups/<group_id>/users/<user_id>"]}}
{"file": "cloned/growi/apps/app/src/server/service/socket-io/socket-io.ts", "endpoints": {"api_summary": "This API is responsible for serving socket.io for server-to-client messaging. It includes middlewares for session, login, admin, and connection limits, as well as event handlers for joining and leaving rooms.", "methods": ["GET", "POST"], "paths": ["/admin", "/users", "/users/<built-in function id>"]}}
{"file": "cloned/growi/apps/app/src/server/service/system-events/sync-page-status.ts", "endpoints": {"api_summary": "This service notifies page status to clients who are connecting to this server and also notifies to clients connecting to other GROWI servers.", "methods": ["GET", "POST"], "paths": ["/users", "/users/<built-in function id>"]}}
{"file": "cloned/growi/apps/app/src/server/service/search-delegator/elasticsearch-client.ts", "endpoints": {"api_summary": "The ElasticsearchClient class provides a wrapper for the Elasticsearch client, allowing for easy interaction with an Elasticsearch cluster. It provides methods for performing common Elasticsearch operations, such as creating and deleting indices, searching, and getting and updating aliases.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/indices", "/indices/<index_name>", "/indices/<index_name>/aliases", "/indices/<index_name>/aliases/<alias_name>", "/indices/<index_name>/validate_query", "/indices/<index_name>/stats", "/nodes/info", "/_search"]}}
{"file": "cloned/growi/apps/app/src/server/service/s2s-messaging/nchan.ts", "endpoints": {"api_summary": "This API is a messaging service that allows for the publishing and subscribing of messages between different services in a distributed system.", "methods": ["POST"], "paths": ["/pubsub", "/pubsub/my-channel-id"]}}
{"file": "cloned/growi/apps/app/src/server/service/slack-event-handler/link-shared.ts", "endpoints": {"api_summary": "This API handles Slack link shared events and unfurls the links to show the page content in Slack.", "methods": ["GET", "POST"], "paths": ["/link-shared"]}}
{"file": "cloned/growi/apps/app/src/client/util/bookmark-utils.ts", "endpoints": {"api_summary": "This API provides endpoints for managing bookmark folders and bookmarks in a GROWI system. It allows for creating, updating, and deleting bookmark folders, as well as adding and removing bookmarks from folders.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/bookmark-folder", "/bookmark-folder/add-bookmark-to-folder", "/bookmark-folder/delete", "/pages/rename", "/bookmark-folder/update-bookmark"]}}
{"file": "cloned/growi/apps/app/src/client/services/AdminUsersContainer.js", "endpoints": {"api_summary": "This API provides endpoints for managing users in a system, including creating, updating, and deleting users, as well as retrieving user information and managing user roles.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users", "/users/<built-in function id>", "/users/<built-in function id>/grant-admin", "/users/<built-in function id>/revoke-admin", "/users/<built-in function id>/grant-read-only", "/users/<built-in function id>/revoke-read-only", "/users/<built-in function id>/activate", "/users/<built-in function id>/deactivate", "/users/<built-in function id>/remove"]}}
{"file": "cloned/growi/apps/app/src/client/services/page-operation.ts", "endpoints": {"api_summary": "This API defines endpoints for page operations such as toggling subscriptions, likes, bookmarks, and exporting pages as Markdown. It also includes endpoints for resuming rename operations and checking the existence of pages.", "methods": ["PUT", "POST", "GET"], "paths": ["/page/subscribe", "/page/likes", "/bookmarks", "/page/export", "/pages/resume-rename", "/page/exist", "/page/non-user-related-groups-granted", "/page/publish", "/page/unpublish", "/page/sync-latest-revision-body-to-yjs-draft"]}}
{"file": "cloned/growi/apps/app/src/client/services/user-ui-settings.ts", "endpoints": {"api_summary": "This API allows for the management of user interface settings. It provides endpoints for updating and retrieving user interface settings, as well as for scheduling updates to these settings.", "methods": ["GET", "PUT"], "paths": ["/user-ui-settings"]}}
{"file": "cloned/growi/apps/app/src/client/services/AdminNotificationContainer.js", "endpoints": {"api_summary": "This API provides endpoints for managing notification settings for a GROWI application. It allows for retrieving and updating notification settings, as well as adding and deleting notification patterns for users and global notifications.", "methods": ["GET", "PUT", "POST", "DELETE"], "paths": ["/notification-setting/", "/notification-setting/slack-configuration", "/notification-setting/user-notification", "/notification-setting/global-notification/"]}}
{"file": "cloned/growi/apps/app/src/client/services/AdminImportContainer.js", "endpoints": {"api_summary": "This API provides endpoints for importing posts from external sources such as esa and qiita.", "methods": ["GET", "POST"], "paths": ["/import/", "/import/testEsaAPI", "/import/testQiitaAPI", "/admin/import/esa", "/admin/import/qiita", "/admin/settings/importerEsa", "/admin/settings/importerQiita"]}}
{"file": "cloned/growi/apps/app/src/client/services/create-page/create-page.ts", "endpoints": {"api_summary": "The API allows for the creation of a new page in the system, with the ability to specify the page's title, content, and other attributes. The API also allows for the retrieval of a list of all pages in the system, as well as the ability to retrieve a specific page by its ID.", "methods": ["POST"], "paths": ["/page"]}}
{"file": "cloned/growi/apps/app/src/client/services/update-page/update-page.ts", "endpoints": {"api_summary": "The API allows for the updating of a page with the given parameters. The API endpoint is /page and the HTTP method is PUT.", "methods": ["PUT"], "paths": ["/page"]}}
{"file": "cloned/growi/apps/app/src/client/services/upload-attachments/upload-attachments.ts", "endpoints": {"api_summary": "The API allows for uploading attachments to a page in a GROWI system. It defines a single endpoint for uploading attachments, which accepts a page ID and a list of files to upload. The endpoint returns a list of attachments that were successfully uploaded.", "methods": ["POST"], "paths": ["/attachment"]}}
{"file": "cloned/growi/apps/app/src/stores/bookmark.ts", "endpoints": {"api_summary": "This API provides endpoints for managing bookmarks for users and pages. It allows users to bookmark pages and retrieve a list of bookmarked pages for a given user.", "methods": ["GET", "POST"], "paths": ["/bookmarks/info?pageId=<pageId>", "/bookmarks/<userId>", "/bookmarks/<currentUser?._id>"]}}
{"file": "cloned/growi/apps/app/src/stores/in-app-notification.ts", "endpoints": {"api_summary": "This API provides endpoints for managing in-app notifications, including listing, retrieving, and updating notifications.", "methods": ["GET", "POST"], "paths": ["/in-app-notification/list", "/in-app-notification/status"]}}
{"file": "cloned/growi/apps/app/src/stores/global-notification.ts", "endpoints": {"api_summary": "This API provides a way to retrieve and update global notifications for a specific user.", "methods": ["GET", "PUT"], "paths": ["/notification-setting/global-notification/<globalNotificationId>"]}}
{"file": "cloned/growi/apps/app/src/stores/bookmark-folder.ts", "endpoints": {"api_summary": "This API provides a list of bookmark folders and their child items for a given user. It uses the SWR library to cache the results and avoid unnecessary API calls.", "methods": ["GET"], "paths": ["/bookmark-folder/list/<userId>"]}}
{"file": "cloned/growi/apps/app/src/stores/activity.ts", "endpoints": {"api_summary": "This API provides a way to retrieve a paginated list of activities, with optional filtering and sorting. It also provides a way to check if audit logging is enabled.", "methods": ["GET"], "paths": ["/activity"]}}
{"file": "cloned/growi/apps/app/src/features/growi-plugin/server/routes/apiv3/admin/index.ts", "endpoints": {"api_summary": "This API provides endpoints for managing GROWI plugins, including installing, activating, deactivating, and removing plugins.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/", "/:id/activate", "/:id/deactivate", "/:id/remove"]}}
{"file": "cloned/growi/apps/app/src/features/openai/server/routes/delete-ai-assistant.ts", "endpoints": {"api_summary": "The API allows for deleting AI assistants. It takes an ID as a parameter and returns the deleted AI assistant.", "methods": ["DELETE"], "paths": ["/openai/delete-ai-assistants/<id>"]}}
{"file": "cloned/growi/apps/app/src/features/openai/server/routes/get-threads.ts", "endpoints": {"api_summary": "This API provides a list of threads for a given AI assistant ID. The API is protected by login and access token, and requires the user to have permission to access the AI assistant. The API returns a list of threads for the specified AI assistant ID.", "methods": ["GET"], "paths": ["/openai/get-threads/:aiAssistantId"]}}
{"file": "cloned/growi/apps/app/src/features/openai/server/routes/ai-assistants.ts", "endpoints": {"api_summary": "This API provides a list of AI assistants that the user has access to, along with their details and capabilities.", "methods": ["GET"], "paths": ["/openai/get-ai-assistants"]}}
{"file": "cloned/growi/apps/app/src/features/openai/server/routes/ai-assistant.ts", "endpoints": {"api_summary": "This API defines a single endpoint for creating an AI assistant using the OpenAI service. The endpoint accepts a JSON request body containing the AI assistant's configuration and returns a JSON response with the created AI assistant's details.", "methods": ["POST"], "paths": ["/openai/create-ai-assistant"]}}
{"file": "cloned/growi/apps/app/src/features/openai/server/routes/index.ts", "endpoints": {"api_summary": "This API provides endpoints for managing AI assistants and their related data, such as threads, messages, and default assistants. It also allows for creating and deleting AI assistants, as well as updating and setting default assistants.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/ai-assistant", "/ai-assistants", "/thread", "/threads/:aiAssistantId", "/message", "/messages/:aiAssistantId/:threadId", "/edit", "/set-default-ai-assistant", "/delete-ai-assistant"]}}
{"file": "cloned/growi/apps/app/src/features/openai/server/routes/set-default-ai-assistant.ts", "endpoints": {"api_summary": "This API defines a set of endpoints for managing AI assistants in GROWI. It allows users to create, update, and delete AI assistants, as well as set the default AI assistant for the system.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/v3/openai/set-default-ai-assistants", "/api/v3/openai/create-ai-assistant", "/api/v3/openai/update-ai-assistant", "/api/v3/openai/delete-ai-assistant"]}}
{"file": "cloned/growi/apps/app/src/features/openai/server/routes/update-ai-assistant.ts", "endpoints": {"api_summary": "This API defines endpoints for managing AI assistants in GROWI. It allows users to create, update, and delete AI assistants, as well as retrieve information about them.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/openai/update-ai-assistants"]}}
{"file": "cloned/growi/apps/app/src/features/openai/server/routes/thread.ts", "endpoints": {"api_summary": "This API defines endpoints for creating and managing threads in the GROWI AI system. It allows users to create new threads, get information about existing threads, and update or delete threads as needed.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/threads", "/threads/<thread_id>", "/threads/<thread_id>/messages"]}}
{"file": "cloned/growi/apps/app/src/features/openai/server/routes/edit/index.ts", "endpoints": {"api_summary": "This API is a message endpoint for the OpenAI service, which allows users to send messages to the service and receive responses.", "methods": ["POST"], "paths": ["/openai/message"]}}
{"file": "cloned/growi/apps/app/src/features/openai/server/routes/message/post-message.ts", "endpoints": {"api_summary": "This API is used to send messages to a chat assistant and receive responses. It also supports summary mode and extended thinking mode.", "methods": ["POST"], "paths": ["/openai/message"]}}
{"file": "cloned/growi/apps/app/src/features/openai/server/routes/message/get-messages.ts", "endpoints": {"api_summary": "This API provides a way to retrieve messages from a thread using the GROWI AI service. It requires a valid access token and a thread ID, and allows for optional parameters such as limit, before, and after.", "methods": ["GET"], "paths": ["/messages"]}}
{"file": "cloned/growi/apps/app/src/features/openai/server/services/editor-assistant/llm-response-stream-processor.ts", "endpoints": {"api_summary": "The LlmResponseStreamProcessor class is a utility class for processing JSON data from the OpenAI API. It extracts messages and diffs from the JSON stream for the Editor Assistant feature.", "methods": ["GET", "POST"], "paths": ["/openai/edit/editor-stream-processor"]}}
{"file": "cloned/growi/apps/app/src/features/openai/client/services/ai-assistant.ts", "endpoints": {"api_summary": "The OpenAI AI Assistant API provides endpoints for creating, updating, setting default, and deleting AI assistants. The API allows for the management of AI assistants and their configurations.", "methods": ["POST", "PUT", "DELETE"], "paths": ["/openai/ai-assistant", "/openai/ai-assistant/<id>", "/openai/ai-assistant/<id>/set-default"]}}
{"file": "cloned/growi/apps/app/src/features/openai/client/services/thread.ts", "endpoints": {"api_summary": "The API allows for the deletion of a thread in the OpenAI system. It takes an AI assistant ID and a thread relation ID as parameters and returns a 204 status code upon successful deletion.", "methods": ["DELETE"], "paths": ["/openai/thread/<aiAssistantId>/<threadRelationId>"]}}
{"file": "cloned/growi/apps/app/src/features/questionnaire/server/routes/apiv3/questionnaire.ts", "endpoints": {"api_summary": "This API provides endpoints for managing questionnaires and their answers. It includes endpoints for retrieving questionnaire orders, checking if questionnaires are enabled, posting proactive questionnaire answers, posting questionnaire answers, skipping questionnaires, and denying questionnaires.", "methods": ["GET", "POST", "PUT"], "paths": ["/questionnaire/orders", "/questionnaire/is-enabled", "/questionnaire/proactive/answer", "/questionnaire/answer", "/questionnaire/skip", "/questionnaire/deny"]}}
{"file": "cloned/growi/apps/app/src/features/questionnaire/server/service/questionnaire.integ.ts", "endpoints": {"api_summary": "This API provides questionnaire orders to show based on user information and GROWI information.", "methods": ["GET"], "paths": ["/questionnaire-orders/to-show"]}}
{"file": "cloned/growi/apps/app/src/features/questionnaire/server/service/questionnaire-cron.ts", "endpoints": {"api_summary": "This API manages cronjobs for fetching questionnaire orders, updating questionnaire orders, changing questionnaire answer statuses, and resending questionnaire answers.", "methods": ["GET", "POST"], "paths": ["/questionnaire-order/index", "/questionnaire-answer/batch", "/questionnaire-answer/proactive/batch"]}}
{"file": "cloned/growi/apps/app/src/features/templates/server/routes/apiv3/index.ts", "endpoints": {"api_summary": "This API provides endpoints for retrieving templates, including preset templates and plugin templates.", "methods": ["GET"], "paths": ["/templates", "/templates/preset-templates/<templateId>/<locale>", "/templates/plugin-templates/<organizationId>/<reposId>/<templateId>/<locale>"]}}
{"file": "cloned/growi/apps/app/src/features/external-user-group/server/routes/apiv3/external-user-group-relation.ts", "endpoints": {"api_summary": "This API provides endpoints for managing user group relations in an external system. It allows admins to retrieve and manage user group relations, and provides a way to fetch relations for specific groups and child groups.", "methods": ["GET"], "paths": ["/external-user-group-relations"]}}
{"file": "cloned/growi/apps/app/src/features/external-user-group/server/routes/apiv3/external-user-group.ts", "endpoints": {"api_summary": "This file defines several REST API endpoints for managing external user groups in a crowi application.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/external-user-groups", "/external-user-groups/ldap/sync-settings", "/external-user-groups/keycloak/sync-settings", "/external-user-groups/ldap/sync", "/external-user-groups/keycloak/sync", "/external-user-groups/ldap/sync-status", "/external-user-groups/keycloak/sync-status"]}}
{"file": "cloned/growi/apps/app/src/features/external-user-group/server/service/keycloak-user-group-sync.ts", "endpoints": {"api_summary": "The KeycloakUserGroupSyncService class provides a way to synchronize user groups from Keycloak with GROWI. It uses the Keycloak Admin Client to fetch group and user information from Keycloak and maps it to the GROWI external user group model.", "methods": ["GET", "POST"], "paths": ["/users", "/users/<built-in function id>"]}}
{"file": "cloned/growi/apps/app/src/features/external-user-group/client/stores/external-user-group.ts", "endpoints": {"api_summary": "This API provides endpoints for managing external user groups and their relations, as well as retrieving settings for LDAP and Keycloak group sync.", "methods": ["GET", "PUT"], "paths": ["/external-user-groups/ldap/sync-settings", "/external-user-groups/keycloak/sync-settings", "/external-user-groups", "/external-user-groups/children", "/external-user-groups/<groupId>", "/external-user-groups/<groupId>/external-user-group-relations", "/external-user-group-relations", "/external-user-groups/ancestors"]}}
{"file": "cloned/growi/apps/app/src/features/page-bulk-export/server/routes/apiv3/page-bulk-export.ts", "endpoints": {"api_summary": "This API allows users to export pages in bulk. It takes a path and a format as input and returns a 204 status code if the export is successful. If the export fails, it returns a 400 status code with an error message.", "methods": ["POST"], "paths": ["/pages/bulk-export"]}}
{"file": "cloned/growi/packages/remark-lsx/src/server/index.ts", "endpoints": {"api_summary": "The LSX API provides a way to list pages in a Crowi wiki. It requires a login and takes a page path, offset, limit, and options as query parameters. The options parameter is a JSON object that can contain additional parameters for filtering and sorting the results.", "methods": ["GET"], "paths": ["/_api/lsx"]}}
{"file": "cloned/growi/packages/remark-lsx/src/server/routes/list-pages/index.spec.ts", "endpoints": {"api_summary": "This API provides a list of pages in a paginated format, with options to sort and filter the results.", "methods": ["GET"], "paths": ["/pages"]}}
{"file": "cloned/growi/packages/remark-lsx/src/server/routes/list-pages/index.ts", "endpoints": {"api_summary": "The API provides a list of pages and their viewers count, with options to filter, sort, and paginate the results.", "methods": ["GET"], "paths": ["/pages"]}}
{"file": "cloned/growi/packages/pdf-converter-client/src/index.ts", "endpoints": {"api_summary": "The API allows for synchronizing job PDF conversion status with GROWI. It registers or updates job inside pdf-converter with given jobId, expirationDate, and status, and returns the resulting status of the job to GROWI.", "methods": ["POST"], "paths": ["/pdf/sync-job"]}}
{"file": "cloned/growi/packages/remark-growi-directive/src/mdast-util-growi-directive/lib/index.js", "endpoints": {"api_summary": "This file defines a set of directives for the Growi plugin system.", "methods": ["GET", "POST"], "paths": ["/directives/leaf", "/directives/text"]}}
{"file": "cloned/growi/packages/remark-attachment-refs/src/server/routes/refs.ts", "endpoints": {"api_summary": "This API provides endpoints for retrieving attachments and attachment references for pages.", "methods": ["GET"], "paths": ["/ref", "/refs"]}}
{"file": "cloned/avalon/spec/cypress/support/commands.js", "endpoints": {"api_summary": "This file defines a set of Cypress commands for testing a media management system. The commands include login, createItemUnderCollectionUI, and waitForVideoReady.", "methods": ["POST", "GET"], "paths": ["/users/sign_in", "/users/sign_out", "/manage/content", "/collections/<collection_id>/items/<item_id>", "/items/<item_id>/files/<file_id>"]}}
{"file": "cloned/avalon/spec/cypress/integration/browse_spec.js", "endpoints": {"api_summary": "The Browse API allows users to search and browse items in the system. It provides endpoints for searching items by keyword, format, and other criteria, as well as endpoints for retrieving and paginating search results.", "methods": ["GET", "POST"], "paths": ["/browse", "/browse/search", "/browse/format", "/browse/results"]}}
{"file": "cloned/avalon/spec/cypress/integration/playlist_spec.js", "endpoints": {"api_summary": "This file defines a set of REST API endpoints for creating, editing, and deleting playlists, as well as adding media objects to playlists.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/playlists", "/playlists/<playlist_id>", "/playlists/<playlist_id>/items", "/playlists/<playlist_id>/items/<item_id>"]}}
{"file": "cloned/ultimate-backend/apps/service-billing/src/app.controller.ts", "endpoints": {"api_summary": "The API provides a single endpoint for retrieving a greeting message.", "methods": ["GET"], "paths": ["/"]}}
{"file": "cloned/ultimate-backend/apps/service-billing/src/plans/plans.service.ts", "endpoints": {"api_summary": "The PlansService API provides endpoints for reading and listing Stripe plans, as well as seeding plans in the Stripe database and the local database.", "methods": ["GET", "POST"], "paths": ["/plans/read", "/plans/list", "/plans/seed"]}}
{"file": "cloned/ultimate-backend/apps/service-billing/src/cards/cards.service.ts", "endpoints": {"api_summary": "The CardsService API provides endpoints for creating, reading, setting default, deleting, and listing cards for a customer in a Stripe account.", "methods": ["POST", "GET", "PUT", "DELETE", "GET"], "paths": ["/cards", "/cards/<card_id>", "/cards/default", "/cards/<card_id>", "/cards"]}}
{"file": "cloned/ultimate-backend/apps/service-billing/src/billings/billings.controller.ts", "endpoints": {"api_summary": "The Billing API provides endpoints for managing customer subscriptions, payment methods, and invoices. It also provides endpoints for retrieving information about plans and invoices.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/billings/cancel-subscription", "/billings/change-subscription", "/billings/create-card", "/billings/create-customer", "/billings/create-plan", "/billings/create-subscription", "/billings/delete-card", "/billings/delete-customer", "/billings/find-cards", "/billings/find-invoices", "/billings/find-plans", "/billings/find-stripe-plans", "/billings/find-subscriptions", "/billings/read-card", "/billings/read-customer", "/billings/read-invoice", "/billings/read-plan", "/billings/read-stripe-plan", "/billings/read-subscription", "/billings/set-default-card"]}}
{"file": "cloned/ultimate-backend/apps/service-project/src/app.controller.ts", "endpoints": {"api_summary": "The API provides a single endpoint for retrieving a greeting message.", "methods": ["GET"], "paths": ["/"]}}
{"file": "cloned/ultimate-backend/apps/service-project/src/projects/projects.controller.ts", "endpoints": {"api_summary": "The Projects API allows users to create, read, update, and delete projects. It also provides a way to find and list projects.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/projects", "/projects/<built-in function id>"]}}
{"file": "cloned/ultimate-backend/apps/service-notification/src/app.controller.ts", "endpoints": {"api_summary": "The API provides a single endpoint for retrieving a greeting message.", "methods": ["GET"], "paths": ["/"]}}
{"file": "cloned/ultimate-backend/apps/service-webhook/src/app.controller.ts", "endpoints": {"api_summary": "The API provides a single endpoint for retrieving a greeting message.", "methods": ["GET"], "paths": ["/"]}}
{"file": "cloned/ultimate-backend/apps/service-webhook/src/webhook/webhook.controller.ts", "endpoints": {"api_summary": "The Webhook API allows you to create, read, update, and delete webhooks. It also allows you to find and read multiple webhooks at once.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/webhook", "/webhook/<id>", "/webhook/find", "/webhook/read"]}}
{"file": "cloned/ultimate-backend/apps/service-role/src/app.controller.ts", "endpoints": {"api_summary": "The API provides a single endpoint for retrieving a greeting message.", "methods": ["GET"], "paths": ["/"]}}
{"file": "cloned/ultimate-backend/apps/service-role/src/roles/roles.controller.ts", "endpoints": {"api_summary": "This API defines endpoints for managing roles and permissions in a multi-tenant system. It allows for adding and removing roles, adding and removing users from roles, and checking if a user has a specific permission.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/roles", "/roles/<role_id>", "/users/<user_id>/roles", "/users/<user_id>/roles/<role_id>"]}}
{"file": "cloned/ultimate-backend/apps/service-role/src/roles/helper/role.helper.ts", "endpoints": {"api_summary": "This API provides endpoints for managing users, tenants, billing cards, subscriptions, and invoices. It allows for CRUD operations on these resources, and supports multiple domains.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users", "/users/<built-in function id>", "/tenants", "/billing/card", "/billing/subscription", "/billing/invoice"]}}
{"file": "cloned/ultimate-backend/apps/api-admin/src/app.controller.ts", "endpoints": {"api_summary": "The API provides a single endpoint for retrieving a greeting message.", "methods": ["GET"], "paths": ["/"]}}
{"file": "cloned/ultimate-backend/apps/api-admin/src/main.ts", "endpoints": {"api_summary": "This API is a NestJS application that provides a multi-tenant authentication and authorization system for a service. It supports multiple database strategies for tenant isolation and requires a tenant ID and API key for authentication.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users", "/users/<built-in function id>", "/docs"]}}
{"file": "cloned/ultimate-backend/apps/api-admin/src/access-token/access-token-mutation.resolver.ts", "endpoints": {"api_summary": "The AccessTokenMutationResolver defines two endpoints for managing access tokens, including creating and deleting them. The endpoints are protected by the GqlAuthGuard and can only be accessed by users with the 'owner' or 'admin' role.", "methods": ["POST", "DELETE"], "paths": ["/access_token", "/access_token/<built-in function id>"]}}
{"file": "cloned/ultimate-backend/apps/api-admin/src/access-token/access-token.resolver.ts", "endpoints": {"api_summary": "The AccessToken API provides endpoints for managing access tokens, including creating, reading, and deleting them. The API also provides a mutation endpoint for performing multiple operations on access tokens in a single request.", "methods": ["GET", "POST", "DELETE"], "paths": ["/access_tokens", "/access_tokens/<id>", "/access_token_mutations"]}}
{"file": "cloned/ultimate-backend/apps/api-admin/src/accounts/accounts.controller.ts", "endpoints": {"api_summary": "The AccountsController defines endpoints for authenticating with Facebook, Google, and GitHub using OAuth2.0. The endpoints allow users to authenticate with these services and retrieve an access token that can be used to access the user's account information.", "methods": ["GET"], "paths": ["/account/facebook", "/account/google", "/account/github"]}}
{"file": "cloned/ultimate-backend/apps/api-admin/src/accounts/accounts-mutation.resolver.ts", "endpoints": {"api_summary": "This API provides endpoints for user authentication and account management, including login, registration, password reset, and account verification.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/login", "/register", "/reset-password", "/verify-account"]}}
{"file": "cloned/ultimate-backend/apps/api-admin/src/cards/cards.resolver.ts", "endpoints": {"api_summary": "The API allows for the management of cards, including creating, deleting, and setting a default card. It also allows for retrieving a list of cards and a specific card by ID.", "methods": ["GET", "POST", "DELETE"], "paths": ["/cards", "/cards/<id>"]}}
{"file": "cloned/ultimate-backend/apps/api-admin/src/webhooks/webhooks.resolver.ts", "endpoints": {"api_summary": "The Webhooks API allows you to create, read, update, and delete webhooks, which are used to trigger events in your application. You can also retrieve a list of webhooks and filter them by various criteria.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/webhooks", "/webhooks/<id>", "/webhooks/<id>/<action>"]}}
{"file": "cloned/ultimate-backend/apps/api-admin/src/webhooks/webhooks-mutation.resolver.ts", "endpoints": {"api_summary": "This API provides endpoints for creating, updating, and deleting webhooks. It also includes authentication and authorization mechanisms for securing access to the webhooks.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/webhooks", "/webhooks/<id>", "/webhooks/<id>/update", "/webhooks/<id>/delete"]}}
{"file": "cloned/ultimate-backend/apps/api-admin/src/billings/billings.resolver.ts", "endpoints": {"api_summary": "The Billings API provides endpoints for managing billing and subscription information for tenants. It includes endpoints for retrieving invoices, subscriptions, and subscription details, as well as endpoints for updating and deleting subscriptions.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/billing", "/billing/invoices", "/billing/subscriptions", "/billing/subscriptions/<id>", "/billing/subscriptions/<tenantId>"]}}
{"file": "cloned/ultimate-backend/apps/api-admin/src/users/users.resolver.ts", "endpoints": {"api_summary": "The UsersResolver defines a GraphQL API for managing user profiles. It includes a query for retrieving the current user's profile and a mutation for updating the profile. The API also includes a field resolver for retrieving the primary email address of a user.", "methods": ["GET", "POST"], "paths": ["/users", "/users/<built-in function id>"]}}
{"file": "cloned/ultimate-backend/apps/api-admin/src/tenants/tenants.resolver.ts", "endpoints": {"api_summary": "This API provides endpoints for managing tenants and their associated users. It allows for creating, reading, updating, and deleting tenants, as well as retrieving information about the owner of a tenant.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/tenants", "/tenants/<tenant_id>", "/tenants/<tenant_id>/owner"]}}
{"file": "cloned/ultimate-backend/apps/service-account/src/app.controller.ts", "endpoints": {"api_summary": "The API provides a single endpoint for retrieving a greeting message.", "methods": ["GET"], "paths": ["/"]}}
{"file": "cloned/ultimate-backend/apps/service-account/src/accounts/accounts.controller.ts", "endpoints": {"api_summary": "The AccountsController API provides endpoints for managing user accounts, including creating, reading, updating, and deleting accounts, as well as logging in and out, and resetting passwords.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/accounts", "/accounts/<id>", "/accounts/login", "/accounts/logout", "/accounts/password"]}}
{"file": "cloned/ultimate-backend/apps/service-access/src/app.controller.ts", "endpoints": {"api_summary": "The API provides a single endpoint for retrieving a greeting message.", "methods": ["GET"], "paths": ["/"]}}
{"file": "cloned/ultimate-backend/apps/service-access/src/access-token/access-token.controller.ts", "endpoints": {"api_summary": "The AccessTokenController API provides endpoints for managing access tokens, including creating, deleting, finding, and checking rights. It also provides a read endpoint for retrieving access token details.", "methods": ["GET", "POST", "DELETE", "PUT"], "paths": ["/webhook/createAccess", "/webhook/deleteAccess", "/webhook/findAccess", "/webhook/hasRights", "/webhook/readAccess"]}}
{"file": "cloned/ultimate-backend/apps/service-tenant/src/app.controller.ts", "endpoints": {"api_summary": "The API provides a single endpoint for retrieving a greeting message.", "methods": ["GET"], "paths": ["/"]}}
{"file": "cloned/ultimate-backend/apps/service-tenant/src/members/members.controller.ts", "endpoints": {"api_summary": "The Members API allows you to manage members in a tenant. It provides endpoints for accepting invitations, deleting members, finding members, inviting new members, reading member information, and updating member information.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/members", "/members/<built-in function id>", "/members/find", "/members/invite", "/members/update"]}}
{"file": "cloned/ultimate-backend/apps/service-tenant/src/tenants/tenants.controller.ts", "endpoints": {"api_summary": "The Tenants API allows you to create, read, update, and delete tenants in the system. It also allows you to find tenants and check if a tenant is available.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/tenants", "/tenants/<built-in function id>", "/tenants/find", "/tenants/available"]}}
{"file": "cloned/AKSCinemaApp/website/cmd/web/handlers_bookings.go", "endpoints": {"api_summary": "The bookings API provides endpoints for managing bookings for a movie theater. It allows users to view and manage their bookings, as well as view and manage showtimes and theaters.", "methods": ["GET", "POST"], "paths": ["/bookings", "/bookings/<booking_id>", "/showtimes", "/showtimes/<showtime_id>", "/theaters", "/theaters/<theater_id>"]}}
{"file": "cloned/AKSCinemaApp/website/cmd/web/routes.go", "endpoints": {"api_summary": "This API provides endpoints for managing users, movies, showtimes, and bookings. It allows for listing, viewing, and creating new entities, as well as updating and deleting existing ones.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users/list", "/users/view/{id}", "/movies/list", "/movies/view/{id}", "/showtimes/list", "/showtimes/view/{id}", "/bookings/list", "/bookings/view/{id}"]}}
{"file": "cloned/AKSCinemaApp/movies/cmd/app/handlers.go", "endpoints": {"api_summary": "This API provides endpoints for managing movies, including listing all movies, finding a movie by ID, inserting a new movie, and deleting a movie by ID.", "methods": ["GET", "POST", "DELETE"], "paths": ["/movies", "/movies/<id>"]}}
{"file": "cloned/AKSCinemaApp/movies/cmd/app/routes.go", "endpoints": {"api_summary": "The API provides endpoints for managing movies, including retrieving a list of all movies, finding a movie by ID, inserting a new movie, and deleting a movie by ID.", "methods": ["GET", "POST", "DELETE"], "paths": ["/api/movies/", "/api/movies/{id}"]}}
{"file": "cloned/AKSCinemaApp/users/cmd/app/handlers.go", "endpoints": {"api_summary": "This API provides endpoints for managing users in a MongoDB database. It includes endpoints for listing all users, finding a user by ID, inserting a new user, and deleting a user by ID.", "methods": ["GET", "POST", "DELETE"], "paths": ["/users", "/users/<built-in function id>"]}}
{"file": "cloned/AKSCinemaApp/users/cmd/app/routes.go", "endpoints": {"api_summary": "This API provides endpoints for managing users in a system. It allows for retrieving all users, finding a user by ID, inserting a new user, and deleting a user by ID.", "methods": ["GET", "POST", "DELETE"], "paths": ["/api/users/", "/api/users/{id}"]}}
{"file": "cloned/AKSCinemaApp/showtimes/cmd/app/handlers.go", "endpoints": {"api_summary": "This API provides endpoints for managing showtimes, including listing, finding by ID or date, inserting new showtimes, and deleting showtimes by ID.", "methods": ["GET", "POST", "DELETE"], "paths": ["/showtimes", "/showtimes/<id>", "/showtimes/<date>"]}}
{"file": "cloned/AKSCinemaApp/showtimes/cmd/app/routes.go", "endpoints": {"api_summary": "The API provides endpoints for managing showtimes, including retrieving all showtimes, finding showtimes by ID or date, inserting new showtimes, and deleting showtimes.", "methods": ["GET", "POST", "DELETE"], "paths": ["/api/showtimes/", "/api/showtimes/{id}", "/api/showtimes/filter/date/{date}"]}}
{"file": "cloned/AKSCinemaApp/bookings/cmd/app/handlers.go", "endpoints": {"api_summary": "This API provides endpoints for managing bookings in a microservices-based application. It allows for listing all bookings, finding a booking by ID, inserting a new booking, and deleting a booking by ID.", "methods": ["GET", "POST", "DELETE"], "paths": ["/bookings", "/bookings/<id>", "/bookings/insert", "/bookings/delete"]}}
{"file": "cloned/AKSCinemaApp/bookings/cmd/app/routes.go", "endpoints": {"api_summary": "This API provides endpoints for managing bookings, including retrieving all bookings, finding a booking by ID, creating a new booking, and deleting a booking.", "methods": ["GET", "POST", "DELETE"], "paths": ["/api/bookings/", "/api/bookings/{id}"]}}
{"file": "cloned/microprofile-samples/clients/standalone/src/main/java/com/microprofile/samples/clients/standalone/BookService.java", "endpoints": {"api_summary": "The BookService API provides endpoints for managing books in a library. It allows users to retrieve a list of all books, retrieve a specific book by ID, create a new book, and delete a book by ID.", "methods": ["GET", "POST", "DELETE"], "paths": ["/books", "/books/{id}"]}}
{"file": "cloned/microprofile-samples/clients/standalone/src/main/java/com/microprofile/samples/clients/standalone/TokenStoreClient.java", "endpoints": {"api_summary": "The TokenStoreClient API provides a way to authenticate and obtain an access token for a user. It accepts an Authorization header, a grant type, and a scope as form parameters and returns a JSON object containing the access token.", "methods": ["POST"], "paths": ["/oauth/token"]}}
{"file": "cloned/microprofile-samples/clients/simulator/src/main/java/com/microprofile/samples/clients/simulator/BookService.java", "endpoints": {"api_summary": "The BookService API provides endpoints for managing books in a library. It allows users to retrieve a list of all books, retrieve a specific book by ID, create a new book, and delete a book by ID.", "methods": ["GET", "POST", "DELETE"], "paths": ["/books", "/books/{id}"]}}
{"file": "cloned/microprofile-samples/clients/simulator/src/main/java/com/microprofile/samples/clients/simulator/TokenStoreClient.java", "endpoints": {"api_summary": "The TokenStoreClient API provides a way to authenticate and obtain an access token for a user. It accepts an Authorization header, a grant type, and a scope as form parameters and returns a JSON object containing the access token.", "methods": ["POST"], "paths": ["/oauth/token"]}}
{"file": "cloned/microprofile-samples/clients/simulator/src/main/java/com/microprofile/samples/clients/simulator/BookScenarioInvoker.java", "endpoints": {"api_summary": "The BookScenarioInvoker class defines a set of REST API endpoints for interacting with a book service. The endpoints include finding all books, finding a specific book by ID, creating a new book, and deleting a book.", "methods": ["GET", "POST", "DELETE"], "paths": ["/books", "/books/<id>", "/books/create", "/books/delete"]}}
{"file": "cloned/microprofile-samples/services/book-api/src/main/java/com/microprofile/samples/services/book/BookApplication.java", "endpoints": {"api_summary": "The Book API provides endpoints for creating, reading, updating, and deleting books. It also provides endpoints for retrieving a list of books and searching for books by title or author.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/books", "/books/<bookId>", "/books/search"]}}
{"file": "cloned/microprofile-samples/services/book-api/src/main/java/com/microprofile/samples/services/book/resource/BookResource.java", "endpoints": {"api_summary": "The Book API provides endpoints for managing books in a repository. It includes endpoints for creating, reading, updating, and deleting books, as well as a metric for counting the number of books without an ISBN.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/books", "/books/<id>", "/books/countWithoutIsbn"]}}
{"file": "cloned/microprofile-samples/services/book-api/src/main/java/com/microprofile/samples/services/book/resource/BookApi.java", "endpoints": {"api_summary": "The Book API provides endpoints for managing books, including creating, updating, and deleting books. The API is secured using OAuth2 and requires an 'admin' role to access the endpoints.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/books", "/books/{id}"]}}
{"file": "cloned/microprofile-samples/services/book-api/src/main/java/com/microprofile/samples/services/book/auth/TokenEndpoint.java", "endpoints": {"api_summary": "The TokenEndpoint API provides a way to generate access tokens for authenticated users. It accepts a username and password, and returns a JSON object containing the access token.", "methods": ["POST"], "paths": ["/oauth/token"]}}
{"file": "cloned/microprofile-samples/services/book-api/src/main/java/com/microprofile/samples/services/book/client/NumberApiClient.java", "endpoints": {"api_summary": "The NumberApiClient interface defines a REST API for generating numbers and checking the health of the service.", "methods": ["GET"], "paths": ["/numbers/generate", "/health"]}}
{"file": "cloned/microprofile-samples/services/book-api/src/test/java/com/microprofile/samples/services/book/resource/BookApiIT.java", "endpoints": {"api_summary": "This API provides endpoints for managing books, including creating, reading, updating, and deleting books. It also includes endpoints for retrieving a list of all books and retrieving a specific book by ID.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/books", "/books/{id}"]}}
{"file": "cloned/microprofile-samples/services/number-api/src/main/java/com/microprofile/samples/services/number/NumberApplication.java", "endpoints": {"api_summary": "The Number API generates a random number with a prefix. It has one endpoint that can be accessed using the HTTP GET method at the URL path '/'.", "methods": ["GET"], "paths": ["/"]}}
{"file": "cloned/microprofile-samples/services/number-api/src/main/java/com/microprofile/samples/services/number/resource/NumberResource.java", "endpoints": {"api_summary": "The Number API generates a random number with a prefix. The API has one endpoint, /generate, which returns a JSON response with the generated number.", "methods": ["GET"], "paths": ["/number/generate"]}}
{"file": "cloned/microprofile-samples/services/number-api/src/main/java/com/microprofile/samples/services/number/resource/NumberApi.java", "endpoints": {"api_summary": "The Number API provides a single endpoint for generating an ISBN for a book.", "methods": ["GET"], "paths": ["/numbers/generate"]}}
{"file": "cloned/aries-vcr-issuer-controller/issuer_controller/src/app.py", "endpoints": {"api_summary": "This API is a credential issuer service that exposes endpoints for handling credential issuance and verification requests. It also includes endpoints for health checks and status monitoring.", "methods": ["GET", "POST"], "paths": ["/health", "/readiness", "/liveness", "/status/reset", "/status", "/issue-credential", "/issue-credential-v20", "/api/agentcb/topic/<topic>/"]}}
{"file": "cloned/aries-vcr-issuer-controller/issuer_pipeline/app/ui/start_page.py", "endpoints": {"api_summary": "The start_page API provides a redirect to the data_integration node page.", "methods": ["GET"], "paths": ["/start_page"]}}
{"file": "cloned/go-palletone/statistics/metrics/prometheus/prometheus.go", "endpoints": {"api_summary": "This API is a Prometheus dashboard that allows users to query and visualize time series data. It supports various data sources and provides a flexible and scalable architecture for data collection and processing.", "methods": ["GET", "POST"], "paths": ["/", "/api/v1/query"]}}
{"file": "cloned/go-palletone/internal/web3ext/walletjs.go", "endpoints": {"api_summary": "The wallet API provides a set of methods for interacting with the wallet, including retrieving balance, sending transactions, and managing tokens.", "methods": ["GET", "POST"], "paths": ["/wallet/getBalance", "/wallet/getBalance2", "/wallet/getAddrTxHistory", "/wallet/getContractInvokeHistory", "/wallet/getAddrUtxos", "/wallet/getAddrUtxos2", "/wallet/createRawTransaction", "/wallet/createTxWithOutFee", "/wallet/signAndFeeTransaction", "/wallet/sendRawTransaction", "/wallet/signRawTransaction", "/wallet/multiSignRawTransaction", "/wallet/sendRlpTransaction", "/wallet/sendJsonTransaction", "/wallet/getPtnTestCoin", "/wallet/transferToken", "/wallet/transferToken2MultiAddr", "/wallet/transferTokenSync", "/wallet/transferToken2", "/wallet/transferPTN", "/wallet/createProofOfExistenceTxSync", "/wallet/createProofOfExistenceTx", "/wallet/createTraceability", "/wallet/getProofOfExistencesByRef", "/wallet/getProofOfExistencesByAsset", "/wallet/getFileInfoByTxid", "/wallet/getFileInfoByFileHash", "/wallet/getProofOfExistencesByMaindata", "/wallet/getOneTokenInfo", "/wallet/getAllTokenInfo", "/wallet/getStxo", "/wallet/getUtxo", "/wallet/addBatchTxs", "/wallet/aggregateUtxo", "/wallet/getAddrTokenFlow"]}}
{"file": "cloned/go-palletone/internal/web3ext/mediatorjs.go", "endpoints": {"api_summary": "The mediator API provides a set of methods for managing mediators in a PalletOne network. It allows for listing all mediators, getting information about a specific mediator, and performing various actions such as applying, voting, and updating a mediator's status.", "methods": ["GET", "POST"], "paths": ["/mediator/listAll", "/mediator/getVoted", "/mediator/dumpInitDKS", "/mediator/apply", "/mediator/isApproved", "/mediator/payDeposit", "/mediator/getDeposit", "/mediator/isInList", "/mediator/quit", "/mediator/vote", "/mediator/update", "/mediator/getNextUpdateTime", "/mediator/getInfo", "/mediator/startProduce", "/mediator/stopProduce", "/mediator/listVoteResults", "/mediator/listVotingFor", "/mediator/lookupMediatorInfo", "/mediator/isActive", "/mediator/getSchedule", "/mediator/nextSlotTime", "/mediator/nextUpdateTime"]}}
{"file": "cloned/go-palletone/internal/web3ext/dagjs.go", "endpoints": {"api_summary": "This API provides access to the PalletOne blockchain's DAG (directed acyclic graph) data structure, allowing for the retrieval of units, headers, transactions, and other related data.", "methods": ["GET", "POST"], "paths": ["/dag/getUnitByNumber", "/dag/getUnitJsonByIndex", "/dag/getUnitHexByHash", "/dag/getUnitHexByIndex", "/dag/insertUnitByHex", "/dag/getUnitsByIndex", "/dag/getLocalTx", "/dag/getUnitSummaryByNumber", "/dag/getUnstableUnits", "/dag/getUnitByHash", "/dag/getHeaderByHash", "/dag/getHeaderByNumber", "/dag/getHeaderByAuthor", "/dag/getTxHashByReqId", "/dag/getHexCommon", "/dag/getCommon", "/dag/getLdbCommon", "/dag/getCommonByPrefix", "/dag/getTxByHash", "/dag/getTxByReqId", "/dag/getTxSearchEntry", "/dag/getTxPackInfo", "/dag/getTxStatusByHash", "/dag/getAddrOutput", "/dag/getAddrOutpoints", "/dag/getAddrUtxos", "/dag/getAddrUtxoTxs", "/dag/getAllUtxos", "/dag/getFastUnitIndex", "/dag/stableUnitNum", "/dag/getChainInfo", "/dag/getStableUnit", "/dag/getHeadUnit", "/dag/isSynced", "/dag/checkHeader", "/dag/checkUnits", "/dag/rebuildAddrTxIndex", "/dag/getGenesisData", "/dag/memdagInfos"]}}
{"file": "cloned/go-palletone/cmd/gptn/mediatorcmd.go", "endpoints": {"api_summary": "This file defines a set of mediator management commands, including creating a new mediator, listing all existing mediators, and getting the timestamp of the Unix epoch at a specified time.", "methods": ["POST", "GET"], "paths": ["/mediator/initdks", "/mediator/list", "/timestamp"]}}
{"file": "cloned/go-palletone/cmd/gptn/bugcmd.go", "endpoints": {"api_summary": "This API is a bug reporting tool for the go-palletone project. It allows users to open a window to report a bug on the gptn repo, and provides a template for the bug report.", "methods": ["GET"], "paths": ["/bug"]}}

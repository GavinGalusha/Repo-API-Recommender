{"file": "cloned/gotemp/product/server/productSever.go", "endpoints": {"api_summary": "The goTemp product service provides a REST API for managing products. It includes endpoints for creating, reading, updating, and deleting products, as well as endpoints for searching and filtering products.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/products", "/products/<product_id>", "/products/search", "/products/filter"]}}
{"file": "cloned/gotemp/product/client/productClient.go", "endpoints": {"api_summary": "This API provides endpoints for managing products, including creating, updating, and deleting products, as well as retrieving products by ID or search criteria.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/products", "/products/<product_id>", "/products/search"]}}
{"file": "cloned/gotemp/user/server/userServer.go", "endpoints": {"api_summary": "This API is a user service that allows for user authentication and management. It exposes endpoints for creating, reading, updating, and deleting users, as well as for validating user tokens and retrieving user information.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users", "/users/<built-in function id>", "/auth", "/token"]}}
{"file": "cloned/gotemp/user/client/userClient.go", "endpoints": {"api_summary": "This API defines endpoints for creating, updating, retrieving, and deleting users, as well as authenticating and logging in users.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users", "/users/<built-in function id>", "/auth", "/login"]}}
{"file": "cloned/gotemp/promotion/client/promotionClient.go", "endpoints": {"api_summary": "This API defines endpoints for managing promotions, including creating, updating, and deleting promotions, as well as retrieving promotions by ID or search criteria.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/promotions", "/promotions/<promotion_id>"]}}
{"file": "cloned/gotemp/customer/server/customerServer.go", "endpoints": {"api_summary": "The goTemp customer service provides REST API endpoints for managing customer data. It includes endpoints for creating, reading, updating, and deleting customer records, as well as endpoints for authentication and authorization.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/customers", "/customers/<customer_id>", "/auth", "/auth/token"]}}
{"file": "cloned/gotemp/customer/client/customerClient.go", "endpoints": {"api_summary": "This API defines endpoints for managing customers, including creating, retrieving, updating, and deleting customers. It also includes endpoints for authenticating users and retrieving customers based on search criteria.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/customers", "/customers/<customer_id>", "/customers/search"]}}
{"file": "cloned/gotemp/web/sapper/src/globalUtils/addresses.js", "endpoints": {"api_summary": "This API provides endpoints for managing products, customers, users, and promotions. It also includes authentication and authorization endpoints for user management.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/product", "/product/new", "/product/<built-in function id>", "/customer", "/customer/new", "/customer/<built-in function id>", "/user", "/user/new", "/user/<built-in function id>", "/promotion", "/promotion/new", "/promotion/<built-in function id>", "/login", "/register"]}}
{"file": "cloned/bugsnag-js/test/node/features/fixtures/restify/scenarios/app.js", "endpoints": {"api_summary": "This API defines several endpoints for testing error handling and reporting in a RESTful API. It includes endpoints for synchronous and asynchronous errors, as well as endpoints for handling and reporting errors in different scenarios.", "methods": ["GET", "POST"], "paths": ["/", "/sync/:message", "/async", "/next", "/rejection-sync", "/rejection-async", "/unhandled-rejection-async-callback", "/throw-non-error", "/not-found", "/internal", "/handled", "/bodytest"]}}
{"file": "cloned/bugsnag-js/test/node/features/fixtures/express/scenarios/app.js", "endpoints": {"api_summary": "This API defines several endpoints for testing the Bugsnag error reporting library. It includes endpoints for testing various types of errors, such as synchronous and asynchronous errors, as well as endpoints for testing the library's feature flags and breadcrumbs.", "methods": ["GET", "POST"], "paths": ["/", "/sync/:message", "/async", "/next", "/rejection-sync", "/rejection-async", "/unhandled-rejection-async-callback", "/string-as-error", "/throw-non-error", "/oversized", "/handled", "/bodytest", "/features/unhandled", "/features/handled", "/breadcrumbs_a", "/breadcrumbs_b", "/console_breadcrumbs_a", "/console_breadcrumbs_b", "/context-loss"]}}
{"file": "cloned/bugsnag-js/test/aws-lambda/features/fixtures/hono-app/app/app.js", "endpoints": {"api_summary": "This API provides a simple interface for testing error handling in a Hono application. It includes endpoints for handling errors synchronously and asynchronously, as well as for testing promise rejections and throwing non-error objects.", "methods": ["GET"], "paths": ["/", "/handled", "/unhandled", "/unhandled-async", "/promise-rejection", "/throw-non-error"]}}
{"file": "cloned/bugsnag-js/test/aws-lambda/features/fixtures/serverless-express-app/app/app.js", "endpoints": {"api_summary": "This API provides a simple interface for handling errors and exceptions in an Express.js application. It includes endpoints for handling errors, unhandled errors, and promise rejections, as well as a custom error handler that returns JSON responses.", "methods": ["GET", "POST"], "paths": ["/", "/handled", "/unhandled", "/unhandled-async", "/unhandled-next", "/promise-rejection"]}}
{"file": "cloned/bugsnag-js/test/electron/features/support/server.js", "endpoints": {"api_summary": "The MockServer class defines a simple HTTP server that can be used to test the uploading of various types of data (events, sessions, minidumps) to a server. It exposes several endpoints for uploading data, as well as a method for writing the uploaded data to disk for later inspection.", "methods": ["POST", "GET"], "paths": ["/minidump", "/events", "/sessions", "/success"]}}
{"file": "cloned/bugsnag-js/examples/js/restify/app.js", "endpoints": {"api_summary": "This API provides a simple web server that serves a static HTML page and handles errors using Bugsnag. It also includes a few endpoints for testing error handling and user information.", "methods": ["GET", "POST"], "paths": ["/", "/handled", "/unhandled", "/add-info", "/crash", "/static/*"]}}
{"file": "cloned/bugsnag-js/examples/js/nextjs/pages/api/scenario4.js", "endpoints": {"api_summary": "This API scenario 4 is an example of how to use Bugsnag to handle exceptions and record them. It includes a try/catch block to handle an error and notify Bugsnag of the issue.", "methods": ["GET"], "paths": ["/api/scenario4"]}}
{"file": "cloned/bugsnag-js/examples/js/nextjs/pages/api/scenario2.js", "endpoints": {"api_summary": "This API scenario 2 is a top-of-module exception. It has a function called work that throws an error and a handler function that returns a JSON object with a name field.", "methods": ["GET"], "paths": ["/users", "/users/<built-in function id>"]}}
{"file": "cloned/bugsnag-js/examples/js/nextjs/pages/api/scenario1.js", "endpoints": {"api_summary": "This API scenario 1 defines a single endpoint that returns a JSON object with a name field. The endpoint is defined using the serverlessHandler function from the bugsnag library, and it handles a GET request to the /users/<built-in function id> path.", "methods": ["GET"], "paths": ["/users/<built-in function id>"]}}
{"file": "cloned/bugsnag-js/examples/js/koa/app.js", "endpoints": {"api_summary": "This API provides a simple web interface for testing error handling and reporting with Bugsnag. It includes endpoints for crashing the application, handling unhandled errors, and adding user information to error reports.", "methods": ["GET", "POST"], "paths": ["/", "/crash", "/unhandled", "/handled", "/add-info"]}}
{"file": "cloned/bugsnag-js/examples/js/express/app.js", "endpoints": {"api_summary": "This API provides a simple web interface for testing error handling and reporting with Bugsnag. It includes endpoints for crashing the application, handling errors, and adding user information to error reports.", "methods": ["GET", "POST"], "paths": ["/", "/crash", "/unhandled", "/handled", "/add-info"]}}

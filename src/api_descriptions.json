{"file": "cloned/gotemp/product/server/productSever.go", "endpoints": {"api_summary": "The goTemp product service provides a REST API for managing products. It includes endpoints for creating, reading, updating, and deleting products, as well as endpoints for searching and filtering products.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/products", "/products/<product_id>", "/products/search", "/products/filter"]}}
{"file": "cloned/gotemp/product/client/productClient.go", "endpoints": {"api_summary": "This API provides endpoints for managing products, including creating, updating, and deleting products, as well as retrieving products by ID or search criteria.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/products", "/products/<product_id>", "/products/search"]}}
{"file": "cloned/gotemp/user/server/userServer.go", "endpoints": {"api_summary": "This API is a user service that allows for user authentication and management. It exposes endpoints for creating, reading, updating, and deleting users, as well as for validating user tokens and retrieving user information.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users", "/users/<built-in function id>", "/auth", "/token"]}}
{"file": "cloned/gotemp/user/client/userClient.go", "endpoints": {"api_summary": "This API defines endpoints for creating, updating, retrieving, and deleting users, as well as authenticating and logging in users.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users", "/users/<built-in function id>", "/auth", "/login"]}}
{"file": "cloned/gotemp/promotion/client/promotionClient.go", "endpoints": {"api_summary": "This API defines endpoints for managing promotions, including creating, updating, and deleting promotions, as well as retrieving promotions by ID or search criteria.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/promotions", "/promotions/<promotion_id>"]}}
{"file": "cloned/gotemp/customer/server/customerServer.go", "endpoints": {"api_summary": "The goTemp customer service provides REST API endpoints for managing customer data. It includes endpoints for creating, reading, updating, and deleting customer records, as well as endpoints for authentication and authorization.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/customers", "/customers/<customer_id>", "/auth", "/auth/token"]}}
{"file": "cloned/gotemp/customer/client/customerClient.go", "endpoints": {"api_summary": "This API defines endpoints for managing customers, including creating, retrieving, updating, and deleting customers. It also includes endpoints for authenticating users and retrieving customers based on search criteria.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/customers", "/customers/<customer_id>", "/customers/search"]}}
{"file": "cloned/gotemp/web/sapper/src/globalUtils/addresses.js", "endpoints": {"api_summary": "This API provides endpoints for managing products, customers, users, and promotions. It also includes authentication and authorization endpoints for user management.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/product", "/product/new", "/product/<built-in function id>", "/customer", "/customer/new", "/customer/<built-in function id>", "/user", "/user/new", "/user/<built-in function id>", "/promotion", "/promotion/new", "/promotion/<built-in function id>", "/login", "/register"]}}
{"file": "cloned/bugsnag-js/test/node/features/fixtures/restify/scenarios/app.js", "endpoints": {"api_summary": "This API defines several endpoints for testing error handling and reporting in a RESTful API. It includes endpoints for synchronous and asynchronous errors, as well as endpoints for handling and reporting errors in different scenarios.", "methods": ["GET", "POST"], "paths": ["/", "/sync/:message", "/async", "/next", "/rejection-sync", "/rejection-async", "/unhandled-rejection-async-callback", "/throw-non-error", "/not-found", "/internal", "/handled", "/bodytest"]}}
{"file": "cloned/bugsnag-js/test/node/features/fixtures/express/scenarios/app.js", "endpoints": {"api_summary": "This API defines several endpoints for testing the Bugsnag error reporting library. It includes endpoints for testing various types of errors, such as synchronous and asynchronous errors, as well as endpoints for testing the library's feature flags and breadcrumbs.", "methods": ["GET", "POST"], "paths": ["/", "/sync/:message", "/async", "/next", "/rejection-sync", "/rejection-async", "/unhandled-rejection-async-callback", "/string-as-error", "/throw-non-error", "/oversized", "/handled", "/bodytest", "/features/unhandled", "/features/handled", "/breadcrumbs_a", "/breadcrumbs_b", "/console_breadcrumbs_a", "/console_breadcrumbs_b", "/context-loss"]}}
{"file": "cloned/bugsnag-js/test/aws-lambda/features/fixtures/hono-app/app/app.js", "endpoints": {"api_summary": "This API provides a simple interface for testing error handling in a Hono application. It includes endpoints for handling errors synchronously and asynchronously, as well as for testing promise rejections and throwing non-error objects.", "methods": ["GET"], "paths": ["/", "/handled", "/unhandled", "/unhandled-async", "/promise-rejection", "/throw-non-error"]}}
{"file": "cloned/bugsnag-js/test/aws-lambda/features/fixtures/serverless-express-app/app/app.js", "endpoints": {"api_summary": "This API provides a simple interface for handling errors and exceptions in an Express.js application. It includes endpoints for handling errors, unhandled errors, and promise rejections, as well as a custom error handler that returns JSON responses.", "methods": ["GET", "POST"], "paths": ["/", "/handled", "/unhandled", "/unhandled-async", "/unhandled-next", "/promise-rejection"]}}
{"file": "cloned/bugsnag-js/test/electron/features/support/server.js", "endpoints": {"api_summary": "The MockServer class defines a simple HTTP server that can be used to test the uploading of various types of data (events, sessions, minidumps) to a server. It exposes several endpoints for uploading data, as well as a method for writing the uploaded data to disk for later inspection.", "methods": ["POST", "GET"], "paths": ["/minidump", "/events", "/sessions", "/success"]}}
{"file": "cloned/bugsnag-js/examples/js/restify/app.js", "endpoints": {"api_summary": "This API provides a simple web server that serves a static HTML page and handles errors using Bugsnag. It also includes a few endpoints for testing error handling and user information.", "methods": ["GET", "POST"], "paths": ["/", "/handled", "/unhandled", "/add-info", "/crash", "/static/*"]}}
{"file": "cloned/bugsnag-js/examples/js/nextjs/pages/api/scenario4.js", "endpoints": {"api_summary": "This API scenario 4 is an example of how to use Bugsnag to handle exceptions and record them. It includes a try/catch block to handle an error and notify Bugsnag of the issue.", "methods": ["GET"], "paths": ["/api/scenario4"]}}
{"file": "cloned/bugsnag-js/examples/js/nextjs/pages/api/scenario2.js", "endpoints": {"api_summary": "This API scenario 2 is a top-of-module exception. It has a function called work that throws an error and a handler function that returns a JSON object with a name field.", "methods": ["GET"], "paths": ["/users", "/users/<built-in function id>"]}}
{"file": "cloned/bugsnag-js/examples/js/nextjs/pages/api/scenario1.js", "endpoints": {"api_summary": "This API scenario 1 defines a single endpoint that returns a JSON object with a name field. The endpoint is defined using the serverlessHandler function from the bugsnag library, and it handles a GET request to the /users/<built-in function id> path.", "methods": ["GET"], "paths": ["/users/<built-in function id>"]}}
{"file": "cloned/bugsnag-js/examples/js/koa/app.js", "endpoints": {"api_summary": "This API provides a simple web interface for testing error handling and reporting with Bugsnag. It includes endpoints for crashing the application, handling unhandled errors, and adding user information to error reports.", "methods": ["GET", "POST"], "paths": ["/", "/crash", "/unhandled", "/handled", "/add-info"]}}
{"file": "cloned/bugsnag-js/examples/js/express/app.js", "endpoints": {"api_summary": "This API provides a simple web interface for testing error handling and reporting with Bugsnag. It includes endpoints for crashing the application, handling errors, and adding user information to error reports.", "methods": ["GET", "POST"], "paths": ["/", "/crash", "/unhandled", "/handled", "/add-info"]}}
{"file": "cloned/bugsnag-js/packages/delivery-node/test/delivery.test.ts", "endpoints": {"api_summary": "This API is used for delivering events and sessions to the Bugsnag platform. It includes endpoints for sending events and sessions, as well as handling errors and logging.", "methods": ["POST"], "paths": ["/notify/", "/sessions/"]}}
{"file": "cloned/wazo-auth/integration_tests/assets/saml/webapp/server.py", "endpoints": {"api_summary": "This API provides a simple web interface for displaying a list of users and their associated ACS (Access Control System) information. The API supports GET requests to retrieve the list of users and their ACS information, and POST requests to create new users and their associated ACS information.", "methods": ["GET", "POST"], "paths": ["/", "/postacs.html"]}}
{"file": "cloned/wazo-auth/integration_tests/assets/external_auth/oauth2_synchronization_service/main.py", "endpoints": {"api_summary": "This API provides a websocket connection for authorizing and retrieving a Microsoft token for a given service and state. It also provides a GET endpoint for retrieving the token directly.", "methods": ["GET", "POST", "WS"], "paths": ["/ws/<state>", "/<service>/authorize/<state>", "/<service>/token"]}}
{"file": "cloned/wazo-auth/integration_tests/assets/external_auth/service_plugin/external_auth_service_plugin/plugin.py", "endpoints": {"api_summary": "This API defines endpoints for managing external authentication services for Wazo. It allows for the creation, deletion, and retrieval of external authentication services, as well as the management of user authentication tokens.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users/<uuid:user_uuid>/external/foo", "/users/<uuid:user_uuid>/external/bar"]}}
{"file": "cloned/wazo-auth/integration_tests/suite/test_idp.py", "endpoints": {"api_summary": "This API provides authentication methods for users and tenants, including login and logout endpoints, as well as endpoints for managing authentication methods and tokens.", "methods": ["GET", "POST"], "paths": ["/token", "/login", "/logout", "/idp", "/idp/<idp_name>", "/idp/<idp_name>/<method_name>"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/external_auth/microsoft/plugin.py", "endpoints": {"api_summary": "The MicrosoftPlugin API allows for authentication and authorization of users using Microsoft accounts. It provides a single endpoint for retrieving user information and external authentication tokens.", "methods": ["GET"], "paths": ["/users/<uuid:user_uuid>/external/microsoft"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/external_auth/google/plugin.py", "endpoints": {"api_summary": "The GooglePlugin API allows for authentication and authorization of users using Google OAuth. It provides a single endpoint for authenticating a user and retrieving their Google profile information.", "methods": ["GET"], "paths": ["/users/<uuid:user_uuid>/external/google"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/external_auth/mobile/http.py", "endpoints": {"api_summary": "The API allows for the management of mobile authentication tokens for users. It provides endpoints for creating, reading, updating, and deleting mobile authentication tokens, as well as retrieving the FCM sender ID for a given user.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users/<user_uuid>/external/mobile", "/users/<user_uuid>/external/mobile/sender_id"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/external_auth/mobile/plugin.py", "endpoints": {"api_summary": "The API allows for the management of mobile authentication for users in the Wazo system. It provides endpoints for authenticating users and managing their mobile authentication settings.", "methods": ["GET", "POST"], "paths": ["/users/<uuid:user_uuid>/external/mobile", "/users/<uuid:user_uuid>/external/mobile/sender_id"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/ldap_config/http.py", "endpoints": {"api_summary": "The LDAPConfig API provides endpoints for managing LDAP configurations for Wazo Auth. It allows for retrieving, creating, updating, and deleting LDAP configurations, as well as checking the status of the LDAP service.", "methods": ["GET", "PUT", "DELETE"], "paths": ["/ldap_config", "/ldap_config/<tenant_uuid>"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/ldap_config/plugin.py", "endpoints": {"api_summary": "The API allows for the configuration of LDAP authentication for the Wazo phone system. It provides a single endpoint for retrieving and updating the LDAP configuration.", "methods": ["GET", "POST"], "paths": ["/backends/ldap"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/user_session/http.py", "endpoints": {"api_summary": "The Wazo Auth API provides endpoints for managing user sessions. It allows for listing and deleting user sessions, as well as retrieving information about specific sessions.", "methods": ["GET", "DELETE"], "paths": ["/users/<user_uuid>/sessions", "/users/<user_uuid>/sessions/<session_uuid>"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/user_session/plugin.py", "endpoints": {"api_summary": "The API provides endpoints for managing user sessions, including creating, retrieving, and deleting sessions. The endpoints are accessible at the `/users/<user_uuid>/sessions` and `/users/<user_uuid>/sessions/<session_uuid>` paths.", "methods": ["GET", "POST", "DELETE"], "paths": ["/users/<user_uuid>/sessions", "/users/<user_uuid>/sessions/<session_uuid>"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/user_policy/http.py", "endpoints": {"api_summary": "This API defines endpoints for managing user policies in the Wazo authentication system. It allows for listing, adding, and removing policies for a given user, as well as checking the access control list (ACL) for a policy.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users/<user_uuid>/policies", "/users/<user_uuid>/policies/<policy_uuid>", "/users/<user_uuid>/policies/<policy_slug>"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/user_policy/plugin.py", "endpoints": {"api_summary": "This API provides endpoints for managing user policies in a Wazo system. It allows for the creation, retrieval, update, and deletion of user policies, as well as listing all policies for a given user.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users/<uuid:user_uuid>/policies/<uuid:policy_uuid>", "/users/<uuid:user_uuid>/policies/<string:policy_slug>", "/users/<uuid:user_uuid>/policies"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/policies/http.py", "endpoints": {"api_summary": "This API defines endpoints for managing policies and their access controls. It allows for creating, reading, updating, and deleting policies, as well as adding and removing access controls for policies.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/policies", "/policies/<policy_uuid>", "/policies/<policy_slug>", "/policies/<policy_uuid>/access/<access>", "/policies/<policy_slug>/access/<access>"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/policies/plugin.py", "endpoints": {"api_summary": "The API defined in this file provides endpoints for managing policies and their access control lists. It allows for the creation, retrieval, update, and deletion of policies, as well as the management of access control lists for policies.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/policies", "/policies/<uuid:policy_uuid>", "/policies/<uuid:policy_uuid>/acl/<access>", "/policies/<string:policy_slug>", "/policies/<string:policy_slug>/acl/<access>"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/saml/http.py", "endpoints": {"api_summary": "This API provides endpoints for Single Sign-On (SSO) and Single Logout (SLO) using the SAML protocol. It allows users to authenticate and log out of the system using SAML-compliant identity providers.", "methods": ["POST", "GET"], "paths": ["/saml/acs", "/saml/sso", "/saml/logout", "/saml/sls"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/saml/plugin.py", "endpoints": {"api_summary": "The API provides endpoints for SAML authentication and single logout. It allows users to authenticate and logout using SAML protocol.", "methods": ["GET", "POST"], "paths": ["/saml/acs", "/saml/sso", "/saml/logout", "/saml/sls"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/external/http.py", "endpoints": {"api_summary": "This API defines endpoints for managing external authentication and authorization for Wazo, including listing and configuring external authentication methods, and retrieving information about connected users.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/external", "/external/config", "/external/users"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/external/plugin.py", "endpoints": {"api_summary": "The API provides endpoints for managing external authentication and authorization for users in a Wazo system. It allows for the creation, retrieval, and management of external authentication configurations and users, as well as the ability to retrieve external user information.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users/<uuid:user_uuid>/external", "/external/<string:auth_type>/config", "/external/<string:auth_type>/users"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/tokens/http.py", "endpoints": {"api_summary": "This API provides endpoints for managing tokens and authentication.", "methods": ["GET", "POST", "DELETE"], "paths": ["/tokens", "/tokens/<token_uuid>", "/tokens/scopes/check"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/tokens/plugin.py", "endpoints": {"api_summary": "This API provides endpoints for managing tokens and refresh tokens for users and clients. It allows for the creation, retrieval, and revocation of tokens, as well as the checking of token scopes and the retrieval of user and client refresh tokens.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/token", "/token/<uuid:token_uuid>", "/token/<uuid:token_uuid>/scopes/check", "/tokens", "/users/<uuid:user_uuid>/tokens", "/users/<uuid:user_uuid>/tokens/<string:client_id>", "/users/me/tokens", "/users/me/tokens/<string:client_id>"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/password_reset/plugin.py", "endpoints": {"api_summary": "The API allows users to reset their passwords by sending a password reset request to the server, which will send an email to the user's registered email address with a password reset link. The user can then use the link to reset their password.", "methods": ["POST"], "paths": ["/users/password/reset"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/user_registration/http.py", "endpoints": {"api_summary": "The Register API allows users to create a new account and send a confirmation email to the specified email address.", "methods": ["POST"], "paths": ["/register"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/user_registration/plugin.py", "endpoints": {"api_summary": "The API allows users to register and manage their accounts.", "methods": ["POST"], "paths": ["/users/register"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/saml_config/http.py", "endpoints": {"api_summary": "This API provides endpoints for managing SAML configurations and metadata for the Wazo Auth service.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/saml_config", "/saml_metadata", "/saml_acs_url_template"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/saml_config/plugin.py", "endpoints": {"api_summary": "The Wazo API provides endpoints for managing SAML configurations, including retrieving metadata, setting the ACS URL template, and configuring the SAML backend.", "methods": ["GET", "POST"], "paths": ["/backends/saml", "/backends/saml/metadata", "/backends/saml/acs_url_template"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/config/http.py", "endpoints": {"api_summary": "The Wazo Auth API provides endpoints for managing authentication and authorization for the Wazo platform. It includes endpoints for retrieving and updating configuration, as well as endpoints for managing users and tenants.", "methods": ["GET", "POST", "PATCH"], "paths": ["/auth/config", "/auth/config/<built-in function id>", "/auth/users", "/auth/tenants"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/email_confirm/http.py", "endpoints": {"api_summary": "The EmailConfirm API allows users to confirm their email addresses by sending a confirmation email and updating the email status in the database.", "methods": ["GET", "PUT"], "paths": ["/auth/emails/{email_uuid}/confirm"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/email_confirm/plugin.py", "endpoints": {"api_summary": "The API allows for the confirmation of email addresses by sending a confirmation email to the user. The API endpoint is /emails/<uuid:email_uuid>/confirm and supports the HTTP method POST.", "methods": ["POST"], "paths": ["/emails/<uuid:email_uuid>/confirm"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/user_email/http.py", "endpoints": {"api_summary": "This API provides endpoints for updating and confirming user emails. It also includes endpoints for retrieving user information and sending confirmation emails.", "methods": ["PUT", "GET"], "paths": ["/users/<user_uuid>/emails", "/users/<user_uuid>/emails/<email_uuid>/confirm"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/user_email/plugin.py", "endpoints": {"api_summary": "This API provides endpoints for managing user emails, including confirming email addresses and updating email addresses for users. The API also provides an endpoint for administrators to update email addresses for users.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users/<uuid:user_uuid>/emails/<uuid:email_uuid>/confirm", "/admin/users/<uuid:user_uuid>/emails", "/users/<uuid:user_uuid>/emails"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/idp/http.py", "endpoints": {"api_summary": "This API provides endpoints for managing users and their authentication through various identity providers (IDPs). It allows for adding, removing, and updating users' IDP associations, as well as retrieving a list of available IDPs.", "methods": ["GET", "PUT", "DELETE"], "paths": ["/idp/list", "/idp/{idp_type}/users/{user_uuid}", "/idp/{idp_type}/users"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/idp/plugin.py", "endpoints": {"api_summary": "The API provides endpoints for managing identity providers (IDPs) and users in a Wazo system. It allows for listing, creating, and managing IDPs, as well as retrieving and managing users associated with those IDPs.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/idp", "/idp/<idp_type>/users/<uuid:user_uuid>", "/idp/<idp_type>/users"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/sessions/http.py", "endpoints": {"api_summary": "The Wazo Auth API provides endpoints for managing sessions and authentication. It allows users to create, read, update, and delete sessions, as well as retrieve information about sessions and authenticate users.", "methods": ["GET", "POST", "DELETE"], "paths": ["/sessions", "/sessions/<built-in function id>", "/sessions/<session_uuid>"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/sessions/plugin.py", "endpoints": {"api_summary": "The API provides endpoints for managing sessions, including creating, retrieving, and deleting sessions. The endpoints are accessible at the `/sessions` path and support GET, POST, PUT, and DELETE methods.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/sessions", "/sessions/<uuid:session_uuid>"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/users/http.py", "endpoints": {"api_summary": "The Wazo Auth API provides endpoints for managing users and their authentication methods. It includes endpoints for creating, reading, updating, and deleting users, as well as endpoints for changing user passwords.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users", "/users/<built-in function id>", "/users/password"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/users/plugin.py", "endpoints": {"api_summary": "The API provides endpoints for managing users and their passwords. It allows for the creation, retrieval, update, and deletion of user accounts, as well as the ability to change a user's password.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users", "/users/<uuid:user_uuid>", "/users/<uuid:user_uuid>/password"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/groups/http.py", "endpoints": {"api_summary": "The Wazo Auth API provides endpoints for managing groups and their permissions. It allows for creating, reading, updating, and deleting groups, as well as listing and filtering groups based on various criteria.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/groups", "/groups/<group_uuid>", "/groups/<group_uuid>/permissions"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/groups/plugin.py", "endpoints": {"api_summary": "The API provides endpoints for managing groups and their associated users. It allows for the creation, retrieval, update, and deletion of groups, as well as the addition and removal of users from groups.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/groups", "/groups/<uuid:group_uuid>", "/groups/<uuid:group_uuid>/users", "/groups/<uuid:group_uuid>/users/<uuid:user_uuid>"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/group_policy/http.py", "endpoints": {"api_summary": "This API defines endpoints for managing policies for a group in a multi-tenant system. It allows for adding, removing, and listing policies for a group, as well as retrieving information about the policies.", "methods": ["GET", "PUT", "DELETE"], "paths": ["/groups/<group_uuid>/policies", "/groups/<group_uuid>/policies/<policy_uuid>", "/groups/<group_uuid>/policies/<policy_slug>"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/group_policy/plugin.py", "endpoints": {"api_summary": "This API provides endpoints for managing policies for groups in a Wazo system. It allows for the creation, retrieval, update, and deletion of policies for groups, as well as listing all policies for a given group.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/groups/<uuid:group_uuid>/policies/<uuid:policy_uuid>", "/groups/<uuid:group_uuid>/policies/<string:policy_slug>", "/groups/<uuid:group_uuid>/policies"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/tenants/http.py", "endpoints": {"api_summary": "This API defines endpoints for managing tenants and their domains in a multi-tenant system. It allows for creating, reading, updating, and deleting tenants, as well as listing and managing their domains.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/tenants", "/tenants/<tenant_uuid>", "/tenants/<tenant_uuid>/domains"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/tenants/plugin.py", "endpoints": {"api_summary": "The API allows for the management of tenants and their associated domains. It provides endpoints for creating, retrieving, updating, and deleting tenants and their domains.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/tenants", "/tenants/<uuid:tenant_uuid>", "/tenants/<uuid:tenant_uuid>/domains"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/user_group/http.py", "endpoints": {"api_summary": "This API defines endpoints for managing user groups and their associated users. It allows for creating, reading, updating, and deleting groups and their associated users, as well as listing and filtering groups and users.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/groups", "/groups/<group_uuid>", "/groups/<group_uuid>/users", "/groups/<group_uuid>/users/<user_uuid>", "/users/<user_uuid>/groups"]}}
{"file": "cloned/wazo-auth/wazo_auth/plugins/http/user_group/plugin.py", "endpoints": {"api_summary": "The API provides endpoints for managing users and groups in a Wazo system. It allows for the creation, retrieval, update, and deletion of users and groups, as well as the association of users with groups.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/groups/<uuid:group_uuid>/users/<uuid:user_uuid>", "/groups/<uuid:group_uuid>/users", "/users/<uuid:user_uuid>/groups"]}}
{"file": "cloned/wazo-auth/wazo_auth/services/ldap.py", "endpoints": {"api_summary": "The LDAPService API provides endpoints for managing LDAP configurations for Wazo tenants. It allows for creating, updating, and deleting LDAP configurations, as well as retrieving the current configuration for a given tenant.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/ldap_config", "/ldap_config/<tenant_uuid>"]}}
{"file": "cloned/data-act-broker-backend/tests/integration/sqs_work_dispatcher_tests.py", "endpoints": {"task_id": 1234}}
{"file": "cloned/data-act-broker-backend/tests/integration/domain_tests.py", "endpoints": {"api_summary": "This API provides information about agencies and their sub-tiers, including the ability to list all agencies, list all sub-tiers, and retrieve a list of agencies and sub-tiers based on the user's permissions.", "methods": ["GET"], "paths": ["/v1/list_agencies/", "/v1/list_all_agencies/", "/v1/list_sub_tier_agencies/"]}}
{"file": "cloned/data-act-broker-backend/tests/unit/dataactbroker/test_exception_handler.py", "endpoints": {"api_summary": "This API endpoint allows users to test the exception handler for the dataactbroker application. It takes three parameters, param1, param2, and param3, and returns a JSON object with a message indicating whether the input was valid or not.", "methods": ["GET"], "paths": ["/endpoint/"]}}
{"file": "cloned/data-act-broker-backend/tests/unit/dataactbroker/test_login_routes.py", "endpoints": {"api_summary": "This API handles user authentication and session management for the Data Broker application.", "methods": ["GET", "POST"], "paths": ["/login", "/logout", "/proxy_login"]}}
{"file": "cloned/data-act-broker-backend/dataactvalidator/health_check.py", "endpoints": {"api_summary": "The Validator API is a simple Flask application that provides a single endpoint for testing the server's status. The endpoint returns a simple message indicating that the server is running.", "methods": ["GET"], "paths": ["/"]}}
{"file": "cloned/data-act-broker-backend/dataactbroker/app.py", "endpoints": {"api_summary": "The Broker API provides endpoints for user authentication, file management, and data generation. It also includes endpoints for user management and dashboard functionality.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/", "/login", "/logout", "/users", "/users/<built-in function id>", "/files", "/files/<built-in function id>", "/generation", "/generation/<built-in function id>", "/dashboard", "/dashboard/<built-in function id>", "/settings", "/settings/<built-in function id>"]}}
{"file": "cloned/data-act-broker-backend/dataactbroker/routes/settings_routes.py", "endpoints": {"api_summary": "The API allows for the management of rule settings for a specific agency and file type. It provides endpoints for retrieving and updating the rule settings, as well as for saving the rule settings.", "methods": ["GET", "POST"], "paths": ["/v1/rule_settings/", "/v1/save_rule_settings/"]}}
{"file": "cloned/data-act-broker-backend/dataactbroker/routes/file_routes.py", "endpoints": {"api_summary": "This API provides endpoints for managing and validating DABS submissions, including file upload, validation, and publishing.", "methods": ["POST", "GET"], "paths": ["/v1/upload_dabs_files/", "/v1/check_status/", "/v1/submission_metadata/", "/v1/submission_data/", "/v1/revalidation_threshold/", "/v1/latest_publication_period/", "/v1/list_banners/", "/v1/list_submissions/", "/v1/list_latest_published_files/", "/v1/list_history/", "/v1/get_published_file/", "/v1/get_submitted_published_file/", "/v1/check_current_page/", "/v1/get_fabs_meta/", "/v1/upload_fabs_file/", "/v1/publish_fabs_file/", "/v1/get_obligations/", "/v1/get_submission_comments/", "/v1/update_submission_comments/", "/v1/get_comments_file/", "/v1/get_submission_zip/", "/v1/report_url/", "/v1/get_file_url/", "/v1/get_detached_file_url/", "/v1/delete_submission/", "/v1/published_submissions/", "/v1/publish_dabs_submission/", "/v1/certify_dabs_submission/", "/v1/publish_and_certify_dabs_submission/", "/v1/restart_validation/", "/v1/revert_submission/"]}}
{"file": "cloned/data-act-broker-backend/dataactbroker/routes/generation_routes.py", "endpoints": {"api_summary": "This API generates files for the broker, including D1, D2, E, and F files, as well as detached files for specific agencies and time periods.", "methods": ["POST", "GET"], "paths": ["/v1/generate_file/", "/v1/check_generation_status/", "/v1/generate_detached_file/", "/v1/check_detached_generation_status/"]}}
{"file": "cloned/data-act-broker-backend/dataactbroker/routes/domain_routes.py", "endpoints": {"api_summary": "This API provides endpoints for retrieving information about agencies, data sources, and other domain values used in the broker.", "methods": ["GET"], "paths": ["/v1/list_agencies/", "/v1/list_all_agencies/", "/v1/list_sub_tier_agencies/", "/v1/list_data_sources/"]}}
{"file": "cloned/data-act-broker-backend/dataactbroker/routes/dashboard_routes.py", "endpoints": {"api_summary": "This API provides endpoints for retrieving information about the active submission for the agency data dashboard.", "methods": ["GET", "POST"], "paths": ["/v1/get_rule_labels/", "/v1/historic_dabs_graphs/", "/v1/historic_dabs_table/", "/v1/active_submission_overview/", "/v1/get_impact_counts/", "/v1/get_significance_counts/", "/v1/active_submission_table/"]}}
{"file": "cloned/data-act-broker-backend/dataactbroker/routes/login_routes.py", "endpoints": {"api_summary": "The login API provides endpoints for logging in, logging out, and checking the status of the current session. It also provides endpoints for proxy and CAIA logins.", "methods": ["POST", "GET"], "paths": ["/v1/login/", "/v1/proxy_login/", "/v1/caia_login/", "/v1/logout/", "/v1/session/"]}}
{"file": "cloned/data-act-broker-backend/dataactbroker/routes/user_routes.py", "endpoints": {"api_summary": "This API provides endpoints for managing users and their permissions, as well as sending emails to users.", "methods": ["GET", "POST"], "paths": ["/v1/list_user_emails/", "/v1/list_submission_users/", "/v1/active_user/", "/v1/set_skip_guide/"]}}
{"file": "cloned/ccpay-payment-app/gov-pay-client/src/main/java/uk/gov/hmcts/payment/api/external/client/GovPayClient.java", "endpoints": {"api_summary": "The GovPayClient class provides methods for interacting with the GOV.UK Pay API. It includes methods for creating and retrieving payments, cancelling payments, and refunding payments.", "methods": ["GET", "POST"], "paths": ["/govpay/payments", "/govpay/payments/<payment_id>", "/govpay/payments/<payment_id>/cancel", "/govpay/payments/<payment_id>/refund"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/configuration/security/SpringSecurityConfiguration.java", "endpoints": {"api_summary": "This API provides payment-related functionality, including payment processing, refunds, and payment status checks.", "methods": ["GET", "POST", "PATCH", "DELETE"], "paths": ["/payments", "/payments1", "/card-payments/*/status", "/card-payments", "/card-payments/*/cancel", "/card-payments/*/details", "/pba-accounts/*/payments", "/refund-for-payment", "/refund-retro-remission", "/refund/resubmit/*", "/reference-data/**", "/case-payment-orders**", "/api/**", "/payment-failures/**"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/controllers/MaintenanceJobsController.java", "endpoints": {"api_summary": "The MaintenanceJobsController API provides a RESTful interface for updating payment status on all gov pay pending card payments.", "methods": ["PATCH"], "paths": ["/jobs/card-payments-status-update"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/controllers/ReplayCreditAccountPaymentController.java", "endpoints": {"api_summary": "The Replay Credit Account Payment API allows for the replay of credit account payments that have failed. It updates the payment status to 'failed' and adds a payment history comment indicating the failure. If the 'isReplayPBAPayments' parameter is set to true, it also replays the new PBA payment as data provided in the CSV file.", "methods": ["POST"], "paths": ["/replay-credit-account-payments"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/controllers/AccountController.java", "endpoints": {"api_summary": "The AccountController API provides endpoints for retrieving account information and handling errors related to account status.", "methods": ["GET"], "paths": ["/accounts/{accountNumber}"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/controllers/RefundsController.java", "endpoints": {"api_summary": "The RefundsController API provides endpoints for creating, updating, and deleting refunds for payments. It also provides an endpoint for updating the remission amount in the resubmit journey.", "methods": ["POST", "PATCH", "DELETE"], "paths": ["/refund-for-payment", "/refund-retro-remission", "/refund/resubmit/{payment-reference}", "/refund/{refundReference}"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/controllers/PBAController.java", "endpoints": {"api_summary": "The Pay by Account (PBA) API allows users to retrieve payments for a PBA account and get PBA account details from ref data.", "methods": ["GET"], "paths": ["/pba-accounts/{account}/payments", "/pba-accounts"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/controllers/ServiceRequestController.java", "endpoints": {"api_summary": "This API is a RESTful API that allows users to create, retrieve, and update service requests and payments for those requests.", "methods": ["GET", "POST", "PATCH"], "paths": ["/service-request", "/service-request/{service-request-reference}/pba-payments", "/service-request/{service-request-reference}/card-payments", "/card-payments/{internal-reference}/status"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/controllers/FeePayApportionController.java", "endpoints": {"api_summary": "The FeePayApportionController API provides endpoints for retrieving apportionment details for a payment reference.", "methods": ["GET"], "paths": ["/payment-groups/fee-pay-apportion/{paymentreference}"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/controllers/CasePaymentOrdersController.java", "endpoints": {"api_summary": "The Case Payment Orders API allows retrieving payment orders for a case. It takes in a list of case IDs and returns a list of payment orders for those cases.", "methods": ["GET"], "paths": ["/case-payment-orders"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/controllers/PaymentReportController.java", "endpoints": {"api_summary": "The PaymentReportController API provides endpoints for generating and emailing payment reports, as well as for generating reports for payment failures.", "methods": ["POST"], "paths": ["/jobs/email-pay-reports", "/jobs/duplicate-payment-process"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/controllers/PaymentReferenceDataController.java", "endpoints": {"api_summary": "This API provides information about payment reference data, including payment channels, methods, providers, and statuses. It also allows retrieving a list of allowed legacy sites.", "methods": ["GET"], "paths": ["/refdata/channels", "/refdata/methods", "/refdata/providers", "/refdata/status", "/refdata/legacy-sites"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/controllers/ServiceRequestReportController.java", "endpoints": {"api_summary": "The Service Request Report API provides a way to generate and email duplicate service request count CSV reports. The API takes a date parameter in the format YYYY-MM-DD and returns a report with the number of duplicate service requests for that date.", "methods": ["POST"], "paths": ["/jobs/email-duplicate-sr-report"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/controllers/CreditAccountPaymentController.java", "endpoints": {"api_summary": "The Credit Account Payment API allows for the creation, retrieval, and deletion of credit account payments. It also provides a way to retrieve the status of a payment.", "methods": ["POST", "GET", "DELETE"], "paths": ["/credit-account-payments", "/credit-account-payments/{paymentReference}", "/credit-account-payments/{paymentReference}/statuses"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/controllers/PaymentStatusController.java", "endpoints": {"api_summary": "The PaymentStatusController API provides endpoints for managing payment failures and retrieving payment failure reports. It also includes endpoints for updating payment status and generating reports for telephony payments.", "methods": ["GET", "POST", "PATCH", "DELETE"], "paths": ["/payment-failures/bounced-cheque", "/payment-failures/chargeback", "/payment-failures/unprocessed-payment", "/payment-failures/{paymentReference}", "/payment-status-delete/{failureReference}", "/payment-failures/{failureReference}", "/jobs/unprocessed-payment-update", "/payment-failures/failure-report", "/telephony-payments/telephony-payments-report"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/controllers/PaymentController.java", "endpoints": {"api_summary": "This API is used to manage payments for various services in the UK government.", "methods": ["GET", "POST", "PATCH"], "paths": ["/payments", "/payments/{reference}", "/reconciliation-payments", "/payments/{reference}/status/{status}"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/controllers/CaseController.java", "endpoints": {"api_summary": "The CaseController API provides endpoints for retrieving payments and payment groups for a case.", "methods": ["GET"], "paths": ["/cases/{case}/payments", "/cases/{ccdcasenumber}/paymentgroups"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/controllers/FeesController.java", "endpoints": {"api_summary": "The Fees API allows for the deletion of fees by ID. It also handles bad requests and returns a 400 status code if the fee is not found.", "methods": ["DELETE"], "paths": ["/fees/{feeId}"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/controllers/BulkScanningReportController.java", "endpoints": {"api_summary": "The Bulk Scanning Report API provides a way to generate reports for the Bulk Scan Payment System. It allows users to retrieve processed and unallocated reports, as well as surplus and shortfall reports.", "methods": ["GET"], "paths": ["/payment/bulkscan-data-report"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/controllers/RemissionController.java", "endpoints": {"api_summary": "The Remission API allows for the creation of remission records for payments.", "methods": ["POST"], "paths": ["/remissions", "/payment-groups/{payment-group-reference}/fees/{unique_fee_id}/remissions", "/payment-groups/{payment-group-reference}/fees/{unique_fee_id}/retro-remission"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/controllers/PaymentRecordController.java", "endpoints": {"api_summary": "The PaymentRecordController API allows for the recording of payments and their associated fees. It provides a way to create a payment record, retrieve payment records, and update payment status.", "methods": ["POST"], "paths": ["/payment-records"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/controllers/PaymentAllocationController.java", "endpoints": {"api_summary": "The Payment Allocation API allows for the creation of payment allocations for a payment reference. It also allows for retrieving payment allocations for a payment reference.", "methods": ["POST"], "paths": ["/payment-allocations"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/controllers/pcipal/TelephonyController.java", "endpoints": {"api_summary": "The Telephony Payment API allows external systems to update the payment status of a transaction with pci-pal call back response. The API accepts a request in application/x-www-form-urlencoded format and returns a 204 No Content response if the payment status is updated successfully. If the payment is not found, a 404 Not Found response is returned.", "methods": ["POST"], "paths": ["/telephony/callback"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/controllers/mock/MockCallbackControllerForTesting.java", "endpoints": {"api_summary": "The MockCallbackControllerForTesting API provides a mock implementation of a payment callback service. It allows for testing of payment processing and callback functionality without the need for a real payment gateway.", "methods": ["PUT", "GET"], "paths": ["/mock-api/serviceCallback", "/mock-api/serviceCallback/{reference}"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/v1/controllers/PaymentOldController.java", "endpoints": {"api_summary": "The PaymentOld API allows users to create, retrieve, cancel, and refund payments. It also provides endpoints for retrieving payment details and refund amounts.", "methods": ["GET", "POST"], "paths": ["/users/{userId}/payments", "/users/{userId}/payments/{paymentId}", "/users/{userId}/payments/{paymentId}/cancel", "/users/{userId}/payments/{paymentId}/refunds"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/reports/FeesRegisterClient.java", "endpoints": {"api_summary": "The FeesRegisterClient API provides a list of fees data from the fees-register service. It includes a GET endpoint for retrieving all fees data and a default method for retrieving the fees data as a map.", "methods": ["GET"], "paths": ["/fees-register/fees"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/service/IdamServiceImpl.java", "endpoints": {"api_summary": "The IdamServiceImpl class provides methods for retrieving user information from the IDAM service. It defines three endpoints: /details, /o/userinfo, and /api/v1/users.", "methods": ["GET"], "paths": ["/details", "/o/userinfo", "/api/v1/users"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/service/RefundRemissionEnableServiceImpl.java", "endpoints": {"api_summary": "The RefundRemissionEnableServiceImpl class provides methods for checking the eligibility of refunds and remissions for payments and fees. It also includes methods for setting user roles and validating refund roles with service names.", "methods": ["GET", "POST"], "paths": ["/refund"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/service/PaymentRefundsService.java", "endpoints": {"api_summary": "The PaymentRefundsService API provides endpoints for creating, validating, and updating refunds, as well as checking refunds against remission and retrieving refunds approved from the refund service.", "methods": ["POST", "GET", "PUT", "DELETE"], "paths": ["/payment-refunds/create", "/payment-refunds/validate", "/payment-refunds/update", "/payment-refunds/check-remission", "/payment-refunds/get-approved"]}}
{"file": "cloned/ccpay-payment-app/api/src/main/java/uk/gov/hmcts/payment/api/service/IacServiceImpl.java", "endpoints": {"api_summary": "The IacServiceImpl class provides a service to retrieve supplementary information for IAC payments. It exposes a single endpoint that accepts a list of PaymentDto objects and a service name, and returns a SupplementaryPaymentDto object containing the supplementary information for the IAC payments.", "methods": ["POST"], "paths": ["/supplementary-details"]}}
{"file": "cloned/ccpay-payment-app/api/src/contractTest/java/uk/gov/hmcts/payment/api/controllers/consumer/ReferenceDataLocationConsumerTest.java", "endpoints": {"api_summary": "This API provides information about organisational services for a given jurisdiction and case type.", "methods": ["GET"], "paths": ["/refdata/location/orgServices"]}}
{"file": "cloned/ccpay-payment-app/api/src/contractTest/java/uk/gov/hmcts/payment/api/controllers/provider/ServiceRequestProviderTest.java", "endpoints": {"api_summary": "This API allows for the creation of a service request for a valid payload.", "methods": ["POST"], "paths": ["/service-requests"]}}
{"file": "cloned/ccpay-payment-app/api/src/functionalTest/java/uk/gov/hmcts/payment/functional/BulkscanPaymentFunctionalTest.java", "endpoints": {"api_summary": "This API allows for the creation and management of payments for bulk scan cases.", "methods": ["POST", "GET", "DELETE"], "paths": ["/payments", "/payments/<payment_reference>", "/payments/<payment_group_reference>"]}}
{"file": "cloned/ccpay-payment-app/api/src/functionalTest/java/uk/gov/hmcts/payment/functional/PaymentBulkscanPerformanceLiberataTest.java", "endpoints": {"api_summary": "This API is used to create and manage payments for bulk scan cases in the Divorce service.", "methods": ["POST", "GET", "DELETE"], "paths": ["/payments", "/payments/<payment_reference>", "/payments/<payment_group_reference>"]}}
{"file": "cloned/ccpay-payment-app/api/src/functionalTest/java/uk/gov/hmcts/payment/functional/OnlineCardPaymentFunctionalTest.java", "endpoints": {"api_summary": "This API allows users to create and retrieve card payments for various services, including Civil Money Claims, Immigration and Asylum Appeals, Adoption, and Family Private Law.", "methods": ["GET", "POST"], "paths": ["/payments", "/payments/<payment_reference>"]}}
{"file": "cloned/ccpay-payment-app/api/src/functionalTest/java/uk/gov/hmcts/payment/functional/PaymentsSearchFunctionalTest.java", "endpoints": {"api_summary": "This API allows users to search for payments made within a specified date range. It also allows users to create new payments and retrieve information about existing payments.", "methods": ["GET", "POST"], "paths": ["/payments/search", "/payments/create", "/payments/<payment_id>"]}}
{"file": "cloned/ccpay-payment-app/api/src/functionalTest/java/uk/gov/hmcts/payment/functional/TelephonyPaymentsTest.java", "endpoints": {"api_summary": "This API is a test suite for the payment service. It includes tests for creating and retrieving payments, as well as tests for the payment report.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/payments", "/payments/<payment_reference>", "/payments/report"]}}
{"file": "cloned/ccpay-payment-app/api/src/functionalTest/java/uk/gov/hmcts/payment/functional/ServiceRequestPaymentFunctionalTest.java", "endpoints": {"api_summary": "This API allows for the creation and management of service requests and payments for the HMCTS payment system.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/service-requests", "/service-requests/<service_request_reference>", "/service-requests/<service_request_reference>/payments", "/service-requests/<service_request_reference>/payments/<payment_reference>"]}}
{"file": "cloned/ccpay-payment-app/api/src/functionalTest/java/uk/gov/hmcts/payment/functional/RefDataFunctionalTest.java", "endpoints": {"api_summary": "The API provides a list of channels for a given reference data set.", "methods": ["GET"], "paths": ["/refdata/channels"]}}
{"file": "cloned/ccpay-payment-app/api/src/functionalTest/java/uk/gov/hmcts/payment/functional/BarPaymentFunctionalTest.java", "endpoints": {"api_summary": "This API allows for the creation and retrieval of payment records and the search of payments based on various criteria.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/payments", "/payments/<payment_reference>", "/payments/search"]}}
{"file": "cloned/ccpay-payment-app/api/src/functionalTest/java/uk/gov/hmcts/payment/functional/PaymentAmountTest.java", "endpoints": {"api_summary": "This API allows for the creation and management of payments, including card payments, PBA payments, and BAR payments. It also allows for the retrieval of payment information and the deletion of payment records.", "methods": ["POST", "GET", "DELETE"], "paths": ["/payments/card", "/payments/pba", "/payments/bar", "/payments/<payment_reference>", "/payments"]}}
{"file": "cloned/ccpay-payment-app/api/src/functionalTest/java/uk/gov/hmcts/payment/functional/s2s/S2sApi.java", "endpoints": {"api_summary": "The S2sApi interface defines a single REST API endpoint for generating a service token for a microservice. The endpoint accepts a POST request to /lease, with a JSON body containing the microservice name and one-time password. The response is a plain text string representing the service token.", "methods": ["POST"], "paths": ["/lease"]}}
{"file": "cloned/ccpay-payment-app/api/src/functionalTest/java/uk/gov/hmcts/payment/functional/idam/IdamApi.java", "endpoints": {"api_summary": "The IdamApi interface defines a set of REST API endpoints for managing user accounts and authenticating users. It includes endpoints for creating and deleting user accounts, as well as endpoints for authenticating users and exchanging authorization codes for access tokens.", "methods": ["POST", "DELETE", "GET"], "paths": ["/testing-support/accounts", "/oauth2/authorize", "/oauth2/token", "/o/token"]}}
{"file": "cloned/ccpay-payment-app/api/src/functionalTest/java/uk/gov/hmcts/payment/functional/service/RefDataTestService.java", "endpoints": {"api_summary": "The RefDataTestService API provides functionality for working with organisations in the payment system. It includes endpoints for creating, updating, and retrieving organisation information.", "methods": ["POST", "PUT"], "paths": ["/refdata/internal/v1/organisations", "/refdata/internal/v1/organisations/{organisationIdentifier}"]}}
{"file": "cloned/ccpay-payment-app/api/src/functionalTest/java/uk/gov/hmcts/payment/functional/service/ServiceRequestTestService.java", "endpoints": {"api_summary": "The ServiceRequestTestService API provides endpoints for creating and managing service requests, as well as retrieving payment groups and payment statuses.", "methods": ["POST", "GET"], "paths": ["/service-request", "/cases/{ccdcasenumber}/paymentgroups", "/service-request/{serviceRequestReference}/pba-payments", "/service-request/{service-request-reference}/card-payments", "/card-payments/{internal-reference}/status"]}}
{"file": "cloned/ccpay-payment-app/api/src/functionalTest/java/uk/gov/hmcts/payment/functional/service/PBAAccountsTestService.java", "endpoints": {"api_summary": "The PBAAccountsTestService API provides endpoints for retrieving and managing payment accounts for the Public Bank Accounts (PBA) service. It allows users to retrieve a list of their PBA accounts, create new accounts, and update existing accounts.", "methods": ["GET", "POST"], "paths": ["/pba-accounts"]}}
{"file": "cloned/ccpay-payment-app/api/src/functionalTest/java/uk/gov/hmcts/payment/functional/service/CaseTestService.java", "endpoints": {"api_summary": "The CaseTestService API provides endpoints for retrieving payment groups for a case in the CCD system. It uses the SerenityRest library for making HTTP requests and requires authentication using user and service tokens.", "methods": ["GET"], "paths": ["/cases/{ccdcasenumber}/paymentgroups"]}}
{"file": "cloned/ccpay-payment-app/api/src/functionalTest/java/uk/gov/hmcts/payment/functional/dsl/PaymentsTestDsl.java", "endpoints": {"api_summary": "This API provides functionality for managing payments, including creating payment groups, adding fees to payment groups, and retrieving payment information.", "methods": ["GET", "POST", "PUT", "PATCH"], "paths": ["/payment-groups", "/payment-groups/{payment-group-reference}", "/payments/{payment-reference}", "/accounts/{account-number}", "/info"]}}
{"file": "cloned/ccpay-payment-app/api/src/test/java/uk/gov/hmcts/payment/api/componenttests/CreditAccountPaymentControllerMockTest.java", "endpoints": {"api_summary": "The Credit Account Payment API allows for the retrieval and deletion of credit account payments.", "methods": ["GET", "DELETE"], "paths": ["/credit-account-payments/<payment_reference>"]}}
{"file": "cloned/ccpay-payment-app/api/src/test/java/uk/gov/hmcts/payment/api/componenttests/GovPayComponentMockTest.java", "endpoints": {"api_summary": "This API is a component test for the GovPay API. It tests the functionality of the GovPay API by making HTTP requests to the API and verifying the responses.", "methods": ["GET", "POST"], "paths": ["/v1/payments"]}}
{"file": "cloned/ccpay-payment-app/api/src/test/java/uk/gov/hmcts/payment/api/componenttests/serviceanduser/ServiceAndUserTestApplication.java", "endpoints": {"api_summary": "This API provides a test endpoint for the ServiceAndUserDetails authentication mechanism in the HMCTS payment API.", "methods": ["GET"], "paths": ["/test"]}}
{"file": "cloned/ccpay-payment-app/api/src/test/java/uk/gov/hmcts/payment/api/controllers/FeesControllerTest.java", "endpoints": {"api_summary": "This API provides endpoints for managing fees and remissions for the HMCTS payment system.", "methods": ["GET", "POST", "DELETE"], "paths": ["/payment-groups", "/fees/<feeId>", "/remissions"]}}
{"file": "cloned/ccpay-payment-app/api/src/test/java/uk/gov/hmcts/payment/api/v1/componenttests/PaymentsRefDataComponentTest.java", "endpoints": {"api_summary": "The Payments API provides endpoints for retrieving payment channels, methods, providers, and statuses. It allows users to retrieve a list of payment channels, methods, providers, and statuses, and to retrieve specific payment channels, methods, providers, and statuses by ID.", "methods": ["GET"], "paths": ["/refdata/channels", "/refdata/methods", "/refdata/providers", "/refdata/status"]}}
{"file": "cloned/ccpay-payment-app/api/src/test/java/uk/gov/hmcts/payment/api/mapper/ServiceRequestDtoDomainMapperTest.java", "endpoints": {"api_summary": "This API is responsible for mapping service requests to domain objects and creating payment requests for online card payments.", "methods": ["GET", "POST"], "paths": ["/service-requests", "/service-requests/<case_reference>", "/service-requests/<case_reference>/payments"]}}
{"file": "cloned/ccpay-payment-app/model/src/main/java/uk/gov/hmcts/payment/api/service/UserAwareDelegatingCreditAccountPaymentService.java", "endpoints": {"api_summary": "The UserAwareDelegatingCreditAccountPaymentService API provides endpoints for creating, retrieving, and deleting credit account payments, as well as searching for payments by date range.", "methods": ["POST", "GET", "DELETE"], "paths": ["/payments", "/payments/<payment_reference>", "/payments/search"]}}
{"file": "cloned/ccpay-payment-app/model/src/main/java/uk/gov/hmcts/payment/api/service/PaymentGroupServiceImpl.java", "endpoints": {"api_summary": "The PaymentGroupServiceImpl class provides methods for managing payment groups, including adding new fees, payments, and remissions, and searching for payment groups by CCD case number.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/payment-groups", "/payment-groups/<payment_group_reference>", "/payment-groups/<payment_group_reference>/fees", "/payment-groups/<payment_group_reference>/payments", "/payment-groups/<payment_group_reference>/remissions"]}}
{"file": "cloned/ccpay-payment-app/model/src/main/java/uk/gov/hmcts/payment/api/service/ReferenceDataServiceImpl.java", "endpoints": {"api_summary": "The ReferenceDataServiceImpl class provides a service to retrieve site IDs and organisational details from the reference data service. It uses the RestTemplatePaymentGroup to make HTTP requests to the reference data service.", "methods": ["GET"], "paths": ["/refdata/location/orgServices"]}}
{"file": "cloned/ccpay-payment-app/model/src/main/java/uk/gov/hmcts/payment/api/service/govpay/GovPayDelegatingPaymentService.java", "endpoints": {"api_summary": "The GovPayDelegatingPaymentService API allows for the creation, retrieval, and cancellation of payments using the GovPay service.", "methods": ["POST", "GET", "PUT", "DELETE"], "paths": ["/payments", "/payments/<payment_id>", "/payments/<payment_id>/cancel"]}}
{"file": "cloned/ccpay-payment-app/model/src/test/java/uk/gov/hmcts/payment/api/service/UserAwareDelegatingPaymentServiceTest.java", "endpoints": {"api_summary": "This API is responsible for managing payments for the HMCTS payment service. It allows for the creation of payments, retrieval of payment information, and management of payment statuses.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/payments", "/payments/<payment_id>", "/payments/<payment_id>/status"]}}
{"file": "cloned/ccpay-payment-app/reference-data/src/main/java/uk/gov/hmcts/payment/referencedata/controllers/ReferenceDataController.java", "endpoints": {"api_summary": "The Reference Data REST API provides information about allowed sites for payments.", "methods": ["GET"], "paths": ["/reference-data/sites"]}}
{"file": "cloned/ccpay-payment-app/case-payment-orders-client/src/main/java/uk/gov/hmcts/payment/casepaymentorders/client/CpoServiceClient.java", "endpoints": {"api_summary": "The Case Payment Orders API allows retrieving case payment orders by ID, case ID, or page number and size. It also allows creating and updating case payment orders.", "methods": ["GET", "POST", "PUT"], "paths": ["/case-payment-orders", "/case-payment-orders/<id>", "/case-payment-orders/<case_id>", "/case-payment-orders?page=<page_number>&size=<page_size>"]}}
{"file": "cloned/ccpay-payment-app/case-payment-orders-client/src/test/java/uk/gov/hmcts/payment/casepaymentorders/client/CpoServiceClientTest.java", "endpoints": {"api_summary": "The CpoServiceClientTest class provides a REST client for the Case Payment Orders API. It defines methods for retrieving case payment orders by ID or case ID, and for retrieving a list of case payment orders. The client also handles errors and exceptions that may occur during API calls.", "methods": ["GET", "POST"], "paths": ["/case-payment-orders/<id>", "/case-payment-orders?ids=<id>&page=<page>&size=<size>"]}}
{"file": "cloned/php-gaming-website/assets/js/Chat/ChatService.js", "endpoints": {"api_summary": "The ChatService API allows for writing and retrieving messages in a chat room. It provides two endpoints, one for writing a message and one for retrieving all messages in a chat room.", "methods": ["POST", "GET"], "paths": ["/api/chat/chats/<chatId>/write-message", "/api/chat/chats/<chatId>/messages"]}}
{"file": "cloned/php-gaming-website/assets/js/ConnectFour/GameService.js", "endpoints": {"api_summary": "The GameService API provides endpoints for playing a game of Connect Four. It allows users to join, move, resign, and abort games. The API also provides a redirect endpoint to the game page.", "methods": ["GET", "POST"], "paths": ["/game/<gameId>", "/api/connect-four/games/<gameId>/move", "/api/connect-four/games/<gameId>/abort", "/api/connect-four/games/<gameId>/resign", "/api/connect-four/games/<gameId>/join"]}}
{"file": "cloned/saleor/saleor/urls.py", "endpoints": {"api_summary": "This API provides endpoints for handling digital products, plugins, and thumbnails. It also includes a GraphQL endpoint for querying data and a JWKS endpoint for JSON Web Key Sets.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/graphql/", "/digital-download/<token>/", "/plugins/channel/<channel_slug>/<plugin_id>/", "/plugins/global/<plugin_id>/", "/plugins/<plugin_id>/", "/thumbnail/<instance_id>/<size>/<format>/", "/.well-known/jwks.json"]}}
{"file": "cloned/saleor/saleor/product/views.py", "endpoints": {"api_summary": "This API provides a direct download link to digital content if the given token is still valid.", "methods": ["GET"], "paths": ["/digital-product/<token>"]}}
{"file": "cloned/saleor/saleor/webhook/transport/list_stored_payment_methods.py", "endpoints": {"api_summary": "This API defines methods for managing stored payment methods and initializing tokenization sessions for payment gateways.", "methods": ["GET", "POST"], "paths": ["/list-stored-payment-methods", "/payment-gateway-initialize-tokenization", "/payment-method-tokenization"]}}
{"file": "cloned/saleor/saleor/webhook/response_schemas/payment.py", "endpoints": {"api_summary": "This API defines endpoints for managing payment methods and tokenization.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/payment-methods", "/payment-methods/<payment_method_id>", "/payment-methods/<payment_method_id>/tokenize"]}}
{"file": "cloned/saleor/saleor/tests/fixtures.py", "endpoints": {"api_summary": "This file defines several fixtures for testing.", "methods": ["GET", "POST", "PUT", "PATCH", "DELETE"], "paths": ["/api/v1/products/", "/api/v1/products/<int:product_id>/"]}}
{"file": "cloned/saleor/saleor/tests/e2e/product/test_should_create_variants_in_bulk.py", "endpoints": {"api_summary": "This API creates a product with few variants and updates its channel listing, creates variants with attributes, channel listing, and stock in bulk, and checks the product variants.", "methods": ["POST", "PUT", "GET"], "paths": ["/products", "/products/<product_id>/channel-listings", "/products/<product_id>/variants", "/products/<product_id>/variants/bulk"]}}
{"file": "cloned/saleor/saleor/tests/e2e/product/test_create_product_with_all_attributes_types.py", "endpoints": {"api_summary": "This API defines a product creation endpoint that allows users to create a product with various attributes, including dropdown, multiselect, date, datetime, plain text, rich text, numeric, boolean, swatch, reference, and file attributes.", "methods": ["POST"], "paths": ["/products/create"]}}
{"file": "cloned/saleor/saleor/tests/e2e/product/utils/collection.py", "endpoints": {"api_summary": "This API defines a single endpoint for creating a new collection in a GraphQL schema. The endpoint accepts a JSON object with a `name` field and returns a JSON object with the created collection's `id`, `name`, and `slug`.", "methods": ["POST"], "paths": ["/graphql/mutation/collectionCreate"]}}
{"file": "cloned/saleor/saleor/tests/e2e/product/utils/product_update.py", "endpoints": {"api_summary": "This API allows for the updating of product information, including name, product type, category, attributes, collections, and tax class. It also allows for the retrieval of product information.", "methods": ["POST"], "paths": ["/products/<product_id>"]}}
{"file": "cloned/saleor/saleor/tests/e2e/product/utils/category.py", "endpoints": {"api_summary": "This API defines a single endpoint for creating a new category. The endpoint accepts a JSON object with a name field and returns a JSON object with the created category's ID and name.", "methods": ["POST"], "paths": ["/categories"]}}
{"file": "cloned/saleor/saleor/tests/e2e/product/utils/product_variant_bulk_create.py", "endpoints": {"api_summary": "This API allows for the bulk creation of product variants. It takes a product ID and a list of variant inputs, and returns a list of created product variants.", "methods": ["POST"], "paths": ["/product-variants/bulk-create"]}}
{"file": "cloned/saleor/saleor/tests/e2e/product/utils/__init__.py", "endpoints": {"api_summary": "This API defines endpoints for creating and managing products, product types, and product variants. It also includes endpoints for creating and managing digital content, collections, and collection listings.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/categories", "/digital-content", "/product-types", "/products", "/product-variants", "/collections", "/collection-listings"]}}
{"file": "cloned/saleor/saleor/tests/e2e/orders/test_order_fulfill_and_add_tracking.py", "endpoints": {"api_summary": "This API defines endpoints for creating, updating, and fulfilling orders, as well as adding tracking information to orders.", "methods": ["POST", "PUT", "GET"], "paths": ["/orders", "/orders/<order_id>", "/orders/<order_id>/fulfill", "/orders/<order_id>/tracking"]}}
{"file": "cloned/saleor/saleor/tests/e2e/orders/test_order_create_invoice_with_metadata.py", "endpoints": {"api_summary": "This API defines endpoints for creating, updating, and querying orders, as well as creating invoices for fulfilled orders.", "methods": ["POST", "PUT", "GET"], "paths": ["/orders", "/orders/<order_id>", "/orders/<order_id>/invoice"]}}
{"file": "cloned/saleor/saleor/tests/e2e/orders/test_order_in_channel_with_transaction_flow_as_mark_as_paid_strategy.py", "endpoints": {"api_summary": "This API defines a set of endpoints for creating, updating, and querying orders in a shop. It also includes endpoints for marking orders as paid and for retrieving information about orders.", "methods": ["POST", "PUT", "GET"], "paths": ["/orders", "/orders/<order_id>", "/orders/<order_id>/mark-as-paid", "/orders/<order_id>/query"]}}
{"file": "cloned/saleor/saleor/tests/e2e/orders/test_able_to_decide_if_address_is_saved_in_user_address_book.py", "endpoints": {"api_summary": "This API allows you to create, update, and complete orders, as well as manage user addresses.", "methods": ["POST", "PUT", "GET"], "paths": ["/order/create", "/order/update", "/order/complete", "/user/address"]}}
{"file": "cloned/saleor/saleor/tests/e2e/orders/test_able_to_update_draft_order_after_bulk_order_creation_with_line_discount.py", "endpoints": {"api_summary": "This API is used to create and update orders in a shop. It allows for bulk order creation, order updates, and order querying.", "methods": ["POST", "PUT", "GET"], "paths": ["/order/bulk-create", "/order/update/<order_id>", "/order/<order_id>"]}}
{"file": "cloned/saleor/saleor/tests/e2e/orders/test_order_cancel_fulfillment.py", "endpoints": {"api_summary": "This API defines endpoints for creating, updating, and fulfilling orders, as well as marking orders as paid and canceling fulfillments.", "methods": ["POST", "PUT", "GET", "DELETE"], "paths": ["/orders", "/orders/<order_id>", "/orders/<order_id>/fulfillments", "/orders/<order_id>/fulfillments/<fulfillment_id>"]}}
{"file": "cloned/saleor/saleor/tests/e2e/orders/discounts/test_apply_better_promotion_to_product.py", "endpoints": {"api_summary": "This API defines a set of endpoints for creating and managing promotions, including creating promotion rules, assigning products to promotions, and calculating discounts for products.", "methods": ["POST", "GET", "PUT", "DELETE"], "paths": ["/promotions", "/promotions/<promotion_id>", "/promotions/<promotion_id>/rules", "/promotions/<promotion_id>/products"]}}
{"file": "cloned/saleor/saleor/tests/e2e/orders/discounts/test_order_products_on_percentage_sale.py", "endpoints": {"api_summary": "This API defines a set of endpoints for creating, updating, and completing draft orders, as well as adding products and shipping methods to orders.", "methods": ["POST", "PUT", "GET"], "paths": ["/draft-order/create", "/draft-order/update", "/draft-order/complete", "/order/lines/create", "/order/shipping-method/add"]}}
{"file": "cloned/saleor/saleor/tests/e2e/orders/discounts/test_order_product_with_percentage_promotion.py", "endpoints": {"api_summary": "This API defines a set of endpoints for creating, updating, and retrieving orders, including the ability to apply discounts and promotions to orders.", "methods": ["POST", "PUT", "GET"], "paths": ["/orders", "/orders/<order_id>", "/orders/<order_id>/discounts", "/orders/<order_id>/promotions"]}}
{"file": "cloned/saleor/saleor/tests/e2e/orders/discounts/test_order_products_on_fixed_sale.py", "endpoints": {"api_summary": "This API defines a set of endpoints for creating, updating, and completing draft orders, as well as adding products and shipping methods to orders.", "methods": ["POST", "PUT", "GET"], "paths": ["/draft-order/create", "/draft-order/update", "/draft-order/complete", "/order/lines/create", "/order/shipping-method"]}}
{"file": "cloned/saleor/saleor/tests/e2e/orders/discounts/test_gift_promotion_applied_on_draft_order.py", "endpoints": {"api_summary": "This API defines a set of endpoints for creating, updating, and retrieving orders, including order lines, shipping, and taxes.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/orders", "/orders/<order_id>", "/orders/<order_id>/lines", "/orders/<order_id>/shipping", "/orders/<order_id>/taxes"]}}
{"file": "cloned/saleor/saleor/tests/e2e/orders/discounts/test_order_voucher_is_released_when_draft_order_is_deleted.py", "endpoints": {"api_summary": "This API defines a set of endpoints for creating, deleting, and querying draft orders, as well as managing vouchers and their usage.", "methods": ["POST", "DELETE", "GET"], "paths": ["/draft-order/create", "/draft-order/delete", "/draft-order/query", "/voucher/create", "/voucher/delete", "/voucher/query"]}}
{"file": "cloned/saleor/saleor/tests/e2e/orders/discounts/test_order_voucher_free_shipping.py", "endpoints": {"api_summary": "This API defines a draft order with voucher free shipping, including creating a product, warehouse, shipping method, and updating tax configuration. It also includes steps to create a draft order, add order lines, add a shipping method, add a voucher, and complete the draft order.", "methods": ["POST", "PUT", "GET"], "paths": ["/draft-order", "/draft-order/<order_id>", "/draft-order/<order_id>/lines", "/draft-order/<order_id>/shipping", "/draft-order/<order_id>/voucher", "/draft-order/<order_id>/complete"]}}
{"file": "cloned/saleor/saleor/tests/e2e/orders/discounts/test_promotion_applied_on_draft_order_with_specific_total.py", "endpoints": {"api_summary": "This API defines a set of endpoints for creating, updating, and retrieving orders, including order lines, shipping methods, and discounts.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/orders", "/orders/<order_id>", "/orders/<order_id>/lines", "/orders/<order_id>/shipping", "/orders/<order_id>/discounts"]}}
{"file": "cloned/saleor/saleor/tests/e2e/orders/discounts/test_order_products_on_promotion_and_manual_order_discount.py", "endpoints": {"api_summary": "This API defines a set of endpoints for creating, updating, and completing orders, as well as adding discounts to orders. It also includes endpoints for creating and managing promotions and promotion rules.", "methods": ["POST", "PUT", "GET", "DELETE"], "paths": ["/orders", "/orders/<order_id>", "/orders/<order_id>/discounts", "/promotions", "/promotions/<promotion_id>", "/promotions/<promotion_id>/rules"]}}
{"file": "cloned/saleor/saleor/tests/e2e/orders/discounts/test_order_products_on_fixed_promotion.py", "endpoints": {"api_summary": "This API defines a set of endpoints for creating, updating, and retrieving orders, including the ability to apply discounts and promotions to orders.", "methods": ["POST", "PUT", "GET"], "paths": ["/orders", "/orders/<order_id>", "/orders/<order_id>/discounts", "/orders/<order_id>/promotions"]}}
{"file": "cloned/saleor/saleor/tests/e2e/orders/zero_total/test_0_total_order_with_100_percent_manual_discount.py", "endpoints": {"api_summary": "This API is used to create, update, and complete draft orders in a shop. It also allows for adding discounts to orders.", "methods": ["POST", "PUT", "GET"], "paths": ["/orders/draft", "/orders/<order_id>/complete", "/orders/<order_id>/discounts"]}}
{"file": "cloned/saleor/saleor/tests/e2e/orders/taxes/test_order_calculate_simple_taxes_product_type_tax_class.py", "endpoints": {"api_summary": "This API defines a set of endpoints for creating, updating, and retrieving orders in an e-commerce system.", "methods": ["POST", "PUT", "GET"], "paths": ["/orders", "/orders/<order_id>", "/orders/<order_id>/update"]}}
{"file": "cloned/saleor/saleor/tests/e2e/checkout/test_buy_gift_card_in_the_checkout.py", "endpoints": {"api_summary": "This API defines a gift card checkout process, allowing customers to purchase gift cards and complete the checkout process.", "methods": ["GET", "POST"], "paths": ["/checkout", "/checkout/complete", "/checkout/payment", "/orders"]}}
{"file": "cloned/saleor/saleor/tests/e2e/checkout/shipping/test_use_external_shipping_methods_in_checkout.py", "endpoints": {"api_summary": "This API defines a checkout process for a product, including creating a checkout, setting a delivery method, creating a payment, and completing the checkout. The API also includes a webhook for external shipping methods.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/checkout", "/checkout/<checkout_id>", "/checkout/<checkout_id>/delivery-method", "/checkout/<checkout_id>/payment", "/checkout/<checkout_id>/complete"]}}
{"file": "cloned/saleor/saleor/tests/e2e/checkout/utils/checkout_remove_promo_code.py", "endpoints": {"api_summary": "This API allows clients to remove promo codes from a checkout. It takes a checkout ID and a voucher code as input, and returns the updated checkout information, including the total price and any errors that occurred during the removal process.", "methods": ["POST"], "paths": ["/checkout/<checkout_id>/remove-promo-code"]}}
{"file": "cloned/saleor/saleor/tests/e2e/checkout/discounts/sales/test_checkout_custom_price_and_percentage_sale.py", "endpoints": {"api_summary": "This API defines a checkout process for a product, including creating a checkout, setting a delivery method, updating the checkout line with a custom price, creating a payment, and completing the checkout. The API also includes a test for the checkout process.", "methods": ["POST", "PUT", "GET"], "paths": ["/checkout/create", "/checkout/delivery-method", "/checkout/lines", "/checkout/payment", "/checkout/complete"]}}
{"file": "cloned/saleor/saleor/tests/e2e/checkout/discounts/sales/test_checkout_custom_price_and_fixed_sale.py", "endpoints": {"api_summary": "This API defines a checkout process for a product, including creating a checkout, setting a delivery method, updating the checkout line with a custom price, creating a payment, and completing the checkout. The API also includes a test for the checkout process.", "methods": ["POST", "PUT", "GET"], "paths": ["/checkout/create", "/checkout/delivery-method", "/checkout/lines", "/checkout/payment", "/checkout/complete"]}}
{"file": "cloned/saleor/saleor/tests/e2e/checkout/discounts/vouchers/test_checkout_voucher_is_still_active_when_checkout_fails.py", "endpoints": {"api_summary": "This API defines a set of endpoints for creating and managing checkouts, including adding voucher codes and completing the checkout process.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/checkout", "/checkout/<checkout_id>", "/checkout/<checkout_id>/voucher", "/checkout/<checkout_id>/complete"]}}
{"file": "cloned/saleor/saleor/tests/e2e/checkout/discounts/vouchers/test_checkout_with_free_shipping_voucher_with_min_quantity_of_items.py", "endpoints": {"api_summary": "This API defines a checkout process for a product, including adding a voucher code for free shipping, and completing the checkout.", "methods": ["GET", "POST"], "paths": ["/checkout", "/checkout/add-promo-code", "/checkout/complete"]}}
{"file": "cloned/saleor/saleor/tests/e2e/checkout/discounts/vouchers/test_checkout_with_fixed_voucher.py", "endpoints": {"api_summary": "This API defines a checkout process for a fictional e-commerce platform. It includes endpoints for creating a checkout, adding a voucher code, completing the checkout, and creating a payment.", "methods": ["POST", "PUT", "GET"], "paths": ["/checkout/create", "/checkout/add-voucher", "/checkout/complete", "/checkout/payment"]}}
{"file": "cloned/saleor/saleor/tests/e2e/checkout/discounts/vouchers/test_checkout_with_free_shipping_voucher_with_min_spent_amount.py", "endpoints": {"api_summary": "This API defines a checkout process for a product, including adding a voucher code for free shipping, and completing the checkout.", "methods": ["GET", "POST"], "paths": ["/checkout", "/checkout/add-promo-code", "/checkout/complete"]}}
{"file": "cloned/saleor/saleor/tests/e2e/checkout/discounts/vouchers/test_checkout_with_voucher_with_min_item_quantity.py", "endpoints": {"api_summary": "This API defines a checkout process for a store, allowing customers to add items to their cart, apply discounts, and complete their purchase.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/checkout", "/checkout/lines", "/checkout/delivery-method", "/checkout/payment", "/checkout/complete"]}}
{"file": "cloned/saleor/saleor/tests/e2e/checkout/discounts/vouchers/test_checkout_with_voucher_limit_per_customer.py", "endpoints": {"api_summary": "This API defines a checkout process for a customer, allowing them to purchase a product using a voucher code. The API also includes endpoints for creating and managing vouchers.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/checkout", "/vouchers"]}}
{"file": "cloned/saleor/saleor/tests/e2e/checkout/discounts/vouchers/test_checkout_with_fixed_voucher_should_not_result_in_negative_variant_price.py", "endpoints": {"api_summary": "This API defines a checkout process for a product, including adding a voucher code, creating a payment, and completing the checkout.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/checkout", "/checkout/voucher", "/checkout/payment", "/checkout/complete"]}}
{"file": "cloned/saleor/saleor/tests/e2e/checkout/discounts/vouchers/test_checkout_unable_to_use_deleted_voucher_code.py", "endpoints": {"api_summary": "This API defines a set of endpoints for managing vouchers and their codes, as well as creating and manipulating checkouts.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/vouchers", "/vouchers/<voucher_id>", "/vouchers/<voucher_id>/codes", "/checkouts", "/checkouts/<checkout_id>"]}}
{"file": "cloned/saleor/saleor/tests/e2e/checkout/discounts/vouchers/test_checkout_unable_to_use_deleted_voucher.py", "endpoints": {"api_summary": "This API defines a set of endpoints for managing vouchers and discounts in an e-commerce platform.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/vouchers", "/vouchers/<voucher_id>", "/vouchers/<voucher_id>/channel-listings", "/checkouts/<checkout_id>/promo-code"]}}
{"file": "cloned/saleor/saleor/tests/e2e/checkout/discounts/vouchers/test_checkout_unable_to_update_single_use_settings_after_usage.py", "endpoints": {"api_summary": "This API defines a set of endpoints for creating and managing vouchers, as well as endpoints for creating and managing checkouts and payments.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/vouchers", "/vouchers/<voucher_id>", "/checkouts", "/checkouts/<checkout_id>", "/payments", "/payments/<payment_id>"]}}
{"file": "cloned/saleor/saleor/tests/e2e/checkout/discounts/vouchers/test_checkout_unable_to_exceed_voucher_usage_limit.py", "endpoints": {"api_summary": "This API defines a set of endpoints for creating and managing vouchers, as well as endpoints for creating and managing checkouts.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/vouchers", "/vouchers/<voucher_id>", "/checkouts", "/checkouts/<checkout_id>"]}}
{"file": "cloned/saleor/saleor/tests/e2e/checkout/discounts/vouchers/test_checkout_unable_to_use_expired_voucher.py", "endpoints": {"api_summary": "This API defines a set of endpoints for creating and managing checkouts, including adding vouchers and completing payments.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/checkout", "/checkout/<checkout_id>", "/checkout/<checkout_id>/voucher", "/checkout/<checkout_id>/payment"]}}
{"file": "cloned/saleor/saleor/tests/e2e/checkout/discounts/vouchers/test_checkout_use_voucher_for_cheapest_product.py", "endpoints": {"api_summary": "This API defines a set of endpoints for creating and managing checkouts, including adding and removing vouchers, setting delivery methods, and completing checkouts.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/checkout/create", "/checkout/delivery-method", "/checkout/add-voucher", "/checkout/remove-voucher", "/checkout/complete"]}}
{"file": "cloned/saleor/saleor/tests/e2e/checkout/discounts/vouchers/test_checkout_voucher_is_still_active_when_payment_fails.py", "endpoints": {"api_summary": "This API defines a checkout process for a fictional e-commerce platform, including adding a voucher code, setting a delivery method, and creating a payment. The API also checks if the voucher code is still active after a failed payment.", "methods": ["GET", "POST"], "paths": ["/checkout", "/checkout/delivery-method", "/checkout/payment"]}}
{"file": "cloned/saleor/saleor/tests/e2e/checkout/discounts/promotions/test_checkout_custom_price_and_percentage_promotion.py", "endpoints": {"api_summary": "This API defines a checkout process for a product, including creating a checkout, setting a delivery method, updating checkout lines, creating a payment, and completing the checkout. The API also includes a promotion rule for a percentage discount on a product.", "methods": ["POST", "PUT", "GET"], "paths": ["/checkout/create", "/checkout/delivery-method-update", "/checkout/lines-update", "/checkout/dummy-payment-create", "/checkout/complete"]}}
{"file": "cloned/saleor/saleor/tests/e2e/checkout/discounts/promotions/test_checkout_custom_price_and_fixed_promotion.py", "endpoints": {"api_summary": "This API defines a checkout process for a product, including creating a checkout, setting a delivery method, updating the checkout line with a custom price, creating a payment, and completing the checkout. The API also includes a promotion for a fixed discount on a product.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/checkout", "/checkout/delivery-method", "/checkout/lines", "/checkout/payment", "/checkout/complete"]}}
{"file": "cloned/saleor/saleor/tests/e2e/checkout/zero_total/test_0_total_checkout_catalog_promotion_and_shipping_voucher.py", "endpoints": {"api_summary": "This API defines a checkout process for a fictional e-commerce platform, including adding products, applying discounts, and completing the checkout.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/checkout", "/checkout/lines", "/checkout/delivery-method", "/checkout/complete"]}}
{"file": "cloned/saleor/saleor/tests/e2e/checkout/taxes/test_checkout_calculate_simple_taxes_product_type_tax_class.py", "endpoints": {"api_summary": "This API defines a checkout process for a product, including creating a checkout, setting a delivery method, creating a payment, and completing the checkout.", "methods": ["POST", "PUT", "GET"], "paths": ["/checkout", "/checkout/delivery-method", "/checkout/payment", "/checkout/complete"]}}
{"file": "cloned/saleor/saleor/tests/e2e/warehouse/utils/create_warehouse.py", "endpoints": {"api_summary": "This API defines a single endpoint for creating a warehouse, which allows users to create a new warehouse with a unique name, slug, and address. The endpoint returns the created warehouse's ID, name, slug, and shipping zones.", "methods": ["POST"], "paths": ["/warehouse/create"]}}
{"file": "cloned/saleor/saleor/tests/e2e/sales/utils/sale_catalogues_add.py", "endpoints": {"api_summary": "This API defines a mutation for adding a catalogue to a sale. It takes an ID, input, and first as parameters and returns a sale object with errors, channel listings, categories, collections, products, and variants.", "methods": ["POST"], "paths": ["/saleCataloguesAdd"]}}
{"file": "cloned/saleor/saleor/tests/e2e/webhooks/utils.py", "endpoints": {"api_summary": "This API allows for the creation of webhooks, which can be used to trigger events in response to specific actions in the system. The API supports both synchronous and asynchronous event handling, and allows for custom headers to be specified for each webhook.", "methods": ["POST"], "paths": ["/webhook/create"]}}
{"file": "cloned/saleor/saleor/tests/e2e/account/utils/staff_create.py", "endpoints": {"api_summary": "The API allows for the creation of staff members, with the ability to set metadata and private metadata for each user. It also allows for retrieving the details of a specific staff member.", "methods": ["POST"], "paths": ["/staff/create", "/staff/<built-in function id>"]}}
{"file": "cloned/saleor/saleor/tests/e2e/account/utils/create_customer.py", "endpoints": {"api_summary": "This API allows for the creation of a new customer, including their email, metadata, and private metadata. It also allows for the retrieval of customer data by ID.", "methods": ["POST"], "paths": ["/customers/create", "/customers/<built-in function id>"]}}
{"file": "cloned/saleor/saleor/tests/e2e/account/utils/staff_update.py", "endpoints": {"api_summary": "The API allows for the updating of staff information, including metadata and private metadata, and returns the updated user data.", "methods": ["POST"], "paths": ["/staff/<built-in function id>"]}}
{"file": "cloned/saleor/saleor/tests/e2e/account/utils/account_address_delete.py", "endpoints": {"api_summary": "This API allows for the deletion of a user's address. It takes an ID as input and returns the user's ID and any errors that occurred during the deletion process.", "methods": ["POST"], "paths": ["/account/address/delete"]}}
{"file": "cloned/saleor/saleor/tests/e2e/vouchers/utils/voucher_catalogues_add.py", "endpoints": {"api_summary": "This API defines a mutation for adding a catalogue to a voucher. It takes in an ID for the voucher and a list of products to add to the catalogue. The API returns the updated voucher data, including the ID, code, type, discount value type, channel listings, and products.", "methods": ["POST"], "paths": ["/voucherCataloguesAdd"]}}
{"file": "cloned/saleor/saleor/tests/e2e/pages/utils/page_create.py", "endpoints": {"api_summary": "This API defines a single endpoint for creating a new page in a website or application. The endpoint accepts a JSON payload with various fields, including the page title, content, and attributes. The endpoint returns a JSON object with the created page's ID and other metadata.", "methods": ["POST"], "paths": ["/pages/create"]}}
{"file": "cloned/saleor/saleor/tests/e2e/promotions/test_staff_can_create_promotion_for_collections.py", "endpoints": {"api_summary": "This file defines a REST API for creating and managing promotions for a collection of products.", "methods": ["POST", "GET"], "paths": ["/promotions", "/promotions/<promotion_id>", "/promotions/<promotion_id>/rules"]}}
{"file": "cloned/saleor/saleor/tests/e2e/promotions/test_sale_updated_by_promotion_can_not_be_handled_by_sales.py", "endpoints": {"api_summary": "This API defines a set of endpoints for managing sales, including creating, updating, and retrieving sales and their associated data.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/sales", "/sales/<sale_id>", "/sales/<sale_id>/channels", "/sales/<sale_id>/catalogues"]}}
{"file": "cloned/saleor/saleor/tests/e2e/promotions/test_unable_to_query_nor_mutate_sale_updated_by_promotion_translations.py", "endpoints": {"api_summary": "This API defines a set of endpoints for managing sales, including creating, updating, and querying sales. It also includes endpoints for translating sales and updating sale channel listings.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/sales", "/sales/<sale_id>", "/sales/<sale_id>/translations", "/sales/<sale_id>/channel-listings"]}}
{"file": "cloned/saleor/saleor/tests/e2e/promotions/test_staff_can_change_channel_in_promotion_rule.py", "endpoints": {"api_summary": "This API defines a promotion rule for a product, allowing the staff to change the promotion rule's channel and check if the promotion is applied for the product on the second channel.", "methods": ["GET", "POST"], "paths": ["/promotion/<promotion_id>/rule/<promotion_rule_id>", "/product/<product_id>/channel/<channel_id>"]}}
{"file": "cloned/saleor/saleor/tests/e2e/apps/utils/app_create.py", "endpoints": {"api_summary": "The API allows for the creation of new apps, with the ability to retrieve and update app information. It also provides authentication and authorization for app-related operations.", "methods": ["POST"], "paths": ["/apps/create", "/apps/<app_id>"]}}
{"file": "cloned/saleor/saleor/checkout/complete_checkout.py", "endpoints": {"api_summary": "This code defines several endpoints for creating and processing orders in an e-commerce application.", "methods": ["prepare_order_data", "create_order", "complete_checkout", "complete_checkout_with_transaction", "complete_checkout_with_payment", "reserve_stocks_without_availability_check", "complete_checkout_fail_handler"]}}
{"file": "cloned/saleor/saleor/checkout/checkout_cleaner.py", "endpoints": {"api_summary": "This file defines a set of functions for validating and cleaning checkout data before creating an order.", "methods": ["GET", "POST"], "paths": ["/checkout/validate", "/checkout/clean"]}}
{"file": "cloned/saleor/saleor/payment/tests/test_gateway.py", "endpoints": {"api_summary": "This file defines a number of functions related to payment processing, including processing payments, refunding payments, and voiding payments.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/payment/process", "/api/payment/refund", "/api/payment/void"]}}
{"file": "cloned/saleor/saleor/payment/tests/test_payment.py", "endpoints": {"api_summary": "This API defines a payment gateway for the Saleor e-commerce platform. It includes endpoints for creating, capturing, and refunding payments, as well as handling payment errors.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/payments", "/payments/<payment_id>", "/payments/<payment_id>/capture", "/payments/<payment_id>/refund"]}}
{"file": "cloned/saleor/saleor/payment/gateways/authorize_net/plugin.py", "endpoints": {"api_summary": "The Authorize.Net plugin provides payment processing services through the Authorize.Net gateway. It supports various payment methods and can be configured to use the sandbox environment for testing.", "methods": ["GET", "POST"], "paths": ["/authorize-net/authorize", "/authorize-net/capture", "/authorize-net/refund", "/authorize-net/void", "/authorize-net/process-payment", "/authorize-net/list-payment-sources", "/authorize-net/get-supported-currencies", "/authorize-net/get-payment-config"]}}
{"file": "cloned/saleor/saleor/payment/gateways/np_atobarai/__init__.py", "endpoints": {"api_summary": "This API is used to process payments and refunds using the NP Atobarai payment gateway. It supports various payment methods and provides a simple interface for capturing and refunding payments.", "methods": ["POST", "GET"], "paths": ["/process-payment", "/capture", "/void", "/refund"]}}
{"file": "cloned/saleor/saleor/payment/gateways/np_atobarai/api.py", "endpoints": {"api_summary": "This API is responsible for managing transactions with NP Atobarai, including registering, cancelling, and changing transactions, as well as reporting fulfillment.", "methods": ["GET", "POST", "PATCH"], "paths": ["/transactions/register", "/transactions/cancel", "/transactions/update", "/fulfillment/report"]}}
{"file": "cloned/saleor/saleor/payment/gateways/np_atobarai/plugin.py", "endpoints": {"api_summary": "This API provides payment processing for NP\u5f8c\u6255\u3044 transactions. It supports various payment methods and allows for refunds and voids.", "methods": ["GET", "POST"], "paths": ["/np-atobarai/capture", "/np-atobarai/refund", "/np-atobarai/void"]}}
{"file": "cloned/saleor/saleor/payment/gateways/dummy_credit_card/tests/test_dummy_credit_card.py", "endpoints": {"api_summary": "This API defines a payment gateway for the Dummy Credit Card payment method. It includes endpoints for authorizing, capturing, and refunding payments.", "methods": ["GET", "POST"], "paths": ["/authorize", "/capture", "/refund"]}}
{"file": "cloned/saleor/saleor/payment/gateways/adyen/plugin.py", "endpoints": {"api_summary": "This API is used to handle payments with Adyen.", "methods": ["GET", "POST"], "paths": ["/webhooks", "/additional-actions"]}}
{"file": "cloned/saleor/saleor/core/views.py", "endpoints": {"api_summary": "This API provides a homepage for a web application and a JSON Web Key Set (JWKS) endpoint for authentication.", "methods": ["GET", "POST"], "paths": ["/", "/jwks"]}}
{"file": "cloned/saleor/saleor/core/tests/test_core.py", "endpoints": {"api_summary": "This file defines a REST API for creating and managing products, including product types, attributes, and attribute values. It also includes endpoints for creating and managing orders, customers, and gift cards.", "methods": ["GET", "POST", "PUT", "PATCH", "DELETE"], "paths": ["/products", "/products/<product_id>", "/products/<product_id>/types", "/products/<product_id>/attributes", "/products/<product_id>/attributes/<attribute_id>", "/orders", "/orders/<order_id>", "/customers", "/customers/<customer_id>", "/gift-cards", "/gift-cards/<gift_card_id>"]}}
{"file": "cloned/saleor/saleor/core/utils/random_data.py", "endpoints": {"api_summary": "This API defines a set of endpoints for managing products, orders, and customers in an e-commerce store.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/products", "/products/<product_id>", "/orders", "/orders/<order_id>", "/customers", "/customers/<customer_id>"]}}
{"file": "cloned/saleor/saleor/graphql/api.py", "endpoints": {"api_summary": "This API provides a GraphQL interface for interacting with the Saleor e-commerce platform. It includes endpoints for managing accounts, products, orders, and more.", "methods": ["GET", "POST"], "paths": ["/api"]}}
{"file": "cloned/saleor/saleor/graphql/product/resolvers.py", "endpoints": {"api_summary": "This API provides information about products, product types, and product variants, as well as the ability to create, update, and delete products and product variants.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/products", "/product-types", "/product-variants"]}}
{"file": "cloned/saleor/saleor/graphql/product/tests/test_product_filtering_and_sorting_with_channels.py", "endpoints": {"api_summary": "This API defines a set of endpoints for managing products and product variants in an e-commerce application.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/products", "/products/<product_id>", "/products/<product_id>/variants", "/products/<product_id>/variants/<variant_id>"]}}
{"file": "cloned/saleor/saleor/graphql/product/tests/test_bulk_delete.py", "endpoints": {"api_summary": "Bulk delete products, categories, collections, product variants, and product types.", "methods": ["POST"], "endpoints": [{"name": "productBulkDelete", "path": "/api/v1/products/bulk-delete/", "methods": ["POST"], "description": "Bulk delete products."}, {"name": "categoryBulkDelete", "path": "/api/v1/categories/bulk-delete/", "methods": ["POST"], "description": "Bulk delete categories."}, {"name": "collectionBulkDelete", "path": "/api/v1/collections/bulk-delete/", "methods": ["POST"], "description": "Bulk delete collections."}, {"name": "productVariantBulkDelete", "path": "/api/v1/product-variants/bulk-delete/", "methods": ["POST"], "description": "Bulk delete product variants."}, {"name": "productTypeBulkDelete", "path": "/api/v1/product-types/bulk-delete/", "methods": ["POST"], "description": "Bulk delete product types."}]}}
{"file": "cloned/saleor/saleor/graphql/product/tests/deprecated/test_product_sorting.py", "endpoints": {"api_summary": "This API allows for sorting and pagination of products and collections by publication date.", "methods": ["GET"], "paths": ["/products", "/collections"]}}
{"file": "cloned/saleor/saleor/graphql/product/tests/benchmark/test_product_bulk_create.py", "endpoints": {"api_summary": "This API allows for the bulk creation of products, including their attributes, variants, and channel listings. It also supports the creation of products with rich text descriptions.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/product/bulk_mutations/category_bulk_delete.py", "endpoints": {"api_summary": "The API allows for bulk deletion of categories. It takes a list of category IDs as input and deletes the corresponding categories. The API also includes permissions and error handling.", "methods": ["DELETE"], "paths": ["/api/v1/categories/bulk-delete"]}}
{"file": "cloned/saleor/saleor/graphql/product/bulk_mutations/product_variant_stocks_update.py", "endpoints": {"api_summary": "Update stocks for product variant.", "methods": ["POST"], "paths": ["/products/<product_id>/variants/<variant_id>/stocks"]}}
{"file": "cloned/saleor/saleor/graphql/product/bulk_mutations/product_media_bulk_delete.py", "endpoints": {"api_summary": "The ProductMediaBulkDelete API allows for the deletion of product media in bulk. It takes a list of product media IDs as input and returns a list of errors, if any, and the deleted media IDs.", "methods": ["DELETE"], "paths": ["/api/product-media/bulk-delete"]}}
{"file": "cloned/saleor/saleor/graphql/product/mutations/product/product_update.py", "endpoints": {"api_summary": "This API updates an existing product.", "methods": ["PUT"], "paths": ["/products/<product_id>"]}}
{"file": "cloned/saleor/saleor/graphql/product/mutations/product/product_media_create.py", "endpoints": {"api_summary": "This API allows you to create a media object (image or video URL) associated with a product. It also allows you to retrieve information about the media object and the product it is associated with.", "methods": ["POST"], "paths": ["/products/<product_id>/media"]}}
{"file": "cloned/saleor/saleor/graphql/product/mutations/product/product_media_delete.py", "endpoints": {"api_summary": "The ProductMediaDelete API allows for the deletion of a product media. It takes an ID as input and returns the deleted product media object.", "methods": ["DELETE"], "paths": ["/products/<product_id>/media/<media_id>"]}}
{"file": "cloned/saleor/saleor/graphql/product/mutations/category/category_create.py", "endpoints": {"api_summary": "This API defines a mutation for creating a new category. It takes in a category input object, which includes fields for the category name, slug, description, and other metadata. The API also supports uploading a background image for the category.", "methods": ["POST"], "paths": ["/api/category/create"]}}
{"file": "cloned/saleor/saleor/graphql/product/mutations/category/category_delete.py", "endpoints": {"api_summary": "The API allows for the deletion of a category, which is a hierarchical structure used to organize products in an e-commerce system. The API endpoint accepts a category ID as input and deletes the corresponding category, as well as any subcategories it may have.", "methods": ["DELETE"], "paths": ["/api/v1/categories/<built-in function id>"]}}
{"file": "cloned/saleor/saleor/graphql/product/mutations/collection/collection_create.py", "endpoints": {"api_summary": "This API defines a collection of products, including the ability to create, update, and delete collections, as well as retrieve and search for collections.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/collections", "/collections/<collection_id>", "/collections/<collection_id>/products"]}}
{"file": "cloned/saleor/saleor/graphql/product/mutations/collection/collection_reorder_products.py", "endpoints": {"api_summary": "This API allows for the reordering of products within a collection.", "methods": ["POST"], "paths": ["/collections/<collection_id>/reorder-products"]}}
{"file": "cloned/saleor/saleor/graphql/product/mutations/product_variant/product_variant_reorder.py", "endpoints": {"api_summary": "This API allows for the reordering of product variants. It takes a product ID and a list of variant reordering operations as input, and updates the order of the variants accordingly.", "methods": ["POST"], "paths": ["/products/<product_id>/variants/reorder"]}}
{"file": "cloned/saleor/saleor/graphql/product/mutations/product_variant/product_variant_delete.py", "endpoints": {"api_summary": "This API defines a product variant delete endpoint. It allows to delete a product variant by ID, external reference, or SKU. The endpoint returns a success response with the deleted variant data.", "methods": ["DELETE"], "paths": ["/api/v1/products/<product_id>/variants/<variant_id>"]}}
{"file": "cloned/saleor/saleor/graphql/product/types/collections.py", "endpoints": {"api_summary": "This API defines a collection of products, including its name, description, and products it contains. It also provides a way to retrieve the background image of the collection.", "methods": ["GET"], "paths": ["/collections/<collection_id>"]}}
{"file": "cloned/saleor/saleor/graphql/product/types/categories.py", "endpoints": {"api_summary": "This API defines a category of products, including its name, description, and ancestors. It also includes a list of products in the category, which can be filtered and sorted.", "methods": ["GET"], "paths": ["/category"]}}
{"file": "cloned/saleor/saleor/graphql/csv/types.py", "endpoints": {"api_summary": "This API provides information about export files and their associated events.", "methods": ["GET"], "paths": ["/export-files", "/export-files/<export_file_id>", "/export-files/<export_file_id>/events"]}}
{"file": "cloned/saleor/saleor/graphql/csv/schema.py", "endpoints": {"api_summary": "The CSV API provides endpoints for exporting product, gift card, and voucher code data in CSV format. The API allows for filtering and sorting of export files, and provides endpoints for creating and managing export file jobs.", "methods": ["GET", "POST"], "paths": ["/csv/export_file/<id>", "/csv/export_files", "/csv/export_products", "/csv/export_gift_cards", "/csv/export_voucher_codes"]}}
{"file": "cloned/saleor/saleor/graphql/csv/mutations/export_voucher_codes.py", "endpoints": {"api_summary": "This API allows for the export of voucher codes to a CSV or XLSX file.", "methods": ["POST"], "paths": ["/export-voucher-codes"]}}
{"file": "cloned/saleor/saleor/graphql/csv/mutations/export_products.py", "endpoints": {"api_summary": "This API allows for exporting product data to a CSV file.", "methods": ["POST"], "paths": ["/export/products"]}}
{"file": "cloned/saleor/saleor/graphql/shop/schema.py", "endpoints": {"api_summary": "This API defines endpoints for managing shop settings, including gift card settings, order settings, and shop domain and address updates. It also includes endpoints for creating, updating, and deleting staff notification recipients.", "methods": ["POST", "PUT", "DELETE"], "paths": ["/shop/settings", "/shop/domain", "/shop/address", "/shop/order-settings", "/shop/gift-card-settings", "/staff-notification-recipients"]}}
{"file": "cloned/saleor/saleor/graphql/shop/tests/queries/test_shop.py", "endpoints": {"api_summary": "This API allows you to retrieve information about the shop and its settings.", "methods": ["GET"], "paths": ["/shop"]}}
{"file": "cloned/saleor/saleor/graphql/shop/mutations/staff_notification_recipient_update.py", "endpoints": {"api_summary": "The API allows for the creation and update of staff notification recipients. It also provides a way to retrieve information about the recipients and the permissions required to manage them.", "methods": ["POST", "PUT"], "paths": ["/staff-notification-recipient/create", "/staff-notification-recipient/update"]}}
{"file": "cloned/saleor/saleor/graphql/shop/mutations/shop_domain_update.py", "endpoints": {"api_summary": "The ShopDomainUpdate API allows for the update of a shop's domain and name. It requires the MANAGE_SETTINGS permission and returns a Shop object with the updated domain and name.", "methods": ["POST"], "paths": ["/shop/domain/update"]}}
{"file": "cloned/saleor/saleor/graphql/shop/mutations/shop_fetch_tax_rates.py", "endpoints": {"api_summary": "This API fetches tax rates for a shop. It requires the MANAGE_SETTINGS permission and returns a Shop object with the updated tax rates.", "methods": ["GET"], "paths": ["/shop/fetch-tax-rates"]}}
{"file": "cloned/saleor/saleor/graphql/webhook/types.py", "endpoints": {"api_summary": "This API defines webhook endpoints for handling events and event deliveries.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/webhook", "/webhook/<webhook_id>", "/webhook/<webhook_id>/event", "/webhook/<webhook_id>/event/<event_id>", "/webhook/<webhook_id>/event_delivery", "/webhook/<webhook_id>/event_delivery/<event_delivery_id>"]}}
{"file": "cloned/saleor/saleor/graphql/webhook/schema.py", "endpoints": {"api_summary": "This API defines endpoints for managing webhooks and retrieving sample payloads for webhook events.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/webhooks", "/webhooks/<webhook_id>", "/webhooks/<webhook_id>/events", "/webhooks/<webhook_id>/sample_payload"]}}
{"file": "cloned/saleor/saleor/graphql/webhook/tests/queries/test_event_delivery_query.py", "endpoints": {"api_summary": "This API allows for querying event deliveries and their attempts for a given webhook.", "methods": ["POST"], "paths": ["/webhook"]}}
{"file": "cloned/saleor/saleor/graphql/webhook/tests/queries/test_event_delivery_sort.py", "endpoints": {"api_summary": "This API allows for querying and sorting of event deliveries and delivery attempts for a given webhook.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/webhook/tests/mutations/test_delivery_retry.py", "endpoints": {"api_summary": "This API allows for retrying event deliveries that have failed due to a webhook error.", "methods": ["POST"], "paths": ["/api/v1/event-delivery-retry/<delivery_id>"]}}
{"file": "cloned/saleor/saleor/graphql/webhook/tests/mutations/test_webhook_delete.py", "endpoints": {"api_summary": "This API allows you to delete a webhook. You can use this API to remove a webhook that is no longer needed or to clean up your app's webhooks. The API can be accessed by an app or a staff user with the `manage_apps` permission.", "methods": ["POST"], "paths": ["/webhook/delete"]}}
{"file": "cloned/saleor/saleor/graphql/webhook/mutations/webhook_update.py", "endpoints": {"api_summary": "This API allows you to create, update, and delete webhook subscriptions. It also allows you to retrieve information about webhooks and their subscriptions.", "methods": ["POST", "PUT", "DELETE", "GET"], "paths": ["/webhooks", "/webhooks/<webhook_id>", "/webhooks/<webhook_id>/subscriptions"]}}
{"file": "cloned/saleor/saleor/graphql/webhook/mutations/webhook_trigger.py", "endpoints": {"api_summary": "This API defines a mutation for triggering webhooks. It validates the input, retrieves the webhook and event type, and creates an event delivery object with a pending status. If the event type is supported, it generates a deferred payload and schedules a task to generate the payload. Otherwise, it creates deliveries for the subscriptions and schedules a task to send the webhook request.", "methods": ["POST"], "paths": ["/webhook/trigger"]}}
{"file": "cloned/saleor/saleor/graphql/webhook/mutations/event_delivery_retry.py", "endpoints": {"api_summary": "Retries event delivery for a specific event delivery ID. The event delivery is identified by its ID, and the retry is performed by calling the `event_delivery_retry` method on the plugin manager.", "methods": ["POST"], "paths": ["/api/v1/event-delivery/<id>/retry"]}}
{"file": "cloned/saleor/saleor/graphql/webhook/mutations/webhook_dry_run.py", "endpoints": {"api_summary": "This API allows for a dry run of a webhook event, which simulates the sending of a webhook payload to a target URL. The API supports a single event and requires permission relevant to the processed event.", "methods": ["POST"], "paths": ["/webhook/dry-run"]}}
{"file": "cloned/saleor/saleor/graphql/shipping/schema.py", "endpoints": {"api_summary": "This API defines endpoints for managing shipping zones and prices in an e-commerce application. It allows for creating, updating, and deleting shipping zones and prices, as well as excluding products from shipping prices.", "methods": ["POST", "PUT", "DELETE"], "paths": ["/shipping-zones", "/shipping-zones/<id>", "/shipping-prices", "/shipping-prices/<id>"]}}
{"file": "cloned/saleor/saleor/graphql/shipping/tests/queries/test_shipping_zone.py", "endpoints": {"api_summary": "This API defines a shipping zone and its shipping methods, including the postal code rules and channel listings. It also includes a query to retrieve the shipping zone by ID.", "methods": ["GET", "POST"], "paths": ["/shipping-zone/<id>", "/shipping-zone/<id>/shipping-methods"]}}
{"file": "cloned/saleor/saleor/graphql/shipping/tests/mutations/test_shipping_price_delete.py", "endpoints": {"api_summary": "This API defines a mutation for deleting a shipping price, which is a part of the shipping method. The API takes an ID of the shipping price as input and returns the ID of the shipping zone and the shipping method, as well as any errors that occurred during the deletion process.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/shipping/tests/mutations/test_shipping_zone_delete.py", "endpoints": {"api_summary": "This API defines a mutation for deleting a shipping zone, which can be accessed by sending a GraphQL request to the /graphql endpoint. The mutation takes an ID as input and returns a payload with information about the deleted shipping zone and any errors that occurred during the deletion process.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/shipping/bulk_mutations/shipping_zone_bulk_delete.py", "endpoints": {"api_summary": "The ShippingZoneBulkDelete mutation allows for the deletion of multiple shipping zones at once. It takes a list of shipping zone IDs as input and deletes the corresponding zones. The mutation also triggers webhooks for each deleted zone and calls the shipping_zone_deleted event.", "methods": ["DELETE"], "paths": ["/shipping-zones/bulk-delete"]}}
{"file": "cloned/saleor/saleor/graphql/shipping/mutations/shipping_price_delete.py", "endpoints": {"api_summary": "This API defines a mutation for deleting a shipping price. It takes an ID of a shipping price to delete and returns the deleted shipping method and its shipping zone.", "methods": ["DELETE"], "paths": ["/shipping/price/<id>"]}}
{"file": "cloned/saleor/saleor/graphql/checkout/filters.py", "endpoints": {"api_summary": "This API defines a filter for the Checkout model in the Saleor e-commerce platform. It allows filtering by customer, created date, search, channels, metadata, updated at, authorize status, and charge status.", "methods": ["GET"], "paths": ["/checkout/filter"]}}
{"file": "cloned/saleor/saleor/graphql/checkout/schema.py", "endpoints": {"api_summary": "This API defines a set of mutations and queries for managing checkouts in an e-commerce application. It includes endpoints for creating, updating, and retrieving checkout information, as well as endpoints for adding and removing promo codes and updating shipping and billing addresses.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/checkout", "/checkouts", "/checkout/<id>", "/checkout/<id>/lines", "/checkout/<id>/lines/<line_id>", "/checkout/<id>/promo-code", "/checkout/<id>/shipping-address", "/checkout/<id>/billing-address"]}}
{"file": "cloned/saleor/saleor/graphql/checkout/tests/deprecated/test_checkout_promo_codes.py", "endpoints": {"api_summary": "This API allows clients to add or remove promo codes from a checkout.", "methods": ["POST"], "paths": ["/checkout/add-promo-code", "/checkout/remove-promo-code"]}}
{"file": "cloned/saleor/saleor/graphql/checkout/tests/deprecated/test_checkout_lines_update.py", "endpoints": {"api_summary": "Update the quantity of a checkout line.", "methods": ["POST"], "paths": ["/checkout/lines/update"]}}
{"file": "cloned/saleor/saleor/graphql/checkout/tests/deprecated/test_checkout_lines_add.py", "endpoints": {"api_summary": "This API adds lines to a checkout.", "methods": ["POST"], "paths": ["/checkout/lines/add"]}}
{"file": "cloned/saleor/saleor/graphql/checkout/mutations/checkout_line_delete.py", "endpoints": {"api_summary": "This API defines a mutation for deleting a checkout line. It takes the checkout line ID as input and returns the updated checkout.", "methods": ["POST"], "paths": ["/checkout/line/delete"]}}
{"file": "cloned/saleor/saleor/graphql/checkout/mutations/checkout_remove_promo_code.py", "endpoints": {"api_summary": "This API allows you to remove a gift card or a voucher from a checkout.", "methods": ["POST"], "paths": ["/checkout/remove-promo-code"]}}
{"file": "cloned/saleor/saleor/graphql/checkout/mutations/checkout_shipping_address_update.py", "endpoints": {"api_summary": "This API allows you to update the shipping address in an existing checkout.", "methods": ["POST"], "paths": ["/checkout/<checkout_id>/shipping-address"]}}
{"file": "cloned/saleor/saleor/graphql/checkout/mutations/checkout_customer_attach.py", "endpoints": {"api_summary": "The CheckoutCustomerAttach mutation allows you to attach a customer to a checkout. It requires the checkout ID, customer ID, and optionally the user ID. The mutation returns the updated checkout.", "methods": ["POST"], "paths": ["/checkout/<checkout_id>/attach-customer"]}}
{"file": "cloned/saleor/saleor/graphql/checkout/mutations/checkout_billing_address_update.py", "endpoints": {"api_summary": "This API endpoint updates the billing address in an existing checkout.", "methods": ["POST"], "paths": ["/checkout/<checkout_id>/billing-address"]}}
{"file": "cloned/saleor/saleor/graphql/checkout/mutations/order_create_from_checkout.py", "endpoints": {"api_summary": "This API creates a new order from an existing checkout. It requires the AUTHENTICATED_APP and HANDLE_CHECKOUTS permissions.", "methods": ["POST"], "paths": ["/order/create-from-checkout"]}}
{"file": "cloned/saleor/saleor/graphql/checkout/mutations/checkout_add_promo_code.py", "endpoints": {"api_summary": "Adds a gift card or a voucher to a checkout.", "methods": ["POST"], "paths": ["/checkout/add-promo-code"]}}
{"file": "cloned/saleor/saleor/graphql/checkout/mutations/checkout_lines_delete.py", "endpoints": {"api_summary": "This API allows you to delete checkout lines.", "methods": ["DELETE"], "paths": ["/checkout/lines"]}}
{"file": "cloned/saleor/saleor/graphql/payment/schema.py", "endpoints": {"api_summary": "This API provides endpoints for managing payments and transactions, including payment capture, refund, and void, as well as transaction creation, update, and processing. It also includes endpoints for initializing payment gateways and processing stored payment methods.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/payments", "/payments/<payment_id>", "/transactions", "/transactions/<transaction_id>"]}}
{"file": "cloned/saleor/saleor/graphql/payment/tests/queries/test_transaction.py", "endpoints": {"api_summary": "This API allows you to retrieve information about transactions and their events.", "methods": ["GET"], "paths": ["/api/transaction/<id>"]}}
{"file": "cloned/saleor/saleor/graphql/payment/tests/mutations/test_payment_initialize.py", "endpoints": {"api_summary": "This API initializes a payment gateway for a specific channel and payment method. It returns the initialized payment data and any errors that occurred during the initialization process.", "methods": ["POST"], "paths": ["/api/payment/initialize"]}}
{"file": "cloned/saleor/saleor/graphql/payment/tests/mutations/test_payment_void.py", "endpoints": {"api_summary": "This API allows for the voiding of payment transactions. It takes a payment ID as input and returns a response with the updated payment status and any errors that occurred during the voiding process.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/payment/mutations/transaction/transaction_request_action.py", "endpoints": {"api_summary": "This API allows for requesting actions for payment transactions.", "methods": ["POST"], "paths": ["/api/payment/transaction/request-action"]}}
{"file": "cloned/saleor/saleor/graphql/payment/mutations/transaction/transaction_initialize.py", "endpoints": {"api_summary": "This API initializes a transaction session. It triggers the webhook `TRANSACTION_INITIALIZE_SESSION`, to the requested `paymentGateways`. There is a limit of 100 transaction items per checkout / order.", "methods": ["POST"], "paths": ["/api/transaction/initialize"]}}
{"file": "cloned/saleor/saleor/graphql/payment/mutations/transaction/transaction_request_refund_for_granted_refund.py", "endpoints": {"api_summary": "This API allows you to request a refund for a payment transaction based on a granted refund.", "methods": ["POST"], "paths": ["/api/v1/transaction/request-refund-for-granted-refund/"]}}
{"file": "cloned/saleor/saleor/graphql/menu/schema.py", "endpoints": {"api_summary": "This API provides endpoints for creating, reading, updating, and deleting menus and menu items. It also provides endpoints for assigning navigation to menus and translating menu items.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/menus", "/menus/<menu_id>", "/menu-items", "/menu-items/<menu_item_id>"]}}
{"file": "cloned/saleor/saleor/graphql/menu/tests/mutations/test_menu_item_update.py", "endpoints": {"api_summary": "This API allows for updating menu items in a menu. It takes the menu item ID, page ID, and URL as input and returns the updated menu item.", "methods": ["POST"], "paths": ["/api/menu/<menu_id>/items/<menu_item_id>/update"]}}
{"file": "cloned/saleor/saleor/graphql/menu/tests/mutations/test_menu_update.py", "endpoints": {"api_summary": "This API allows for updating menus with a given ID. It takes the menu ID, name, and slug as input and returns the updated menu with the same ID, name, and slug. If the slug already exists, it returns an error.", "methods": ["POST"], "paths": ["/api/menu/<menu_id>/update"]}}
{"file": "cloned/saleor/saleor/graphql/menu/bulk_mutations/menu_bulk_delete.py", "endpoints": {"api_summary": "The API allows for the bulk deletion of menus. It takes a list of menu IDs as input and deletes the corresponding menus. It also triggers webhooks for each deleted menu.", "methods": ["DELETE"], "paths": ["/menus/<built-in function id>"]}}
{"file": "cloned/saleor/saleor/graphql/menu/mutations/menu_delete.py", "endpoints": {"api_summary": "The API allows for the deletion of menus. It takes an ID as input and returns a success response if the menu is deleted successfully. The API also supports webhooks for event tracking.", "methods": ["DELETE"], "paths": ["/api/v1/menus/<id>"]}}
{"file": "cloned/saleor/saleor/graphql/menu/mutations/menu_create.py", "endpoints": {"api_summary": "This API allows you to create a new menu with a name, slug, and list of menu items. It also allows you to retrieve and update existing menus.", "methods": ["POST", "GET", "PUT"], "paths": ["/api/menu/create", "/api/menu/<menu_id>", "/api/menu/<menu_id>/items"]}}
{"file": "cloned/saleor/saleor/graphql/menu/mutations/menu_item_delete.py", "endpoints": {"api_summary": "The API allows for the deletion of menu items. It takes an ID as input and returns a success response if the deletion is successful. The API also supports webhooks for event tracking.", "methods": ["DELETE"], "paths": ["/api/menu/<built-in function id>"]}}
{"file": "cloned/saleor/saleor/graphql/menu/mutations/menu_item_move.py", "endpoints": {"api_summary": "This API allows for moving menu items within a menu.", "methods": ["POST"], "paths": ["/api/menu/move"]}}
{"file": "cloned/saleor/saleor/graphql/menu/mutations/menu_update.py", "endpoints": {"api_summary": "This API allows for the creation, update, and deletion of menus. It also provides endpoints for retrieving menus and their associated data.", "methods": ["POST", "PUT", "DELETE", "GET"], "paths": ["/menus", "/menus/<menu_id>", "/menus/<menu_id>/items", "/menus/<menu_id>/items/<item_id>"]}}
{"file": "cloned/saleor/saleor/graphql/core/connection.py", "endpoints": {"api_summary": "This API endpoint allows users to retrieve a list of users.", "methods": ["GET"], "paths": ["/users"]}}
{"file": "cloned/saleor/saleor/graphql/core/tests/test_pagination.py", "endpoints": {"api_summary": "This API allows clients to retrieve a list of books, with pagination support.", "methods": ["GET"], "paths": ["/books"]}}
{"file": "cloned/saleor/saleor/graphql/core/tests/test_file_upload.py", "endpoints": {"api_summary": "This API allows users to upload files to the server.", "methods": ["POST"], "paths": ["/file_upload"]}}
{"file": "cloned/saleor/saleor/graphql/core/tests/test_core.py", "endpoints": {"api_summary": "This file defines a GraphQL API for a product catalog. It includes mutations for creating, updating, and deleting products, as well as queries for retrieving product information.", "methods": ["GET", "POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/warehouse/schema.py", "endpoints": {"api_summary": "This API provides endpoints for managing warehouses and stocks. It allows for creating, updating, deleting, and listing warehouses, as well as assigning and unassigning warehouses to shipping zones. It also allows for listing and updating stocks.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/warehouses", "/warehouses/<id>", "/stocks", "/stocks/<id>"]}}
{"file": "cloned/saleor/saleor/graphql/warehouse/tests/queries/test_stock.py", "endpoints": {"api_summary": "This API provides information about stocks, including their quantity, quantity allocated, and quantity reserved. It also allows for querying a specific stock by ID.", "methods": ["GET"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/warehouse/mutations/warehouse_shipping_zone_assign.py", "endpoints": {"api_summary": "This API allows you to assign shipping zones to a warehouse. It takes the warehouse ID and a list of shipping zone IDs as input, and returns the updated warehouse object.", "methods": ["POST"], "paths": ["/warehouse/<warehouse_id>/shipping-zones"]}}
{"file": "cloned/saleor/saleor/graphql/warehouse/mutations/warehouse_shipping_zone_unassign.py", "endpoints": {"api_summary": "This API allows for the management of warehouses and their associated shipping zones. It provides endpoints for creating, updating, and deleting warehouses, as well as for assigning and unassigning shipping zones to warehouses.", "methods": ["POST", "PUT", "DELETE"], "paths": ["/warehouses", "/warehouses/<warehouse_id>", "/warehouses/<warehouse_id>/shipping-zones"]}}
{"file": "cloned/saleor/saleor/graphql/plugins/schema.py", "endpoints": {"api_summary": "The Plugins API allows for the management of plugins, including listing, retrieving, and updating plugins. The API also provides a mutation for updating plugins.", "methods": ["GET", "POST"], "paths": ["/plugins", "/plugins/<plugin_id>"]}}
{"file": "cloned/saleor/saleor/graphql/order/tests/queries/test_pagination.py", "endpoints": {"api_summary": "This API defines a set of endpoints for managing orders in an e-commerce application.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/orders", "/orders/<order_id>", "/orders/<order_id>/items", "/orders/<order_id>/items/<item_id>"]}}
{"file": "cloned/saleor/saleor/graphql/order/tests/queries/test_fulfillment.py", "endpoints": {"api_summary": "This API allows for querying fulfillment data for an order, including the fulfillment order, status, tracking number, warehouse, and lines.", "methods": ["GET"], "paths": ["/order/<order_id>/fulfillment"]}}
{"file": "cloned/saleor/saleor/graphql/order/tests/queries/test_order_entity.py", "endpoints": {"api_summary": "This API allows users to query and retrieve information about orders. It includes endpoints for retrieving a single order by ID, retrieving a list of orders, and creating a new order.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/orders/<order_id>", "/orders", "/orders/create"]}}
{"file": "cloned/saleor/saleor/graphql/order/tests/deprecated/test_discount_order.py", "endpoints": {"api_summary": "This API allows you to create, update, and delete discounts for orders. It also allows you to retrieve information about orders and their discounts.", "methods": ["POST"], "paths": ["/order-discount-delete", "/order-discount-update"]}}
{"file": "cloned/saleor/saleor/graphql/order/tests/mutations/test_order_void.py", "endpoints": {"api_summary": "This API allows for voiding an order's payment. It can be used to cancel a payment that has not yet been charged. The API returns the updated payment status and any errors that may have occurred.", "methods": ["POST"], "paths": ["/order/<order_id>/void"]}}
{"file": "cloned/saleor/saleor/graphql/order/tests/mutations/test_order_price_expiration.py", "endpoints": {"api_summary": "This API provides mutations for updating and creating order lines, as well as deleting existing order lines.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/order/tests/integration/test_draft_order.py", "endpoints": {"api_summary": "This API allows for the creation, management, and completion of orders. It also allows for the marking of orders as paid.", "methods": ["POST", "GET"], "paths": ["/order/create", "/order/<order_id>/update", "/order/<order_id>/complete", "/order/<order_id>/mark-as-paid"]}}
{"file": "cloned/saleor/saleor/graphql/order/tests/benchmark/test_order_lines_create.py", "endpoints": {"api_summary": "This API allows for the creation of order lines for an existing order. It takes an order ID and a list of order line input objects, each containing a product variant ID and a quantity. The API returns a list of order line IDs and any errors that occurred during the creation process.", "methods": ["POST"], "paths": ["/order-lines/create"]}}
{"file": "cloned/saleor/saleor/graphql/order/bulk_mutations/draft_orders.py", "endpoints": {"api_summary": "This API allows for the deletion of draft orders and order lines. It also provides a way to get the channel IDs for channel permission accessible check.", "methods": ["DELETE"], "paths": ["/draft-order-bulk-delete", "/draft-order-lines-bulk-delete"]}}
{"file": "cloned/saleor/saleor/graphql/order/mutations/fulfillment_approve.py", "endpoints": {"api_summary": "This API allows for the approval of fulfillments for orders. It can be used to confirm that an order has been fulfilled and that the items have been shipped to the customer.", "methods": ["POST"], "paths": ["/api/orders/<order_id>/fulfillments/<fulfillment_id>/approve"]}}
{"file": "cloned/saleor/saleor/graphql/order/mutations/order_update_shipping.py", "endpoints": {"api_summary": "This API updates the shipping method of an order. It requires the ID of the order and the ID of the shipping method to update. If the shipping method ID is null, the currently assigned shipping method is removed.", "methods": ["POST"], "paths": ["/orders/<order_id>/shipping-method"]}}
{"file": "cloned/saleor/saleor/graphql/order/mutations/draft_order_complete.py", "endpoints": {"api_summary": "This API completes creating an order.", "methods": ["POST"], "paths": ["/draft-order-complete"]}}
{"file": "cloned/saleor/saleor/graphql/order/mutations/fulfillment_refund_products.py", "endpoints": {"api_summary": "This API allows for refunding products in an order. It can be used to refund unfulfilled or fulfilled lines, and includes options for including shipping costs and specifying a manual amount to refund.", "methods": ["POST"], "paths": ["/api/orders/<order_id>/refund-products"]}}
{"file": "cloned/saleor/saleor/graphql/order/mutations/order_lines_create.py", "endpoints": {"api_summary": "This API defines endpoints for creating and managing order lines in an e-commerce platform.", "methods": ["POST"], "paths": ["/order/lines/create"]}}
{"file": "cloned/saleor/saleor/graphql/order/mutations/fulfillment_cancel.py", "endpoints": {"api_summary": "This API allows for the cancellation of fulfillments and the restocking of items.", "methods": ["POST"], "paths": ["/api/v1/orders/<order_id>/fulfillments/<fulfillment_id>/cancel"]}}
{"file": "cloned/saleor/saleor/graphql/order/mutations/order_line_update.py", "endpoints": {"api_summary": "This API allows for the updating of order lines for an order. It takes in an order line ID and a quantity, and updates the order line with the new quantity. It also invalidates the order prices and recalculates the order weight.", "methods": ["PUT"], "paths": ["/orders/<order_id>/lines/<order_line_id>"]}}
{"file": "cloned/saleor/saleor/graphql/order/mutations/fulfillment_return_products.py", "endpoints": {"api_summary": "This API allows for the creation of fulfillments for returned products.", "methods": ["POST"], "paths": ["/api/orders/<order_id>/fulfillments/return/"]}}
{"file": "cloned/saleor/saleor/graphql/order/mutations/order_mark_as_paid.py", "endpoints": {"api_summary": "This API allows you to mark an order as paid. It takes an order ID and an optional transaction reference as input, and returns the updated order.", "methods": ["POST"], "paths": ["/orders/<order_id>/mark-as-paid"]}}
{"file": "cloned/saleor/saleor/graphql/meta/tests/queries/test_warehouse.py", "endpoints": {"api_summary": "This API provides endpoints for querying metadata for warehouses. It allows users to query public and private metadata for warehouses, with different levels of access based on user permissions.", "methods": ["POST"], "paths": ["/warehouse/<id>/metadata/public", "/warehouse/<id>/metadata/private"]}}
{"file": "cloned/saleor/saleor/graphql/meta/tests/queries/test_channel.py", "endpoints": {"api_summary": "This API allows for querying private and public metadata for a channel.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/meta/tests/queries/test_order.py", "endpoints": {"api_summary": "This API defines a GraphQL schema for querying and manipulating orders, order items, and transactions.", "methods": ["GET", "POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/meta/tests/mutations/test_delete_private_metadata.py", "endpoints": {"api_summary": "This API allows for the deletion of private metadata for a given item. It takes the item ID and a list of keys to delete as input, and returns the updated item with the deleted metadata.", "methods": ["DELETE"], "paths": ["/api/private-metadata/<item_id>/delete"]}}
{"file": "cloned/saleor/saleor/graphql/meta/mutations/update_metadata.py", "endpoints": {"api_summary": "This API updates metadata of an object. It takes an ID or token of an object and a list of metadata fields to update. The API returns a success response if the metadata is updated successfully.", "methods": ["POST"], "paths": ["/update-metadata"]}}
{"file": "cloned/saleor/saleor/graphql/meta/mutations/delete_metadata.py", "endpoints": {"api_summary": "This API allows for the deletion of metadata for an object. The API takes an ID or token for the object to update, and a list of metadata keys to delete. The API returns a success response if the metadata is successfully deleted.", "methods": ["DELETE"], "paths": ["/api/delete-metadata/<id>"]}}
{"file": "cloned/saleor/saleor/graphql/meta/mutations/update_private_metadata.py", "endpoints": {"api_summary": "This API endpoint updates the private metadata of an object. It takes an ID or token of an object and a list of metadata fields to update. The metadata is stored in the private metadata of the object.", "methods": ["POST"], "paths": ["/update-private-metadata/<object_id>"]}}
{"file": "cloned/saleor/saleor/graphql/meta/mutations/delete_private_metadata.py", "endpoints": {"api_summary": "This API allows authenticated staff users or apps to delete private metadata for an object. The API takes an ID or token for the object and a list of metadata keys to delete. The API returns a success response if the metadata is deleted successfully.", "methods": ["DELETE"], "paths": ["/api/private-metadata/<id>/<keys>"]}}
{"file": "cloned/saleor/saleor/graphql/attribute/schema.py", "endpoints": {"api_summary": "This API defines a set of endpoints for managing attributes and their values. It allows for creating, updating, deleting, and translating attributes and their values, as well as reordering attribute values.", "methods": ["POST", "GET", "PUT", "DELETE"], "paths": ["/attributes", "/attributes/<attribute_id>", "/attributes/<attribute_id>/values", "/attributes/<attribute_id>/values/<value_id>"]}}
{"file": "cloned/saleor/saleor/graphql/attribute/tests/queries/test_attributes_sort.py", "endpoints": {"api_summary": "This API allows for sorting attributes and attribute choices by slug or name.", "methods": ["GET"], "paths": ["/attributes", "/attributes/<slug>/choices"]}}
{"file": "cloned/saleor/saleor/graphql/attribute/tests/mutations/test_attribute_delete.py", "endpoints": {"api_summary": "This API allows you to delete an attribute by its ID or external reference.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/attribute/mutations/attribute_update.py", "endpoints": {"api_summary": "This API updates an attribute.", "methods": ["POST"], "paths": ["/attributes/<id>/update"]}}
{"file": "cloned/saleor/saleor/graphql/attribute/mutations/attribute_create.py", "endpoints": {"api_summary": "This API defines a mutation for creating an attribute, which is a key-value pair that can be used to describe a product or other entity in an e-commerce system.", "methods": ["POST"], "paths": ["/api/v1/attributes/"]}}
{"file": "cloned/saleor/saleor/graphql/tax/schema.py", "endpoints": {"api_summary": "This API provides tax-related functionality, including tax configurations, tax classes, and tax exemptions.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/tax/configurations", "/api/tax/classes", "/api/tax/exemptions"]}}
{"file": "cloned/saleor/saleor/graphql/tax/tests/queries/test_tax_class.py", "endpoints": {"api_summary": "This API defines a tax class query that allows retrieving a tax class by its ID. It also includes a private metadata query that requires the manage taxes permission.", "methods": ["GET"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/tax/tests/mutations/test_tax_class_update.py", "endpoints": {"api_summary": "This API defines a mutation for updating a tax class, including its name and country rates. It also allows for removing country rates.", "methods": ["POST"], "paths": ["/api/tax-class/update"]}}
{"file": "cloned/saleor/saleor/graphql/tax/mutations/tax_class_delete.py", "endpoints": {"api_summary": "The API allows for the deletion of tax classes, which can be used to update products, product types, and shipping methods using the default tax class.", "methods": ["DELETE"], "paths": ["/api/tax-classes/<built-in function id>"]}}
{"file": "cloned/saleor/saleor/graphql/tax/mutations/tax_country_configuration_delete.py", "endpoints": {"api_summary": "This API allows for the management of tax class rates for a specific country. It includes endpoints for creating, updating, and deleting tax class rates, as well as retrieving information about the tax class rates for a given country.", "methods": ["POST", "PUT", "DELETE"], "paths": ["/tax-country-configuration", "/tax-country-configuration/<country_code>"]}}
{"file": "cloned/saleor/saleor/graphql/tax/mutations/tax_exemption_manage.py", "endpoints": {"api_summary": "This API allows you to manage tax exemptions for Checkouts and Orders. It provides a way to enable or disable tax exemptions for these objects, and returns information about the taxable object.", "methods": ["POST"], "paths": ["/checkout/<id>/tax-exemption", "/order/<id>/tax-exemption"]}}
{"file": "cloned/saleor/saleor/graphql/tax/mutations/tax_class_update.py", "endpoints": {"api_summary": "This API defines a tax class update endpoint that allows users to update the name and country-specific tax rates for a tax class.", "methods": ["POST"], "paths": ["/api/tax-classes/<id>/update"]}}
{"file": "cloned/saleor/saleor/graphql/discount/filters.py", "endpoints": {"api_summary": "This API defines filters for vouchers and sales, as well as a where input for discounted objects.", "methods": ["GET", "POST"], "paths": ["/vouchers", "/sales", "/discounted-objects"]}}
{"file": "cloned/saleor/saleor/graphql/discount/schema.py", "endpoints": {"api_summary": "This API defines endpoints for managing discounts, including promotions, sales, and vouchers. It allows for creating, updating, and deleting discounts, as well as retrieving and searching for discounts.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/discounts", "/discounts/<id>", "/sales", "/sales/<id>", "/vouchers", "/vouchers/<id>"]}}
{"file": "cloned/saleor/saleor/graphql/discount/sorters.py", "endpoints": {"api_summary": "This file defines the sorting fields for sales, vouchers, and promotions. It also defines the sorting input types for each of these entities.", "methods": ["GET"], "paths": ["/sales", "/vouchers", "/promotions"]}}
{"file": "cloned/saleor/saleor/graphql/discount/tests/queries/test_sales.py", "endpoints": {"api_summary": "This API provides a query for sales, which can be filtered by channel and paginated. It also provides a query for channel listings, which can be filtered by channel and paginated.", "methods": ["GET"], "paths": ["/sales", "/sales/<sale_id>/channel_listings"]}}
{"file": "cloned/saleor/saleor/graphql/discount/tests/queries/test_promotions.py", "endpoints": {"api_summary": "This API allows for querying promotions by staff users, app, and customers. It also allows for querying promotions with pagination.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/discount/tests/queries/test_sales_sorting.py", "endpoints": {"api_summary": "This API allows for the management of sales and vouchers, including creating, updating, and deleting sales and vouchers, as well as retrieving and filtering sales and vouchers.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/sales", "/sales/<sale_id>", "/vouchers", "/vouchers/<voucher_id>"]}}
{"file": "cloned/saleor/saleor/graphql/discount/tests/deprecated/test_voucher_update.py", "endpoints": {"api_summary": "This API updates a voucher with a new code, discount value type, apply once per order, and minimum checkout items quantity. It also triggers a webhook when the voucher is updated.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/discount/tests/deprecated/test_discount.py", "endpoints": {"api_summary": "This API defines a set of endpoints for managing sales and vouchers. It allows for querying and filtering sales and vouchers, as well as creating and updating them.", "methods": ["GET", "POST"], "paths": ["/sales", "/vouchers"]}}
{"file": "cloned/saleor/saleor/graphql/discount/tests/mutations/test_voucher_code_bulk_delete.py", "endpoints": {"api_summary": "This API allows for the bulk deletion of voucher codes. It takes a list of voucher code IDs as input and returns the number of deleted codes.", "methods": ["POST"], "paths": ["/voucher-code-bulk-delete"]}}
{"file": "cloned/saleor/saleor/graphql/discount/tests/mutations/test_promotion_rule_delete.py", "endpoints": {"api_summary": "This API defines a mutation for deleting a promotion rule. It takes an ID as input and returns the deleted rule and any errors that occurred during the deletion process.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/discount/tests/mutations/test_voucher_delete.py", "endpoints": {"api_summary": "This API defines a mutation for deleting a voucher, which is a discount code that can be used by customers during checkout. The mutation takes an ID as input and returns the deleted voucher's name and ID, as well as any errors that occurred during the deletion process.", "methods": ["POST"], "paths": ["/voucher/delete"]}}
{"file": "cloned/saleor/saleor/graphql/discount/tests/benchmark/test_promotion_rule_create.py", "endpoints": {"api_summary": "This API defines a mutation for creating a promotion rule, which can be used to apply discounts or gifts to orders based on certain conditions.", "methods": ["POST"], "paths": ["/promotion-rule-create"]}}
{"file": "cloned/saleor/saleor/graphql/discount/mutations/bulk_mutations.py", "endpoints": {"api_summary": "This API defines endpoints for managing sales and vouchers. It allows for bulk deletion of sales and vouchers, as well as retrieving information about sales and vouchers.", "methods": ["GET", "POST", "DELETE"], "paths": ["/sales", "/sales/<sale_id>", "/vouchers", "/vouchers/<voucher_id>"]}}
{"file": "cloned/saleor/saleor/graphql/discount/mutations/sale/sale_delete.py", "endpoints": {"api_summary": "This API defines a mutation for deleting a sale. It takes an ID of a sale to delete and returns a response with the deleted sale and any errors that occurred during the deletion process.", "methods": ["DELETE"], "paths": ["/sale/<id>"]}}
{"file": "cloned/saleor/saleor/graphql/discount/mutations/sale/sale_create.py", "endpoints": {"api_summary": "This API defines a mutation for creating a new sale with a specified name, type, value, products, variants, categories, collections, and start and end dates. The API also includes a predicate for creating a catalogue promotion rule and sending notifications for the sale.", "methods": ["POST"], "paths": ["/sale/create"]}}
{"file": "cloned/saleor/saleor/graphql/discount/mutations/voucher/voucher_add_catalogues.py", "endpoints": {"api_summary": "This API allows you to add products, categories, and collections to a voucher.", "methods": ["POST"], "paths": ["/voucher/add-catalogues"]}}
{"file": "cloned/saleor/saleor/graphql/discount/mutations/promotion/promotion_rule_update.py", "endpoints": {"api_summary": "This API defines a promotion rule update endpoint for updating an existing promotion rule.", "methods": ["PUT"], "paths": ["/api/v1/promotion-rule/<id>"]}}
{"file": "cloned/saleor/saleor/graphql/discount/mutations/promotion/promotion_rule_create.py", "endpoints": {"api_summary": "This API defines a mutation for creating a new promotion rule. It takes a promotion rule input and returns a promotion rule object. The API also includes validation and error handling for the input data.", "methods": ["POST"], "paths": ["/api/promotion/rule/create"]}}
{"file": "cloned/saleor/saleor/graphql/discount/mutations/promotion/promotion_update.py", "endpoints": {"api_summary": "This API updates an existing promotion.", "methods": ["PUT"], "paths": ["/api/v1/promotion/<id>"]}}
{"file": "cloned/saleor/saleor/graphql/discount/types/promotion_events.py", "endpoints": {"api_summary": "This API provides a way to manage promotion events and rules, including creating, updating, and deleting events and rules, as well as retrieving information about them.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/promotion-events", "/promotion-events/<event_id>", "/promotion-rules", "/promotion-rules/<rule_id>"]}}
{"file": "cloned/saleor/saleor/graphql/discount/types/vouchers.py", "endpoints": {"api_summary": "This API defines a voucher system for a store, allowing customers to redeem discounts on their purchases.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/vouchers", "/vouchers/<voucher_id>", "/vouchers/<voucher_id>/codes", "/vouchers/<voucher_id>/codes/<code_id>"]}}
{"file": "cloned/saleor/saleor/graphql/discount/types/promotions.py", "endpoints": {"api_summary": "This API defines the Promotion and PromotionRule types, which are used to create and manage promotions and promotion rules in the system.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/promotions", "/promotions/<promotion_id>", "/promotion_rules", "/promotion_rules/<promotion_rule_id>"]}}
{"file": "cloned/saleor/saleor/graphql/discount/types/sales.py", "endpoints": {"api_summary": "This API defines a Sale object, which represents a discount for categories, collections, or products. It also defines a SaleChannelListing object, which represents a sale in a specific channel.", "methods": ["GET", "POST"], "paths": ["/sales", "/sales/<sale_id>", "/sales/<sale_id>/channel_listings"]}}
{"file": "cloned/saleor/saleor/graphql/account/tests/queries/test_address.py", "endpoints": {"api_summary": "This API allows users to query and retrieve information about addresses.", "methods": ["GET", "POST"], "paths": ["/address", "/address/<id>"]}}
{"file": "cloned/saleor/saleor/graphql/account/tests/queries/test_staff_users_filtering.py", "endpoints": {"api_summary": "This API allows for querying and managing staff users. It includes endpoints for retrieving a list of staff users, creating a new staff user, updating an existing staff user, and deleting a staff user.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/staff-users", "/staff-users/<user_id>"]}}
{"file": "cloned/saleor/saleor/graphql/account/tests/queries/test_address_validation_rules.py", "endpoints": {"api_summary": "This API provides information about address validation rules for different countries and regions. It allows clients to retrieve information about the required and allowed fields for a given country and region, as well as examples of postal codes and the format for the address.", "methods": ["GET"], "paths": ["/address-validation-rules"]}}
{"file": "cloned/saleor/saleor/graphql/account/tests/queries/test_customers_filtering.py", "endpoints": {"api_summary": "This API defines a GraphQL schema for querying and managing customers. It includes endpoints for retrieving customer information, creating and updating customers, and searching for customers.", "methods": ["GET", "POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/account/tests/mutations/staff/test_user_avatar_update.py", "endpoints": {"api_summary": "This API allows users to update their avatar image. It takes an image file as input and returns the URL of the updated avatar.", "methods": ["POST"], "paths": ["/user/avatar"]}}
{"file": "cloned/saleor/saleor/graphql/account/tests/mutations/permission_group/test_permission_group_create.py", "endpoints": {"api_summary": "This API defines a permission group creation endpoint.", "methods": ["POST"], "paths": ["/api/permission-group/create"]}}
{"file": "cloned/saleor/saleor/graphql/account/tests/mutations/authentication/test_set_password.py", "endpoints": {"api_summary": "This API allows users to set their password after a password reset request. It takes an email, token, and new password as input and returns a user object and a token.", "methods": ["POST"], "paths": ["/set-password"]}}
{"file": "cloned/saleor/saleor/graphql/account/tests/mutations/authentication/test_token_verify.py", "endpoints": {"api_summary": "This API verifies access tokens for users and apps, and returns information about the token and the user it belongs to.", "methods": ["POST"], "paths": ["/token/verify"]}}
{"file": "cloned/saleor/saleor/graphql/account/tests/mutations/authentication/test_token_refresh.py", "endpoints": {"api_summary": "This file defines a GraphQL API for refreshing JWT tokens. It includes mutations for refreshing tokens from cookies or input, and errors for invalid or expired tokens.", "methods": ["POST"], "paths": ["/api/token-refresh"]}}
{"file": "cloned/saleor/saleor/graphql/account/tests/mutations/authentication/test_external_obtain_access_tokens.py", "endpoints": {"api_summary": "This API allows external services to obtain access tokens for a user, which can be used to authenticate and access the user's data.", "methods": ["POST"], "paths": ["/external/obtain-access-tokens"]}}
{"file": "cloned/saleor/saleor/graphql/account/bulk_mutations/user_bulk_set_active.py", "endpoints": {"api_summary": "The UserBulkSetActive API allows administrators to activate or deactivate multiple user accounts in bulk. The API takes a list of user IDs and a boolean value indicating whether the users should be activated or deactivated. The API returns a list of errors if any occurred during the update process.", "methods": ["POST"], "paths": ["/users/bulk-set-active"]}}
{"file": "cloned/saleor/saleor/graphql/account/bulk_mutations/customer_bulk_delete.py", "endpoints": {"api_summary": "The API allows for the deletion of customer accounts. It takes a list of user IDs as input and returns the number of deleted accounts and any errors that occurred during the deletion process.", "methods": ["DELETE"], "paths": ["/customers/<built-in function id>"]}}
{"file": "cloned/saleor/saleor/graphql/account/mutations/staff/user_avatar_delete.py", "endpoints": {"api_summary": "The API allows staff members to delete a user's avatar. It takes a user ID as input and returns an updated user instance.", "methods": ["DELETE"], "paths": ["/users/<built-in function id>/avatar"]}}
{"file": "cloned/saleor/saleor/graphql/account/mutations/staff/user_avatar_update.py", "endpoints": {"api_summary": "The UserAvatarUpdate API allows staff members to update the avatar of a user. The API accepts a multipart request with an image file and returns the updated user instance.", "methods": ["POST"], "paths": ["/users/<built-in function id>/avatar"]}}
{"file": "cloned/saleor/saleor/graphql/account/mutations/staff/address_delete.py", "endpoints": {"api_summary": "The AddressDelete API endpoint allows users to delete an address. It takes an address ID as input and returns a success message if the deletion is successful.", "methods": ["DELETE"], "paths": ["/users/<built-in function id>/addresses/<address_id>"]}}
{"file": "cloned/saleor/saleor/graphql/account/mutations/staff/staff_update.py", "endpoints": {"api_summary": "This API allows for the creation and management of staff users. It includes endpoints for creating, updating, and deleting staff users, as well as for managing their permissions and groups.", "methods": ["POST", "PUT", "DELETE"], "paths": ["/staff/create", "/staff/update", "/staff/delete", "/staff/permissions", "/staff/groups"]}}
{"file": "cloned/saleor/saleor/graphql/account/mutations/staff/customer_create.py", "endpoints": {"api_summary": "Creates a new customer account.", "methods": ["POST"], "paths": ["/customers/create"]}}
{"file": "cloned/saleor/saleor/graphql/account/mutations/staff/staff_delete.py", "endpoints": {"api_summary": "The StaffDelete API allows you to delete a staff user. It takes an ID as input and returns a success response with the deleted staff user's ID.", "methods": ["DELETE"], "paths": ["/staff/<id>"]}}
{"file": "cloned/saleor/saleor/graphql/account/mutations/permission_group/permission_group_delete.py", "endpoints": {"api_summary": "This API defines a mutation for deleting a permission group. It requires the `MANAGE_STAFF` permission and allows only superusers or users with the `MANAGE_STAFF` permission to perform the mutation. The mutation takes an ID of the group to delete as input and returns a `PermissionGroupError` if any errors occur.", "methods": ["DELETE"], "paths": ["/api/v1/permission-groups/<id>"]}}
{"file": "cloned/saleor/saleor/graphql/account/mutations/account/send_confirmation_email.py", "endpoints": {"api_summary": "This API sends a notification confirmation email to a user.", "methods": ["POST"], "paths": ["/send-confirmation-email"]}}
{"file": "cloned/saleor/saleor/graphql/account/mutations/account/account_request_deletion.py", "endpoints": {"api_summary": "The AccountRequestDeletion API allows users to request deletion of their account. It sends an email with an account removal link to the user's email address. The API also supports webhooks for notifications.", "methods": ["POST"], "paths": ["/account/request-deletion"]}}
{"file": "cloned/saleor/saleor/graphql/account/mutations/account/account_address_delete.py", "endpoints": {"api_summary": "The AccountAddressDelete endpoint allows users to delete an address of the logged-in user. It requires one of the following permissions: MANAGE_USERS, IS_OWNER.", "methods": ["DELETE"], "paths": ["/account/address/delete"]}}
{"file": "cloned/saleor/saleor/graphql/account/mutations/account/account_address_create.py", "endpoints": {"api_summary": "This API allows for the creation of a new address for a customer. It also allows for the assignment of a default address for a customer.", "methods": ["POST"], "paths": ["/account/address/create"]}}
{"file": "cloned/saleor/saleor/graphql/account/mutations/account/account_register.py", "endpoints": {"api_summary": "This API defines a mutation for registering a new user, including creating a password and confirming the user's email address.", "methods": ["POST"], "paths": ["/account/register"]}}
{"file": "cloned/saleor/saleor/graphql/account/mutations/authentication/deactivate_all_user_tokens.py", "endpoints": {"api_summary": "The API deactivates all JWT tokens of the currently authenticated user.", "methods": ["POST"], "paths": ["/users/<built-in function id>/deactivate-all-user-tokens"]}}
{"file": "cloned/saleor/saleor/graphql/account/mutations/authentication/verify_token.py", "endpoints": {"api_summary": "The VerifyToken mutation allows clients to verify the validity of a JWT token and retrieve the associated user data. The mutation takes a single argument, the token, and returns a payload object with the user data and a boolean indicating whether the token is valid.", "methods": ["POST"], "paths": ["/verify-token"]}}
{"file": "cloned/saleor/saleor/graphql/account/mutations/authentication/external_logout.py", "endpoints": {"api_summary": "The API allows for logging out a user through a custom authentication plugin. The API takes in the plugin ID and input data required for the logout process, and returns the data returned by the authentication plugin.", "methods": ["POST"], "paths": ["/external-logout"]}}
{"file": "cloned/saleor/saleor/graphql/account/mutations/authentication/refresh_token.py", "endpoints": {"api_summary": "Refresh JWT token. Mutation tries to take refreshToken from the input. If it fails it will try to take `refreshToken` from the http-only cookie `JWT_REFRESH_TOKEN_COOKIE_NAME`. `csrfToken` is required when `refreshToken` is provided as a cookie.", "methods": ["POST"], "paths": ["/refresh-token"]}}
{"file": "cloned/saleor/saleor/graphql/account/mutations/authentication/create_token.py", "endpoints": {"api_summary": "This API authenticates a user and returns a token and user data.", "methods": ["POST"], "paths": ["/create-token"]}}
{"file": "cloned/saleor/saleor/graphql/giftcard/filters.py", "endpoints": {"api_summary": "This API defines a gift card filter and related filters for gift card events and tags.", "methods": ["GET", "POST"], "paths": ["/gift-cards", "/gift-cards/<gift_card_id>", "/gift-cards/<gift_card_id>/events", "/gift-cards/<gift_card_id>/tags"]}}
{"file": "cloned/saleor/saleor/graphql/giftcard/schema.py", "endpoints": {"api_summary": "This API provides endpoints for managing gift cards, including creating, updating, deleting, and resending gift cards. It also provides endpoints for bulk operations on gift cards, such as bulk creation, deletion, activation, and deactivation.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/gift-cards", "/gift-cards/<gift_card_id>", "/gift-cards/bulk"]}}
{"file": "cloned/saleor/saleor/graphql/giftcard/tests/queries/test_gift_card_filtering.py", "endpoints": {"api_summary": "This API allows you to query and filter gift cards based on various criteria such as tags, products, currency, and more. It also allows you to retrieve the current balance and initial balance of a gift card.", "methods": ["GET"], "paths": ["/gift-cards"]}}
{"file": "cloned/saleor/saleor/graphql/giftcard/tests/queries/test_gift_card.py", "endpoints": {"api_summary": "This API defines a single endpoint for querying gift cards.", "methods": ["GET"], "paths": ["/gift-cards/<gift_card_id>"]}}
{"file": "cloned/saleor/saleor/graphql/giftcard/tests/bulk_mutations/test_gift_card_bulk_delete.py", "endpoints": {"api_summary": "This API allows for bulk deletion of gift cards by staff, app, and customers. It takes a list of gift card IDs as input and returns the number of gift cards deleted and any errors that occurred.", "methods": ["POST"], "paths": ["/gift-card/bulk-delete"]}}
{"file": "cloned/saleor/saleor/graphql/giftcard/tests/mutations/test_gift_card_delete.py", "endpoints": {"api_summary": "This API defines a mutation for deleting a gift card. It can be used by staff users with the manage_gift_card permission, and it will delete the gift card with the given ID. The API also supports webhooks and will trigger them when the gift card is deleted.", "methods": ["POST"], "paths": ["/gift-card/delete"]}}
{"file": "cloned/saleor/saleor/graphql/giftcard/bulk_mutations/gift_card_bulk_create.py", "endpoints": {"api_summary": "This API allows you to create multiple gift cards with a single request. It takes a list of gift card details as input and returns a list of created gift cards.", "methods": ["POST"], "paths": ["/gift-cards/bulk-create"]}}
{"file": "cloned/saleor/saleor/graphql/giftcard/bulk_mutations/gift_card_bulk_delete.py", "endpoints": {"api_summary": "The GiftCardBulkDelete API allows for the deletion of multiple gift cards at once. It takes a list of gift card IDs as input and deletes the corresponding gift cards. The API also triggers a webhook event to notify any subscribers that the gift cards have been deleted.", "methods": ["DELETE"], "paths": ["/gift-cards/bulk-delete"]}}
{"file": "cloned/saleor/saleor/graphql/giftcard/mutations/gift_card_update.py", "endpoints": {"api_summary": "This API updates a gift card.", "methods": ["POST"], "paths": ["/gift-card/update"]}}
{"file": "cloned/saleor/saleor/graphql/giftcard/mutations/gift_card_delete.py", "endpoints": {"api_summary": "The API allows for the deletion of gift cards. It takes an ID as input and returns a confirmation of the deletion. The API also supports webhook events for gift card deletion.", "methods": ["DELETE"], "paths": ["/giftcard/<id>"]}}
{"file": "cloned/saleor/saleor/graphql/giftcard/mutations/gift_card_add_note.py", "endpoints": {"api_summary": "This API defines a mutation for adding a note to a gift card. It takes an ID and a message as input, and returns the updated gift card and a gift card event.", "methods": ["POST"], "paths": ["/gift-cards/<gift_card_id>/add-note"]}}
{"file": "cloned/saleor/saleor/graphql/giftcard/mutations/gift_card_resend.py", "endpoints": {"api_summary": "This API allows for resending a gift card to a customer via email. It takes an ID of a gift card and an email address as input, and sends a notification to the customer with the gift card details.", "methods": ["POST"], "paths": ["/gift-cards/<gift_card_id>/resend"]}}
{"file": "cloned/saleor/saleor/graphql/page/bulk_mutations.py", "endpoints": {"api_summary": "This API defines endpoints for managing pages and page types. It allows for bulk deletion and publishing of pages, as well as deleting page types.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/pages", "/pages/<page_id>", "/page-types", "/page-types/<page_type_id>"]}}
{"file": "cloned/saleor/saleor/graphql/page/types.py", "endpoints": {"api_summary": "This API defines a page type and a page. The page type defines the attributes that can be assigned to pages of that type, and the page contains the content and metadata for a specific page.", "methods": ["GET", "POST"], "paths": ["/page-type", "/page"]}}
{"file": "cloned/saleor/saleor/graphql/page/schema.py", "endpoints": {"api_summary": "This API defines endpoints for managing pages and page types, including creating, updating, deleting, and translating pages, as well as reordering attributes and attribute values.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/pages", "/pages/<page_id>", "/page-types", "/page-types/<page_type_id>"]}}
{"file": "cloned/saleor/saleor/graphql/page/mutations/page_create.py", "endpoints": {"api_summary": "This API defines a mutation for creating a new page, with fields for the page's title, content, attributes, and publication date. It also includes validation for the page's slug and attributes, and handles the saving of the page and its attributes.", "methods": ["POST"], "paths": ["/api/pages/create"]}}
{"file": "cloned/saleor/saleor/graphql/translations/schema.py", "endpoints": {"api_summary": "This API provides a way to manage translations for various objects in the system, such as products, categories, and pages.", "methods": ["GET", "POST"], "paths": ["/translations", "/translations/<id>"]}}
{"file": "cloned/saleor/saleor/graphql/translations/tests/deprecated/test_translations.py", "endpoints": {"data": {"translation": {"id": "123", "name": "My Product", "translation": {"name": "Mon Produit"}, "product": {"id": "123", "name": "My Product"}}}}}
{"file": "cloned/saleor/saleor/graphql/translations/tests/mutations/test_product_translate.py", "endpoints": {"api_summary": "This API allows for the translation of product names and slugs for different languages. It also allows for the update of product translations when the slug exists.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/translations/tests/mutations/test_page_translate.py", "endpoints": {"api_summary": "This API allows for the translation of page content into different languages. It includes endpoints for creating, updating, and retrieving page translations.", "methods": ["POST"], "paths": ["/page/<page_id>/translate"]}}
{"file": "cloned/saleor/saleor/graphql/translations/tests/mutations/test_promotion_rule_translate.py", "endpoints": {"api_summary": "This API defines a mutation for translating a promotion rule, which can be used to create or update a translation for a promotion rule in a specific language.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/translations/tests/mutations/test_sale_translate.py", "endpoints": {"api_summary": "This API allows for the translation of sale names into different languages.", "methods": ["POST"], "paths": ["/sale/translate"]}}
{"file": "cloned/saleor/saleor/graphql/translations/tests/mutations/test_collection_translate.py", "endpoints": {"api_summary": "This API allows for the translation of collection names and slugs for different languages.", "methods": ["POST"], "paths": ["/collections/<collection_id>/translate"]}}
{"file": "cloned/saleor/saleor/graphql/translations/mutations/voucher_translate.py", "endpoints": {"api_summary": "The VoucherTranslate API allows for the creation and update of translations for vouchers. It takes an ID, language code, and input fields as arguments and returns a Voucher object with the translated fields.", "methods": ["POST"], "paths": ["/voucher/translate"]}}
{"file": "cloned/saleor/saleor/graphql/translations/mutations/attribute_value_bulk_translate.py", "endpoints": {"api_summary": "This API allows for bulk translation of attribute values. It takes a list of attribute value IDs or external references and a language code, and returns the number of translations created or updated, as well as a list of any errors that occurred.", "methods": ["POST"], "paths": ["/attribute-values/bulk-translate"]}}
{"file": "cloned/saleor/saleor/graphql/translations/mutations/page_translate.py", "endpoints": {"api_summary": "The PageTranslate mutation allows for the creation or update of translations for a page. It takes an ID, language code, and input fields for the translation, and returns a TranslatableContent object. This mutation is only used for pages and requires the MANAGE_TRANSLATIONS permission.", "methods": ["POST"], "paths": ["/page/translate"]}}
{"file": "cloned/saleor/saleor/graphql/translations/mutations/category_translate.py", "endpoints": {"api_summary": "The CategoryTranslate API allows for the creation and update of translations for categories. It takes an ID, language code, and input fields as arguments and returns a TranslationError if any errors occur.", "methods": ["POST"], "paths": ["/category/translate"]}}
{"file": "cloned/saleor/saleor/graphql/translations/mutations/product_variant_bulk_translate.py", "endpoints": {"api_summary": "This API allows for the creation and update of translations for product variants.", "methods": ["POST"], "paths": ["/products/variants/translate"]}}
{"file": "cloned/saleor/saleor/graphql/channel/schema.py", "endpoints": {"api_summary": "This API provides endpoints for managing channels, including creating, updating, deleting, activating, deactivating, and reordering warehouses. It also provides a query to retrieve a single channel by ID or slug, and a query to retrieve a list of all channels.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/channels", "/channels/<built-in function id>", "/channels/<built-in function slug>"]}}
{"file": "cloned/saleor/saleor/graphql/channel/tests/queries/test_channel.py", "endpoints": {"api_summary": "This API allows you to retrieve information about a specific channel.", "methods": ["GET"], "paths": ["/api/v1/channels/<channel_id>"]}}
{"file": "cloned/saleor/saleor/graphql/channel/tests/mutations/test_channel_create.py", "endpoints": {"api_summary": "This API defines a GraphQL schema for creating a new channel in the Saleor e-commerce platform.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/channel/tests/mutations/test_channel_activate.py", "endpoints": {"api_summary": "This API allows for the activation and deactivation of channels.", "methods": ["POST"], "paths": ["/graphql"]}}
{"file": "cloned/saleor/saleor/graphql/channel/mutations/channel_activate.py", "endpoints": {"api_summary": "This API defines a single endpoint for activating a channel. The endpoint accepts a channel ID as input and returns the activated channel object.", "methods": ["POST"], "paths": ["/api/channel/activate"]}}
{"file": "cloned/saleor/saleor/graphql/channel/mutations/channel_delete.py", "endpoints": {"api_summary": "This API allows you to delete a channel and migrate orders to a target channel. It also allows you to delete checkouts and product availability.", "methods": ["DELETE"], "paths": ["/api/v1/channels/<id>"]}}
{"file": "cloned/saleor/saleor/graphql/invoice/mutations/invoice_create.py", "endpoints": {"api_summary": "This API allows you to create a ready to send invoice for an order. It requires the order ID and invoice details as input. The API returns the created invoice object.", "methods": ["POST"], "paths": ["/api/invoice/create"]}}
{"file": "cloned/saleor/saleor/graphql/invoice/mutations/invoice_delete.py", "endpoints": {"api_summary": "The InvoiceDelete API allows for the deletion of an invoice. It takes an ID as input and returns a response indicating the success or failure of the deletion. The API also includes permissions and error handling.", "methods": ["DELETE"], "paths": ["/invoices/<built-in function id>"]}}
{"file": "cloned/saleor/saleor/graphql/invoice/mutations/invoice_update.py", "endpoints": {"api_summary": "This API allows for the updating of invoices, including the ability to set the invoice number and URL, and update the invoice metadata and private metadata.", "methods": ["POST"], "paths": ["/invoices/<id>/update"]}}
{"file": "cloned/saleor/saleor/graphql/app/schema.py", "endpoints": {"api_summary": "This API provides endpoints for managing apps, including creating, updating, and deleting apps, as well as retrieving information about apps and their extensions.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/apps", "/apps/<app_id>", "/apps/<app_id>/extensions", "/apps/<app_id>/extensions/<extension_id>"]}}
{"file": "cloned/saleor/saleor/graphql/app/tests/queries/test_apps_installations.py", "endpoints": {"api_summary": "This API provides information about app installations and their logos.", "methods": ["GET"], "paths": ["/appsInstallations", "/appsInstallations/<id>/brand/logo"]}}
{"file": "cloned/saleor/saleor/graphql/app/tests/mutations/test_app_deactivate.py", "endpoints": {"api_summary": "This API allows you to deactivate an app.", "methods": ["POST"], "paths": ["/app/deactivate"]}}
{"file": "cloned/saleor/saleor/graphql/app/tests/mutations/test_app_delete.py", "endpoints": {"api_summary": "This API allows you to delete an app with a given ID. The app must have the manage_orders permission.", "methods": ["POST"], "paths": ["/app/delete"]}}
{"file": "cloned/saleor/saleor/graphql/app/mutations/app_fetch_manifest.py", "endpoints": {"api_summary": "This API fetches and validates a manifest for an app.", "methods": ["POST"], "paths": ["/api/apps/fetch-manifest/"]}}
{"file": "cloned/saleor/saleor/graphql/app/mutations/app_activate.py", "endpoints": {"api_summary": "The API allows for the activation of apps. It takes an app ID as input and returns a success response if the app was successfully activated. The API also supports webhook events for app status changes.", "methods": ["POST"], "paths": ["/apps/<app_id>/activate"]}}
{"file": "cloned/saleor/saleor/graphql/app/mutations/app_deactivate.py", "endpoints": {"api_summary": "The API deactivates an app.", "methods": ["POST"], "paths": ["/api/v1/app/deactivate"]}}
{"file": "cloned/saleor/saleor/graphql/app/mutations/app_token_create.py", "endpoints": {"api_summary": "This API allows you to create, read, update, and delete authentication tokens for apps. It also allows you to manage the apps themselves, including creating, updating, and deleting them.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/apps", "/apps/<app_id>", "/apps/<app_id>/tokens", "/apps/<app_id>/tokens/<token_id>"]}}
{"file": "cloned/saleor/saleor/graphql/app/mutations/app_delete_failed_installation.py", "endpoints": {"api_summary": "The API allows for the deletion of failed installations of apps. It takes an ID of the failed installation as input and returns an error if the installation status is not failed.", "methods": ["DELETE"], "paths": ["/api/app/installations/<built-in function id>"]}}
{"file": "cloned/saleor/saleor/graphql/app/mutations/app_token_delete.py", "endpoints": {"api_summary": "This API allows for the deletion of authentication tokens assigned to apps.", "methods": ["DELETE"], "paths": ["/api/app/token/<built-in function id>"]}}
{"file": "cloned/saleor/saleor/plugins/views.py", "endpoints": {"api_summary": "This API handles webhooks for plugins in Saleor. It allows for handling webhooks for both global and per-channel plugins, and provides a way to retrieve the webhook endpoint for a given plugin and channel.", "methods": ["GET", "POST"], "paths": ["/plugins/<plugin_id>/webhook", "/plugins/<plugin_id>/webhook/<channel_slug>"]}}
{"file": "cloned/saleor/saleor/plugins/webhook/tests/test_tax_webhook.py", "endpoints": {"api_summary": "This API defines a set of endpoints for calculating taxes for orders and checkouts.", "methods": ["GET", "POST"], "paths": ["/taxes/orders/<order_id>/calculate", "/taxes/checkouts/<checkout_id>/calculate"]}}
{"file": "cloned/saleor/saleor/plugins/webhook/tests/test_payment_webhook.py", "endpoints": {"api_summary": "This API defines a payment gateway for the Saleor e-commerce platform. It handles payment authorization, capture, and refund operations.", "methods": ["POST", "GET"], "paths": ["/payments/authorize", "/payments/capture", "/payments/refund"]}}
{"file": "cloned/saleor/saleor/plugins/admin_email/tests/test_plugin.py", "endpoints": {"api_summary": "This file defines a Django plugin for sending email notifications to staff members. It includes a set of REST API endpoints for configuring and testing the email plugin.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/plugins/admin-email/", "/api/plugins/admin-email/configuration/", "/api/plugins/admin-email/test/"]}}
{"file": "cloned/saleor/saleor/order/tasks.py", "endpoints": {"api_summary": "This file defines a set of tasks for managing orders in an e-commerce application. It includes tasks for expiring orders, deleting expired orders, and recalculating order prices.", "methods": ["GET", "POST"], "paths": ["/orders/expire", "/orders/delete-expired", "/orders/recalculate-prices"]}}
{"file": "cloned/saleor/saleor/order/tests/test_fetch_order_prices.py", "endpoints": {"api_summary": "This file defines a code understanding assistant that reads a single source code file and determines if it defines any REST API endpoints.", "methods": ["GET"], "paths": ["/api/code-understanding-assistant/"]}}
{"file": "cloned/saleor/saleor/order/tests/test_order_utils.py", "endpoints": {"api_summary": "This file defines a set of functions for managing orders in an e-commerce application.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/orders", "/orders/<order_id>", "/orders/<order_id>/lines", "/orders/<order_id>/lines/<line_id>"]}}
{"file": "cloned/saleor/saleor/order/tests/test_tasks.py", "endpoints": {"api_summary": "This API defines a set of endpoints for managing orders in an e-commerce application.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/orders", "/orders/<order_id>", "/orders/<order_id>/events"]}}
{"file": "cloned/saleor/saleor/asgi/tests/test_cors.py", "endpoints": {"api_summary": "This API handles CORS requests for a GraphQL API. It allows for preflight requests and simple requests, and allows for specific origins to be configured.", "methods": ["OPTIONS", "POST"], "paths": ["/", "/<built-in function id>"]}}
{"file": "cloned/saleor/saleor/discount/tests/test_discounts.py", "endpoints": {"api_summary": "This file defines a set of utility functions for working with vouchers and discounts in the Saleor e-commerce platform.", "methods": ["GET", "POST"], "paths": ["/vouchers", "/vouchers/<voucher_id>", "/vouchers/<voucher_id>/codes", "/vouchers/<voucher_id>/codes/<code_id>"]}}
{"file": "cloned/java-microservice/user-service/src/main/java/com/apssouza/controllers/AccountController.java", "endpoints": {"api_summary": "The Account API provides endpoints for managing user accounts, including creating, reading, updating, and deleting accounts. It also provides a search endpoint for finding accounts by email.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/accounts", "/accounts/<id>", "/accounts/search"]}}
{"file": "cloned/java-microservice/remainder-service/src/main/java/com/apssouza/integrations/socket/TodoSocketController.java", "endpoints": {"api_summary": "The TodoSocketController defines a socket endpoint for sending and receiving messages related to to-do items. The endpoint is accessible at /socket-todos and sends messages to the /topic/todos topic.", "methods": ["GET", "POST"], "paths": ["/socket-todos", "/topic/todos"]}}
{"file": "cloned/java-microservice/remainder-service/src/main/java/com/apssouza/controllers/TodoServiceStatisticsController.java", "endpoints": {"api_summary": "The TodoServiceStatisticsController provides a REST API for retrieving statistics about the TodoService. The API includes a single endpoint that returns a JSON object with information about the average, minimum, maximum, and count of durations for the TodoService methods.", "methods": ["GET"], "paths": ["/todo-statistics"]}}
{"file": "cloned/java-microservice/remainder-service/src/main/java/com/apssouza/controllers/TodoChangesController.java", "endpoints": {"api_summary": "The TodoChangesController API provides a RESTful interface for retrieving recent changes made to a to-do list. It exposes a single endpoint, GET /todo-changes, which returns a list of TodoChangedEvent objects representing the recent changes.", "methods": ["GET"], "paths": ["/todo-changes"]}}
{"file": "cloned/java-microservice/remainder-service/src/main/java/com/apssouza/controllers/TodoController.java", "endpoints": {"api_summary": "The TodoController API provides endpoints for managing ToDo items. It allows for creating, reading, updating, and deleting ToDo items, as well as searching and updating the status of ToDo items.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/todos", "/todos/search", "/todos/{id}", "/todos/{id}/status"]}}
{"file": "cloned/java-microservice/mail-service/src/main/java/com/apssouza/mailservice/controllers/NotifyController.java", "endpoints": {"api_summary": "The NotifyController API allows for sending emails. It has a single endpoint, /send/email, which accepts a GET request and returns a Future<String> indicating the success or failure of the email send operation.", "methods": ["GET"], "paths": ["/send/email"]}}
{"file": "cloned/java-microservice/mail-service/src/main/java/com/apssouza/mailservice/controllers/EmailController.java", "endpoints": {"api_summary": "The EmailController API provides a RESTful interface for managing emails. It allows users to retrieve a list of all emails, as well as retrieve, create, update, and delete individual emails.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/emails", "/emails/<built-in function id>"]}}
{"file": "cloned/java-microservice/oauth-server/src/main/java/com/apssouza/clients/UserClient.java", "endpoints": {"api_summary": "The UserClient API provides a way to search for users by email and retrieve their information. It is a part of the larger Apssouza system, which manages user accounts and provides a way to interact with them.", "methods": ["GET"], "paths": ["/accounts/search"]}}
{"file": "cloned/java-microservice/api-gateway/src/main/java/com/apssouza/configuration/OAuth2ResourceServerConfiguration.java", "endpoints": {"api_summary": "This API is a resource server configuration for OAuth2 authentication and authorization. It defines endpoints for managing access to resources and provides a token store for storing and retrieving access tokens.", "methods": ["GET", "POST"], "paths": ["/hystrix.stream", "/todos"]}}
{"file": "cloned/java-microservice/api-gateway/src/main/java/com/apssouza/controllers/UserController.java", "endpoints": {"api_summary": "The UserController API provides endpoints for managing user accounts and their associated todos. It includes endpoints for retrieving all users, retrieving a specific user by email, retrieving all todos for a specific user, and creating a new todo for a specific user.", "methods": ["GET", "POST"], "paths": ["/accounts", "/accounts/me", "/accounts/me/todos"]}}
{"file": "cloned/java-microservice/api-gateway/src/main/java/com/apssouza/controllers/TodoController.java", "endpoints": {"api_summary": "The To Do API allows users to create, read, update, and delete to-do items. It also provides endpoints for retrieving all to-do items and for retrieving a specific to-do item by its ID.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/todos", "/todos/<built-in function id>"]}}
{"file": "cloned/java-microservice/api-gateway/src/main/java/com/apssouza/clients/UserClient.java", "endpoints": {"api_summary": "The UserClient API provides endpoints for managing user accounts and retrieving user information. It includes endpoints for creating new users, retrieving all users, and searching for users by email.", "methods": ["GET", "POST"], "paths": ["/users", "/users/<built-in function id>", "/accounts", "/accounts/search"]}}
{"file": "cloned/java-microservice/api-gateway/src/main/java/com/apssouza/clients/TodoClient.java", "endpoints": {"api_summary": "The Todo API allows users to create, read, update, and delete todo items. It also provides a search function to find todo items by user email.", "methods": ["GET", "POST"], "paths": ["/todos", "/todos/search"]}}
{"file": "cloned/website/authserver/src/main/java/org/flowant/website/OAuth2ServerConfig.java", "endpoints": {"api_summary": "This API is an OAuth2 authorization server that provides authentication and authorization services for a website.", "methods": ["GET", "POST"], "paths": ["/oauth/authorize", "/oauth/token", "/oauth/revoke"]}}
{"file": "cloned/website/authserver/src/main/java/org/flowant/website/controller/JwkSetRest.java", "endpoints": {"api_summary": "The JwkSetRest API provides a JSON Web Key Set (JWKS) endpoint for retrieving the public key of the website's JSON Web Token (JWT) signing key.", "methods": ["GET"], "paths": ["/org.flowant.website.controller.JwkSetRest/.well-known/jwks.json"]}}
{"file": "cloned/website/authserver/src/main/java/org/flowant/website/controller/UserInfoEndpointRest.java", "endpoints": {"api_summary": "The UserInfoEndpointRest API provides a single endpoint for retrieving the current user's information. The endpoint is accessible at /me and returns the user's principal object.", "methods": ["GET"], "paths": ["/me"]}}
{"file": "cloned/website/authserver/src/main/java/org/flowant/website/controller/UserRest.java", "endpoints": {"api_summary": "The UserRest API provides endpoints for retrieving user information and admin information. The user endpoint returns a map of user information, while the admin endpoint returns a map of admin information.", "methods": ["GET"], "paths": ["/user", "/admin"]}}
{"file": "cloned/website/authserver/src/test/java/org/flowant/authserver/OAuth2JwtTokenIssuerTests.java", "endpoints": {"api_summary": "This API is an OAuth2 server that provides endpoints for obtaining access tokens and refresh tokens, as well as a user info endpoint for retrieving user information.", "methods": ["GET", "POST"], "paths": ["/oauth/token", "/oauth/token/refresh", "/user/info"]}}
{"file": "cloned/website/backend/src/main/java/org/flowant/website/BackendSecurityConfiguration.java", "endpoints": {"api_summary": "The BackendSecurityConfiguration API provides security configuration for the website's backend REST API. It defines various endpoints for accessing and manipulating content, reviews, replies, files, and search results, as well as endpoints for user authentication and registration.", "methods": ["GET", "POST"], "paths": ["/content", "/review", "/reply", "/files", "/search", "/website", "/user/signup"]}}
{"file": "cloned/website/backend/src/main/java/org/flowant/website/rest/ReplyRest.java", "endpoints": {"api_summary": "The ReplyRest API provides endpoints for managing replies to comments in a website. It allows users to create, read, update, and delete replies, as well as retrieve popular replies by container ID.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/reply", "/reply/popular", "/reply/{id}/{cid}"]}}
{"file": "cloned/website/backend/src/main/java/org/flowant/website/rest/NotificationRest.java", "endpoints": {"api_summary": "The Notification API allows for the creation, retrieval, and deletion of notifications. It also allows for the addition and removal of subscribers to notifications.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/notification", "/notification/{id}/{cid}", "/notification/{id}/{cid}/{subscriber}"]}}
{"file": "cloned/website/backend/src/main/java/org/flowant/website/rest/RepositoryRest.java", "endpoints": {"api_summary": "The RepositoryRest API provides a set of endpoints for managing entities in a Cassandra database. It includes endpoints for retrieving all entities, creating new entities, updating existing entities, and deleting entities by ID.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/entities", "/entities/<id>"]}}
{"file": "cloned/website/backend/src/main/java/org/flowant/website/rest/PopularRepositoryRest.java", "endpoints": {"api_summary": "The PopularRepositoryRest API provides endpoints for retrieving and managing popular items in a container. It allows users to retrieve a list of popular items by container ID, and also provides endpoints for retrieving all items by container ID and author ID, as well as deleting items by ID.", "methods": ["GET", "POST", "DELETE"], "paths": ["/popular", "/popular/<containerId>", "/popular/<containerId>/<authorId>"]}}
{"file": "cloned/website/backend/src/main/java/org/flowant/website/rest/RelationRest.java", "endpoints": {"api_summary": "The Relation API allows users to manage their relationships with other users. It provides endpoints for creating, reading, updating, and deleting relationships.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/relation", "/relation/{method}/{id}/{followee}"]}}
{"file": "cloned/website/backend/src/main/java/org/flowant/website/rest/WebSiteRest.java", "endpoints": {"api_summary": "The WebSiteRest API provides endpoints for managing website data, including creating, reading, updating, and deleting website objects. The API uses HTTP methods and a UUID for identifying resources.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/website", "/website/<built-in function id>"]}}
{"file": "cloned/website/backend/src/main/java/org/flowant/website/rest/ReviewReputationRest.java", "endpoints": {"api_summary": "The Review Reputation API allows users to create, read, update, and delete review reputations. It also provides a way to retrieve all review reputations and a specific review reputation by ID and CID.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/review_rpt", "/review_rpt/<id>/<cid>"]}}
{"file": "cloned/website/backend/src/main/java/org/flowant/website/rest/CruTimeRepositoryRest.java", "endpoints": {"api_summary": "The API provides CRUD operations for entities with CRU time information, including reading, creating, updating, and deleting entities. The API also provides a method for retrieving all entities and a method for retrieving a specific entity by ID.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/entities", "/entities/<id>"]}}
{"file": "cloned/website/backend/src/main/java/org/flowant/website/rest/ContentRest.java", "endpoints": {"api_summary": "The Content API provides endpoints for managing content in a website, including creating, reading, updating, and deleting content. It also provides an endpoint for getting popular content based on a container ID.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/content", "/content/popular", "/content/{id}/{cid}"]}}
{"file": "cloned/website/backend/src/main/java/org/flowant/website/rest/SearchRest.java", "endpoints": {"api_summary": "The SearchRest API allows users to search for content by tag. It returns a list of content that matches the search query, along with a link to the next page of results if there are more than one page of results.", "methods": ["GET"], "paths": ["/search"]}}
{"file": "cloned/website/backend/src/main/java/org/flowant/website/rest/FileRest.java", "endpoints": {"api_summary": "The FileRest API provides endpoints for managing files, including uploading, downloading, and deleting files. The API also supports caching and returns a list of file references for uploaded files.", "methods": ["GET", "POST", "DELETE"], "paths": ["/files", "/files/{id}", "/files/deletes"]}}
{"file": "cloned/website/backend/src/main/java/org/flowant/website/rest/SubItemRest.java", "endpoints": {"api_summary": "The SubItem API allows for the creation, retrieval, update, and deletion of SubItem resources. It also provides a way to retrieve a SubItem by its ID.", "methods": ["POST", "PUT", "GET", "DELETE"], "paths": ["/subitem", "/subitem/<built-in function id>"]}}
{"file": "cloned/website/backend/src/main/java/org/flowant/website/rest/ContentReputationRest.java", "endpoints": {"api_summary": "The Content Reputation API allows for the management of content reputation data, including getting all content reputation data, creating new content reputation data, updating existing content reputation data, and deleting content reputation data by ID and CID.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/content_rpt", "/content_rpt/<id>/<cid>"]}}
{"file": "cloned/website/backend/src/main/java/org/flowant/website/rest/UserRest.java", "endpoints": {"api_summary": "The UserRest API provides endpoints for managing user accounts, including signup, login, and account deletion. It also provides endpoints for retrieving user information and updating user profiles.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/user", "/user/signup", "/user/{id}"]}}
{"file": "cloned/website/backend/src/main/java/org/flowant/website/rest/ReplyReputationRest.java", "endpoints": {"api_summary": "The ReplyReputation API allows for the management of reply reputations, including getting all reputations, creating a new reputation, updating an existing reputation, getting a specific reputation by ID, and deleting a specific reputation by ID.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/reply_rpt", "/reply_rpt/<id>/<cid>"]}}
{"file": "cloned/website/backend/src/main/java/org/flowant/website/rest/MessageRest.java", "endpoints": {"api_summary": "The MessageRest API provides endpoints for managing messages, including retrieving all messages, retrieving a specific message by ID and CID, creating a new message, updating an existing message, and deleting a message by ID and CID.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/message", "/message/{id}/{cid}"]}}
{"file": "cloned/website/backend/src/main/java/org/flowant/website/rest/ReviewRest.java", "endpoints": {"api_summary": "The Review API allows users to create, read, update, and delete reviews for a given container ID. It also provides endpoints for getting all reviews for a given container ID, as well as getting popular reviews for a given container ID.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/review", "/review/popular", "/review/{id}/{cid}"]}}
{"file": "cloned/website/backend/src/test/java/org/flowant/website/integration/BaseIntegrationTest.java", "endpoints": {"api_summary": "This API defines endpoints for managing content, users, reviews, and replies on a website. It also includes endpoints for managing reputation scores for these entities.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/website", "/subitem", "/user", "/content", "/review", "/reply", "/content_reputation", "/review_reputation", "/reply_reputation"]}}
{"file": "cloned/website/backend/src/test/java/org/flowant/website/rest/FileRestTest.java", "endpoints": {"api_summary": "The FileRest API allows for the management of files, including uploading, retrieving, and deleting files.", "methods": ["POST", "GET", "DELETE"], "paths": ["/files", "/files/<id>", "/files/deletes"]}}
{"file": "cloned/website/backend/src/test/java/org/flowant/website/rest/ContentRestTest.java", "endpoints": {"api_summary": "The ContentRestTest class defines a set of tests for the Content REST API endpoints. The tests cover various aspects of the API, including CRUD operations, pagination, and popular sub-item retrieval.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/content", "/content/<id>", "/content/<id>/<cid>", "/content/<id>/<cid>/<ps>"]}}
{"file": "cloned/website/frontend/src/app/app-routing.module.ts", "endpoints": {"api_summary": "This API provides endpoints for user authentication, content management, and user profile management. It also includes endpoints for searching and viewing content, as well as sending notifications and messages.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/signin", "/signup", "/admin", "/search", "/search/:tag", "/content/edit", "/content/edit/:id/:cid", "/content/view/:id/:cid", "/notification", "/message", "/user/profile", "/user/profile/:id", "/user/content", "/user/content/:id", "/**"]}}
{"file": "cloned/website/common/src/main/java/org/flowant/website/repository/UserRepository.java", "endpoints": {"api_summary": "The UserRepository API provides a reactive interface for managing users in a Cassandra database. It includes methods for creating, reading, updating, and deleting users, as well as querying users by username and last name.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users", "/users/<built-in function id>", "/users/<username>", "/users/<lastname>"]}}
{"file": "cloned/website/common/src/main/java/org/flowant/website/repository/NotificationRepository.java", "endpoints": {"api_summary": "The NotificationRepository API provides a way to manage notifications for a user. It allows for creating, reading, updating, and deleting notifications, as well as retrieving a list of notifications for a given user.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/notifications", "/notifications/<notification_id>", "/notifications/subscriber/<subscriber_id>"]}}
{"file": "cloned/EHR-Route/gateway-service/src/main/java/ehroute/gatewayservice/GatewayServiceApplication.java", "endpoints": {"api_summary": "The GatewayServiceApplication defines a set of routes for the EHRoute system, which allows for the discovery and routing of services in the system. The routes are defined using the Spring Cloud Gateway framework, and are used to direct incoming requests to the appropriate service based on the URL path and HTTP method.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/config/**", "/provider/**", "/patient/**", "/identity/**"]}}
{"file": "cloned/EHR-Route/provider-service/src/main/java/ehroute/providerservice/TestController.java", "endpoints": {"api_summary": "The TestController API provides a simple endpoint for testing purposes. It returns a hardcoded message or a message from the service configuration.", "methods": ["GET"], "paths": ["/test"]}}
{"file": "cloned/EHR-Route/identity-service/src/main/java/ehroute/identityservice/controllers/AccountController.java", "endpoints": {"api_summary": "The Identity Service API provides endpoints for managing user accounts, including creating new accounts, retrieving information about the current user, and logging in and out.", "methods": ["GET", "POST"], "paths": ["/account/current", "/account/register"]}}
{"file": "cloned/EHR-Route/identity-service/src/main/java/ehroute/identityservice/controllers/AuthenticationController.java", "endpoints": {"api_summary": "The AuthenticationController API provides endpoints for handling user authentication and consent. It includes endpoints for login, consent, and error handling.", "methods": ["GET", "POST"], "paths": ["/login", "/consent", "/error"]}}
{"file": "cloned/EHR-Route/identity-service/src/main/java/ehroute/identityservice/handlers/account/CreateAccountHandler.java", "endpoints": {"api_summary": "The CreateAccountHandler API endpoint allows users to create a new account by providing an email address and password. The endpoint returns a JSON response with the created account details, including the account ID, email address, and creation date.", "methods": ["POST"], "paths": ["/accounts"]}}
{"file": "cloned/EHR-Route/identity-service/src/main/java/ehroute/identityservice/utilities/app/ApiEndpoints.java", "endpoints": {"api_summary": "The API endpoints in this file provide authentication and account management functionality, allowing users to log in, register, and manage their accounts. The endpoints are organized into two main categories: authentication and account management.", "methods": ["GET", "POST"], "paths": ["/auth", "/login", "/consent", "/account", "/current", "/register"]}}
{"file": "cloned/daos/site_scons/prereq_tools/base.py", "endpoints": {"api_summary": "This file defines a class for managing external prerequisite components", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/components", "/components/<component_name>", "/components/<component_name>/<component_version>"]}}
{"file": "cloned/daos/src/tests/ftest/control/dmg_system_reformat.py", "endpoints": {"api_summary": "This API is used to test the dmg system reformat functionality. It creates a pool using 90% of the available NVMe capacity, stops the engine instances, performs a system erase, and then performs a storage format. It then checks that the engine starts up again, that the pool list is empty, and that the last created pool is in the list.", "methods": ["GET", "POST"], "paths": ["/dmg/system/reformat"]}}
{"file": "cloned/daos/src/tests/ftest/container/basic_snapshot.py", "endpoints": {"api_summary": "This API is a test for a basic snapshot feature in a DAOS container. It creates a container, writes an object to it, takes a snapshot, and then updates the object 500 times. The test then verifies that the snapshot remains unchanged and that the data in the snapshot is the same as the original data.", "methods": ["GET", "POST"], "paths": ["/container/snapshot"]}}
{"file": "cloned/daos/src/control/server/mgmt_fi.go", "endpoints": {"api_summary": "This file defines a set of fault injection endpoints for the DAOS management service. These endpoints allow for simulating and injecting faults into the system for testing and debugging purposes.", "methods": ["POST"], "paths": ["/fault_inject/report", "/fault_inject/mgmt_pool_fault", "/fault_inject/pool_fault"]}}
{"file": "cloned/daos/src/control/server/mgmt_cont.go", "endpoints": {"api_summary": "The API defines a set of endpoints for managing containers in a DAOS pool. It includes endpoints for listing containers, setting container ownership, and other related operations.", "methods": ["GET", "POST"], "paths": ["/containers", "/containers/<container_id>", "/containers/<container_id>/owner"]}}
{"file": "cloned/daos/src/control/server/ctl_firmware.go", "endpoints": {"api_summary": "This API provides methods for querying and updating firmware on storage devices.", "methods": ["GET", "POST"], "paths": ["/firmware/query", "/firmware/update"]}}
{"file": "cloned/daos/src/control/cmd/dmg/auto_test.go", "endpoints": {"message": "Hello, World!"}}
{"file": "cloned/daos/src/control/lib/control/event.go", "endpoints": {"api_summary": "This file defines an event forwarder and logger for the DAOS system. It includes functions for forwarding events to the Management Service (MS) and logging events to the system log.", "methods": ["POST"], "paths": ["/events"]}}
{"file": "cloned/daos/src/control/lib/control/pool_acl.go", "endpoints": {"api_summary": "This API provides methods for managing the Access Control List (ACL) of a DAOS pool.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/pools/<pool_id>/acl", "/pools/<pool_id>/acl/<principal>"]}}
{"file": "cloned/daos/src/control/vendor/golang.org/x/sys/unix/zerrors_netbsd_386.go", "endpoints": {"api_summary": "No REST API endpoints found in this file", "methods": [], "paths": []}}
{"file": "cloned/daos/src/control/vendor/golang.org/x/sys/unix/zerrors_linux_mips.go", "endpoints": {"api_summary": "This API defines a set of endpoints for managing and interacting with a MIPS CPU.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/cpu", "/cpu/<cpu_id>", "/cpu/<cpu_id>/registers", "/cpu/<cpu_id>/registers/<register_id>", "/cpu/<cpu_id>/memory", "/cpu/<cpu_id>/memory/<memory_id>"]}}
{"file": "cloned/daos/src/control/vendor/golang.org/x/sys/unix/zerrors_zos_s390x.go", "endpoints": {"api_summary": "This file defines a set of constants and variables related to the ZFS file system.", "methods": ["GET", "POST", "PUT", "DELETE", "PATCH"], "paths": ["/zfs", "/zfs/<id>", "/zfs/<id>/<name>", "/zfs/<id>/<name>/<property>"]}}
{"file": "cloned/liberty-bikes/game-service/src/main/java/org/libertybikes/restclient/PlayerService.java", "endpoints": {"api_summary": "The PlayerService API allows clients to retrieve information about players and record game results. It provides endpoints for retrieving a player's information by ID, and for recording a game result for a player.", "methods": ["GET", "POST"], "paths": ["/player/{playerId}", "/rank/{playerId}"]}}
{"file": "cloned/liberty-bikes/game-service/src/main/java/org/libertybikes/game/round/service/GameRoundService.java", "endpoints": {"api_summary": "The GameRoundService API provides endpoints for creating, retrieving, and managing game rounds. It also includes endpoints for checking the availability of rounds and requeuing rounds.", "methods": ["GET", "POST"], "paths": ["/round", "/round/available", "/round/{roundId}", "/round/{roundId}/requeue"]}}
{"file": "cloned/liberty-bikes/game-service/src/main/java/org/libertybikes/game/round/service/GameRoundWebsocket.java", "endpoints": {"api_summary": "This API allows clients to connect to a game round via websocket and receive updates on the game state. It also allows clients to send updates to the game state, such as player movements and game start/stop.", "methods": ["GET", "POST"], "paths": ["/round/ws/{roundId}"]}}
{"file": "cloned/liberty-bikes/game-service/src/main/java/org/libertybikes/game/round/service/PartyService.java", "endpoints": {"api_summary": "The PartyService API provides endpoints for managing parties and their rounds. It also allows clients to join the queue for a party.", "methods": ["GET", "POST"], "paths": ["/party", "/party/describe", "/party/{partyId}", "/party/{partyId}/round", "/party/{partyId}/queue"]}}
{"file": "cloned/liberty-bikes/auth-service/src/main/java/org/libertybikes/auth/service/AuthTypes.java", "endpoints": {"api_summary": "The AuthTypes API provides a list of available authentication types for the Liberty Bikes application.", "methods": ["GET"], "paths": ["/auth-types"]}}
{"file": "cloned/liberty-bikes/auth-service/src/main/java/org/libertybikes/auth/service/google/GoogleAuth.java", "endpoints": {"api_summary": "The GoogleAuth API allows users to authenticate with Google and retrieve their profile information.", "methods": ["GET"], "paths": ["/GoogleAuth", "/GoogleAuth/GoogleCallback"]}}
{"file": "cloned/liberty-bikes/auth-service/src/main/java/org/libertybikes/auth/service/google/GoogleCallback.java", "endpoints": {"api_summary": "The GoogleCallback API endpoint allows users to authenticate with Google and receive a JWT token for accessing protected resources.", "methods": ["GET"], "paths": ["/GoogleCallback"]}}
{"file": "cloned/liberty-bikes/auth-service/src/main/java/org/libertybikes/auth/service/github/GitHubCallback.java", "endpoints": {"api_summary": "This API endpoint is used for GitHub authentication and retrieves the user's email address using the GitHub OAuth API. It also creates a JWT token with the user's email address and redirects the user to the frontend URL with the token.", "methods": ["GET"], "paths": ["/GitHubCallback"]}}
{"file": "cloned/liberty-bikes/auth-service/src/main/java/org/libertybikes/auth/service/github/GitHubUserAPI.java", "endpoints": {"api_summary": "The GitHubUserAPI provides a RESTful interface for retrieving user email addresses from the GitHub API. It uses the javax.ws.rs.GET annotation to define the HTTP GET method and the javax.ws.rs.Path annotation to define the URL path. The API also uses the javax.ws.rs.Produces annotation to specify the media type of the response and the javax.ws.rs.QueryParam annotation to specify the query parameter for the access token.", "methods": ["GET"], "paths": ["/user/emails"]}}
{"file": "cloned/liberty-bikes/auth-service/src/main/java/org/libertybikes/auth/service/github/GitHubOAuthAPI.java", "endpoints": {"api_summary": "The GitHubOAuthAPI provides a REST API for authenticating with GitHub using OAuth. It includes a single endpoint for retrieving an access token, which can be used to access GitHub's API.", "methods": ["GET"], "paths": ["/login/oauth/access_token"]}}
{"file": "cloned/liberty-bikes/auth-service/src/main/java/org/libertybikes/auth/service/github/GitHubAuth.java", "endpoints": {"api_summary": "The GitHubAuth API endpoint allows users to authenticate with GitHub and retrieve an access token for the LibertyBikes application.", "methods": ["GET"], "paths": ["/GitHubAuth"]}}
{"file": "cloned/liberty-bikes/auth-service/src/main/java/org/libertybikes/auth/service/twitter/TwitterAuth.java", "endpoints": {"api_summary": "The TwitterAuth API provides a way for users to authenticate with Twitter using OAuth. It includes a single endpoint that returns a URL for the user to be redirected to for authentication.", "methods": ["GET"], "paths": ["/TwitterAuth"]}}
{"file": "cloned/liberty-bikes/auth-service/src/main/java/org/libertybikes/auth/service/twitter/TwitterCallback.java", "endpoints": {"api_summary": "The TwitterCallback API endpoint allows users to authenticate with Twitter and retrieve their Twitter ID and screen name. The endpoint also creates a JSON Web Token (JWT) with the user's information and redirects the user to the frontend URL with the JWT.", "methods": ["GET"], "paths": ["/TwitterCallback"]}}
{"file": "cloned/liberty-bikes/player-service/src/main/java/org/libertybikes/player/service/PlayerService.java", "endpoints": {"api_summary": "The PlayerService API provides endpoints for managing player information, including creating, retrieving, and updating players. It also provides an endpoint for retrieving information about the current JWT token.", "methods": ["GET", "POST"], "paths": ["/player", "/player/{playerId}", "/player/getJWTInfo"]}}
{"file": "cloned/liberty-bikes/player-service/src/main/java/org/libertybikes/player/service/RankingService.java", "endpoints": {"api_summary": "The RankingService API provides endpoints for retrieving the top N players and recording game results for a player. The API also includes endpoints for creating and updating players.", "methods": ["GET", "POST"], "paths": ["/rank", "/rank/topNPlayers", "/rank/{playerId}"]}}
{"file": "cloned/liberty-bikes/frontend/prebuild/src/app/app-routing.module.ts", "endpoints": {"api_summary": "This API provides endpoints for a game application, allowing users to log in, access the game, and control gameplay.", "methods": ["GET", "POST"], "paths": ["/login", "/login/:jwt", "/game", "/play"]}}
{"file": "cloned/bmo/extensions/BMO/web/js/firefox-crash-table.js", "endpoints": {"api_summary": "This API provides a table of crash data for Firefox bugs, allowing users to view and update status flags for crash reports.", "methods": ["GET"], "paths": ["/crash-stop-addon/sumup.html"]}}
{"file": "cloned/bmo/extensions/ComponentWatching/web/js/overlay.js", "endpoints": {"api_summary": "This API allows users to watch or unwatch components or products in Bugzilla. It provides endpoints for retrieving the current watch list, adding or removing watches, and tracking events.", "methods": ["GET", "POST", "DELETE"], "paths": ["/component-watching", "/component-watching/<watch_id>"]}}
{"file": "cloned/TodoMVC-DDD-CQRS-EventSourcing/src/Web/ClientApp/src/setupProxy.js", "endpoints": {"api_summary": "This API is a proxy server that forwards requests to a target server. It supports HTTP methods GET, POST, PUT, DELETE, and PATCH, and has a single endpoint at /todo.", "methods": ["GET", "POST", "PUT", "DELETE", "PATCH"], "paths": ["/todo"]}}
{"file": "cloned/TodoMVC-DDD-CQRS-EventSourcing/src/Web/ClientApp/src/services/todo-local.js", "endpoints": {"api_summary": "The TodoLocal API allows for the management of todo items, including creating, completing, and removing them. The API also allows for retrieving all todo items and retrieving a single todo item by its ID.", "methods": ["GET", "POST", "DELETE"], "paths": ["/todo/all", "/todo/add", "/todo/complete", "/todo/active", "/todo/remove"]}}
{"file": "cloned/subscan-essentials/docs/api/docs.go", "endpoints": {"api_summary": "This API provides information about the EVM contracts, tokens, and transactions on the Subscan network.", "methods": ["POST"], "paths": ["/api/plugin/evm/contract", "/api/plugin/evm/token", "/api/plugin/evm/transaction"]}}
{"file": "cloned/subscan-essentials/internal/server/http/http_test.go", "endpoints": {"api_summary": "This API provides various endpoints for interacting with the Subscan blockchain explorer, including retrieving metadata, blocks, extrinsics, events, and more. It also includes a runtime metadata endpoint for retrieving metadata about the Subscan runtime.", "methods": ["POST", "GET"], "paths": ["/api/scan/metadata", "/api/scan/blocks", "/api/scan/block", "/api/scan/extrinsics", "/api/scan/extrinsic", "/api/scan/events", "/api/scan/check_hash", "/api/scan/runtime/metadata", "/api/scan/runtime/list", "/api/now", "/ping"]}}
{"file": "cloned/subscan-essentials/internal/server/http/http.go", "endpoints": {"api_summary": "This API provides various endpoints for querying and retrieving data related to the Subscan platform, including blockchain data, metadata, and extrinsic information.", "methods": ["GET", "POST"], "paths": ["/api/now", "/api/scan/metadata", "/api/scan/token", "/api/scan/blocks", "/api/scan/block", "/api/scan/extrinsics", "/api/scan/extrinsic", "/api/scan/events", "/api/scan/event", "/api/scan/logs", "/api/scan/check_hash", "/api/scan/runtime/metadata", "/api/scan/runtime/list"]}}
{"file": "cloned/subscan-essentials/plugins/evm/http/etherscan_test.go", "endpoints": {"api_summary": "The Etherscan API provides information about Ethereum blocks, transactions, and accounts. It also allows users to verify smart contracts and submit them for verification.", "methods": ["GET"], "paths": ["/etherscan?module=logs&action=getLogs&offset=10&page=1", "/etherscan?module=transaction&action=getstatus&txhash=0xa9972c6f84de1e56d924d7cdcfbfc7ba06eba92f1e3823bf6cd7147c4e277621", "/etherscan?module=transaction&action=gettxreceiptstatus&txhash=0xa9972c6f84de1e56d924d7cdcfbfc7ba06eba92f1e3823bf6cd7147c4e277621", "/etherscan?module=account&action=balance&address=0x66b8c60c79dfad02fc04f1f13aab0f6feff8615b", "/etherscan?module=account&action=balancemulti&address=0x66b8c60c79dfad02fc04f1f13aab0f6feff8615b,0xe22d73f5dcccb31a994ad4e7ad265cf69b4e725a", "/etherscan?module=account&action=txlist&address=0x66b8c60c79dfad02fc04f1f13aab0f6feff8615b&startblock=0&endblock=99999999&sort=asc&offset=100", "/etherscan?module=account&action=tokentx&address=0x66b8c60c79dfad02fc04f1f13aab0f6feff8615b&offset=100&page=1", "/etherscan?module=account&action=tokennfttx&address=0x66b8c60c79dfad02fc04f1f13aab0f6feff8615b&offset=100&page=1", "/etherscan?module=account&action=token1155tx&address=0x66b8c60c79dfad02fc04f1f13aab0f6feff8615b&offset=100&page=1", "/etherscan?module=contract&action=getabi&address=0x66b8c60c79dfad02fc04f1f13aab0f6feff8615b", "/etherscan?module=contract&action=getcontractcreation&contractaddresses=0x66b8c60c79dfad02fc04f1f13aab0f6feff8615b", "/etherscan?module=contract&action=checkverifystatus&guid=0x66b8c60c79dfad02fc04f1f13aab0f6feff8615b"]}}
{"file": "cloned/subscan-essentials/plugins/evm/http/http.go", "endpoints": {"api_summary": "This API provides information about Ethereum Virtual Machine (EVM) blocks, transactions, and contracts. It also includes endpoints for retrieving token holder information, token transfer information, and collectibles.", "methods": ["GET", "POST"], "paths": ["/api/plugin/evm/blocks", "/api/plugin/evm/block", "/api/plugin/evm/transaction", "/api/plugin/evm/transactions", "/api/plugin/evm/accounts", "/api/plugin/evm/contract", "/api/plugin/evm/contracts", "/api/plugin/evm/contract/solcs", "/api/plugin/evm/token/holder", "/api/plugin/evm/tokens", "/api/plugin/evm/token/transfer", "/api/plugin/evm/token/erc721/collectibles"]}}
{"file": "cloned/subscan-essentials/plugins/balance/http/http.go", "endpoints": {"api_summary": "This API provides information about accounts and transfers on a blockchain.", "methods": ["POST"], "paths": ["/api/plugin/balance/accounts", "/api/plugin/balance/account", "/api/plugin/balance/transfer"]}}
{"file": "cloned/subscan-essentials/pkg/go-web3/net/net.go", "endpoints": {"api_summary": "The Net Module provides information about the network and its peers. It includes methods to check if the client is listening for network connections, get the number of connected peers, and get the current network id.", "methods": ["GET"], "paths": ["/net/listening", "/net/peerCount", "/net/version"]}}
{"file": "cloned/subscan-essentials/pkg/go-web3/personal/personal.go", "endpoints": {"api_summary": "The Personal Module provides methods for managing accounts and sending transactions.", "methods": ["GET", "POST"], "paths": ["/personal/listAccounts", "/personal/newAccount", "/personal/sendTransaction", "/personal/unlockAccount"]}}
{"file": "cloned/micronaut-microservices-poc/policy-search-service/src/main/java/pl/altkom/asc/lab/micronaut/poc/policy/search/infrastructure/adapters/web/PolicySearchController.java", "endpoints": {"api_summary": "The Policy Search API allows users to search for policies based on a query text. The API returns a list of policies that match the query text.", "methods": ["GET"], "paths": ["/policies"]}}
{"file": "cloned/micronaut-microservices-poc/policy-search-service/src/test/java/pl/altkom/asc/lab/micronaut/poc/PolicySearchTestClient.java", "endpoints": {"api_summary": "The Policy Search Test Client provides a simple interface for searching for policies based on a query text. It returns a list of policies that match the query.", "methods": ["GET"], "paths": ["/policy-search-service/policies"]}}
{"file": "cloned/micronaut-microservices-poc/web-angular/src/app/app-routing.module.ts", "endpoints": {"api_summary": "This API provides endpoints for managing policies, products, and accounts. It includes endpoints for listing, creating, and retrieving policies and products, as well as endpoints for managing user accounts.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/home", "/account", "/products", "/products/:productCode", "/policies", "/policies/:policyNumber", "/policy/fromOffer/:offerNumber"]}}
{"file": "cloned/micronaut-microservices-poc/web-angular/src/app/shared/product-service.ts", "endpoints": {"api_summary": "The ProductService API provides endpoints for retrieving product information from a backend server. It includes endpoints for retrieving a list of all products and retrieving a specific product by its code.", "methods": ["GET"], "paths": ["/products", "/products/<productCode>"]}}
{"file": "cloned/micronaut-microservices-poc/product-service/src/main/java/pl/altkom/asc/lab/micronaut/poc/product/service/infrastructure/adapters/web/ProductsController.java", "endpoints": {"api_summary": "The Products API provides endpoints for retrieving and manipulating product information. It allows for querying and retrieving product details, as well as creating, updating, and deleting products.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/products", "/products/<productCode>"]}}
{"file": "cloned/micronaut-microservices-poc/web-vue/src/router.js", "endpoints": {"api_summary": "This API provides a user interface for interacting with a chatbot, account, products, and policies. It also provides a dashboard for viewing and managing policies.", "methods": ["GET", "POST"], "paths": ["/", "/chat", "/chatbot", "/account", "/products", "/dashboard", "/products/:productCode", "/policy/fromOffer/:offerNumber", "/policies", "/policies/:policyNumber"]}}
{"file": "cloned/micronaut-microservices-poc/pricing-service/src/main/java/pl/altkom/asc/lab/micronaut/poc/pricing/intrastructure/adapters/web/PricingController.java", "endpoints": {"api_summary": "The Pricing API provides a single endpoint for calculating prices for insurance policies. The endpoint accepts a CalculatePriceCommand object as input and returns a CalculatePriceResult object as output.", "methods": ["POST"], "paths": ["/pricing/calculate-price"]}}
{"file": "cloned/micronaut-microservices-poc/pricing-service/src/test/java/pl/altkom/asc/lab/micronaut/poc/pricing/PricingTestClient.java", "endpoints": {"api_summary": "The Pricing Test Client API allows clients to calculate prices for various products and services. It provides a single endpoint for calculating prices, which accepts a JSON payload containing the necessary information to perform the calculation.", "methods": ["POST"], "paths": ["/pricing-service/pricing/calculate"]}}
{"file": "cloned/micronaut-microservices-poc/pricing-service-api/src/main/java/pl/altkom/asc/lab/micronaut/poc/pricing/service/api/v1/PricingOperations.java", "endpoints": {"api_summary": "The PricingOperations API provides a single endpoint for calculating prices for insurance policies. The API accepts a CalculatePriceCommand object as the request body and returns a CalculatePriceResult object as the response.", "methods": ["POST"], "paths": ["/calculate"]}}
{"file": "cloned/micronaut-microservices-poc/policy-service-api/src/main/java/pl/altkom/asc/lab/micronaut/poc/policy/service/api/v1/OfferOperations.java", "endpoints": {"api_summary": "The OfferOperations API provides a single endpoint for creating a new offer. The API accepts a CreateOfferCommand object as the request body and returns a CreateOfferResult object as the response.", "methods": ["POST"], "paths": ["/v1/offer"]}}
{"file": "cloned/micronaut-microservices-poc/policy-service-api/src/main/java/pl/altkom/asc/lab/micronaut/poc/policy/service/api/v1/PolicyOperations.java", "endpoints": {"api_summary": "The PolicyOperations API provides endpoints for creating, retrieving, and terminating policies. It also provides a query endpoint for retrieving policy details.", "methods": ["GET", "POST"], "paths": ["/policy/{policyNumber}", "/policy/create", "/policy/terminate"]}}
{"file": "cloned/micronaut-microservices-poc/dashboard-service-api/src/main/java/pl/altkom/asc/lab/micronaut/poc/dashboard/service/api/v1/DashboardOperations.java", "endpoints": {"api_summary": "The DashboardOperations API provides endpoints for querying sales data, including total sales, sales trends, and agent sales. The API accepts queries as JSON bodies and returns results in JSON format.", "methods": ["POST"], "paths": ["/totalsales", "/trends", "/agentssales"]}}
{"file": "cloned/micronaut-microservices-poc/dashboard-service/src/main/java/pl/altkom/asc/lab/micronaut/poc/dashboard/infrastructure/adapters/elastic/ElasticHealthCheck.java", "endpoints": {"api_summary": "The Elastic Health Check API provides a simple health check endpoint for Elasticsearch clusters. It returns a JSON object with the health status of the cluster and any relevant details.", "methods": ["GET"], "paths": ["/health"]}}
{"file": "cloned/micronaut-microservices-poc/dashboard-service/src/main/java/pl/altkom/asc/lab/micronaut/poc/dashboard/infrastructure/adapters/web/DashboardController.java", "endpoints": {"api_summary": "The Dashboard API provides endpoints for querying sales data, including total sales, sales trends, and agent sales. The API uses the Command Bus pattern to execute queries and return results.", "methods": ["GET", "POST"], "paths": ["/dashboard/total-sales", "/dashboard/sales-trends", "/dashboard/agents-sales"]}}
{"file": "cloned/micronaut-microservices-poc/chat-service/src/main/java/pl/altkom/asc/lab/micronaut/poc/chat/service/infrastructure/adapters/web/ChatWebSocket.java", "endpoints": {"api_summary": "The ChatWebSocket API allows clients to connect to a chat room and send messages to other clients in the room. The API also allows clients to join and leave the chat room.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/ws/chat/{topic}/{username}"]}}
{"file": "cloned/micronaut-microservices-poc/policy-service/src/main/java/pl/altkom/asc/lab/micronaut/poc/policy/infrastructure/adapters/restclient/PricingClient.java", "endpoints": {"api_summary": "The PricingClient API provides a single endpoint for calculating prices for policies. The API accepts a CalculatePriceCommand and returns a CalculatePriceResult.", "methods": ["POST"], "paths": ["/pricing/calculate"]}}
{"file": "cloned/micronaut-microservices-poc/policy-service/src/main/java/pl/altkom/asc/lab/micronaut/poc/policy/infrastructure/adapters/web/PolicyController.java", "endpoints": {"api_summary": "The Policy API provides endpoints for creating, retrieving, and terminating policies. It also provides a query endpoint for retrieving policy details.", "methods": ["GET", "POST", "DELETE"], "paths": ["/policies", "/policies/<policyNumber>", "/policies/<policyNumber>/terminate"]}}
{"file": "cloned/micronaut-microservices-poc/policy-service/src/main/java/pl/altkom/asc/lab/micronaut/poc/policy/infrastructure/adapters/web/OfferController.java", "endpoints": {"api_summary": "The Offer API provides endpoints for creating and managing offers for insurance policies. It allows users to create new offers, retrieve existing offers, and update or delete them as needed.", "methods": ["POST"], "paths": ["/offers"]}}
{"file": "cloned/micronaut-microservices-poc/policy-service/src/main/java/pl/altkom/asc/lab/micronaut/poc/policy/infrastructure/adapters/web/HelloController.java", "endpoints": {"api_summary": "The HelloController API provides a simple HTTP endpoint for checking the health of the service. It returns a JSON object with the service version and status.", "methods": ["GET"], "paths": ["/hello", "/hello/version"]}}
{"file": "cloned/micronaut-microservices-poc/policy-service/src/test/java/pl/altkom/asc/lab/micronaut/poc/policy/HelloTestClient.java", "endpoints": {"api_summary": "The HelloTestClient API provides a simple interface for retrieving the version of the policy service and checking its health.", "methods": ["GET"], "paths": ["/hello", "/hello/version"]}}
{"file": "cloned/micronaut-microservices-poc/policy-service/src/test/java/pl/altkom/asc/lab/micronaut/poc/policy/PolicyTestClient.java", "endpoints": {"api_summary": "The Policy Test Client API provides endpoints for creating, retrieving, and terminating policies. It also provides a query endpoint for retrieving policy details.", "methods": ["GET", "POST", "POST"], "paths": ["/policy-service/policies/{policyNumber}", "/policy-service/policies/", "/policy-service/policies/terminate"]}}
{"file": "cloned/micronaut-microservices-poc/product-service-api/src/main/java/pl/altkom/asc/lab/micronaut/poc/product/service/api/v1/ProductOperations.java", "endpoints": {"api_summary": "The ProductOperations API provides endpoints for retrieving information about products. It allows users to retrieve a list of all products or a specific product by its code.", "methods": ["GET"], "paths": ["/products", "/products/{productCode}"]}}
{"file": "cloned/micronaut-microservices-poc/policy-search-service-api/src/main/java/pl/altkom/asc/lab/micronaut/poc/policy/search/service/api/v1/PolicySearchOperations.java", "endpoints": {"api_summary": "The Policy Search API allows users to search for policies based on a query text. The API returns a list of policies that match the query.", "methods": ["GET"], "paths": ["/policies?q=<queryText>"]}}
{"file": "cloned/micronaut-microservices-poc/payment-service/src/main/java/pl/altkom/asc/lab/micronaut/poc/payment/infrastructure/adapters/web/PaymentController.java", "endpoints": {"api_summary": "The Payment API provides endpoints for managing policy accounts and retrieving account balances. It also includes endpoints for handling payment operations.", "methods": ["GET", "POST"], "paths": ["/payment/accounts", "/payment/accountBalance/<accountNumber>"]}}
{"file": "cloned/micronaut-microservices-poc/payment-service-api/src/main/java/pl/altkom/asc/lab/micronaut/poc/payment/service/api/v1/operations/PaymentOperations.java", "endpoints": {"api_summary": "The PaymentOperations API provides endpoints for retrieving information about policy accounts and their balances. The API allows users to retrieve a list of all policy accounts and retrieve the balance for a specific account by account number.", "methods": ["GET"], "paths": ["/accounts", "/accounts/{accountNumber}"]}}
{"file": "cloned/micronaut-microservices-poc/agent-portal-gateway/src/main/java/pl/altkom/asc/lab/micronaut/poc/gateway/DashboardGatewayController.java", "endpoints": {"api_summary": "The DashboardGatewayController API provides endpoints for querying sales data, including total sales, sales trends, and agent sales. The API is secured with authentication and can be accessed at the /api/dashboard endpoint.", "methods": ["POST"], "paths": ["/api/dashboard/totalsales", "/api/dashboard/trends", "/api/dashboard/agentssales"]}}
{"file": "cloned/micronaut-microservices-poc/agent-portal-gateway/src/main/java/pl/altkom/asc/lab/micronaut/poc/gateway/PaymentGatewayController.java", "endpoints": {"api_summary": "The PaymentGatewayController API provides endpoints for managing payments and accounts. It allows for retrieving a list of accounts and performing various payment-related operations.", "methods": ["GET"], "paths": ["/api/payments/accounts"]}}
{"file": "cloned/micronaut-microservices-poc/agent-portal-gateway/src/main/java/pl/altkom/asc/lab/micronaut/poc/gateway/OfferGatewayController.java", "endpoints": {"api_summary": "The OfferGatewayController API provides a single endpoint for creating a new offer. The endpoint accepts a JSON payload containing the offer details and returns a JSON object with the result of the offer creation.", "methods": ["POST"], "paths": ["/api/offers"]}}
{"file": "cloned/micronaut-microservices-poc/agent-portal-gateway/src/main/java/pl/altkom/asc/lab/micronaut/poc/gateway/ProductGatewayController.java", "endpoints": {"api_summary": "The ProductGatewayController API provides endpoints for retrieving product information from the ProductGatewayClient. The API allows for retrieving all products or a specific product by product code.", "methods": ["GET"], "paths": ["/api/products", "/api/products/{productCode}"]}}
{"file": "cloned/micronaut-microservices-poc/agent-portal-gateway/src/main/java/pl/altkom/asc/lab/micronaut/poc/gateway/DocumentsGatewayController.java", "endpoints": {"api_summary": "The DocumentsGatewayController API provides a single endpoint for retrieving documents for a given policy number. The endpoint is protected by authentication and returns a list of documents for the specified policy.", "methods": ["GET"], "paths": ["/api/documents/{policyNumber}"]}}
{"file": "cloned/micronaut-microservices-poc/agent-portal-gateway/src/main/java/pl/altkom/asc/lab/micronaut/poc/gateway/PolicyGatewayController.java", "endpoints": {"api_summary": "The Policy Gateway API provides endpoints for creating, retrieving, and terminating policies. It also allows for searching for policies based on a query.", "methods": ["GET", "POST"], "paths": ["/api/policies", "/api/policies/{policyNumber}", "/api/policies/create", "/api/policies/terminate"]}}
{"file": "cloned/micronaut-microservices-poc/agent-portal-gateway/src/main/java/pl/altkom/asc/lab/micronaut/poc/gateway/client/v1/PolicySearchGatewayClient.java", "endpoints": {"api_summary": "The Policy Search Gateway Client provides a RESTful API for searching and retrieving policy information. It allows clients to search for policies based on various criteria, such as policy number, policyholder name, and policy status. The API also provides endpoints for retrieving detailed policy information and updating policy status.", "methods": ["GET", "POST"], "paths": ["/policies", "/policies/<policy_number>", "/policies/<policy_number>/status"]}}
{"file": "cloned/micronaut-microservices-poc/agent-portal-gateway/src/main/java/pl/altkom/asc/lab/micronaut/poc/gateway/client/v1/ProductGatewayClient.java", "endpoints": {"api_summary": "The ProductGatewayClient API provides a client interface for interacting with the Product Service, which manages product information. The API includes a single endpoint for retrieving product details by product code.", "methods": ["GET"], "paths": ["/products/<productCode>"]}}
{"file": "cloned/micronaut-microservices-poc/agent-portal-gateway/src/main/java/pl/altkom/asc/lab/micronaut/poc/gateway/client/v1/DocumentsGatewayClient.java", "endpoints": {"api_summary": "The DocumentsGatewayClient API provides a client interface for interacting with the Documents Service, which manages the storage and retrieval of documents. The API includes a single endpoint for finding documents by policy number.", "methods": ["GET"], "paths": ["/documents/find"]}}
{"file": "cloned/micronaut-microservices-poc/agent-portal-gateway/src/main/java/pl/altkom/asc/lab/micronaut/poc/gateway/client/v1/PaymentGatewayClient.java", "endpoints": {"api_summary": "The Payment Gateway Client API provides a simple interface for interacting with the Payment Service. It allows for creating, retrieving, and updating payments, as well as retrieving payment information.", "methods": ["GET", "POST", "PUT"], "paths": ["/payment", "/payment/<payment_id>", "/payment/<payment_id>/info"]}}
{"file": "cloned/micronaut-microservices-poc/agent-portal-gateway/src/main/java/pl/altkom/asc/lab/micronaut/poc/gateway/client/v1/PolicyGatewayClient.java", "endpoints": {"api_summary": "The PolicyGatewayClient API provides endpoints for creating, retrieving, and terminating policies, as well as creating offers. It also provides a query endpoint for retrieving policy details.", "methods": ["GET", "POST"], "paths": ["/offers", "/policies", "/policies/<policyNumber>", "/policies/terminate"]}}
{"file": "cloned/micronaut-microservices-poc/agent-portal-gateway/src/main/java/pl/altkom/asc/lab/micronaut/poc/gateway/client/v1/DashboardGatewayClient.java", "endpoints": {"api_summary": "The DashboardGatewayClient API provides endpoints for querying sales data, including total sales, sales trends, and agent sales. The API is designed to be used by clients that need to retrieve and display sales data in a dashboard or report.", "methods": ["POST"], "paths": ["/dashboard/totalsales", "/dashboard/trends", "/dashboard/agentssales"]}}
{"file": "cloned/opg-use-an-lpa/service-admin/internal/server/server.go", "endpoints": {"api_summary": "This API provides a search functionality for users to search for LPA accounts and view statistics. It also provides a system message functionality for admins to send messages to users.", "methods": ["GET", "POST"], "paths": ["/helloworld", "/logout", "/", "/stats", "/system-message"]}}
{"file": "cloned/opg-use-an-lpa/service-admin/internal/server/handlers/search.go", "endpoints": {"api_summary": "This API allows users to search for LPA information by email, activation code, or LPA number. It also provides information about the added by and activation key for a given LPA.", "methods": ["GET", "POST"], "paths": ["/search"]}}
{"file": "cloned/opg-use-an-lpa/scripts/call-api-gateway/call_api_gateway.py", "endpoints": {"api_summary": "This API allows for the lookup of LPA IDs on the Sirius API Gateway. It provides a single endpoint for GET requests to retrieve LPA data by ID.", "methods": ["GET"], "paths": ["/v1/use-an-lpa/lpas/<lpa_id>"]}}
{"file": "cloned/zksync/core/tests/ts-tests/tests/suits/no2fa.ts", "endpoints": {"api_summary": "This file defines a set of tests for a No2FA account in the zkSync library. The tests cover various operations such as transfers, batch transfers, swaps, and withdrawals. The tests also cover the enabling and disabling of 2FA for the account.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/no2fa/transfers", "/no2fa/batch", "/no2fa/swaps", "/no2fa/withdrawals"]}}
{"file": "cloned/zksync/sdk/zksync.js/src/rest-provider.ts", "endpoints": {"api_summary": "This API provides information about the zkSync network, including account information, transaction history, and network status.", "methods": ["GET", "POST"], "paths": ["/accounts/<idOrAddress>/<infoType>", "/accounts/<idOrAddress>", "/blocks/<blockPosition>", "/blocks", "/config", "/fee", "/fee/batch", "/networkStatus", "/tokens", "/tokens/<tokenLike>", "/tokens/<tokenLike>/priceIn/<tokenIdOrUsd>", "/transactions", "/transactions/<txHash>", "/transactions/batches/<batchHash>", "/tokens/nft/<id>", "/tokens/nft/<id>/owner", "/tokens/nft_id_by_tx_hash/<txHash>"]}}
{"file": "cloned/zksync/sdk/zksync.js/src/typechain/ZkSyncNFTFactoryFactory.ts", "endpoints": {"api_summary": "This file defines a smart contract for a non-fungible token (NFT) factory on the Ethereum blockchain. It includes functions for creating and managing NFTs, as well as functions for minting and transferring NFTs.", "methods": ["GET", "POST"], "paths": ["/nft/create", "/nft/mint", "/nft/transfer"]}}
{"file": "cloned/profile_service/tests/CRUD.test.js", "endpoints": {"api_summary": "This API provides endpoints for creating, modifying, and deleting profiles, teams, and organizations. It also provides a query endpoint for retrieving all profiles in the system.", "methods": ["POST", "PUT", "DELETE"], "paths": ["/profiles", "/teams", "/organizations", "/queryProfiles"]}}
{"file": "cloned/profile_service/tests/teamAndOrganizationLogic.test.js", "endpoints": {"api_summary": "This API is a GraphQL API that allows for querying and mutating data related to organizations, profiles, and teams. It provides endpoints for creating, modifying, and deleting organizations, profiles, and teams, as well as for querying the relationships between them.", "methods": ["GET", "POST"], "paths": ["/organizations", "/profiles", "/teams"]}}
{"file": "cloned/profile_service/src/index.js", "endpoints": {"api_summary": "This API provides endpoints for managing profiles, teams, and organizations, as well as for authentication and authorization. It also includes endpoints for introspecting tokens and retrieving default values.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/profile", "/profile/<id>", "/team", "/team/<id>", "/organization", "/organization/<id>", "/auth", "/introspect", "/defaults"]}}
{"file": "cloned/profile_service/src/Resolvers/Query.js", "endpoints": {"api_summary": "This API provides search functionality for profiles, addresses, teams, organizations, and approvals. It also provides an integration endpoint for retrieving information from an external data source.", "methods": ["GET", "POST"], "paths": ["/search", "/profiles", "/addresses", "/teams", "/organizations", "/approvals", "/integration"]}}
{"file": "cloned/core-server/mockserver/api/urls.py", "endpoints": {"api_summary": "This API provides a single endpoint for fetching mock data from a Django application.", "methods": ["GET"], "paths": ["/api/fetch_mock"]}}
{"file": "cloned/core-server/mockserver/api/views.py", "endpoints": {"api_summary": "This API allows users to fetch mock data for a given endpoint and method. The API uses a combination of query parameters and request body to retrieve the mock data. The API also supports multiple HTTP methods, including GET, POST, PUT, PATCH, and DELETE.", "methods": ["GET", "POST", "PUT", "PATCH", "DELETE"], "paths": ["/fetch_mock"]}}
{"file": "cloned/core-server/mockserver/api/api_urls.py", "endpoints": {"api_summary": "The API provides endpoints for managing tenants, organizations, and projects, as well as mocks, header types, HTTP verbs, and categories. It also includes endpoints for retrieving and manipulating data related to these entities.", "methods": ["GET", "POST", "PUT", "PATCH", "DELETE"], "paths": ["/api/tenants", "/api/organizations", "/api/projects", "/api/mocks", "/api/header-types", "/api/http-verbs", "/api/categories"]}}
{"file": "cloned/core-server/mockserver/mocks/views.py", "endpoints": {"api_summary": "The API allows for the management of mocks, header types, HTTP verbs, categories, and endpoints. It provides endpoints for creating, retrieving, updating, and deleting these resources, as well as endpoints for listing and filtering them.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/mocks", "/mocks/<mock_id>", "/header_types", "/header_types/<header_type_id>", "/http_verbs", "/http_verbs/<http_verb_id>", "/categories", "/categories/<category_id>", "/endpoints", "/endpoints/<endpoint_id>"]}}
{"file": "cloned/core-server/mockserver/mocks/serializers.py", "endpoints": {"api_summary": "This API defines a set of endpoints for managing mocks, headers, and HTTP verbs. It allows users to create, read, update, and delete mocks, as well as retrieve information about HTTP verbs and headers.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/mocks", "/mocks/<mock_id>", "/headers", "/headers/<header_id>", "/verbs", "/verbs/<verb_id>"]}}
{"file": "cloned/core-server/mockserver/authentication/urls.py", "endpoints": {"api_summary": "The authentication API provides endpoints for user login, logout, password reset request, and password reset. These endpoints allow users to authenticate and manage their account information.", "methods": ["POST", "GET"], "paths": ["/login", "/logout", "/password-reset-request", "/password-reset"]}}
{"file": "cloned/core-server/mockserver/authentication/views.py", "endpoints": {"api_summary": "This API provides endpoints for user authentication, password reset, and logout.", "methods": ["POST", "GET"], "paths": ["/login", "/logout", "/password_reset"]}}
{"file": "cloned/core-server/mockserver/authentication/serializers.py", "endpoints": {"api_summary": "This API provides endpoints for user authentication, including login, password reset, and user information retrieval. The endpoints are designed to be used in conjunction with a frontend application that handles user input and displays the results to the user.", "methods": ["GET", "POST", "PUT"], "paths": ["/users", "/users/<built-in function id>", "/login", "/password_reset", "/password_reset/<built-in function id>"]}}
{"file": "cloned/core-server/mockserver/mockserver/urls.py", "endpoints": {"api_summary": "The Mocks project API provides a RESTful interface for managing mock data. It includes endpoints for creating, reading, updating, and deleting mock data, as well as endpoints for retrieving OpenAPI schema documentation.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/v1/", "/openapi/", "/"]}}
{"file": "cloned/core-server/mockserver/tenants/views.py", "endpoints": {"api_summary": "This API provides endpoints for managing tenants, organizations, and projects. It allows for creating, updating, and deleting tenants, as well as retrieving information about organizations and projects.", "methods": ["GET", "POST", "PUT", "PATCH", "DELETE"], "paths": ["/tenants", "/organizations", "/projects"]}}
{"file": "cloned/core-server/mockserver/tenants/serializers.py", "endpoints": {"api_summary": "This API defines endpoints for managing organizations, projects, and tenants in a multi-tenant system. It includes endpoints for creating, reading, updating, and deleting organizations, projects, and tenants, as well as endpoints for managing membership and invitations.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/organizations", "/organizations/<id>", "/projects", "/projects/<id>", "/tenants", "/tenants/<id>"]}}
{"file": "cloned/neurone/server/multimediaIndexer/multimediaDownloader.js", "endpoints": {"api_summary": "The MultimediaDownloader class provides methods for downloading and indexing multimedia files, such as books and videos. It also provides a method for previewing the files before downloading them.", "methods": ["GET", "POST"], "paths": ["/download", "/index", "/preview"]}}
{"file": "cloned/neurone/server/api/informationRetrieval.js", "endpoints": {"api_summary": "The API provides methods for retrieving information on document, bookmark, and snippet status for the user, as well as for getting bookmark and snippet scores based on iFuCo's Performance Formula.", "methods": ["GET", "POST"], "paths": ["/snippets", "/bookmarks", "/documents", "/relevantDocuments", "/bookmarkScore"]}}
{"file": "cloned/neurone/server/api/inputTracking.js", "endpoints": {"api_summary": "The NEURONE API: Input Tracking provides methods for storing input tracking data from keyboard and mouse. It includes endpoints for storing keystrokes, mouse clicks, mouse coordinates, and scroll moves.", "methods": ["storeKeystroke", "storeMouseClick", "storeMouseCoordinate", "storeScrollMove"], "paths": ["/storeKeystroke", "/storeMouseClick", "/storeMouseCoordinate", "/storeScrollMove"]}}
{"file": "cloned/neurone/server/api/evaluationItems.js", "endpoints": {"api_summary": "This API provides methods for saving and loading forms, synthesis and answers. It also provides methods for getting synthesis questions and answers, and for saving synthesis answers in the database.", "methods": ["GET", "POST"], "paths": ["/forms", "/synthesis", "/synthesis/answers"]}}
{"file": "cloned/neurone/server/api/configsGetter.js", "endpoints": {"api_summary": "This API provides methods for getting and setting user data, configs, and session variables, as well as registering users and getting server statistics.", "methods": ["GET", "POST"], "paths": ["/userDataFromId", "/userRole", "/userSession", "/userConfigs", "/setSession", "/initialConfigs", "/clientSettings", "/registerUsers", "/registerIdentity", "/getServerStats"]}}
{"file": "cloned/neurone/server/externalServices/api.js", "endpoints": {"api_summary": "This API provides endpoints for searching and managing documents, including books and videos, and deleting documents.", "methods": ["GET", "POST", "DELETE"], "paths": ["/v1/ping", "/v1/xd", "/v1/document/search", "/v1/document/load", "/v1/document/delete"]}}
{"file": "cloned/neurone/imports/components/modules/admin/documentView.js", "endpoints": {"api_summary": "The DocumentView component is a UI router state that provides a preview of a document. It requires the user to be logged in and have the 'researcher' role. It also has a 'previousState' binding that allows the user to navigate back to the previous state.", "methods": ["GET"], "paths": ["/preview/:docName"]}}
{"file": "cloned/neurone/imports/components/app/auth/logout.js", "endpoints": {"api_summary": "The Logout API provides a way for users to log out of the system and end their session.", "methods": ["GET", "POST"], "paths": ["/logout"]}}
{"file": "cloned/neurone/imports/components/app/auth/password.js", "endpoints": {"api_summary": "This API allows users to reset their passwords by providing their email address and receiving a password reset link.", "methods": ["POST"], "paths": ["/password"]}}
{"file": "cloned/example-voting-app/vote/app.py", "endpoints": {"api_summary": "This API allows users to vote on their preferred option, either Cats or Dogs. The API also provides a simple web interface for users to view the current vote tally.", "methods": ["POST", "GET"], "paths": ["/", "/votes"]}}
{"file": "cloned/milvus/tests/restful_client/api/milvus.py", "endpoints": {"api_summary": "The Vector API provides methods for searching, querying, getting, deleting, inserting, and listing vectors, as well as creating and dropping collections.", "methods": ["POST", "GET"], "paths": ["/vector/search", "/vector/query", "/vector/get", "/vector/delete", "/vector/insert", "/vector/collections", "/vector/collections/create", "/vector/collections/describe", "/vector/collections/drop"]}}
{"file": "cloned/milvus/tests/benchmark/milvus_benchmark/runners/locust_file.py", "endpoints": {"api_summary": "This API allows users to search for vectors in a collection using the /collections/<collection_name>/vectors endpoint. The API accepts a JSON payload with the search parameters and returns the search results in JSON format.", "methods": ["PUT"], "paths": ["/collections/<collection_name>/vectors"]}}
{"file": "cloned/milvus/tests/python_client/milvus_client_v2/test_milvus_client_search_invalid.py", "endpoints": {"api_summary": "Test case of search interface", "methods": ["GET", "POST"], "paths": ["/search", "/search/<collection_name>"], "description": "Test case of search interface"}}
{"file": "cloned/milvus/tests/python_client/milvus_client/test_milvus_client_collection.py", "endpoints": {"api_summary": "Test case of create collection interface", "methods": ["POST"], "paths": ["/collections"]}}
{"file": "cloned/milvus/tests/python_client/chaos/scripts/hello_milvus.py", "endpoints": {"api_summary": "This file defines a Python script that connects to a Milvus database and performs various operations such as creating a collection, inserting data, creating an index, and searching for data.", "methods": ["GET", "POST"], "paths": ["/hello_milvus"]}}
{"file": "cloned/milvus/internal/util/idalloc/allocator.go", "endpoints": {"api_summary": "This file defines a TSO (Timestamp Oracle) allocator, which is responsible for allocating timestamps for transactions in a distributed database system. The allocator uses a combination of local and remote allocators to ensure that timestamps are unique and consistent across the system.", "methods": ["GET", "POST"], "paths": ["/allocate", "/barrier"]}}
{"file": "cloned/milvus/internal/allocator/id_allocator.go", "endpoints": {"api_summary": "This file defines an IDAllocator that allocates unique and monotonically increasing IDs from Root Coord. It also batch allocates for less root coord server access.", "methods": ["GET", "POST"], "paths": ["/id/alloc"]}}
{"file": "cloned/milvus/internal/proxy/http_req_impl_test.go", "endpoints": {"api_summary": "This file defines several REST API endpoints for the Milvus proxy service, including getConfigs, getClusterInfo, getConnectedClients, getDependencies, buildReqParams, getQueryComponentMetrics, listCollection, describeCollection, listDatabase, and describeDatabase.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/configs", "/cluster", "/clients", "/dependencies", "/query", "/collections", "/collections/<collection_name>", "/databases", "/databases/<db_name>"]}}
{"file": "cloned/milvus/internal/http/router.go", "endpoints": {"api_summary": "This API provides a set of endpoints for managing and monitoring a Milvus cluster, including query coordination, data coordination, and data node management.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/healthz", "/log/level", "/eventlog", "/expr", "/static/", "/metrics", "/metrics_default", "/management/stop", "/management/check/ready", "/webui/", "/management/datacoord/garbage_collection/pause", "/management/datacoord/garbage_collection/resume", "/management/querycoord/balance/suspend", "/management/querycoord/balance/resume", "/management/querycoord/balance/status", "/management/querycoord/transfer/segment", "/management/querycoord/transfer/channel", "/management/querycoord/node/suspend", "/management/querycoord/node/resume", "/management/querycoord/node/list", "/management/querycoord/distribution/get", "/management/querycoord/distribution/check", "/_cluster/info", "/_cluster/configs", "/_cluster/clients", "/_cluster/dependencies", "/_hook/configs", "/_cluster/slow_query", "/_qc/dist", "/_qc/target", "/_qc/replica", "/_qc/resource_group", "/_qc/tasks", "/_qc/segments", "/_qn/segments", "/_qn/channels", "/_dc/dist", "/_dc/tasks/import", "/_dc/tasks/compaction", "/_dc/tasks/build_index", "/_dc/segments", "/_dn/tasks/sync", "/_dn/segments", "/_dn/channels", "/_db/list", "/_db/desc", "/_collection/list", "/_collection/desc", "/_index/list"]}}
{"file": "cloned/milvus/internal/http/healthz/healthz_handler.go", "endpoints": {"api_summary": "The Healthz API provides a way to check the health of a Milvus instance. It returns a JSON object with information about the health of the instance, including the state of various components and the number of unhealthy components.", "methods": ["GET"], "paths": ["/healthz"]}}
{"file": "cloned/milvus/internal/parser/planparserv2/generated/plan_lexer.go", "endpoints": {"api_summary": "This API provides a way to generate a plan for a given set of inputs.", "methods": ["GET", "POST"], "paths": ["/plan"]}}
{"file": "cloned/milvus/internal/distributed/proxy/httpserver/resource_group_handler_v2.go", "endpoints": {"api_summary": "This API defines the endpoints for creating, dropping, listing, describing, and updating resource groups, as well as transferring replicas between resource groups.", "methods": ["POST", "DELETE", "GET", "PUT", "PATCH"], "paths": ["/milvus.proto.milvus.MilvusService/CreateResourceGroup", "/milvus.proto.milvus.MilvusService/DropResourceGroup", "/milvus.proto.milvus.MilvusService/ListResourceGroups", "/milvus.proto.milvus.MilvusService/DescribeResourceGroup", "/milvus.proto.milvus.MilvusService/UpdateResourceGroups", "/milvus.proto.milvus.MilvusService/TransferReplica"]}}
{"file": "cloned/milvus/internal/distributed/proxy/httpserver/timeout_middleware.go", "endpoints": {"api_summary": "This file defines a timeout middleware for a Gin HTTP server, which handles requests and responses and provides a buffer pool for writing response data.", "methods": ["GET", "POST"], "paths": ["/"]}}
{"file": "cloned/milvus/internal/distributed/streamingnode/service.go", "endpoints": {"api_summary": "This API allows users to perform CRUD operations on users.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users", "/users/<user_id>", "/users/<user_id>/posts"]}}
{"file": "cloned/milvus/client/milvusclient/alias_example_test.go", "endpoints": {"api_summary": "This API defines endpoints for creating, listing, describing, altering, and dropping aliases for Milvus.", "methods": ["POST", "GET", "DESCRIBE", "ALTER", "DROP"], "paths": ["/aliases", "/aliases/<alias_name>", "/aliases/<alias_name>/describe", "/aliases/<alias_name>/alter", "/aliases/<alias_name>/drop"]}}
{"file": "cloned/milvus/client/milvusclient/collection.go", "endpoints": {"api_summary": "This API defines the methods for creating, listing, describing, and dropping collections in Milvus.", "methods": ["POST", "GET", "DELETE"], "paths": ["/collections", "/collections/<collection_name>", "/collections/<collection_name>/stats"]}}
{"file": "cloned/milvus/pkg/proto/proxypb/proxy.pb.go", "endpoints": {"api_summary": "Invalidate collection meta cache, invalidate shard leader cache, invalidate credential cache, update credential cache, refresh policy info cache, get proxy metrics, set rates, list client infos, import v2, get import progress, list imports, invalidate shard leader cache, get segments info, get quota metrics", "methods": ["GET", "POST", "PUT", "DELETE", "PATCH"], "paths": ["/invalidate_coll_meta_cache", "/invalidate_shard_leader_cache", "/invalidate_cred_cache", "/update_cred_cache", "/refresh_policy_info_cache", "/get_proxy_metrics", "/set_rates", "/list_client_infos", "/import_v2", "/get_import_progress", "/list_imports", "/invalidate_shard_leader_cache", "/get_segments_info", "/get_quota_metrics"]}}
{"file": "cloned/milvus/pkg/mq/msgstream/msg_for_index.go", "endpoints": {"api_summary": "This file defines three message packs for creating, altering, and dropping indexes in a Milvus database.", "methods": ["POST", "PUT", "DELETE"], "paths": ["/index/create", "/index/alter", "/index/drop"]}}
{"file": "cloned/OpenDSA/app.py", "endpoints": {"api_summary": "This API provides endpoints for configuring, running, and analyzing OpenDSA, a tool for generating and analyzing digital simulations.", "methods": ["POST"], "paths": ["/api/configure/", "/api/simple2full/", "/api/irtcurve/", "/deforms/api/deformsfeedback/"]}}
{"file": "cloned/OpenDSA/DataStructures/Bintree.js", "endpoints": {"api_summary": "This file defines a visualization data structure for a binary tree, including methods for inserting and removing points, and a leaf node class for storing points.", "methods": ["insert", "remove"], "paths": ["/bintree"]}}
{"file": "cloned/OpenDSA/lib/odsaAV.js", "endpoints": {"api_summary": "This file defines a JavaScript library for creating and interacting with animations and visualizations in OpenDSA.", "methods": ["GET", "POST"], "paths": ["/odsaUtils.js"]}}
{"file": "cloned/OpenDSA/lib/CodeMirror-5.5.0/mode/asterisk/asterisk.js", "endpoints": {"api_summary": "This file defines a CodeMirror mode for Asterisk dialplan, which is a programming language used to configure the Asterisk open-source PBX. The mode includes syntax highlighting and code completion for Asterisk-specific keywords and functions.", "methods": ["GET", "POST"], "paths": ["/asterisk/asterisk.js"]}}
{"file": "cloned/OpenDSA/lib/CodeMirror-5.5.0/mode/mumps/mumps.js", "endpoints": {"api_summary": "This MUMPS Language script defines a CodeMirror mode for MUMPS programming language.", "methods": ["GET", "POST"], "paths": ["/mumps"]}}
{"file": "cloned/OpenDSA/lib/CodeMirror-5.5.0/mode/soy/soy.js", "endpoints": {"api_summary": "This file defines a Soy mode for CodeMirror, which is a text editor that supports syntax highlighting and code folding for Soy templates.", "methods": ["GET", "POST"], "paths": ["/users", "/users/<built-in function id>"]}}
{"file": "cloned/OpenDSA/lib/CodeMirror-5.5.0/mode/gherkin/gherkin.js", "endpoints": {"api_summary": "This file defines a Gherkin language mode for CodeMirror, a web-based text editor.", "methods": ["GET", "POST"], "paths": ["/gherkin"]}}
{"file": "cloned/OpenDSA/AV/Obsolete/FLA/resources/FA.js", "endpoints": {"api_summary": "This API allows users to perform CRUD operations on a Finite Automaton.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/fa/<id>", "/fa/<id>/nodes", "/fa/<id>/edges"]}}
{"file": "cloned/OpenDSA/AV/WuChen/PairToSortCONPI.js", "endpoints": {"api_summary": "This API defines a pairing problem and a sorting problem, and shows how the pairing problem can be reduced to the sorting problem.", "methods": ["GET", "POST"], "paths": ["/pairing", "/sorting"]}}
{"file": "cloned/OpenDSA/AV/WuChen/TwoMulExample.js", "endpoints": {"api_summary": "This file defines a simple polygon problem and shows how it can be reduced to the sorting problem. The lower bound theorem is used to show that the simple polygon problem is at least \u03a9(nlogn).", "methods": ["GET", "POST"], "paths": ["/sorting", "/simple-polygon"]}}
{"file": "cloned/OpenDSA/AV/Development/formal_language/CYKParser.js", "endpoints": {"api_summary": "This file defines a CYK parser for a context-free grammar. It allows the user to input a string and check if it is accepted by the grammar.", "methods": ["GET", "POST"], "paths": ["/cykparser"]}}
{"file": "cloned/OpenDSA/AV/Development/TopSort/dijkstraAV.js", "endpoints": {"api_summary": "This file defines a REST API for a graph data structure, including endpoints for creating, reading, updating, and deleting nodes and edges, as well as for performing graph traversals and searching.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/graph", "/graph/nodes", "/graph/edges", "/graph/traverse", "/graph/search"]}}
{"file": "cloned/OpenDSA/AV/Database/ChenVsCrossFootRelations1M.js", "endpoints": {"api_summary": "This file defines a single endpoint for a REST API, which is used to retrieve a list of all students and their corresponding courses.", "methods": ["GET"], "paths": ["/students"]}}
{"file": "cloned/OpenDSA/AV/Database/ChenVsCrossFootRelationsM1.js", "endpoints": {"api_summary": "This file defines a single endpoint for a REST API, which is used to retrieve a list of all students and their corresponding courses.", "methods": ["GET"], "paths": ["/students"]}}
{"file": "cloned/OpenDSA/AV/Database/TernaryRelationship.js", "endpoints": {"api_summary": "This file defines a REST API with the following endpoints:", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users", "/users/<built-in function id>", "/users/<built-in function id>/<built-in function id>"]}}
{"file": "cloned/OpenDSA/AV/Database/ChenVsCrossFootRelationsMM.js", "endpoints": {"api_summary": "This file defines a single endpoint for a student registration system, which allows users to register for courses.", "methods": ["GET", "POST"], "paths": ["/register"]}}
{"file": "cloned/OpenDSA/AV/Database/MgrOneVsManyRel.js", "endpoints": {"api_summary": "This file defines a REST API for managing a simple database of employees and projects.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/employees", "/employees/<employee_id>", "/projects", "/projects/<project_id>"]}}
{"file": "cloned/OpenDSA/AV/Database/Participation.js", "endpoints": {"api_summary": "This API defines a RESTful interface for managing a user's participation in a relationship.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/participation", "/participation/<id>", "/participation/<id>/<entity>"]}}
{"file": "cloned/OpenDSA/AV/Database/Cardinality.js", "endpoints": {"api_summary": "This file defines a REST API for managing a card game.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/games", "/games/<game_id>", "/games/<game_id>/players", "/games/<game_id>/players/<player_id>", "/games/<game_id>/cards", "/games/<game_id>/cards/<card_id>"]}}
{"file": "cloned/OpenDSA/AV/Database/ManyToManyUnaryRelation.js", "endpoints": {"api_summary": "This API is a logical ERD of the relation between employee and supervisor entities.", "methods": ["GET", "POST"], "paths": ["/employee", "/supervisor"]}}
{"file": "cloned/OpenDSA/AV/Database/ChenVsCrossFoot.js", "endpoints": {"api_summary": "This API defines a relation between a student and the courses they have registered for, with the student being the primary key and the courses being the foreign key.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/students", "/students/<built-in function id>", "/courses", "/courses/<built-in function id>"]}}
{"file": "cloned/OpenDSA/AV/Database/ChenVsCrossFootRelations.js", "endpoints": {"api_summary": "This API defines a set of endpoints for managing a student's course registration.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/students", "/students/<student_id>", "/courses", "/courses/<course_id>", "/register", "/register/<student_id>/<course_id>"]}}
{"file": "cloned/OpenDSA/AV/Database/WeakEntity.js", "endpoints": {"api_summary": "This API defines a weak entity called Child, which is related to a strong entity called Employee through a has-a relationship. The Child entity does not have a primary key of its own, but instead uses a combination of its partial key (CH-name) and the foreign key (E-id) of the Employee entity to uniquely identify each child.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/employees", "/employees/<built-in function id>", "/employees/<built-in function id>/children", "/employees/<built-in function id>/children/<built-in function id>"]}}
{"file": "cloned/OpenDSA/AV/PIFLA/LimComp/Unsolve1FS.js", "endpoints": {"api_summary": "This file defines a JavaScript program that demonstrates the concept of uncountability in the context of computer science. It uses a diagram to illustrate the idea of diagonalization and the uncountability of the set of all functions from positive integers to positive integers.", "methods": ["GET"], "paths": ["/"]}}
{"file": "cloned/OpenDSA/AV/CT/Development/iteration5copyCON.js", "endpoints": {"api_summary": "This API is a simple calculator that takes in a list of numbers and returns the average of those numbers.", "methods": ["GET"], "paths": ["/calculator/average"]}}
{"file": "cloned/OpenDSA/AV/CT/Development/iteration5copy2CON.js", "endpoints": {"api_summary": "This API is a simple calculator that allows users to perform basic arithmetic operations on two numbers.", "methods": ["GET", "POST"], "paths": ["/add", "/subtract", "/multiply", "/divide"]}}
{"file": "cloned/OpenDSA/AV/Jsparson/lib/odsaAV-min.js", "endpoints": {"api_summary": "This file defines a JavaScript library for creating and interacting with animations and visualizations in OpenDSA.", "methods": ["GET", "POST"], "paths": ["/odsaUtils.js"]}}
{"file": "cloned/OpenDSA/AV/NP/threeSATtoHCCON.js", "endpoints": {"api_summary": "This API endpoint is a demonstration of a reduction from an instance of the 3-Satisfiability problem to an instance of the Hamiltonian Cycle problem.", "methods": ["GET"], "paths": ["/threeSATtoHCCON"]}}
{"file": "cloned/OpenDSA/AV/NP/circuitSATtoSATCON.js", "endpoints": {"api_summary": "This API provides a slideshow presentation of a reduction of the Circuit Satisfiability problem to the Satisfiability problem in polynomial time.", "methods": ["GET"], "paths": ["/slideshow"]}}
{"file": "cloned/OpenDSA/AV/MemManage/firstFitAV.js", "endpoints": {"api_summary": "This file defines a First Fit Algorithm Visualization, which is a tool for visualizing the First Fit algorithm for memory allocation.", "methods": ["GET", "POST"], "paths": ["/firstfit"]}}
{"file": "cloned/OpenDSA/AV/Juwon/FA.js", "endpoints": {"api_summary": "This code does not define any REST API endpoints.", "methods": [], "paths": []}}
{"file": "cloned/OpenDSA/AV/VisFormalLang/NonReg/Proof1NonRegularCON.js", "endpoints": {"api_summary": "This API is a proof of the Pumping Lemma for regular languages. It takes a string and checks if it is in the language L2, which is defined as {a^nb^n | n > 0}. The API returns a boolean value indicating whether the string is in the language or not.", "methods": ["GET"], "paths": ["/pumping_lemma"]}}
{"file": "cloned/ecommerce-backend/tests/apps/newsletter/test_api.py", "endpoints": {"api_summary": "This API allows users to view and create subscribers for a newsletter. Admins can view all subscribers, while non-admin users can only view their own subscribers. The API also allows for creating new subscribers with valid email addresses.", "methods": ["GET", "POST"], "paths": ["/api/subscribers/", "/api/subscribers/<id>"]}}
{"file": "cloned/ecommerce-backend/src/urls.py", "endpoints": {"api_summary": "This API provides endpoints for managing accounts, products, payments, and newsletter subscribers. It also includes a base HTML template and admin interface.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/accounts/", "/api/products/", "/api/payments/", "/api/subscribers/", "/admin/"]}}
{"file": "cloned/ecommerce-backend/src/apps/newsletter/api/urls.py", "endpoints": {"api_summary": "The API allows for the management of subscribers, including listing, creating, updating, and deleting subscribers.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/subscribers", "/subscribers/<built-in function id>"]}}
{"file": "cloned/ecommerce-backend/src/apps/newsletter/api/views.py", "endpoints": {"api_summary": "The Subscribers API allows users to list all existing subscribers (for admins) and create new ones (for everyone). GET only to users for which user.is_staff returns True.", "methods": ["GET", "POST"], "paths": ["/subscribers"]}}
{"file": "cloned/ecommerce-backend/src/apps/accounts/api/urls.py", "endpoints": {"api_summary": "This API provides authentication and registration endpoints for a Django application using the dj-rest-auth library.", "methods": ["GET", "POST"], "paths": ["/", "/register/"]}}
{"file": "cloned/ecommerce-backend/src/apps/payments/urls.py", "endpoints": {"api_summary": "The API allows for charging a user's account with a specified amount. The API endpoint is accessible at the root URL and accepts a POST request with the necessary parameters.", "methods": ["POST"], "paths": ["/charge_view"]}}
{"file": "cloned/ecommerce-backend/src/apps/payments/views.py", "endpoints": {"api_summary": "This API allows users to make payments using Stripe. It exposes a single endpoint for creating a charge, which accepts an amount, currency, and source (e.g. credit card) as parameters. The endpoint returns a JSON response indicating the status of the transaction.", "methods": ["POST"], "paths": ["/charge"]}}
{"file": "cloned/ecommerce-backend/src/apps/products/api/urls.py", "endpoints": {"api_summary": "The API allows for the management of products, including creating, reading, updating, and deleting products. It also allows for searching and filtering products based on various criteria.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/products", "/products/<product_id>", "/products/search", "/products/filter"]}}
{"file": "cloned/ecommerce-backend/src/apps/products/api/views.py", "endpoints": {"api_summary": "The API provides endpoints for managing categories and products. It allows for CRUD operations on categories and products, as well as searching and filtering of products by category and description.", "methods": ["GET", "POST", "PUT", "PATCH", "DELETE"], "paths": ["/categories", "/categories/<built-in function id>", "/products", "/products/<built-in function id>"]}}
{"file": "cloned/hailstorm-sdk/hailstorm-web-client/src/services/JMeterValidationService.ts", "endpoints": {"api_summary": "The JMeterValidationService API allows for the creation of JMeter file upload states and the ability to validate JMeter files. It also provides a way to retrieve the auto-stop setting for a JMeter file.", "methods": ["POST"], "paths": ["/jmeter_validations"]}}
{"file": "cloned/hailstorm-sdk/hailstorm-web-client/src/services/ProjectService.ts", "endpoints": {"api_summary": "The ProjectService API provides endpoints for managing projects, including listing, retrieving, updating, deleting, and creating projects.", "methods": ["GET", "POST", "PATCH", "DELETE"], "paths": ["/projects", "/projects/<id>", "/projects/<id>/update", "/projects/<id>/delete", "/projects/create"]}}
{"file": "cloned/hailstorm-sdk/hailstorm-web-client/src/services/JtlExportService.ts", "endpoints": {"api_summary": "The JtlExportService API allows for the creation of JTL files for a given project and execution cycle. The API endpoint accepts a project ID and an array of execution cycle IDs, and returns a JTL file with the results of the export.", "methods": ["POST"], "paths": ["/projects/<projectId>/jtl_exports"]}}
{"file": "cloned/hailstorm-sdk/hailstorm-web-client/src/services/JMeterService.ts", "endpoints": {"api_summary": "The JMeterService API provides endpoints for managing JMeter plans in a project. It allows for listing, creating, updating, and deleting JMeter plans.", "methods": ["GET", "POST", "PATCH", "DELETE"], "paths": ["/projects/<projectId>/jmeter_plans", "/projects/<projectId>/jmeter_plans/<jmeterFileId>"]}}
{"file": "cloned/hailstorm-sdk/hailstorm-web-client/src/services/ReportService.ts", "endpoints": {"api_summary": "The ReportService API provides endpoints for listing and creating reports for a given project. The API uses the HTTP methods GET and POST to retrieve and create reports, respectively. The API also uses the URL path /projects/<projectId>/reports to identify the reports for a given project.", "methods": ["GET", "POST"], "paths": ["/projects/<projectId>/reports"]}}
{"file": "cloned/hailstorm-sdk/hailstorm-client-exchange/src/main/java/com/tpg/labs/hailstorm/clientexchange/LogsController.java", "endpoints": {"api_summary": "The LogsController provides a REST API for retrieving log events from the LogsService. The API endpoint is /logs, which returns a Flux of LogEvent objects.", "methods": ["GET"], "paths": ["/logs"]}}
{"file": "cloned/hailstorm-sdk/hailstorm-file-server/src/main/java/com/tpg/labs/hailstormfs/ReportsController.java", "endpoints": {"api_summary": "The ReportsController API allows for the uploading and retrieval of report files. It provides endpoints for uploading a file with a specified prefix, and for retrieving a list of report metadata for a given prefix.", "methods": ["POST", "GET"], "paths": ["/reports", "/reports/{prefix}"]}}
{"file": "cloned/hailstorm-sdk/hailstorm-file-server/src/main/java/com/tpg/labs/hailstormfs/HailstormFsController.java", "endpoints": {"api_summary": "The HailstormFsController API allows for uploading, deleting, and serving files, as well as removing files with a specific prefix.", "methods": ["POST", "DELETE", "GET"], "paths": ["/upload", "/{fileId}", "/{fileId}/{fileName}", "/files/{prefix}"]}}
{"file": "cloned/hailstorm-sdk/hailstorm-file-server/src/test/java/com/tpg/labs/hailstormfs/ReportsControllerTest.java", "endpoints": {"api_summary": "The ReportsControllerTest API allows for the uploading and retrieval of report files. It also provides endpoints for retrieving metadata about reports.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/reports", "/reports/prefix"]}}
{"file": "cloned/microcalc/services/add/index.js", "endpoints": {"api_summary": "This API provides a simple addition service that takes two operands and returns the result of adding them together. The API also includes a status endpoint that returns a JSON object with a 'data' field set to 'OK'.", "methods": ["GET", "POST"], "paths": ["/status", "/add"]}}
{"file": "cloned/microcalc/services/div/main.py", "endpoints": {"api_summary": "The API provides a simple calculator service that allows users to perform division operations on two operands. The API has two endpoints: one for getting the status of the service and another for performing the division operation.", "methods": ["GET", "POST"], "paths": ["/api/v1/status", "/api/v1/div"]}}
{"file": "cloned/microcalc/services/pow/index.js", "endpoints": {"api_summary": "This API provides a single endpoint for calculating the power of a number. It takes two operands and returns the result of the power operation.", "methods": ["POST"], "paths": ["/pow"]}}
{"file": "cloned/microcalc/services/mult/main.go", "endpoints": {"api_summary": "The API provides a simple multiplication service that takes two operands and returns the result of their multiplication. The API also includes a status endpoint that returns a JSON object with a message indicating the service is running.", "methods": ["GET", "POST"], "paths": ["/api/v1/status", "/api/v1/mult"]}}
{"file": "cloned/microcalc/services/parser/src/main/java/me/foly/microcalc/MainVerticle.java", "endpoints": {"api_summary": "The MicroCalc API is a simple calculator service that allows users to perform basic arithmetic operations on numbers. The API supports GET and POST requests and has a single endpoint for calculating the result of an arithmetic expression.", "methods": ["GET", "POST"], "paths": ["/api/v1/calculate"]}}
{"file": "cloned/microcalc/services/parser/src/main/java/me/foly/microcalc/HttpHandler.java", "endpoints": {"api_summary": "The MicroCalc API allows users to perform basic arithmetic operations on numbers. It accepts HTTP POST requests with a JSON body containing the input expression and returns the result as a JSON object.", "methods": ["POST"], "paths": ["/calculate"]}}
{"file": "cloned/microcalc/services/mod/src/main/java/me/foly/microcalc/mod/MainController.java", "endpoints": {"api_summary": "The mod API provides a simple calculator service that performs modulo operations on two integers. The API accepts a JSON request body with two operands and returns a JSON response with the result and the operands used.", "methods": ["GET", "POST"], "paths": ["/api/v1/status", "/api/v1/mod"]}}
{"file": "cloned/izanami/manual/.docusaurus/routes.js", "endpoints": {"api_summary": "Izanami is a feature flipping and A/B testing platform that allows you to manage features and experiments across multiple environments and targets.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/izanami/search", "/izanami/docs", "/izanami/v1", "/izanami/"]}}
{"file": "cloned/izanami/izanami-frontend/tests/contexts.spec.ts", "endpoints": {"api_summary": "This API provides endpoints for managing contexts and features in a project.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/tenants/<tenantName>/projects/<projectName>/contexts", "/tenants/<tenantName>/projects/<projectName>/contexts/<contextName>", "/tenants/<tenantName>/projects/<projectName>/features", "/tenants/<tenantName>/projects/<projectName>/features/<featureName>"]}}
{"file": "cloned/izanami/izanami-frontend/tests/webhooks.spec.ts", "endpoints": {"api_summary": "This API allows for the creation, listing, editing, and deletion of webhooks for a given tenant and project.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/tenants/<tenantName>/webhooks", "/tenants/<tenantName>/webhooks/<webhookName>"]}}
{"file": "cloned/izanami/izanami-frontend/tests/audit.spec.ts", "endpoints": {"api_summary": "This API provides a way to manage and audit features and events for a project.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/tenants/<tenantName>/projects/<projectName>/logs", "/tenants/<tenantName>/projects/<projectName>/features", "/tenants/<tenantName>/projects/<projectName>/events"]}}
{"file": "cloned/autoscaler/autoscale-acceptance-tests/src/test/java/com/github/autoscaler/workload/rabbit/RabbitManagementApiIT.java", "endpoints": {"api_summary": "This API provides methods for managing RabbitMQ queues and messages.", "methods": ["GET", "POST"], "paths": ["/queues", "/queues/<queue_name>", "/messages"]}}
{"file": "cloned/oasis/backend/app.py", "endpoints": {"api_summary": "This API provides a homepage endpoint that serves an HTML template and a REST API for managing NYT Live Counties. The API includes endpoints for creating, reading, updating, and deleting counties, as well as endpoints for retrieving a list of all counties and a specific county by ID.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/", "/api/counties", "/api/counties/<built-in function id>"]}}
{"file": "cloned/oasis/backend/auth/main.py", "endpoints": {"api_summary": "This API is a FastAPI application that provides authentication and authorization for a storytelling platform. It allows users to create and manage their stories, and provides endpoints for retrieving and updating stories.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/auth", "/api/stories", "/api/stories/<story_id>", "/api/users", "/api/users/<user_id>"]}}
{"file": "cloned/oasis/backend/router/likes.py", "endpoints": {"api_summary": "The API allows users to like and dislike my stories, and retrieve the like and dislike counts for a specific my story.", "methods": ["POST", "GET"], "paths": ["/", "/{my_story_id}"]}}
{"file": "cloned/oasis/backend/router/data.py", "endpoints": {"api_summary": "This API provides COVID-19 data for countries, US states, counties, and zip codes. It also provides a way to cluster data based on the number of confirmed cases.", "methods": ["GET"], "paths": ["/county", "/world", "/us-states", "/sd-zip", "/all"]}}
{"file": "cloned/oasis/backend/router/comments.py", "endpoints": {"api_summary": "This API allows users to create, read, update, and delete comments on a story. Users can also like or dislike comments. The API also provides endpoints for retrieving the number of likes on a comment and checking if a user has liked a comment.", "methods": ["POST", "GET", "PUT", "DELETE"], "paths": ["/my_stories/{my_story_id}", "/my_stories/{my_story_id}", "/{comment_id}", "/{comment_id}/like", "/{comment_id}/like"]}}
{"file": "cloned/oasis/backend/router/stories.py", "endpoints": {"api_summary": "This API allows users to create, read, update, and delete stories, as well as search for stories based on keywords and explore nearby stories.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/", "/{story_id}/symptoms", "/{story_id}/travels", "/{story_id}/contacts", "/all", "/{story_id}/my_stories", "/my_stories", "/my_stories/count", "/search", "/explore", "/trending"]}}
{"file": "cloned/oasis/backend/router/api.py", "endpoints": {"api_summary": "This API provides endpoints for managing users, stories, symptoms, data, and likes. It also includes authentication and commenting functionality.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users", "/users/<built-in function id>", "/stories", "/stories/<built-in function id>", "/symptoms", "/symptoms/<built-in function id>", "/data", "/data/<built-in function id>", "/auth", "/comments", "/comments/<built-in function id>"]}}
{"file": "cloned/oasis/backend/router/nyt_live_county.py", "endpoints": {"api_summary": "The API provides a list of county data records based on IDs (FIPS) queried. It also checks if the database needs to be updated and updates it if necessary.", "methods": ["GET"], "paths": ["/NytLiveCounty/{county_ids}"]}}
{"file": "cloned/oasis/backend/router/users.py", "endpoints": {"api_summary": "This API provides endpoints for creating, reading, and managing users in a database. It also provides endpoints for retrieving the count and trend of users in the database.", "methods": ["POST", "GET"], "paths": ["/users/", "/users/me/", "/users/count/", "/users/trend/"]}}
{"file": "cloned/oasis/backend/router/auth.py", "endpoints": {"api_summary": "This API provides endpoints for user authentication and external login using OAuth2. It also includes endpoints for creating and retrieving user information.", "methods": ["POST"], "paths": ["/auth", "/auth/external"]}}
{"file": "cloned/oasis/backend/router/symptoms.py", "endpoints": {"api_summary": "The API provides a list of symptoms and allows users to retrieve them. The API also allows users to create, update, and delete symptoms.", "methods": ["GET"], "paths": ["/stories/symptoms"]}}
{"file": "cloned/oasis/legacy/backend/app.py", "endpoints": {"api_summary": "This API provides endpoints for managing patient data, including registering new patients, logging in, and retrieving patient information. It also provides endpoints for retrieving data on COVID-19 cases and symptoms.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/", "/register", "/login", "/patient", "/getcounty", "/getsdzip"]}}
{"file": "cloned/oasis/frontend/src/actions/symptoms.js", "endpoints": {"api_summary": "This API provides endpoints for fetching and submitting symptoms for a story. It also includes endpoints for starting and ending the fetch and submit processes.", "methods": ["GET", "POST"], "paths": ["/symptoms", "/stories/<storyId>/symptoms"]}}
{"file": "cloned/oasis/frontend/src/actions/story.js", "endpoints": {"api_summary": "This API is responsible for managing stories and their components, such as travels and close contacts. It allows for creating, updating, and retrieving stories, as well as submitting and retrieving travels and close contacts.", "methods": ["GET", "POST", "PUT"], "paths": ["/stories", "/stories/<id>", "/stories/<id>/travels", "/stories/<id>/contacts"]}}
{"file": "cloned/oasis/frontend/src/actions/auth.js", "endpoints": {"api_summary": "This API defines endpoints for user authentication and registration, including sign up and sign in. It also includes endpoints for onboarding and dashboard navigation.", "methods": ["POST", "GET"], "paths": ["/users", "/auth", "/auth/external", "/sign-in", "/onboard", "/dashboard"]}}
{"file": "cloned/oasis/frontend/src/routes/paths.js", "endpoints": {"api_summary": "This API provides endpoints for a health and wellness application, allowing users to track their symptoms, receive alerts, and access their health measurements and story history. The API also includes endpoints for onboarding and authentication.", "methods": ["GET", "POST"], "paths": ["/", "/signin", "/signup", "/onboard", "/alert", "/questions", "/symptoms", "/dashboard", "/confirm", "/measurements", "/mystory", "/storyhistory"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/2.3_The_Router/Songs/test/song-api-spec.test.ts", "endpoints": {"api_summary": "The Songs Server API allows users to retrieve information about songs and their associated metadata. The API supports GET requests to retrieve a song by ID, and returns a JSON object with the song's details.", "methods": ["GET"], "paths": ["/songs?id=<song_id>"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/2.3_The_Router/Songs/src/app.ts", "endpoints": {"api_summary": "This API provides a simple RESTful interface for retrieving and searching songs. It supports GET requests for retrieving songs by ID or searching for songs by query.", "methods": ["GET"], "paths": ["/v1/songs"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/2.3_The_Router/Playlist/test/playlist-api-spec.test.ts", "endpoints": {"api_summary": "The Playlist Server API provides endpoints for managing playlists and their associated songs. It allows for creating, reading, updating, and deleting playlists, as well as adding and removing songs from playlists.", "methods": ["GET", "POST", "DELETE"], "paths": ["/v1/playlists", "/v1/playlists/<playlist_id>", "/v1/playlists/<playlist_id>/songs"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/2.3_The_Router/Playlist/src/app.ts", "endpoints": {"api_summary": "This API provides endpoints for managing playlists and their associated songs. It allows users to create, read, update, and delete playlists, as well as add and remove songs from playlists.", "methods": ["GET", "POST", "DELETE"], "paths": ["/v1/playlists", "/v1/playlists/:id/", "/v1/playlists/:id/"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/2.2_Second_API/Songs/test/song-api-spec.test.ts", "endpoints": {"api_summary": "The Songs Server API allows users to retrieve information about songs and their associated metadata. The API supports GET requests to retrieve a song by ID, and returns a JSON object with the song's details.", "methods": ["GET"], "paths": ["/songs?id=<song_id>"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/2.2_Second_API/Songs/src/app.ts", "endpoints": {"api_summary": "This API provides a simple CRUD interface for managing songs, with endpoints for retrieving a list of songs, retrieving a specific song by ID, and searching for songs by query.", "methods": ["GET", "POST"], "paths": ["/v1/songs", "/v1/songs/<built-in function id>"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/2.2_Second_API/Playlist/test/playlist-api-spec.test.ts", "endpoints": {"api_summary": "The Playlist Server API provides endpoints for managing playlists and their associated songs. It allows for creating, reading, updating, and deleting playlists, as well as adding and removing songs from playlists.", "methods": ["GET", "POST", "DELETE"], "paths": ["/v1/playlists", "/v1/playlists/<playlist_id>", "/v1/playlists/<playlist_id>/songs"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/2.2_Second_API/Playlist/src/app.ts", "endpoints": {"api_summary": "This API provides endpoints for managing playlists, including adding, removing, and retrieving playlists. It also allows for adding and removing songs from playlists.", "methods": ["GET", "POST", "DELETE"], "paths": ["/v1/playlists", "/v1/playlists/:id/", "/v1/playlists/:id/"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/1.4_Testing/test/song-api-spec.test.ts", "endpoints": {"api_summary": "The Songs Server API allows users to retrieve information about songs and their metadata. It provides a simple interface for querying songs by ID and returning a JSON object with the song's details.", "methods": ["GET"], "paths": ["/v1/songs?id=<song_id>"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/1.4_Testing/src/app.ts", "endpoints": {"api_summary": "This API provides a simple CRUD interface for managing songs, with endpoints for retrieving a list of all songs, retrieving a specific song by ID, creating a new song, updating an existing song, and deleting a song.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/v1/songs", "/v1/songs/<built-in function id>"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/1.5_Build/test/song-api-spec.test.ts", "endpoints": {"api_summary": "The Songs Server API allows users to retrieve information about songs and their associated metadata. The API supports GET requests to retrieve a song by ID, and returns a JSON object with the song's details.", "methods": ["GET"], "paths": ["/songs?id=<song_id>"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/1.5_Build/src/app.ts", "endpoints": {"api_summary": "This API provides a simple CRUD interface for managing songs, with endpoints for retrieving a list of all songs, retrieving a specific song by ID, creating a new song, updating an existing song, and deleting a song.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/v1/songs", "/v1/songs/<built-in function id>"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/4.2_Redis/Songs/test/song-api-spec.test.ts", "endpoints": {"api_summary": "The Songs Server API allows users to retrieve information about songs and their associated metadata. The API supports GET requests to retrieve a song by ID, and returns a JSON object with the song's details.", "methods": ["GET"], "paths": ["/songs?id=<song_id>"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/4.2_Redis/Songs/src/app.ts", "endpoints": {"api_summary": "This API provides a simple interface for retrieving song information from a MongoDB database. It supports retrieving all songs, searching for songs by a query, and retrieving a specific song by its ID.", "methods": ["GET"], "paths": ["/v1/songs"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/4.4_Configuration/Songs/test/song-api-spec.test.ts", "endpoints": {"api_summary": "The Songs Server API allows users to retrieve information about songs and their associated metadata. The API supports GET requests to retrieve a song by ID, and returns a JSON object with the song's details.", "methods": ["GET"], "paths": ["/songs?id=<song_id>"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/4.1_Dockerization/Songs/test/song-api-spec.test.ts", "endpoints": {"api_summary": "The Songs Server API allows users to retrieve information about songs and their associated metadata. The API supports GET requests to retrieve a song by ID, and returns a JSON object with the song's details.", "methods": ["GET"], "paths": ["/songs?id=<song_id>"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/4.1_Dockerization/Songs/src/app.ts", "endpoints": {"api_summary": "This API provides a simple RESTful interface for retrieving and manipulating song data. It includes endpoints for retrieving all songs, retrieving a specific song by ID, and searching for songs by query.", "methods": ["GET"], "paths": ["/v1/songs", "/v1/songs?id=<song_id>", "/v1/songs?q=<query>"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/4.1_Dockerization/Playlist/test/playlist-api-spec.test.ts", "endpoints": {"api_summary": "The Playlist Server API allows clients to retrieve playlists by ID. The API returns a JSON object with the playlist information, including the playlist ID, name, and list of tracks.", "methods": ["GET"], "paths": ["/playlists?id=<playlist_id>"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/4.1_Dockerization/Playlist/src/app.ts", "endpoints": {"api_summary": "This API provides endpoints for managing playlists and their associated songs. It allows users to create, read, update, and delete playlists, as well as add and remove songs from playlists.", "methods": ["GET", "POST", "DELETE"], "paths": ["/v1/playlists", "/v1/playlists/:id/", "/v1/playlists/:id/"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/1.2_Basic_boilerplate/src/app.ts", "endpoints": {"api_summary": "This API provides a single endpoint for a hello world message.", "methods": ["GET"], "paths": ["/hello"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/4.3_Service_Discovery/Songs/test/song-api-spec.test.ts", "endpoints": {"api_summary": "The Songs Server API allows users to retrieve information about songs and their associated metadata. The API supports GET requests to retrieve a song by ID, and returns a JSON object with the song's details.", "methods": ["GET"], "paths": ["/songs?id=<song_id>"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/4.3_Service_Discovery/Songs/src/app.ts", "endpoints": {"api_summary": "This API provides a simple interface for retrieving and searching songs, as well as caching the results in Redis.", "methods": ["GET"], "paths": ["/v1/songs"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/2.4_OpenApi3_(Swagger)/Songs/test/song-api-spec.test.ts", "endpoints": {"api_summary": "The Songs Server API allows users to retrieve information about songs and their associated metadata. The API supports GET requests to retrieve a song by ID, and returns a JSON object with the song's details.", "methods": ["GET"], "paths": ["/songs?id=<song_id>"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/2.4_OpenApi3_(Swagger)/Songs/compTests/src/app.js", "endpoints": {"api_summary": "This API provides a single endpoint for retrieving a song by its ID. The endpoint is accessible at /song and accepts a GET request with an id parameter in the query string.", "methods": ["GET"], "paths": ["/song"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/2.4_OpenApi3_(Swagger)/Songs/src/app.ts", "endpoints": {"api_summary": "This API provides a simple RESTful interface for retrieving and searching songs. It supports GET requests for retrieving songs by ID or searching for songs by query.", "methods": ["GET"], "paths": ["/v1/songs"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/2.1_UI_Service/Songs/test/song-api-spec.test.ts", "endpoints": {"api_summary": "The Songs Server API allows users to retrieve information about songs and their associated metadata. The API supports GET requests to retrieve a song by ID, and returns a JSON object with the song's details.", "methods": ["GET"], "paths": ["/songs?id=<song_id>"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/2.1_UI_Service/Songs/src/app.ts", "endpoints": {"api_summary": "This API provides a simple RESTful interface for retrieving and manipulating song data. It includes endpoints for retrieving a list of all songs, retrieving a specific song by ID, and creating a new song.", "methods": ["GET", "POST"], "paths": ["/v1/songs", "/v1/songs/<built-in function id>"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/3.5_DB_Dal/Songs/test/song-api-spec.test.ts", "endpoints": {"api_summary": "The Songs Server API allows users to retrieve information about songs and their associated metadata. The API supports GET requests to retrieve a song by ID, and returns a JSON object with the song's details.", "methods": ["GET"], "paths": ["/songs?id=<song_id>"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/3.5_DB_Dal/Songs/src/app.ts", "endpoints": {"api_summary": "This API provides a simple RESTful interface for retrieving and searching songs. It allows users to retrieve all songs, retrieve a specific song by ID, or search for songs by a query string.", "methods": ["GET"], "paths": ["/v1/songs"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/5.2_User_Authentication/Auth/src/app.ts", "endpoints": {"api_summary": "This API uses Google OAuth2.0 to authenticate users and provides a JWT token for authorized access to the API.", "methods": ["GET", "POST"], "paths": ["/auth/google", "/auth/google/callback"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/5.2_User_Authentication/Songs/test/song-api-spec.test.ts", "endpoints": {"api_summary": "The Songs Server API allows users to retrieve information about songs and their associated metadata. The API supports GET requests to retrieve a song by ID, and returns a JSON object with the song's details.", "methods": ["GET"], "paths": ["/songs?id=<song_id>"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/5.2_User_Authentication/Songs/src/app.ts", "endpoints": {"api_summary": "This API provides a simple RESTful interface for retrieving and searching songs. It supports GET requests for retrieving songs by ID or searching for songs by query, and it uses JSON Web Tokens for authentication.", "methods": ["GET"], "paths": ["/v1/songs"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/5.2_User_Authentication/Playlist/test/playlist-api-spec.test.ts", "endpoints": {"api_summary": "The Playlist Server API allows clients to retrieve playlists by ID. The API returns a JSON object with the playlist information, including the playlist ID, name, and list of tracks.", "methods": ["GET"], "paths": ["/playlists?id=<playlist_id>"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/5.2_User_Authentication/Playlist/src/app.ts", "endpoints": {"api_summary": "This API provides endpoints for managing playlists and their associated songs. It allows users to create, read, update, and delete playlists, as well as add and remove songs from playlists.", "methods": ["GET", "POST", "DELETE"], "paths": ["/v1/playlists", "/v1/playlists/:id/", "/v1/playlists/:id/"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/5.2_User_Authentication/FrontEnd/src/router.ts", "endpoints": {"api_summary": "This API provides a login functionality and a home page for a user. The login endpoint allows users to authenticate and access the home page, which displays information about the user.", "methods": ["GET", "POST"], "paths": ["/", "/home"]}}
{"file": "cloned/hands-on-microservices-with-typescript-3/1.3_Choosing_servers/src/app.ts", "endpoints": {"api_summary": "This API provides a simple RESTful interface for retrieving and manipulating song data. It includes endpoints for retrieving a list of all songs, retrieving a specific song by ID, and adding a new song.", "methods": ["GET", "POST"], "paths": ["/v1/songs", "/v1/songs/<built-in function id>"]}}
{"file": "cloned/microservice-monitoring/java/backend/src/main/java/net/xeraa/backend/BackendController.java", "endpoints": {"api_summary": "This API provides a simple RESTful interface for managing a list of people, with endpoints for adding, retrieving, and searching for people.", "methods": ["GET", "POST"], "paths": ["/add", "/all", "/search"]}}
{"file": "cloned/microservice-monitoring/java/frontend/src/main/java/net/xeraa/frontend/FrontendController.java", "endpoints": {"api_summary": "The FrontendController defines several REST API endpoints for interacting with the backend service. The endpoints include /generate, /add, /search, /good, /bad, /null, /call, and /call-bad. These endpoints allow for adding and searching for people, as well as calling other endpoints with a delay.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/generate", "/add", "/search", "/good", "/bad", "/null", "/call", "/call-bad"]}}
{"file": "cloned/ramascene/ramascene/consumers.py", "endpoints": {"api_summary": "This API provides a web socket interface for querying and retrieving data from the RAMaScene database.", "methods": ["GET", "POST"], "paths": ["/ws/ramascene"]}}
{"file": "cloned/ramascene/ramascene/urls.py", "endpoints": {"api_summary": "The API provides a visualization of the Ramascene process, allowing users to interact with the system and receive real-time updates on the status of the process. The API also provides an endpoint for handling AJAX requests.", "methods": ["GET", "POST"], "paths": ["/ramascene/", "/ramascene/ajaxhandling/"]}}
{"file": "cloned/ramascene/ramascene/views.py", "endpoints": {"api_summary": "This API handles AJAX requests for retrieving the results of a job. It takes a job ID as input and returns the results of the job in JSON format.", "methods": ["POST"], "paths": ["/ajaxHandling"]}}
{"file": "cloned/ramascene/ramasceneMasterProject/routing.py", "endpoints": {"api_summary": "The API allows for real-time communication between clients and the server using WebSockets. It provides a single endpoint for the RamasceneConsumer, which handles incoming WebSocket connections and messages.", "methods": ["websocket"], "paths": ["/ramascene/"]}}
{"file": "cloned/ramascene/ramasceneMasterProject/urls.py", "endpoints": {"api_summary": "The ramasceneMasterProject API provides a homepage and includes the ramascene API.", "methods": ["GET"], "paths": ["/", "/ramascene/"]}}
{"file": "cloned/von-bc-registries/data-pipeline/app/ui/start_page.py", "endpoints": {"api_summary": "The start_page API provides a redirect to the data_integration node page.", "methods": ["GET"], "paths": ["/start_page"]}}
{"file": "cloned/von-bc-registries/bcreg-aca/src/app.py", "endpoints": {"api_summary": "This API is a callback endpoint for an Aries agent, handling various topics such as connections, credentials, and presentations. It also includes endpoints for registering the issuer and handling problem reports.", "methods": ["POST"], "paths": ["/api/agentcb/topic/<topic>/"]}}
{"file": "cloned/Twitch_Bot/bot/command_console.py", "endpoints": {"api_summary": "This file defines a websocket client and a terminal UI to interact with it. The client connects to a command server and allows the user to send commands and chat messages to a bot-joined channel. The UI displays the chat messages and allows the user to enter commands and chat messages.", "methods": ["GET", "POST"], "paths": ["/users", "/users/<built-in function id>"]}}
{"file": "cloned/Twitch_Bot/bot/mods/topic.py", "endpoints": {"api_summary": "This API provides a way to manage and retrieve information about a topic, including its current state, goal, and notes. It also allows for setting the topic and its related information.", "methods": ["GET", "POST"], "paths": ["/topic", "/topic/set", "/topic/goal", "/topic/step", "/topic/link", "/topic/reset"]}}
{"file": "cloned/Twitch_Bot/web/main.py", "endpoints": {"api_summary": "This API is a collection of routes that handle various tasks such as announcements, commands, dropbox, polls, sending commands and messages, topics, twitch webhooks, ignoring users, trivia, user management, clips management, auto-ban, discord webhooks, and twitch OAuth.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/announcements", "/commands", "/dropbox", "/polls", "/send_command", "/send_message", "/topic", "/twitch_webhook", "/ignore", "/trivia", "/user_manage", "/clips_manage", "/autoban", "/discord_webhooks", "/twitch_oauth"]}}
{"file": "cloned/Twitch_Bot/web/auth.py", "endpoints": {"api_summary": "This API provides authentication and authorization functionality using JWT tokens. It includes endpoints for logging in, logging out, and refreshing tokens.", "methods": ["POST", "GET", "PUT", "DELETE"], "paths": ["/login", "/logout", "/refresh"]}}
{"file": "cloned/Twitch_Bot/web/routes/user_manage.py", "endpoints": {"api_summary": "This API provides endpoints for managing user authentication and authorization levels, as well as enabling/disabling users.", "methods": ["GET", "POST"], "paths": ["/users", "/users/level", "/users/enable"]}}
{"file": "cloned/Twitch_Bot/web/routes/clips.py", "endpoints": {"api_summary": "This API provides endpoints for managing and retrieving Twitch clips. It includes endpoints for adding, enabling, and disabling clips, as well as retrieving a list of all clips and their details.", "methods": ["GET", "POST"], "paths": ["/clips", "/clips/manage.html", "/clips/manage.js", "/clips/json", "/clips/delete", "/clips/enable", "/clips/add"]}}
{"file": "cloned/Twitch_Bot/web/routes/discord_webhooks.py", "endpoints": {"api_summary": "This API provides endpoints for managing Discord webhooks. It allows administrators to add, update, and delete webhooks, and provides a way to test webhook URLs.", "methods": ["GET", "POST"], "paths": ["/discord/webhook_manage", "/discord/webhook_manage.html", "/discord/webhook_manage.js", "/discord/webhook_manage/save"]}}
{"file": "cloned/Twitch_Bot/web/routes/auto_bahn.py", "endpoints": {"api_summary": "The Autoban API provides endpoints for managing bot regex patterns for auto-banning. It includes endpoints for enabling/disabling patterns, deleting patterns, and retrieving a list of all patterns.", "methods": ["GET", "POST"], "paths": ["/autoban", "/autoban/manage", "/autoban/manage.html", "/autoban/manage.js", "/autoban/manage/enable", "/autoban/manage/delete"]}}
{"file": "cloned/Twitch_Bot/web/routes/trivia.py", "endpoints": {"api_summary": "This API provides endpoints for playing trivia games, managing trivia questions, and displaying trivia results.", "methods": ["GET", "POST"], "paths": ["/trivia/play", "/trivia/play.html", "/trivia/play.js", "/trivia/play.css", "/trivia/sounds/{sound_id}", "/trivia/images/thumb-for-twitch", "/trivia/images/{image_id}", "/trivia/start", "/trivia/end", "/trivia/laptop-background-transparent.png", "/trivia/winners", "/trivia/winners.html", "/trivia/winners.css", "/trivia/winners.js", "/trivia/manage/", "/trivia/manage/upload", "/trivia/manage/download"]}}
{"file": "cloned/Twitch_Bot/web/routes/announcements.py", "endpoints": {"api_summary": "This API provides endpoints for managing announcements, including retrieving a list of announcements, enabling or disabling announcements, and updating the category of an announcement.", "methods": ["GET", "POST"], "paths": ["/announcements", "/announcements/enable", "/announcements/category"]}}
{"file": "cloned/Twitch_Bot/web/routes/docs.py", "endpoints": {"api_summary": "This API provides endpoints for user authentication and authorization, as well as documentation for the API itself.", "methods": ["POST", "GET"], "paths": ["/token", "/logout", "/login", "/openapi.json", "/docs"]}}
{"file": "cloned/Twitch_Bot/web/routes/poll_display.py", "endpoints": {"api_summary": "The API provides a poll display for users with the mod level of authentication. It also serves static files for the poll display, including CSS, JavaScript, and fonts.", "methods": ["GET"], "paths": ["/obs_poll", "/poll-display", "/poll.css", "/poll-mqtt-source.js", "/mononoki-Regular.woff2"]}}
{"file": "cloned/Twitch_Bot/web/routes/twitch_webhook.py", "endpoints": {"api_summary": "This API is a Twitch EventSub API that handles Twitch events such as follows, streams going live or offline, and channel raids. It also handles banning and unbanning users.", "methods": ["POST"], "paths": ["/twitch/eventsub/channel.follow", "/twitch/eventsub/stream.online", "/twitch/eventsub/stream.offline", "/twitch/eventsub/channel.raid", "/twitch/eventsub/channel.unban", "/twitch/eventsub/channel.ban"]}}
{"file": "cloned/Twitch_Bot/web/routes/send_command.py", "endpoints": {"api_summary": "This API allows for sending commands to a Twitch chat bot. It accepts a JSON payload with the command, arguments, and other options, and sends it to the bot for execution. The API also supports authentication and rate limiting.", "methods": ["POST"], "paths": ["/send_command"]}}
{"file": "cloned/Twitch_Bot/web/routes/send_message.py", "endpoints": {"api_summary": "This API endpoint allows for posting messages to a Twitch chat room. The endpoint requires an API key with admin level access and takes a JSON payload with a message field. The message will be sent to the Twitch chat room and the response will indicate whether the message was successfully sent.", "methods": ["POST"], "paths": ["/post_message"]}}
{"file": "cloned/Twitch_Bot/web/routes/dropbox.py", "endpoints": {"api_summary": "This API allows for the integration of Dropbox with the system. It provides endpoints for authenticating with Dropbox and retrieving an access token, as well as endpoints for managing the access token and refreshing it when it expires.", "methods": ["GET", "POST"], "paths": ["/dropbox", "/dropbox-response"]}}
{"file": "cloned/Twitch_Bot/web/routes/commands.py", "endpoints": {"api_summary": "This API provides a list of custom commands for a Twitch bot, along with their responses. It is designed for administrators to manage the bot's functionality.", "methods": ["GET"], "paths": ["/commands"]}}
{"file": "cloned/Twitch_Bot/web/routes/ignore.py", "endpoints": {"api_summary": "The API allows administrators to view and manage the ignore list for the web application. It provides a single endpoint for retrieving the list of ignored patterns, and allows for the creation, update, and deletion of ignore list entries.", "methods": ["GET"], "paths": ["/ignore"]}}
{"file": "cloned/Twitch_Bot/web/routes/topic.py", "endpoints": {"api_summary": "This API allows for the management of a topic in a Twitch chat room. It provides endpoints for retrieving the current topic and updating it with a new message.", "methods": ["GET", "POST"], "paths": ["/topic"]}}
{"file": "cloned/Twitch_Bot/web/routes/twitch_oauth.py", "endpoints": {"api_summary": "This API provides endpoints for managing Twitch OAuth tokens for IRC and PubSub. It includes endpoints for starting the OAuth flow, processing the OAuth response, and saving the tokens to the database.", "methods": ["GET", "POST"], "paths": ["/twitch/oauth", "/twitch/oauth.html", "/twitch/oauth.js", "/twitch/oauth/start/irc", "/twitch/oauth/start/pubsub", "/twitch/oauth/process.html", "/twitch/oauth/process.js", "/twitch/oauth/save"]}}
{"file": "cloned/fullstack-javascript-architecture/backend/api/src/setup/server/endpoint.js", "endpoints": {"api_summary": "This API endpoint allows for the execution of various operations on the server, such as retrieving data, updating data, or performing actions. The endpoint accepts a JSON payload with the operation to be executed, the parameters for the operation, and the authentication credentials. The endpoint returns a JSON response with the result of the operation, including the success status, message, and data.", "methods": ["ALL"], "paths": ["/api/endpoint"]}}
{"file": "cloned/fullstack-javascript-architecture/backend/api/src/setup/server/upload.js", "endpoints": {"api_summary": "This API allows for the uploading of files to the server, with the ability to resize images based on the type of file and the desired dimensions.", "methods": ["POST"], "paths": ["/uploads"]}}
{"file": "cloned/fullstack-javascript-architecture/backend/api/src/modules/note/query.js", "endpoints": {"api_summary": "This API provides endpoints for retrieving and managing notes. It allows users to retrieve a list of all their notes, retrieve a specific note by ID, and create, update, or delete a note.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/notes", "/notes/<noteId>"]}}
{"file": "cloned/fullstack-javascript-architecture/backend/api/src/modules/note/mutation.js", "endpoints": {"api_summary": "This API provides endpoints for creating and deleting notes. Notes are created with a user ID and a note text, and can be deleted by their ID. The API also includes validation rules for the note text and user ID.", "methods": ["POST", "DELETE"], "paths": ["/notes", "/notes/<noteId>"]}}
{"file": "cloned/fullstack-javascript-architecture/backend/api/src/modules/user/query.js", "endpoints": {"api_summary": "This API provides endpoints for user authentication and management, including login, logout, and user management for administrators.", "methods": ["GET", "POST"], "paths": ["/user/login", "/user/logout", "/user/list", "/user/dashboard/count"]}}
{"file": "cloned/fullstack-javascript-architecture/backend/api/src/modules/user/mutation.js", "endpoints": {"api_summary": "This API defines endpoints for user signup, profile update, and image change. It also includes email functionality for sending signup emails.", "methods": ["POST", "PUT", "PATCH"], "paths": ["/user/signup", "/user/profile", "/user/image"]}}
{"file": "cloned/fullstack-javascript-architecture/frontend/app/mobile/src/setup/routes/preLogin/index.js", "endpoints": {"api_summary": "The API provides endpoints for user authentication, including signup, login, and start. The endpoints are defined using the react-navigation-stack library and are used to navigate between different screens in the application.", "methods": ["GET", "POST"], "paths": ["/user/start", "/user/signup", "/user/login"]}}
{"file": "cloned/fullstack-javascript-architecture/frontend/app/mobile/src/setup/routes/postLogin/note.js", "endpoints": {"api_summary": "The Note API provides endpoints for managing notes, including listing, creating, and viewing details of notes. The API also supports pagination and filtering of notes.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/note", "/note/create", "/note/detail"]}}
{"file": "cloned/fullstack-javascript-architecture/frontend/app/mobile/src/setup/routes/postLogin/user.js", "endpoints": {"api_summary": "This API provides endpoints for user profile and help pages. The user profile endpoint allows users to view and edit their profile information, while the help endpoint provides a list of frequently asked questions and their answers.", "methods": ["GET", "POST"], "paths": ["/user", "/help"]}}
{"file": "cloned/fullstack-javascript-architecture/frontend/app/mobile/src/modules/note/api/actions/query.js", "endpoints": {"api_summary": "This API provides a list of notes and a detail view for each note. The API also includes caching and error handling.", "methods": ["GET", "POST"], "paths": ["/notes", "/notes/<noteId>"]}}
{"file": "cloned/fullstack-javascript-architecture/frontend/app/mobile/src/modules/note/api/actions/mutation.js", "endpoints": {"api_summary": "This API allows for the creation and deletion of notes. Notes can be created with the `create` endpoint and deleted with the `remove` endpoint. The API URL is defined in the `API_URL` environment variable.", "methods": ["POST"], "paths": ["/api/notes", "/api/notes/<noteId>"]}}
{"file": "cloned/fullstack-javascript-architecture/frontend/app/mobile/src/modules/user/api/actions/query.js", "endpoints": {"api_summary": "This API provides endpoints for user authentication, user list, and user detail. It also includes caching and error handling.", "methods": ["GET", "POST"], "paths": ["/user/login", "/user/logout", "/user/list", "/user/detail"]}}
{"file": "cloned/fullstack-javascript-architecture/frontend/app/mobile/src/modules/user/api/actions/mutation.js", "endpoints": {"api_summary": "This API provides endpoints for user signup, profile update, and image change. It uses the axios library to make HTTP requests to the API_URL endpoint.", "methods": ["POST"], "paths": ["/users", "/users/<built-in function id>", "/users/image"]}}
{"file": "cloned/fullstack-javascript-architecture/frontend/app/web/src/setup/routes/note.js", "endpoints": {"api_summary": "This API provides endpoints for creating and listing notes. The endpoints are protected by authentication and can be accessed by authorized users only.", "methods": ["GET", "POST"], "paths": ["/note/list", "/note/create"]}}
{"file": "cloned/fullstack-javascript-architecture/frontend/app/web/src/setup/routes/user.js", "endpoints": {"api_summary": "This API provides endpoints for user authentication and profile management. It includes endpoints for logging in, signing up, viewing the user profile, and accessing the user dashboard.", "methods": ["GET", "POST"], "paths": ["/user/login", "/user/signup", "/user/profile", "/user/dashboard"]}}
{"file": "cloned/fullstack-javascript-architecture/frontend/app/web/src/setup/routes/admin/user.js", "endpoints": {"api_summary": "The API provides a list of users for an admin user to view and manage. The API is authenticated and requires the admin role to access.", "methods": ["GET"], "paths": ["/admin/users"]}}
{"file": "cloned/fullstack-javascript-architecture/frontend/app/web/src/setup/routes/admin/dashboard.js", "endpoints": {"api_summary": "The admin dashboard API provides a set of endpoints for managing the admin dashboard, including retrieving the dashboard data and performing actions on the dashboard.", "methods": ["GET"], "paths": ["/admin/dashboard"]}}
{"file": "cloned/fullstack-javascript-architecture/frontend/app/web/src/modules/note/api/actions/query.js", "endpoints": {"api_summary": "This API provides a list of notes and a detail view for each note. The list endpoint returns a list of notes, and the detail endpoint returns a single note with the specified ID.", "methods": ["GET", "POST"], "paths": ["/notes", "/notes/<noteId>"]}}
{"file": "cloned/fullstack-javascript-architecture/frontend/app/web/src/modules/note/api/actions/mutation.js", "endpoints": {"api_summary": "This API allows for the creation and deletion of notes. Notes can be created with the `create` endpoint and deleted with the `remove` endpoint. The API URL is defined in the `API_URL` environment variable.", "methods": ["POST"], "paths": ["/api/notes"]}}
{"file": "cloned/fullstack-javascript-architecture/frontend/app/web/src/modules/user/api/actions/query.js", "endpoints": {"api_summary": "This API provides endpoints for user authentication, user data retrieval, and user data manipulation. It also includes endpoints for caching and local storage management.", "methods": ["GET", "POST"], "paths": ["/users", "/users/<built-in function id>", "/userList", "/userDashboardCount"]}}
{"file": "cloned/fullstack-javascript-architecture/frontend/app/web/src/modules/user/api/actions/mutation.js", "endpoints": {"api_summary": "This API provides endpoints for user signup, creation, updating, and removal. It also includes a helper function for creating or updating a user based on the presence of an ID.", "methods": ["POST"], "paths": ["/users", "/users/<built-in function id>"]}}
{"file": "cloned/Farmbot-Web-App/public/3D/lib/draco_wasm_wrapper.js", "endpoints": {"api_summary": "No REST API endpoints found in the code.", "methods": [], "paths": []}}
{"file": "cloned/Farmbot-Web-App/frontend/internal_urls.ts", "endpoints": {"api_summary": "This API defines a set of endpoints for a web application that allows users to manage their gardens and plants. It includes endpoints for managing plants, weeds, points, curves, sequences, regimens, events, sensors, photos, tools, messages, help, settings, and tours.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/app/designer", "/app/logs", "/app/plants", "/app/weeds", "/app/points", "/app/curves", "/app/sequences", "/app/regimens", "/app/events", "/app/sensors", "/app/photos", "/app/tools", "/app/messages", "/app/help", "/app/settings", "/app/tours"]}}
{"file": "cloned/Farmbot-Web-App/frontend/messages/actions.ts", "endpoints": {"api_summary": "This API provides endpoints for fetching and seeding account information. The fetch endpoint retrieves the current bulletin content for a given slug, while the seed endpoint seeds the account with a new product line.", "methods": ["GET", "POST"], "paths": ["/api/global_bulletin/<slug>", "/api/account/seed"]}}
{"file": "cloned/Farmbot-Web-App/frontend/wizard/data.ts", "endpoints": {"api_summary": "This file defines a set of REST API endpoints for a FarmBot setup wizard.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/v1/setup_wizard"]}}
{"file": "cloned/Farmbot-Web-App/frontend/api/delete_points.ts", "endpoints": {"api_summary": "This API defines endpoints for deleting points in a farmbot system. It allows users to delete points by name or by ID, and provides a progress callback for tracking the deletion process.", "methods": ["DELETE"], "paths": ["/points/search", "/points/<point_id>"]}}
{"file": "cloned/Farmbot-Web-App/frontend/api/api.ts", "endpoints": {"api_summary": "This API defines endpoints for various resources such as users, devices, peripherals, farm events, regimens, sequences, images, points, logs, webcam feed, web app config, firmware config, sensor readings, sensors, farmware envs, pin bindings, saved gardens, plant templates, telemetry, farmware installations, alerts, global bulletins, folders, releases, feedback, ai feedbacks, featured sequences, wizard step results, curves, and AI.", "methods": ["GET", "POST", "PUT", "PATCH", "DELETE"], "paths": ["/api/tokens/", "/api/password_resets/", "/api/device/", "/api/device/seed", "/api/device/reset", "/api/users/", "/api/users/control_certificate", "/api/users/resend_verification", "/api/peripherals/", "/api/farm_events/", "/api/regimens/", "/api/sequences/", "/api/sequence_versions/", "/api/tools/", "/api/images/", "/api/points/", "/api/point_groups/", "/api/points/?filter=all", "/api/points/search", "/api/logs/search", "/api/logs/", "/api/webcam_feeds/", "/api/web_app_config/", "/api/fbos_config/", "/api/firmware_config/", "/api/sensor_readings", "/api/sensors/", "/api/farmware_envs/", "/api/pin_bindings/", "/api/saved_gardens/", "/api/saved_gardens/snapshot", "/api/saved_gardens/:id/apply", "/api/export_data", "/api/plant_templates/", "/api/telemetries/", "/api/farmware_installations/", "/api/first_party_farmwares", "/api/alerts/", "/api/global_bulletins/", "/api/folders/", "/api/releases?platform=", "/api/feedback", "/api/ai_feedbacks", "/api/featured_sequences", "/api/wizard_step_results/", "/api/curves/", "/api/ai"]}}
{"file": "cloned/Farmbot-Web-App/frontend/sequences/actions.ts", "endpoints": {"api_summary": "This file defines a set of functions for working with sequences in a farmbot system. It includes functions for creating, editing, and deleting sequences, as well as functions for managing the active sequence and for publishing, unpublishing, and installing sequences.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/sequences", "/sequences/<sequence_id>", "/sequences/<sequence_id>/publish", "/sequences/<sequence_id>/unpublish", "/sequences/<sequence_id>/install", "/sequences/<sequence_id>/upgrade/<sequence_version_id>"]}}
{"file": "cloned/Farmbot-Web-App/frontend/sequences/__tests__/request_auto_generation_test.ts", "endpoints": {"api_summary": "This API is used for generating Lua code for FarmBot. It provides endpoints for requesting auto-generation of Lua code, retrieving prompts, and extracting Lua code from text.", "methods": ["GET", "POST"], "paths": ["/request_auto_generation", "/retrieve_prompt", "/extract_lua_code"]}}
{"file": "cloned/Farmbot-Web-App/frontend/settings/account/actions.ts", "endpoints": {"api_summary": "This API allows users to delete their account and reset their account information.", "methods": ["DELETE", "POST"], "paths": ["/users", "/account_reset"]}}
{"file": "cloned/Farmbot-Web-App/frontend/saved_gardens/actions.ts", "endpoints": {"api_summary": "This file defines endpoints for saving and applying gardens, as well as creating and copying saved gardens.", "methods": ["POST", "PATCH", "GET"], "paths": ["/snapshotPath", "/applyGardenPath", "/savedGardens", "/plants"]}}
{"file": "cloned/Farmbot-Web-App/frontend/saved_gardens/__tests__/actions_test.ts", "endpoints": {"api_summary": "This file defines endpoints for snapshotting and applying gardens, as well as creating, deleting, and copying saved gardens.", "methods": ["POST", "PATCH"], "paths": ["/api/snapshot", "/api/apply_garden", "/api/saved_gardens", "/api/saved_gardens/<id>", "/api/plant_templates"]}}
{"file": "cloned/GraphQL-Stack/mfe/mod-vue/src/router/index.js", "endpoints": {"api_summary": "This API provides a simple web application with two routes: a home page and an about page. The home page displays a list of users, and the about page provides information about the application.", "methods": ["GET", "POST"], "paths": ["/", "/about"]}}
{"file": "cloned/GraphQL-Stack/mbe/mod-express/src/core/router.js", "endpoints": {"api_summary": "The mod-express API provides a simple endpoint for retrieving a greeting message and a more complex endpoint for interacting with a hello world service.", "methods": ["GET", "POST"], "paths": ["/", "/hello-world"]}}
{"file": "cloned/GraphQL-Stack/mbe/mod-express/src/hello-world/index.js", "endpoints": {"api_summary": "This API provides a simple Hello World message and a method for adding two numbers using WebAssembly.", "methods": ["GET", "GET"], "paths": ["/", "/add"]}}
{"file": "cloned/GraphQL-Stack/mbe/mod-fastify/src/core/router.js", "endpoints": {"api_summary": "This API provides a simple endpoint for retrieving a greeting message and a more complex endpoint for interacting with a hello world service.", "methods": ["GET", "POST"], "paths": ["/", "/hello-world"]}}
{"file": "cloned/GraphQL-Stack/mbe/mod-fastify/src/hello-world/index.js", "endpoints": {"api_summary": "This API provides a simple Hello World message and a method for adding two numbers using WebAssembly.", "methods": ["GET", "GET"], "paths": ["/", "/add"]}}
{"file": "cloned/GraphQL-Stack/mbe/mod-koa/src/core/router.js", "endpoints": {"api_summary": "This API provides a simple endpoint for retrieving a greeting message and a more complex endpoint for managing user accounts.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/", "/hello", "/hello/<built-in function id>"]}}
{"file": "cloned/GraphQL-Stack/mbe/mod-koa/src/hello/index.js", "endpoints": {"api_summary": "This API provides a simple Hello World message and a method for adding two numbers using WebAssembly.", "methods": ["GET", "GET"], "paths": ["/", "/add"]}}
{"file": "cloned/GraphQL-Stack/mbe/mod-nest/src/app.controller.ts", "endpoints": {"api_summary": "The API provides a single endpoint for the root of the application, which returns a string representing the root of the application.", "methods": ["GET"], "paths": ["/"]}}
{"file": "cloned/GraphQL-Stack/mbe/mod-nest/src/hello-world/hello-world.controller.ts", "endpoints": {"api_summary": "The Hello World API provides a simple example of a RESTful API that returns a greeting message and performs a basic arithmetic operation. The API has two endpoints: one for retrieving the greeting message and another for performing the arithmetic operation.", "methods": ["GET", "GET"], "paths": ["/hello-world", "/hello-world/add"]}}
{"file": "cloned/micro-company/authserver/src/main/java/com/idugalic/authserver/AuthserverApplication.java", "endpoints": {"api_summary": "This API is an OAuth2 authorization server that provides authentication and authorization services for a web application. It supports various grant types, including authorization code, refresh token, client credentials, and password. The API also supports token revocation and token introspection.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/oauth/authorize", "/oauth/token", "/oauth/revoke", "/oauth/introspect"]}}
{"file": "cloned/micro-company/query-side-blog/src/main/java/com/idugalic/queryside/blog/repository/BlogPostRepository.java", "endpoints": {"api_summary": "The BlogPostRepository API provides a set of endpoints for querying and retrieving blog posts from a database. It includes endpoints for retrieving all blog posts, retrieving blog posts by category, retrieving blog posts by date, and retrieving a specific blog post by title or public slug.", "methods": ["GET", "POST"], "paths": ["/blogposts", "/blogposts/category", "/blogposts/date", "/blogposts/title", "/blogposts/publicSlug"]}}
{"file": "cloned/micro-company/command-side-project/src/main/java/com/idugalic/commandside/project/web/ProjectController.java", "endpoints": {"api_summary": "The ProjectController API allows for the creation and updating of projects. It accepts JSON requests and returns HTTP status codes to indicate success or failure. The API is secured using Spring Security and requires authentication.", "methods": ["POST", "PUT"], "paths": ["/projectcommands", "/projectcommands/{id}/updatecommand"]}}
{"file": "cloned/micro-company/command-side-blog/src/main/java/com/idugalic/commandside/blog/web/BlogController.java", "endpoints": {"api_summary": "The BlogController API allows for the creation and publishing of blog posts. It also provides endpoints for retrieving and updating blog post information.", "methods": ["POST", "GET", "PUT", "DELETE"], "paths": ["/blogpostcommands", "/blogpostcommands/{id}", "/blogpostcommands/{id}/publishcommand"]}}
{"file": "cloned/micro-company/monolithic/src/main/frontend/src/app/projects/projects-routing.module.ts", "endpoints": {"api_summary": "The Projects API provides endpoints for managing projects and their related data. It includes endpoints for creating, reading, updating, and deleting projects, as well as endpoints for retrieving lists of projects and project details.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/projects", "/projects/<id>", "/projects/action/new"]}}
{"file": "cloned/micro-company/monolithic/src/main/frontend/src/app/projects/shared/projects.service.ts", "endpoints": {"api_summary": "The ProjectsService API provides endpoints for retrieving and manipulating project data. It includes endpoints for getting a list of projects, getting a single project by ID, and adding a new project.", "methods": ["GET", "POST"], "paths": ["/api/projects", "/api/projects/<built-in function id>", "/api/projectcommands"]}}
{"file": "cloned/micro-company/monolithic/src/main/frontend/src/app/blog-posts/blog-posts-routing.module.ts", "endpoints": {"api_summary": "The BlogPosts API provides endpoints for managing blog posts, including listing, viewing, creating, and editing posts.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/blog", "/blog/action/new", "/blog/:id"]}}
{"file": "cloned/micro-company/monolithic/src/main/frontend/src/app/blog-posts/shared/blog-posts.service.ts", "endpoints": {"api_summary": "The BlogPostsService API provides endpoints for retrieving and manipulating blog posts. It includes endpoints for getting a list of all blog posts, getting a single blog post by ID, and adding a new blog post.", "methods": ["GET", "POST"], "paths": ["/api/blogposts", "/api/blogpostcommands"]}}
{"file": "cloned/lando-api/landoapi/dockerflow.py", "endpoints": {"api_summary": "This API provides endpoints for health checks and version information, which are used by the load balancer and other services to monitor the health and version of the application.", "methods": ["GET"], "paths": ["/__heartbeat__", "/__lbheartbeat__", "/__version__"]}}
{"file": "cloned/lando-api/landoapi/api/landing_jobs.py", "endpoints": {"api_summary": "This API provides endpoints for managing landing jobs, including retrieving the status of a landing job and updating the status of a landing job.", "methods": ["GET", "PUT"], "paths": ["/landing_jobs/<landing_job_id>", "/landing_jobs/<landing_job_id>/status"]}}
{"file": "cloned/lando-api/landoapi/api/uplift.py", "endpoints": {"api_summary": "This API allows for the creation and retrieval of uplift requests for a given repository and revision.", "methods": ["GET", "POST"], "paths": ["/uplift/repos", "/uplift/create"]}}
{"file": "cloned/lando-api/landoapi/api/diff_warnings.py", "endpoints": {"api_summary": "This API provides endpoints for creating, retrieving, and archiving warnings related to diffs in a revision.", "methods": ["POST", "GET", "DELETE"], "paths": ["/revisions/<revision_id>/diffs/<diff_id>/warnings", "/revisions/<revision_id>/diffs/<diff_id>/warnings/<pk>"]}}
{"file": "cloned/node-healthchecks-api/test/integration/service.js", "endpoints": {"api_summary": "This API provides endpoints for checking the health of a service and for performing a heavy operation that consumes CPU and memory resources.", "methods": ["GET"], "paths": ["/status", "/make-leak", "/heavy"]}}
{"file": "cloned/4A_ISA_TheCookieFactory/j2e/src/main/java/fr/unice/polytech/isa/tcf/webservice/CustomerCareService.java", "endpoints": {"api_summary": "The Customer Care Service API allows customers to register, track their orders, and list all available recipes. It also provides methods for handling exceptions related to already existing customers and unknown order IDs.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/register", "/track", "/listAllRecipes"]}}
{"file": "cloned/4A_ISA_TheCookieFactory/j2e/src/main/java/fr/unice/polytech/isa/tcf/webservice/CustomerCareServiceImpl.java", "endpoints": {"api_summary": "The Customer Care Service API provides endpoints for customer registration, order tracking, and recipe listing. It allows customers to register and manage their accounts, track the status of their orders, and browse the available recipes.", "methods": ["GET", "POST"], "paths": ["/register", "/track", "/listAllRecipes"]}}
{"file": "cloned/4A_ISA_TheCookieFactory/j2e/src/main/java/fr/unice/polytech/isa/tcf/webservice/CartWebService.java", "endpoints": {"api_summary": "The CartWebService API allows customers to add and remove items from their cart, view the contents of their cart, and validate their cart for payment. It also handles exceptions related to unknown customers, payment issues, and empty carts.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/cart/addItem", "/cart/removeItem", "/cart/getCartContents", "/cart/validate"]}}
{"file": "cloned/wellcomecollection.org/content/webapp/app.ts", "endpoints": {"api_summary": "This API defines a single endpoint for serving a RSS feed of stories from the Wellcome Collection website.", "methods": ["GET"], "paths": ["/rss"]}}
{"file": "cloned/wellcomecollection.org/content/webapp/next.config.js", "endpoints": {"api_summary": "The Content API provides endpoints for managing and retrieving content, including healthchecks, newsletter signups, and image and download management.", "methods": ["GET", "POST"], "paths": ["/content/management/healthcheck", "/newsletter-signup", "/content/management/healthcheck", "/:path*", "/download", "/image"]}}
{"file": "cloned/wellcomecollection.org/content/webapp/pages/api/newsletter-signup.ts", "endpoints": {"api_summary": "This API endpoint allows users to subscribe to the newsletter by providing their email address and marketing preferences. The endpoint also handles resubscription of suppressed email addresses.", "methods": ["POST"], "paths": ["/api/newsletter"]}}
{"file": "cloned/wellcomecollection.org/content/webapp/pages/api/exhibitions-related-content/index.ts", "endpoints": {"api_summary": "This API endpoint retrieves related content for an exhibition based on the provided parameters. It accepts a JSON object with the exhibition ID and returns a JSON object with the related content.", "methods": ["GET"], "paths": ["/exhibitions/<exhibitionId>/related-content"]}}
{"file": "cloned/wellcomecollection.org/content/webapp/pages/api/exhibitions/exhibition.ts", "endpoints": {"api_summary": "This API endpoint allows clients to retrieve information about exhibitions from the Wellcome Collection website. It takes a JSON object as input, containing an ID for the exhibition, and returns a JSON object with the exhibition details.", "methods": ["GET"], "paths": ["/api/exhibitions/<id>"]}}
{"file": "cloned/wellcomecollection.org/content/webapp/pages/api/exhibitions/index.ts", "endpoints": {"api_summary": "This API endpoint allows clients to retrieve information about exhibitions from the Wellcome Collection website. It accepts a JSON object as a query parameter and returns a JSON object with the results of the query.", "methods": ["GET"], "paths": ["/api/exhibitions"]}}
{"file": "cloned/wellcomecollection.org/content/webapp/pages/api/prismic/works.ts", "endpoints": {"api_summary": "The Works API provides a list of works from the Wellcome Collection catalogue, with information on physical description, description, and image URL. The API also includes a custom format for the response to be compatible with Prismic's integration field.", "methods": ["GET"], "paths": ["/works"]}}
{"file": "cloned/wellcomecollection.org/content/webapp/pages/api/events/index.ts", "endpoints": {"api_summary": "This API endpoint allows clients to retrieve a list of events from the Prismic content repository. The endpoint accepts a JSON object as a query parameter, which is used to filter and sort the events. The response is a JSON object containing the list of events, with each event represented as a JSON object with various properties.", "methods": ["GET"], "paths": ["/api/events"]}}
{"file": "cloned/wellcomecollection.org/content/webapp/pages/api/articles/index.ts", "endpoints": {"api_summary": "This API provides a way to fetch articles from a Prismic repository and transform them into a standardized format. It accepts a JSON object as input, which contains the parameters for the query, and returns a JSON object with the transformed articles.", "methods": ["GET"], "paths": ["/api/articles"]}}
{"file": "cloned/wellcomecollection.org/content/webapp/services/prismic/fetch/events.ts", "endpoints": {"api_summary": "This API defines a set of endpoints for fetching events and event-related data from a Prismic repository. It includes endpoints for fetching individual events, event schedules, and event series, as well as a query endpoint for retrieving a list of events based on various filters and parameters.", "methods": ["GET"], "paths": ["/events", "/events/<id>", "/events/schedule", "/events/series"]}}
{"file": "cloned/wellcomecollection.org/content/webapp/services/prismic/fetch/exhibitions.ts", "endpoints": {"api_summary": "This API defines endpoints for fetching exhibitions, exhibition-related content, and related guides.", "methods": ["GET"], "paths": ["/exhibitions", "/exhibitions/<id>", "/exhibitions/related-content"]}}
{"file": "cloned/wellcomecollection.org/content/webapp/services/prismic/fetch/index.ts", "endpoints": {"api_summary": "This file defines a Prismic client for fetching data from the Prismic API. It includes functions for fetching data by ID, type, and UID, as well as a function for fetching data from the client-side API.", "methods": ["GET"], "paths": ["/api/articles", "/api/events", "/api/exhibitions", "/api/books", "/api/articles/<id>", "/api/events/<id>", "/api/exhibitions/<id>", "/api/books/<id>"]}}
{"file": "cloned/wellcomecollection.org/content/webapp/services/prismic/transformers/exhibitions.ts", "endpoints": {"api_summary": "This API defines a set of endpoints for retrieving and manipulating exhibition data, including exhibitions, exhibits, and related content.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/exhibitions", "/exhibitions/<id>", "/exhibits", "/exhibits/<id>", "/related-content", "/related-content/<id>"]}}
{"file": "cloned/wellcomecollection.org/content/webapp/services/wellcome/catalogue/images.ts", "endpoints": {"api_summary": "The API allows for querying and retrieving images from the Wellcome Collection catalogue. It supports various parameters for filtering and including related data, such as subjects, contributors, and languages.", "methods": ["GET"], "paths": ["/images", "/images/<id>"]}}
{"file": "cloned/wellcomecollection.org/content/webapp/services/wellcome/catalogue/works.ts", "endpoints": {"api_summary": "The API defined in this file retrieves information about works from the Wellcome Collection catalogue. It includes endpoints for retrieving a list of works, retrieving a single work by ID, and retrieving the items associated with a work.", "methods": ["GET"], "paths": ["/works", "/works/<id>", "/works/items/<id>"]}}
{"file": "cloned/wellcomecollection.org/content/webapp/services/wellcome/content/events.ts", "endpoints": {"api_summary": "The API provides a list of events from the Wellcome Collection, including details such as the event name, description, and location. It also allows users to search for events by keyword or date.", "methods": ["GET"], "paths": ["/events"]}}
{"file": "cloned/wellcomecollection.org/content/webapp/services/wellcome/content/articles.ts", "endpoints": {"api_summary": "The API provides a list of articles from the Wellcome Collection, with the ability to filter and sort the results.", "methods": ["GET"], "paths": ["/articles"]}}
{"file": "cloned/wellcomecollection.org/content/webapp/services/wellcome/content/article.ts", "endpoints": {"api_summary": "The API provides a single endpoint for retrieving an article by its ID. The endpoint returns an Article object or a WellcomeApiError if the article is not found.", "methods": ["GET"], "paths": ["/articles/<built-in function id>"]}}
{"file": "cloned/wellcomecollection.org/cache/edge_lambdas/src/redirector.test.ts", "endpoints": {"api_summary": "This API handles redirects for the Wellcome Collection website. It can redirect requests for articles, exhibitions, and other pages, and can also redirect requests with specific query parameters.", "methods": ["GET"], "paths": ["/articles/<article_id>", "/exhibitions/<exhibition_id>", "/<page_name>"]}}
{"file": "cloned/wellcomecollection.org/playwright/test/concept.test.ts", "endpoints": {"api_summary": "This API provides information about concepts, including works and images associated with them. It also provides links to filtered searches for works and images.", "methods": ["GET"], "paths": ["/concepts/<concept_id>", "/concepts/<concept_id>/works", "/concepts/<concept_id>/images"]}}
{"file": "cloned/wellcomecollection.org/playwright/test/search-works.test.ts", "endpoints": {"api_summary": "This API is a search engine for works, with filters for formats, dates, and contributors. It also allows for sorting by production dates.", "methods": ["GET", "POST"], "paths": ["/search/works", "/search/works?query=<query>", "/search/works?query=<query>&workType=<workType>", "/search/works?query=<query>&workType=<workType>&page=<page>"]}}
{"file": "cloned/wellcomecollection.org/playwright/test/search-all.test.ts", "endpoints": {"api_summary": "This API allows users to search for works, images, and other content on the website. It also provides functionality for pagination and error handling.", "methods": ["GET", "POST"], "paths": ["/search", "/search/works", "/search/images", "/search/<work_id>", "/search/<image_id>"]}}
{"file": "cloned/wellcomecollection.org/playwright/test/mocks/one-schedule-item.ts", "endpoints": {"api_summary": "This API defines a single endpoint for retrieving a schedule item from a Prismic repository.", "methods": ["GET"], "paths": ["/schedule/<id>"]}}
{"file": "cloned/wellcomecollection.org/updown/updown-checks.ts", "endpoints": {"api_summary": "This API defines a set of endpoints for checking the health of various services, including the Wellcome Collection website and API, as well as third-party services such as DLCS and Wellcome Images.", "methods": ["GET"], "paths": ["/health", "/works/<id>", "/images/<id>", "/catalogue/v2/works/<id>", "/catalogue/v2/images/<id>", "/assets/icons/favicon-16x16.png", "/dlcs/health", "/wellcomeimages/indexplus/image/<id>.html"]}}
{"file": "cloned/wellcomecollection.org/identity/webapp/app.ts", "endpoints": {"api_summary": "This API is a Next.js application that serves a single page application. It has a healthcheck endpoint for the load balancer and a catch-all endpoint for all other requests.", "methods": ["GET", "POST"], "paths": ["/management/healthcheck", "(.*)"]}}
{"file": "cloned/wellcomecollection.org/identity/webapp/hooks/useRequestDelete.ts", "endpoints": {"api_summary": "The API allows users to request their account deletion by providing their password and confirming the request. The API returns a success or error message based on the request.", "methods": ["PUT"], "paths": ["/account/api/users/me/deletion-request"]}}
{"file": "cloned/wellcomecollection.org/identity/webapp/test/mocks/handlers.ts", "endpoints": {"api_summary": "This API provides endpoints for managing user accounts, including creating new users, retrieving user information, updating user details, and deleting user accounts. It also provides endpoints for managing item requests and authentication.", "methods": ["POST", "GET", "PUT", "DELETE"], "paths": ["/account/api/user/create", "/account/api/users/:userId", "/account/api/auth/me", "/account/api/users/:userId/password", "/account/api/users/:userId/deletion-request", "/account/api/users/:userId/item-requests"]}}
{"file": "cloned/wellcomecollection.org/identity/webapp/pages/api/registration.ts", "endpoints": {"api_summary": "This API endpoint is responsible for handling user registration and updating user information. It uses the Auth0 authentication service and the WeCo identity API to manage user accounts and retrieve user data.", "methods": ["POST"], "paths": ["/users/<built-in function id>"]}}
{"file": "cloned/wellcomecollection.org/common/services/prismic/link-resolver.test.ts", "endpoints": {"api_summary": "This API resolves URLs for various types of documents in a Prismic repository, including articles, webcomics, and exhibitions. It also supports highlight tours and related documents.", "methods": ["GET"], "paths": ["/stories/1", "/books/1", "/events/1", "/event-series/1", "/exhibitions/1", "/guides/exhibitions/1", "/guides/exhibitions/1/captions-and-transcripts", "/guides/exhibitions/1/audio-without-descriptions", "/guides/exhibitions/1/bsl", "/exhibitions/1", "/1", "/about-us/1", "/projects/1", "/seasons/1", "/visual-stories/1", "/exhibitions/hard-graft-work-health-and-rights/visual-stories", "/visual-stories/1"]}}
{"file": "cloned/hubcare-api/hubcare/hubcare_api/hubcare_api/urls.py", "endpoints": {"api_summary": "The Hubcare API provides a RESTful interface for retrieving and manipulating data related to GitHub repositories. It allows users to retrieve information about repository indicators, such as the number of stars, forks, and watchers, and provides a way to authenticate requests using a token.", "methods": ["GET"], "paths": ["/hubcare_indicators/<owner>/<repo>/<token_auth>/"]}}
{"file": "cloned/hubcare-api/hubcare/hubcare_api/hubcare_api/views.py", "endpoints": {"api_summary": "This API provides information about a repository's health and activity, including metrics for issues, community, commits, and pull requests. It also provides graphs for commit and pull request activity.", "methods": ["GET", "POST", "PUT"], "paths": ["/<owner>/<repo>/<token_auth>/", "/<owner>/<repo>/<token_auth>/<request_type>"]}}
{"file": "cloned/hubcare-api/hubcare/repository/repository/urls.py", "endpoints": {"api_summary": "The repository API allows users to interact with a repository, including creating, updating, and deleting repository metadata and content. The API also provides endpoints for managing repository permissions and collaborators.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/repository/repository/<str:owner>/<str:repo>/<str:token_auth>/"]}}
{"file": "cloned/hubcare-api/hubcare/repository/repository/views.py", "endpoints": {"api_summary": "The Repository API allows you to check the existence of a repository and the last time it was updated, as well as add, update, and retrieve information about repositories.", "methods": ["GET", "POST", "PUT"], "paths": ["/repositories/<owner>/<repo>", "/repositories"]}}
{"file": "cloned/hubcare-api/hubcare/metrics/pull_request_metrics/pull_request_metrics/urls.py", "endpoints": {"api_summary": "The pull_request_metrics API provides endpoints for managing pull requests and their associated metrics. It includes endpoints for creating, updating, and retrieving pull requests, as well as endpoints for calculating and retrieving metrics related to pull requests.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/pull_request/admin/", "/pull_request/acceptance_quality/"]}}
{"file": "cloned/hubcare-api/hubcare/metrics/pull_request_metrics/acceptance_quality/urls.py", "endpoints": {"api_summary": "This API provides a single endpoint for retrieving the quality of a pull request in a GitHub repository. The endpoint accepts a token authentication parameter and returns a JSON object with the quality score and other relevant information.", "methods": ["GET"], "paths": ["/<owner>/<repo>/<token_auth>/"]}}
{"file": "cloned/hubcare-api/hubcare/metrics/pull_request_metrics/acceptance_quality/views.py", "endpoints": {"api_summary": "This API provides information about the quality of pull requests from a repository.", "methods": ["GET", "POST", "PUT"], "paths": ["/pull_request_quality/<owner>/<repo>/<token_auth>"]}}
{"file": "cloned/hubcare-api/hubcare/metrics/commit_metrics/commit_metrics/urls.py", "endpoints": {"api_summary": "The commits API provides endpoints for managing commits, commit months, and contributors. It includes endpoints for creating, reading, updating, and deleting commits, as well as endpoints for retrieving commit months and contributors.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/commit/admin/", "/commit/commit_month/", "/commit/contributors/"]}}
{"file": "cloned/hubcare-api/hubcare/metrics/commit_metrics/commit_month/urls.py", "endpoints": {"api_summary": "The API allows users to retrieve commit data for a specific repository and owner. It uses a token authentication mechanism to ensure secure access to the data.", "methods": ["GET"], "paths": ["/<owner>/<repo>/<token_auth>"]}}
{"file": "cloned/hubcare-api/hubcare/metrics/commit_metrics/commit_month/views.py", "endpoints": {"api_summary": "The CommitMonth API allows users to retrieve and update the number of commits made to a repository in the last month. It also provides a high-level summary of the API and its endpoints.", "methods": ["GET", "POST", "PUT"], "paths": ["/commit_month/<owner>/<repo>/<token_auth>", "/commit_month/<owner>/<repo>/<token_auth>/commits_by_week"]}}
{"file": "cloned/hubcare-api/hubcare/metrics/commit_metrics/contributors/urls.py", "endpoints": {"api_summary": "The API allows users to retrieve information about the contributors of a specific repository on GitHub. It uses a token authentication mechanism to ensure secure access to the data.", "methods": ["GET"], "paths": ["/<owner>/<repo>/<token_auth>/"]}}
{"file": "cloned/hubcare-api/hubcare/metrics/commit_metrics/contributors/views.py", "endpoints": {"api_summary": "This API endpoint retrieves the number of different authors from a repository using the GitHub API for the last 14 days and returns the total sum. It also allows for creating, updating, and retrieving the data.", "methods": ["GET", "POST", "PUT"], "paths": ["/differents_authors/<owner>/<repo>/<token_auth>"]}}
{"file": "cloned/hubcare-api/hubcare/metrics/issue_metrics/activity_rate/urls.py", "endpoints": {"api_summary": "The API allows users to retrieve and modify activity rate issues for a specific repository. It uses HTTP methods GET and POST to retrieve and update the issues, respectively.", "methods": ["GET", "POST"], "paths": ["/<owner>/<repo>/<token_auth>/"]}}
{"file": "cloned/hubcare-api/hubcare/metrics/issue_metrics/activity_rate/views.py", "endpoints": {"api_summary": "The ActivityRateIssue API allows users to retrieve and update the activity rate of a repository's issues. It also provides a method to calculate the activity rate based on the number of open and active issues.", "methods": ["GET", "POST", "PUT"], "paths": ["/activity_rate/<owner>/<repo>/<token_auth>", "/activity_rate/<owner>/<repo>/<token_auth>/<id>"]}}
{"file": "cloned/hubcare-api/hubcare/metrics/issue_metrics/help_wanted/urls.py", "endpoints": {"api_summary": "The Help Wanted API allows users to create and manage help wanted listings for their repositories. It provides endpoints for creating, updating, and deleting listings, as well as for retrieving and searching for listings.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/help-wanted/<owner>/<repo>/<token_auth>/listings/", "/help-wanted/<owner>/<repo>/<token_auth>/listings/<listing_id>/"]}}
{"file": "cloned/hubcare-api/hubcare/metrics/issue_metrics/help_wanted/views.py", "endpoints": {"api_summary": "The Help Wanted API provides information about the help wanted issue rate for a given repository. It allows users to create, update, and retrieve help wanted objects, which contain information about the total number of issues, the number of help wanted issues, and the help wanted rate.", "methods": ["GET", "POST", "PUT"], "paths": ["/help_wanted/<owner>/<repo>", "/help_wanted/<owner>/<repo>/<id>"]}}
{"file": "cloned/hubcare-api/hubcare/metrics/issue_metrics/good_first_issue/urls.py", "endpoints": {"api_summary": "The Good First Issue API allows users to retrieve a list of good first issues for a given repository. The API takes in the owner, repository, and token_auth as parameters and returns a list of issues that are suitable for new contributors.", "methods": ["GET"], "paths": ["/good_first_issue/<owner>/<repo>/<token_auth>/"]}}
{"file": "cloned/hubcare-api/hubcare/metrics/issue_metrics/good_first_issue/views.py", "endpoints": {"api_summary": "The Good First Issue API provides information about good first issues in a repository, including the total number of issues and the number of issues with the good first issue label.", "methods": ["GET", "POST", "PUT"], "paths": ["/good-first-issue/<owner>/<repo>", "/good-first-issue/<owner>/<repo>/<token_auth>"]}}
{"file": "cloned/hubcare-api/hubcare/metrics/issue_metrics/issue_metrics/urls.py", "endpoints": {"api_summary": "The issue_metrics API provides endpoints for retrieving and manipulating issue metrics for a repository. It includes endpoints for retrieving good first issues, help wanted issues, and activity rates for the repository.", "methods": ["GET", "POST"], "paths": ["/issue/good_first_issue/", "/issue/help_wanted/", "/issue/activity_rate/"]}}
{"file": "cloned/hubcare-api/hubcare/metrics/community_metrics/description/urls.py", "endpoints": {"api_summary": "The API allows users to retrieve information about a repository's description, including the owner, repository name, and token authentication.", "methods": ["GET"], "paths": ["/<owner>/<repo>/<token_auth>/"]}}
{"file": "cloned/hubcare-api/hubcare/metrics/community_metrics/description/views.py", "endpoints": {"api_summary": "This API allows for the management of descriptions for GitHub repositories. It provides endpoints for creating, updating, and retrieving descriptions, as well as checking if a repository has a description.", "methods": ["GET", "POST", "PUT"], "paths": ["/description/<owner>/<repo>", "/description/<owner>/<repo>/<token_auth>"]}}
{"file": "cloned/hubcare-api/hubcare/metrics/community_metrics/readme/urls.py", "endpoints": {"api_summary": "The API allows users to retrieve the README file for a specific repository. The API takes in the owner, repository, and token_auth as parameters and returns the README file in the response.", "methods": ["GET"], "paths": ["/<owner>/<repo>/<token_auth>/"]}}
{"file": "cloned/hubcare-api/hubcare/metrics/community_metrics/readme/views.py", "endpoints": {"api_summary": "The Readme API allows you to create, update, and retrieve readme files for GitHub repositories. It also provides information about whether a repository has a readme file or not.", "methods": ["GET", "POST", "PUT"], "paths": ["/readme/<owner>/<repo>/<token_auth>", "/readme/<owner>/<repo>/<token_auth>/create", "/readme/<owner>/<repo>/<token_auth>/update"]}}
{"file": "cloned/hubcare-api/hubcare/metrics/community_metrics/license/urls.py", "endpoints": {"api_summary": "The API allows users to retrieve information about licenses for a specific repository. It takes in the owner, repository, and token_auth as parameters and returns a JSON object with the license information.", "methods": ["GET"], "paths": ["/<owner>/<repo>/<token_auth>/"]}}
{"file": "cloned/hubcare-api/hubcare/metrics/community_metrics/license/views.py", "endpoints": {"api_summary": "The License API allows you to retrieve and update license information for a specific repository. It also provides a way to create a new license object if one does not exist for the repository.", "methods": ["GET", "POST", "PUT"], "paths": ["/license/<owner>/<repo>", "/license/<owner>/<repo>/<token_auth>"]}}
{"file": "cloned/hubcare-api/hubcare/metrics/community_metrics/contribution_guide/urls.py", "endpoints": {"api_summary": "The Contribution Guide API provides a way for users to access and interact with the contribution guide for a specific repository. It allows users to retrieve the contribution guide for a repository and perform actions such as creating, updating, and deleting contribution guide entries.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/<owner>/<repo>/<token_auth>/contribution-guide/"]}}
{"file": "cloned/hubcare-api/hubcare/metrics/community_metrics/contribution_guide/views.py", "endpoints": {"api_summary": "The Contribution Guide API allows you to retrieve and update the contribution guide for a repository. It also allows you to check if a repository has a contribution guide.", "methods": ["GET", "POST", "PUT"], "paths": ["/contribution-guide/<owner>/<repo>", "/contribution-guide/<owner>/<repo>/<token_auth>"]}}
{"file": "cloned/hubcare-api/hubcare/metrics/community_metrics/community_metrics/urls.py", "endpoints": {"api_summary": "The community_metrics API provides endpoints for managing community metrics, including code of conduct, contribution guide, issue template, license, pull request template, release note, readme, and description.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/community/code_of_conduct/", "/community/contribution_guide/", "/community/issue_template/", "/community/license/", "/community/pull_request_template/", "/community/release_note/", "/community/readme/", "/community/description/"]}}
{"file": "cloned/hubcare-api/hubcare/metrics/community_metrics/release_note/urls.py", "endpoints": {"api_summary": "The API allows users to retrieve release notes for a specific repository. It takes in the owner, repository, and token authentication as parameters and returns the release notes in JSON format.", "methods": ["GET"], "paths": ["/<owner>/<repo>/<token_auth>/"]}}
{"file": "cloned/hubcare-api/hubcare/metrics/community_metrics/release_note/views.py", "endpoints": {"api_summary": "The Release Note API allows you to check if a repository has a release note and retrieve the release note if it exists. You can also create or update a release note for a repository.", "methods": ["GET", "POST", "PUT"], "paths": ["/release-note/<owner>/<repo>/<token_auth>", "/release-note/<owner>/<repo>/<token_auth>/<id>"]}}
{"file": "cloned/hubcare-api/hubcare/metrics/community_metrics/pull_request_template/urls.py", "endpoints": {"api_summary": "The API allows users to retrieve pull request templates for a specific repository. It takes in the owner, repository, and token authentication as parameters and returns the pull request template for the specified repository.", "methods": ["GET"], "paths": ["/<owner>/<repo>/<token_auth>/"]}}
{"file": "cloned/hubcare-api/hubcare/metrics/community_metrics/pull_request_template/views.py", "endpoints": {"api_summary": "This API provides endpoints for managing pull request templates in a GitHub repository. It allows for creating, updating, and retrieving pull request templates, as well as checking the existence of a pull request template in a repository.", "methods": ["GET", "POST", "PUT"], "paths": ["/pull_request_template/<owner>/<repo>/<token_auth>", "/pull_request_template/<owner>/<repo>/<token_auth>/<id>"]}}
{"file": "cloned/hubcare-api/hubcare/metrics/community_metrics/issue_template/urls.py", "endpoints": {"api_summary": "The API allows users to create, read, update, and delete issue templates for their repositories. It also allows users to list all issue templates for a given repository.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/<owner>/<repo>/<token_auth>/issue_templates/", "/<owner>/<repo>/<token_auth>/issue_templates/<template_id>"]}}
{"file": "cloned/hubcare-api/hubcare/metrics/community_metrics/issue_template/views.py", "endpoints": {"api_summary": "The IssueTemplate API allows you to create, update, and retrieve issue templates for GitHub repositories. It also provides a way to check if a repository has an issue template.", "methods": ["GET", "POST", "PUT"], "paths": ["/issue_template/<owner>/<repo>/<token_auth>", "/issue_template/<owner>/<repo>/<token_auth>/create", "/issue_template/<owner>/<repo>/<token_auth>/update"]}}
{"file": "cloned/hubcare-api/hubcare/metrics/community_metrics/code_of_conduct/urls.py", "endpoints": {"api_summary": "The Code of Conduct API provides a way for users to retrieve and manage the code of conduct for their repositories. It allows users to create, update, and delete code of conducts, as well as retrieve the current code of conduct for a repository.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/<owner>/<repo>/<token_auth>/code_of_conduct/"]}}
{"file": "cloned/hubcare-api/hubcare/metrics/community_metrics/code_of_conduct/views.py", "endpoints": {"api_summary": "This API provides information about the code of conduct for a given GitHub repository. It allows for creating, updating, and retrieving code of conduct information for a repository.", "methods": ["GET", "POST", "PUT"], "paths": ["/code_of_conduct/<owner>/<repo>", "/code_of_conduct/<owner>/<repo>/<id>"]}}
{"file": "cloned/million-song-library/server/node_modules/ono/dist/ono.min.js", "endpoints": {"api_summary": "This file defines a REST API endpoint for handling errors.", "methods": ["GET", "POST"], "paths": ["/errors"]}}
{"file": "cloned/million-song-library/server/node_modules/swagger-parser/lib/index.js", "endpoints": {"api_summary": "This file defines a Swagger API parser that can parse, dereference, and validate Swagger API definitions. It also includes methods for traversing and validating the API.", "methods": ["GET", "POST", "PUT", "PATCH", "DELETE"], "paths": ["/users", "/users/<built-in function id>"]}}
{"file": "cloned/million-song-library/docs/styleguide/public/less.js", "endpoints": {"api_summary": "This code defines a REST API with the following endpoints:", "methods": ["GET", "POST"], "paths": ["/users", "/users/<built-in function id>"]}}
{"file": "cloned/million-song-library/docs/esdocs/script/search_index.js", "endpoints": {"api_summary": "This file defines the following REST API endpoints:", "endpoints": [{"path": "/albums", "methods": ["GET", "POST"], "description": "Get a list of all albums or create a new album."}, {"path": "/albums/{id}", "methods": ["GET", "PUT", "DELETE"], "description": "Get, update, or delete an album by ID."}, {"path": "/artists", "methods": ["GET", "POST"], "description": "Get a list of all artists or create a new artist."}, {"path": "/artists/{id}", "methods": ["GET", "PUT", "DELETE"], "description": "Get, update, or delete an artist by ID."}, {"path": "/songs", "methods": ["GET", "POST"], "description": "Get a list of all songs or create a new song."}, {"path": "/songs/{id}", "methods": ["GET", "PUT", "DELETE"], "description": "Get, update, or delete a song by ID."}]}}
{"file": "cloned/multicloud-k8s/kud/tests/generic_simulator/generic_sim.py", "endpoints": {"api_summary": "This API provides a mock implementation of a RESTful API, allowing developers to test their applications without needing to connect to a real API. It supports GET, POST, PUT, DELETE, and PATCH methods and returns a JSON response with a 200 status code.", "methods": ["GET", "POST", "PUT", "DELETE", "PATCH"], "paths": ["/", "/<built-in function id>"]}}
{"file": "cloned/multicloud-k8s/src/dcm/api/api.go", "endpoints": {"api_summary": "This API provides endpoints for managing logical clouds, clusters, user permissions, quotas, and key-value pairs in a multi-cloud environment.", "methods": ["POST", "GET", "PUT", "DELETE"], "paths": ["/v2/projects/{project-name}/logical-clouds", "/v2/projects/{project-name}/logical-clouds/{logical-cloud-name}", "/v2/projects/{project-name}/logical-clouds/{logical-cloud-name}/cluster-references", "/v2/projects/{project-name}/logical-clouds/{logical-cloud-name}/cluster-references/{cluster-reference}", "/v2/projects/{project-name}/logical-clouds/{logical-cloud-name}/cluster-references/{cluster-reference}/kubeconfig", "/v2/projects/{project-name}/logical-clouds/{logical-cloud-name}/user-permissions", "/v2/projects/{project-name}/logical-clouds/{logical-cloud-name}/user-permissions/{permission-name}", "/v2/projects/{project-name}/logical-clouds/{logical-cloud-name}/cluster-quotas", "/v2/projects/{project-name}/logical-clouds/{logical-cloud-name}/cluster-quotas/{quota-name}", "/v2/projects/{project-name}/logical-clouds/{logical-cloud-name}/kv-pairs", "/v2/projects/{project-name}/logical-clouds/{logical-cloud-name}/kv-pairs/{kv-pair-name}"]}}
{"file": "cloned/multicloud-k8s/src/dcm/api/keyValueHandler.go", "endpoints": {"api_summary": "This API provides CRUD operations for key-value pairs in a database.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/v1/projects/{project-name}/logical-clouds/{logical-cloud-name}/kv-pairs", "/api/v1/projects/{project-name}/logical-clouds/{logical-cloud-name}/kv-pairs/{kv-pair-name}"]}}
{"file": "cloned/multicloud-k8s/src/dcm/api/userPermissionsHandler.go", "endpoints": {"api_summary": "The UserPermission API provides endpoints for managing user permissions in a multi-cloud environment. It allows for the creation, retrieval, update, and deletion of user permissions, as well as listing all user permissions for a given project and logical cloud.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/user-permissions", "/user-permissions/<permission-name>", "/user-permissions/<project-name>/<logical-cloud-name>", "/user-permissions/<project-name>/<logical-cloud-name>/<permission-name>"]}}
{"file": "cloned/multicloud-k8s/src/dcm/api/clusterHandler.go", "endpoints": {"api_summary": "The Cluster API provides a way to manage clusters in a logical cloud. It allows for the creation, retrieval, update, and deletion of cluster references, as well as the retrieval of kubeconfig files for clusters.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/cluster", "/cluster/<cluster-reference>", "/cluster/<cluster-reference>/config"]}}
{"file": "cloned/multicloud-k8s/src/dcm/api/quotaHandler.go", "endpoints": {"api_summary": "The API provides CRUD operations for managing quotas in a multi-cloud environment. It allows users to create, retrieve, update, and delete quotas for different projects and logical clouds.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/projects/{project-name}/logical-clouds/{logical-cloud-name}/quotas", "/projects/{project-name}/logical-clouds/{logical-cloud-name}/quotas/{quota-name}"]}}
{"file": "cloned/multicloud-k8s/src/inventory/api/aaipushapi_test.go", "endpoints": {"api_summary": "This API is used to manage vservers and vf-modules in the ONAP inventory. It provides endpoints for creating, updating, and retrieving vservers and vf-modules, as well as endpoints for linking vservers to vf-modules.", "methods": ["PUT", "GET"], "paths": ["/cloud-region/<cloud-owner>/<cloud-region>/tenants/tenant/<tenant-id>/vservers/vserver/<vserver-name>", "/cloud-region/<cloud-owner>/<cloud-region>/tenants/tenant/<tenant-id>/vf-modules/vf-module/<vfm-id>"]}}
{"file": "cloned/multicloud-k8s/src/ncm/api/api.go", "endpoints": {"api_summary": "The API provides endpoints for managing network and provider networks, as well as scheduling and status information for clusters.", "methods": ["POST", "GET", "PUT", "DELETE"], "paths": ["/v2/cluster-providers/{provider-name}/clusters/{cluster-name}/networks", "/v2/cluster-providers/{provider-name}/clusters/{cluster-name}/provider-networks", "/v2/cluster-providers/{cluster-provider}/clusters/{cluster}/apply", "/v2/cluster-providers/{cluster-provider}/clusters/{cluster}/terminate", "/v2/cluster-providers/{cluster-provider}/clusters/{cluster}/status"]}}
{"file": "cloned/multicloud-k8s/src/ncm/api/schedulerhandler.go", "endpoints": {"api_summary": "The API provides endpoints for managing network intents for a cluster, including applying, terminating, and querying the status of network intents.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/clusters/{cluster-provider}/{cluster}/network-intents", "/clusters/{cluster-provider}/{cluster}/network-intents/{intent-name}", "/clusters/{cluster-provider}/{cluster}/network-intents/status"]}}
{"file": "cloned/multicloud-k8s/src/ncm/api/networkhandler.go", "endpoints": {"api_summary": "This API provides CRUD operations for managing network resources in a Kubernetes cluster.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/networks", "/networks/<name>", "/networks/<name>/<provider-name>", "/networks/<name>/<provider-name>/<cluster-name>"]}}
{"file": "cloned/multicloud-k8s/src/tools/emcoui/middle_end/main/main.go", "endpoints": {"api_summary": "The middleend service exposes APIs for managing composite apps, deployment intent groups, and clusters. It also provides authentication and authorization functionality through the authproxy module.", "methods": ["GET", "POST", "DELETE"], "paths": ["/middleend/projects/{project-name}/composite-apps", "/middleend/projects/{project-name}/deployment-intent-groups", "/middleend/clusterproviders/{cluster-provider-name}/clusters", "/login", "/callback", "/auth"]}}
{"file": "cloned/multicloud-k8s/src/tools/emcoui/middle_end/authproxy/authproxy.go", "endpoints": {"api_summary": "This API is a proxy server that handles authentication and authorization for a web application. It defines endpoints for login, callback, and authentication.", "methods": ["GET", "POST"], "paths": ["/login", "/callback", "/auth"]}}
{"file": "cloned/multicloud-k8s/src/tools/emcoui/middle_end/app/projects.go", "endpoints": {"api_summary": "This API is responsible for managing projects and their associated composite applications. It provides endpoints for creating, reading, updating, and deleting projects and composite applications, as well as retrieving information about the project and its composite applications.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/projects", "/projects/<project_name>", "/projects/<project_name>/composite-apps", "/projects/<project_name>/composite-apps/<composite_app_name>", "/projects/<project_name>/composite-apps/<composite_app_name>/<composite_app_version>"]}}
{"file": "cloned/multicloud-k8s/src/tools/emcoui/src/services/apiService.js", "endpoints": {"api_summary": "This API provides endpoints for managing projects, clusters, networks, and controllers in a cloud-native environment.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/v2/projects", "/v2/projects/<projectName>", "/v2/cluster-providers", "/v2/cluster-providers/<providerName>", "/v2/ncm/<providerName>/clusters/<clusterName>/provider-networks", "/v2/ncm/<providerName>/clusters/<clusterName>/networks", "/v2/controllers"]}}
{"file": "cloned/multicloud-k8s/src/orchestrator/api/app_intent_handler.go", "endpoints": {"api_summary": "This API defines the endpoints for managing application intents in the ONAP multicloud K8s orchestrator.", "methods": ["GET", "POST", "DELETE"], "paths": ["/v2/project/{project-name}/composite-apps/{composite-app-name}/{composite-app-version}/deployment-intent-groups/{deployment-intent-group-name}/generic-placement-intent/{intent-name}/app-intents", "/v2/project/{project-name}/composite-apps/{composite-app-name}/{composite-app-version}/deployment-intent-groups/{deployment-intent-group-name}/generic-placement-intent/{intent-name}/app-intents?app-name=<app-name>", "/v2/project/{project-name}/composite-apps/{composite-app-name}/{composite-app-version}/deployment-intent-groups/{deployment-intent-group-name}/generic-placement-intent/{intent-name}/app-intents/{app-intent-name}"]}}
{"file": "cloned/multicloud-k8s/src/orchestrator/api/projecthandler.go", "endpoints": {"api_summary": "The Project API allows for the creation, retrieval, and deletion of Projects, which are used to organize and manage resources in the system.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/projects", "/projects/<project-name>"]}}
{"file": "cloned/multicloud-k8s/src/orchestrator/api/instantiation_handler.go", "endpoints": {"api_summary": "The API provides endpoints for managing the instantiation of composite applications in a multi-cloud environment. It allows for the approval, instantiation, termination, and status of composite applications.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/v1/projects/{project-name}/composite-apps/{composite-app-name}/{composite-app-version}/deployment-intent-groups/{deployment-intent-group-name}/approve", "/api/v1/projects/{project-name}/composite-apps/{composite-app-name}/{composite-app-version}/deployment-intent-groups/{deployment-intent-group-name}/instantiate", "/api/v1/projects/{project-name}/composite-apps/{composite-app-name}/{composite-app-version}/deployment-intent-groups/{deployment-intent-group-name}/terminate", "/api/v1/projects/{project-name}/composite-apps/{composite-app-name}/{composite-app-version}/deployment-intent-groups/{deployment-intent-group-name}/status"]}}
{"file": "cloned/multicloud-k8s/src/orchestrator/api/controllerhandler.go", "endpoints": {"api_summary": "This API defines endpoints for managing controllers in a Kubernetes cluster. It allows for the creation, retrieval, and deletion of controllers, as well as listing all controllers in the cluster.", "methods": ["POST", "GET", "PUT", "DELETE"], "paths": ["/controllers", "/controllers/<controller-name>"]}}
{"file": "cloned/multicloud-k8s/src/orchestrator/api/composite_app_handler.go", "endpoints": {"api_summary": "This API provides CRUD operations for Composite Apps in a project.", "methods": ["GET", "POST", "DELETE"], "paths": ["/projects/{project-name}/composite-apps/{composite-app-name}/{version}", "/projects/{project-name}/composite-apps"]}}
{"file": "cloned/multicloud-k8s/src/orchestrator/api/generic_placement_intent_handler.go", "endpoints": {"api_summary": "This API defines the endpoints for managing generic placement intents in the ONAP multicloud K8s orchestrator.", "methods": ["GET", "POST", "DELETE"], "paths": ["/generic-placement-intent", "/generic-placement-intent/<intent-name>", "/generic-placement-intent/<project-name>/<composite-app-name>/<composite-app-version>/<deployment-intent-group-name>"]}}
{"file": "cloned/multicloud-k8s/src/orchestrator/api/add_intents_handler.go", "endpoints": {"api_summary": "This API defines the endpoints for managing intents in a deployment group. It allows for the creation, retrieval, and deletion of intents, as well as listing all intents in a deployment group.", "methods": ["POST", "GET", "GET", "DELETE"], "paths": ["/v2/projects/{project-name}/composite-apps/{composite-app-name}/{version}/deployment-intent-groups/{deployment-intent-group-name}/intents", "/v2/projects/{project-name}/composite-apps/{composite-app-name}/{version}/deployment-intent-groups/{deployment-intent-group-name}/intents?intent=<intent>", "/v2/projects/{project-name}/composite-apps/{composite-app-name}/{version}/deployment-intent-groups/{deployment-intent-group-name}/intents/{intent-name}"]}}
{"file": "cloned/multicloud-k8s/src/orchestrator/api/composite_profilehandler.go", "endpoints": {"api_summary": "This API defines the CRUD operations for Composite Profiles in the Orchestrator.", "methods": ["GET", "POST", "DELETE"], "paths": ["/composite-profiles", "/composite-profiles/<composite-profile-name>", "/composite-profiles/<project-name>/<composite-app-name>/<composite-app-version>"]}}
{"file": "cloned/multicloud-k8s/src/orchestrator/api/composite_profilehandler_test.go", "endpoints": {"api_summary": "This API defines a composite profile, which is a collection of profiles that define the desired state of a composite application. It includes endpoints for creating, retrieving, and deleting composite profiles.", "methods": ["POST", "GET", "DELETE"], "paths": ["/v2/projects/{project-name}/composite-apps/{composite-app-name}/{version}/composite-profiles"]}}
{"file": "cloned/multicloud-k8s/src/orchestrator/api/deployment_intent_groups_handler.go", "endpoints": {"api_summary": "This API is used to manage DeploymentIntentGroups in the Orchestrator. It allows for the creation, retrieval, and deletion of DeploymentIntentGroups, as well as listing all DeploymentIntentGroups for a given project, composite app, and version.", "methods": ["POST", "GET", "GET", "DELETE"], "paths": ["/deployment-intent-group", "/deployment-intent-group/<deployment-intent-group-name>", "/deployment-intent-group", "/deployment-intent-group"]}}
{"file": "cloned/multicloud-k8s/src/orchestrator/api/apphandler.go", "endpoints": {"api_summary": "This API allows users to create, retrieve, and delete Apps in a composite app.", "methods": ["POST", "GET", "DELETE"], "paths": ["/v2/projects/{project-name}/composite-apps/{composite-app-name}/v1/apps", "/v2/projects/{project-name}/composite-apps/{composite-app-name}/v1/apps/{app-name}"]}}
{"file": "cloned/multicloud-k8s/src/k8splugin/api/configtemplatehandler.go", "endpoints": {"api_summary": "This API provides endpoints for managing resource bundle templates in a database.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/rb/{rbname}/{rbversion}/templates", "/rb/{rbname}/{rbversion}/templates/{tname}"]}}
{"file": "cloned/multicloud-k8s/src/k8splugin/api/statussubhandler.go", "endpoints": {"api_summary": "This API provides endpoints for managing instance status subscriptions in a Kubernetes cluster.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/instances/<instance-id>/status-subscriptions", "/instances/<instance-id>/status-subscriptions/<subscription-id>"]}}
{"file": "cloned/multicloud-k8s/src/k8splugin/api/defhandler.go", "endpoints": {"api_summary": "This API provides CRUD operations for managing bundle definitions in a database.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/rbdefinitions", "/rbdefinitions/<rbname>", "/rbdefinitions/<rbname>/<rbversion>"]}}
{"file": "cloned/multicloud-k8s/src/k8splugin/api/connectionhandler.go", "endpoints": {"api_summary": "This API provides CRUD operations for managing connectivity information in a database.", "methods": ["GET", "POST", "DELETE"], "paths": ["/v1/connectivity-info", "/v1/connectivity-info/<connname>"]}}
{"file": "cloned/multicloud-k8s/src/k8splugin/api/profilehandler.go", "endpoints": {"api_summary": "This API provides CRUD operations for Resource Bundle profiles in the database.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/rb/{rbname}/{rbversion}/profiles", "/rb/{rbname}/{rbversion}/profiles/{prname}"]}}
{"file": "cloned/multicloud-k8s/src/ovnaction/api/api.go", "endpoints": {"api_summary": "This API is responsible for managing network intents and their associated resources in a multi-cloud environment. It provides endpoints for creating, retrieving, updating, and deleting network intents, as well as for managing the relationships between intents and other resources.", "methods": ["POST", "GET", "PUT", "DELETE"], "paths": ["/projects/{project}/composite-apps/{composite-app-name}/{version}/deployment-intent-groups/{deployment-intent-group-name}/network-controller-intent", "/projects/{project}/composite-apps/{composite-app-name}/{version}/deployment-intent-groups/{deployment-intent-group-name}/network-controller-intent/{name}", "/projects/{project}/composite-apps/{composite-app-name}/{version}/deployment-intent-groups/{deployment-intent-group-name}/network-controller-intent/{net-control-intent}/workload-intents", "/projects/{project}/composite-apps/{composite-app-name}/{version}/deployment-intent-groups/{deployment-intent-group-name}/network-controller-intent/{net-control-intent}/workload-intents/{name}", "/projects/{project}/composite-apps/{composite-app-name}/{version}/deployment-intent-groups/{deployment-intent-group-name}/network-controller-intent/{net-control-intent}/workload-intents/{workload-intent}/interfaces", "/projects/{project}/composite-apps/{composite-app-name}/{version}/deployment-intent-groups/{deployment-intent-group-name}/network-controller-intent/{net-control-intent}/workload-intents/{workload-intent}/interfaces/{name}", "/projects/{project}/composite-apps/{composite-app-name}/{version}/deployment-intent-groups/{deployment-intent-group-name}/network-controller-intent/{net-control-intent}/network-chains", "/projects/{project}/composite-apps/{composite-app-name}/{version}/deployment-intent-groups/{deployment-intent-group-name}/network-controller-intent/{net-control-intent}/network-chains/{name}"]}}
{"file": "cloned/multicloud-k8s/src/ovnaction/api/netcontrolintenthandler.go", "endpoints": {"api_summary": "This API provides CRUD operations for NetControlIntent resources.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/netcontrolintents", "/netcontrolintents/{name}"]}}
{"file": "cloned/multicloud-k8s/src/ovnaction/api/workloadintenthandler.go", "endpoints": {"api_summary": "This API defines the endpoints for managing workload intents in the ONAP multicloud K8s platform.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/workloadintents", "/workloadintents/{name}", "/workloadintents/{name}/{project}/{composite-app-name}/{version}/{deployment-intent-group-name}/{net-control-intent}"]}}
{"file": "cloned/multicloud-k8s/src/clm/api/api.go", "endpoints": {"api_summary": "The API provides endpoints for managing clusters and their associated resources, such as labels and key-value pairs. It also provides endpoints for creating and managing cluster providers.", "methods": ["POST", "GET", "DELETE"], "paths": ["/v2/cluster-providers", "/v2/cluster-providers/{name}", "/v2/cluster-providers/{provider-name}/clusters", "/v2/cluster-providers/{provider-name}/clusters/{name}", "/v2/cluster-providers/{provider-name}/clusters/{cluster-name}/labels", "/v2/cluster-providers/{provider-name}/clusters/{cluster-name}/labels/{label}", "/v2/cluster-providers/{provider-name}/clusters/{cluster-name}/kv-pairs", "/v2/cluster-providers/{provider-name}/clusters/{cluster-name}/kv-pairs/{kvpair}"]}}
{"file": "cloned/multicloud-k8s/src/clm/api/clusterhandler_test.go", "endpoints": {"api_summary": "This API provides a way to manage clusters and cluster providers.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/v2/cluster-providers", "/v2/cluster-providers/<provider-name>", "/v2/cluster-providers/<provider-name>/clusters", "/v2/cluster-providers/<provider-name>/clusters/<cluster-name>", "/v2/cluster-providers/<provider-name>/clusters/<cluster-name>/labels", "/v2/cluster-providers/<provider-name>/clusters/<cluster-name>/labels/<label-name>", "/v2/cluster-providers/<provider-name>/clusters/<cluster-name>/kv-pairs", "/v2/cluster-providers/<provider-name>/clusters/<cluster-name>/kv-pairs/<kv-pair-name>"]}}
{"file": "cloned/marathon/tests/system/marathon_pods_tests.py", "endpoints": {"api_summary": "This API defines a set of endpoints for managing pods in a DC/OS cluster.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/v2/pods", "/v2/pods/<pod_id>", "/v2/pods/<pod_id>/::status", "/v2/pods/<pod_id>/::instances/<instance_id>", "/v2/pods/<pod_id>/::versions/<version_id>"]}}
{"file": "cloned/marathon/tests/system/scripts/pinger.py", "endpoints": {"api_summary": "The pinger app responds to /ping and /relay endpoints with pongs and relays, respectively. The /ping endpoint returns a pong message with the Marathon app ID, while the /relay endpoint pings another app and returns its response with a relay message and the Marathon app ID.", "methods": ["GET", "POST"], "paths": ["/ping", "/relay"]}}
{"file": "cloned/marathon/tests/shakedown/shakedown/dcos/zookeeper.py", "endpoints": {"api_summary": "This API provides endpoints for interacting with the ZooKeeper nodes in a DC/OS cluster. It allows for retrieving node data, children, and deleting nodes.", "methods": ["GET", "POST", "DELETE"], "paths": ["/exhibitor/exhibitor/v1/explorer/node-data", "/exhibitor/exhibitor/v1/explorer/node", "/exhibitor/exhibitor/v1/explorer/znode"]}}
{"file": "cloned/marathon/tests/integration/src/test/resources/python/app_mock.py", "endpoints": {"api_summary": "This API provides endpoints for checking the readiness, health, and shared memory usage of an application.", "methods": ["GET", "POST", "DELETE"], "paths": ["/ping", "/ready", "/health", "/ipcshm", "/ipcns", "/cgroup", "/suicide"]}}
{"file": "cloned/platform/hobbit-gui/gui-serverbackend/src/main/java/de/usu/research/hobbit/gui/rest/SystemProviderResources.java", "endpoints": {"api_summary": "This API provides endpoints for managing system registrations for a challenge in a hobbit-based platform.", "methods": ["GET", "PUT"], "paths": ["/system-provider/systems", "/system-provider/challenge-all-registrations/{challengeId}", "/system-provider/challenge-registrations/{challengeId}", "/system-provider/challenge-registrations/{challengeId}/{taskId}"]}}
{"file": "cloned/platform/hobbit-gui/gui-serverbackend/src/main/java/de/usu/research/hobbit/gui/rest/LicenseResources.java", "endpoints": {"api_summary": "This API provides information about the license of a dataset.", "methods": ["GET"], "paths": ["/license"]}}
{"file": "cloned/platform/hobbit-gui/gui-serverbackend/src/main/java/de/usu/research/hobbit/gui/rest/SubmissionsResources.java", "endpoints": {"api_summary": "The SubmissionsResources API allows clients to retrieve details about a specific submission by its ID. The API uses the GET method and the URL path /submissions/{id}.", "methods": ["GET"], "paths": ["/submissions/{id}"]}}
{"file": "cloned/platform/hobbit-gui/gui-serverbackend/src/main/java/de/usu/research/hobbit/gui/rest/InternalResources.java", "endpoints": {"api_summary": "This API provides information about the Keycloak configuration and user information for the Hobbit GUI.", "methods": ["GET"], "paths": ["/internal/keycloak-config", "/internal/user-info"]}}
{"file": "cloned/platform/hobbit-gui/gui-serverbackend/src/main/java/de/usu/research/hobbit/gui/rest/LogsResources.java", "endpoints": {"api_summary": "This API provides access to log data for a specific experiment. It allows users to retrieve logs for a specific experiment, and supports various query parameters to filter and format the logs.", "methods": ["GET"], "paths": ["/logs/benchmark/query", "/logs/system/query", "/logs/query"]}}
{"file": "cloned/platform/hobbit-gui/gui-serverbackend/src/main/java/de/usu/research/hobbit/gui/rest/StatusResources.java", "endpoints": {"api_summary": "The StatusResources API provides information about the status of the platform, including the currently running experiment and the queue of pending experiments.", "methods": ["GET"], "paths": ["/status"]}}
{"file": "cloned/platform/hobbit-gui/gui-serverbackend/src/main/java/de/usu/research/hobbit/gui/rest/ExperimentsResources.java", "endpoints": {"api_summary": "This API provides endpoints for querying and managing experiments, including retrieving experiment results, counting experiments by challenge task IDs, and terminating experiments.", "methods": ["GET", "POST"], "paths": ["/experiments", "/experiments/query", "/experiments/count-by-challenge/{id}", "/experiments/terminate/{id}"]}}
{"file": "cloned/platform/hobbit-gui/gui-serverbackend/src/main/java/de/usu/research/hobbit/gui/rest/ChallengesResources.java", "endpoints": {"api_summary": "This API provides endpoints for managing challenges, including listing, retrieving, adding, updating, and deleting challenges. It also includes endpoints for closing challenges and retrieving information about the challenge.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/challenges", "/challenges/{id}", "/challenges/operation/close/{id}"]}}
{"file": "cloned/platform/hobbit-gui/gui-serverbackend/src/main/java/de/usu/research/hobbit/gui/rest/AnalysisResources.java", "endpoints": {"api_summary": "The API provides a single endpoint for retrieving analysis results for a given benchmark URI. The endpoint returns a list of analysis result sets, each containing information about the analysis results for the benchmark.", "methods": ["GET"], "paths": ["/analysis/{id}"]}}
{"file": "cloned/platform/hobbit-gui/gui-serverbackend/src/main/java/de/usu/research/hobbit/gui/rest/BenchmarksResources.java", "endpoints": {"api_summary": "The BenchmarksResources API provides endpoints for listing and retrieving benchmarks, as well as submitting benchmarks for execution. It also includes endpoints for handling errors and exceptions.", "methods": ["GET", "POST"], "paths": ["/benchmarks", "/benchmarks/{id}", "/submitBenchmark"]}}
{"file": "cloned/platform/hobbit-gui/gui-client/src/app/backend.service.ts", "endpoints": {"api_summary": "The BackendService provides a set of REST API endpoints for interacting with the backend of the system. It includes endpoints for managing users, benchmarks, challenges, experiments, and analysis results. It also includes endpoints for querying and terminating experiments, as well as retrieving system provider systems and log files.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/rest/internal/user-info", "/rest/license", "/rest/status", "/rest/benchmarks", "/rest/benchmarks/<id>", "/rest/challenges", "/rest/challenges/<id>", "/rest/experiments/count-by-challenge/<id>", "/rest/experiments/query", "/rest/experiments/terminate/<id>", "/rest/analysis/<id>", "/rest/system-provider/challenge-all-registrations/<id>", "/rest/system-provider/challenge-registrations/<id>", "/rest/system-provider/challenge-registrations/<id>/<taskId>", "/rest/system-provider/systems", "/rest/logs/<url>&format=<format>"]}}
{"file": "cloned/platform/hobbit-gui/gui-client/src/app/app.module.ts", "endpoints": {"api_summary": "This API provides various endpoints for managing and interacting with benchmarks, challenges, experiments, and reports. It also includes endpoints for authentication and authorization, as well as for handling HTTP requests and responses.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/home", "/upload/benchmarks", "/upload/systems", "/benchmarks", "/benchmarks/status", "/challenges", "/challenges/:id", "/challenges/:id/experiments", "/challenges/:id/experiments/:task", "/challenges/:id/register", "/challenges/:id/registrations", "/challenges/:id/edit/:task", "/challenges/:id/leaderboards", "/challenges/:id/leaderboards/:task", "/experiments", "/experiments/:id", "/experiments/task/:task", "/reports"]}}
{"file": "cloned/platform/platform-controller/src/test/java/org/hobbit/controller/gitlab/GitlabControllerImplTest.java", "endpoints": {"api_summary": "This API is a test suite for the GitlabControllerImpl class, which provides a way to interact with GitLab projects and branches. It includes methods for fetching projects, getting projects of a user, and getting a checked model for a benchmark configuration file.", "methods": ["GET", "POST"], "paths": ["/projects", "/projects/<project_id>", "/projects/<project_id>/branches/<branch_name>", "/projects/<project_id>/branches/<branch_name>/benchmark.ttl"]}}
{"file": "cloned/capstone/capstone/capapi/api_urls.py", "endpoints": {"api_summary": "The CAP API provides access to United States caselaw, including case documents, jurisdictions, courts, volumes, reporters, and bulk exports. It also includes a convenience pattern for citations and a schema for Swagger/OpenAPI/ReDoc.", "methods": ["GET", "POST"], "paths": ["/v1/", "/unstable/", "/v1/cases/<id>/", "/swagger/<format>", "/swagger/", "/redoc/", "/robots.txt", "/"]}}
{"file": "cloned/capstone/capstone/capapi/tests/test_cache.py", "endpoints": {"api_summary": "This API defines endpoints for caching and retrieving case metadata and case documents from the database.", "methods": ["GET", "POST"], "paths": ["/cases/<case_id>/metadata", "/cases/<case_id>/documents"]}}
{"file": "cloned/capstone/capstone/labs/urls.py", "endpoints": {"api_summary": "The API provides a set of endpoints for managing timelines and their associated data. It includes endpoints for creating, retrieving, updating, and deleting timelines, as well as endpoints for adding and updating categories and subobjects within a timeline.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/chronolawgic/", "/chronolawgic/timeline/*", "/chronolawgic/api/create/", "/chronolawgic/api/create/h2o", "/chronolawgic/api/retrieve/", "/chronolawgic/api/retrieve/<str:timeline_uuid>", "/chronolawgic/api/add-update/<str:timeline_uuid>/categories", "/chronolawgic/api/add-update/<str:timeline_uuid>/<str:subobject_type>", "/chronolawgic/api/delete/<str:timeline_uuid>/<str:subobject_type>/<str:subobject_uuid>", "/chronolawgic/api/delete/<str:timeline_uuid>", "/chronolawgic/api/update/<str:timeline_uuid>/metadata", "/chronolawgic/api/update/<str:timeline_uuid>", "/chronolawgic/api/update_admin/<str:timeline_uuid>"]}}
{"file": "cloned/capstone/capstone/labs/views.py", "endpoints": {"api_summary": "The Chronolawgic API provides endpoints for managing timelines and their associated data, including retrieving, creating, updating, and deleting timeline records, as well as importing casebooks from H2O.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/chronolawgic", "/chronolawgic/<timeline_uuid>", "/chronolawgic/<timeline_uuid>/categories", "/chronolawgic/<timeline_uuid>/subobject", "/chronolawgic/<timeline_uuid>/subobject/<subobject_uuid>", "/chronolawgic/<timeline_uuid>/import"]}}
{"file": "cloned/capstone/capstone/config/urls.py", "endpoints": {"api_summary": "The capstone API provides a RESTful interface for managing users and their associated data. It includes endpoints for creating, reading, updating, and deleting users, as well as endpoints for managing user authentication and authorization.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users", "/users/<built-in function id>", "/labs/", "/labs/<built-in function id>"]}}
{"file": "cloned/capstone/capstone/capweb/urls.py", "endpoints": {"api_summary": "This API provides a variety of endpoints for accessing and manipulating data related to legal cases, including search, trends, and bulk download. It also includes endpoints for accessing exhibits and gallery sections, as well as contact and user account management.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/", "/gallery/", "/search/", "/trends/", "/robots.txt", "/fetch/", "/about/", "/tools/", "/terms", "/privacy", "/bulk/download/", "/api/", "/search-docs/", "/trends-docs/", "/action/", "/action/guidelines/", "/action/case-study-nm/", "/action/case-study-ark/", "/action/case-study-canada/", "/bulk/", "/changelog", "/docs/", "/exhibits/wordclouds", "/exhibits/limericks", "/exhibits/witchcraft", "/exhibits/cite-grid", "/gallery/", "/contact/", "/contact-success/", "/maintenance/", "/data/", "/cms_files/", "/screenshot/", "/download/", "/user/login/", "/user/register/", "/user/verify-user/", "/user/reset-api-key/", "/user/details", "/user/history", "/user/resend-verification/", "/user/delete-account", "/user/research/approve/", "/user/research/apply/", "/user/research/apply-success/", "/user/research/harvard-intro/", "/user/research/harvard/", "/user/research/harvard-success/", "/user/research/non-harvard-email/"]}}
{"file": "cloned/capstone/capstone/cite/urls.py", "endpoints": {"api_summary": "This API provides endpoints for accessing and manipulating legal case data, including retrieving case information, setting cookies, and redacting case information.", "methods": ["GET", "POST"], "paths": ["/random/", "/robots.txt", "/set-cookie/", "/cited-by/<int:case_id>/", "/citations/", "/redact/<int:case_id>/", "/pdf/<int:case_id>/<str:pdf_name>", "/image/<str:volume_id>/<str:sequence_number>", "/edit/<int:case_id>/", "/<str:series_slug>/<str:volume_number_slug>/<str:page_number>/<int:case_id>/", "/<str:series_slug>/<str:volume_number_slug>/<str:page_number>/", "/<str:series_slug>/<str:volume_number_slug>/", "/<str:series_slug>/", "/"]}}
{"file": "cloned/capstone/capstone/static/dist/assets/labs-chronolawgic.c571864b.js", "endpoints": {"api_endpoints": []}}
{"file": "cloned/capstone/capstone/static/js/labs/chronolawgic/main.js", "endpoints": {"api_summary": "This API provides a timeline interface for users to view and manage their timelines. It includes endpoints for retrieving timeline data, creating new timelines, and updating existing timelines.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/", "/:timeline", "/:timeline/edit", "/:timeline/delete"]}}
{"file": "cloned/capstone/capstone/static/js/search/router.js", "endpoints": {"api_summary": "This API provides a search functionality for the Vue.js application. It allows users to search for specific data and retrieve the results.", "methods": ["GET"], "paths": ["/search"]}}
{"file": "cloned/grand-challenge.org/app/tests/urls/root.py", "endpoints": {"api_summary": "This API provides endpoints for managing sessions, workstations, and the Knox API root. It includes endpoints for creating, controlling, and retrieving information about sessions, as well as endpoints for interacting with workstations and the Knox API.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/session-control/", "/new-session/", "/new-session/path-param/12345/", "/workstation/", "/knox-api/"]}}
{"file": "cloned/grand-challenge.org/app/tests/knox_tests/test_knox.py", "endpoints": {"api_summary": "This API provides authentication and authorization functionality using JSON Web Tokens (JWT). It allows users to create, refresh, and revoke tokens, as well as retrieve information about their tokens.", "methods": ["POST", "GET", "PUT", "DELETE"], "paths": ["/auth/token", "/auth/token/refresh", "/auth/token/revoke", "/auth/token/info"]}}
{"file": "cloned/grand-challenge.org/app/tests/knox_tests/views.py", "endpoints": {"api_summary": "This API provides a root endpoint for the Grand Challenge API, which returns a simple message indicating the API is running. The API uses token-based authentication and requires the user to be authenticated to access the endpoint.", "methods": ["GET"], "paths": ["/grandchallenge/api/"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/well_known/urls.py", "endpoints": {"api_summary": "This API provides a robots.txt file and a security.txt file for the grandchallenge repository. The robots.txt file specifies which user agents are allowed to crawl the site, while the security.txt file provides contact information for security vulnerability disclosure.", "methods": ["GET"], "paths": ["/well_known/robots.txt", "/well_known/security.txt"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/statistics/urls.py", "endpoints": {"api_summary": "The statistics API provides detailed information about the usage of the Grand Challenge platform, including user activity, resource usage, and system performance. It allows developers to access this data programmatically and integrate it into their own applications.", "methods": ["GET"], "paths": ["/statistics/detail"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/blogs/urls.py", "endpoints": {"api_summary": "The blogs API allows users to create, read, update, and delete blog posts. It also allows users to update the authors and metadata of existing posts.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/blogs/", "/blogs/create/", "/blogs/<slug>/authors/update/", "/blogs/<slug>/", "/blogs/<slug>/metadata-update/", "/blogs/<slug>/content-update/"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/blogs/views.py", "endpoints": {"api_summary": "This API allows users to create, read, update, and delete blog posts. It also allows users to update the metadata of existing posts and manage the authors of a post.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/blogs/create", "/blogs/<slug>", "/blogs/<slug>/update-metadata", "/blogs/<slug>/update-content", "/blogs/<slug>/authors"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/timezones/views.py", "endpoints": {"api_summary": "The Timezone API allows clients to set and retrieve the current timezone for a user session. It uses the PUT HTTP method to update the timezone and the GET method to retrieve the current timezone.", "methods": ["PUT", "GET"], "paths": ["/timezones"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/direct_messages/urls.py", "endpoints": {"api_summary": "This API provides endpoints for creating, reading, updating, and deleting direct messages and conversations between users. It also includes endpoints for muting and unmuting conversations, and for reporting spam messages.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/direct_messages/", "/direct_messages/<uuid:pk>/", "/direct_messages/<uuid:conversation_pk>/messages/<uuid:pk>/delete/", "/direct_messages/<uuid:conversation_pk>/messages/<uuid:pk>/report-spam/"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/flatpages/urls.py", "endpoints": {"api_summary": "The Flatpages API allows for the creation and updating of flat pages, which are pages that are not associated with a specific model or database record. The API provides endpoints for creating and updating flat pages, as well as retrieving and deleting them.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/flatpages/create/", "/flatpages/<int:pk>/update/"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/reader_studies/urls.py", "endpoints": {"api_summary": "This API provides endpoints for managing reader studies, including creating, updating, and deleting reader studies, as well as managing display sets and questions within reader studies.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/reader-studies/", "/reader-studies/create/", "/reader-studies/<slug:slug>/", "/reader-studies/<slug:slug>/update/", "/reader-studies/<slug:slug>/delete/", "/reader-studies/<slug:slug>/leaderboard/", "/reader-studies/<slug:slug>/display-sets/", "/reader-studies/<slug:slug>/statistics/", "/reader-studies/<slug:slug>/copy/", "/reader-studies/<slug:slug>/remove-answers/<username>/", "/reader-studies/<slug:slug>/ground-truth/", "/reader-studies/<slug:slug>/ground-truth/delete/", "/reader-studies/<slug:slug>/ground-truth/csv/create/", "/reader-studies/<slug:slug>/ground-truth/csv/example/", "/reader-studies/<slug:slug>/ground-truth/answers/create/", "/reader-studies/<slug:slug>/answers/ground-truth/create/", "/reader-studies/<slug:slug>/display-sets/create/", "/reader-studies/<slug:slug>/display-sets/delete/", "/reader-studies/<slug:slug>/display-sets/create-single/", "/reader-studies/<slug:slug>/display-sets/<uuid:pk>/", "/reader-studies/<slug:slug>/display-sets/<uuid:pk>/update/", "/reader-studies/<slug>/display-sets/<uuid:pk>/delete/", "/reader-studies/<slug:slug>/display-sets/new/interfaces/create/", "/reader-studies/<slug:slug>/display-sets/<uuid:pk>/interface/create/", "/reader-studies/<slug:slug>/questions/add/", "/reader-studies/<slug:slug>/questions/<uuid:pk>/update/", "/reader-studies/<slug:slug>/questions/<uuid:pk>/delete/", "/reader-studies/<slug:slug>/questions/interfaces/", "/reader-studies/<slug:slug>/questions/widgets/", "/reader-studies/<slug:slug>/questions/interactive-algorithms/", "/reader-studies/<slug:slug>/editors/update/", "/reader-studies/<slug:slug>/readers/update/", "/reader-studies/<slug:slug>/progress/", "/reader-studies/<slug:slug>/permission-requests/", "/reader-studies/<slug:slug>/permission-requests/create/", "/reader-studies/<slug:slug>/permission-requests/<int:pk>/update/"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/reader_studies/serializers.py", "endpoints": {"api_summary": "This API defines endpoints for managing and interacting with reader studies, display sets, and answers in a medical imaging context.", "methods": ["GET", "POST", "PUT", "PATCH", "DELETE"], "paths": ["/api/reader-studies/", "/api/reader-studies/<slug>/", "/api/reader-studies/<slug>/questions/", "/api/reader-studies/<slug>/display-sets/", "/api/reader-studies/<slug>/display-sets/<pk>/", "/api/reader-studies/<slug>/answers/", "/api/reader-studies/<slug>/answers/<pk>/"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/policies/urls.py", "endpoints": {"api_summary": "The policies API provides information about the policies of the grand challenge application. It includes a single endpoint for retrieving the details of a specific policy.", "methods": ["GET"], "paths": ["/policies/<slug>/"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/challenges/urls.py", "endpoints": {"api_summary": "This API provides endpoints for managing challenges, including creating, listing, and updating challenge requests, as well as viewing challenge costs.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/challenges/", "/challenges/my-challenges/", "/challenges/requests/", "/challenges/requests/create/", "/challenges/requests/<pk>/", "/challenges/requests/<pk>/update/status/", "/challenges/requests/<pk>/update/budget/", "/challenges/costs/"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/teams/urls.py", "endpoints": {"api_summary": "The Teams API allows for the creation, retrieval, update, and deletion of teams and team members. It also allows for the creation of team members and the deletion of team members.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/teams/", "/teams/create/", "/teams/<int:pk>/", "/teams/<int:pk>/update/", "/teams/<int:pk>/delete/", "/teams/<int:pk>/create-member/", "/teams/m/<int:pk>/delete/"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/teams/views.py", "endpoints": {"api_summary": "This API allows users to create, read, update, and delete teams and team members for a specific challenge. It also allows users to join and leave teams.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/teams/<challenge_short_name>/", "/teams/<challenge_short_name>/<team_id>/", "/teams/<challenge_short_name>/<team_id>/members/<user_id>/"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/notifications/urls.py", "endpoints": {"api_summary": "The notifications API allows users to manage their notification subscriptions and view their notifications. It includes endpoints for listing, creating, and deleting subscriptions, as well as listing and viewing notifications.", "methods": ["GET", "POST", "DELETE"], "paths": ["/notifications/", "/notifications/subscriptions/", "/notifications/subscriptions/<int:pk>/delete/", "/notifications/subscriptions/create/"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/notifications/views.py", "endpoints": {"api_summary": "This API allows users to manage their notifications and subscriptions. It includes endpoints for retrieving notifications, subscribing to notifications, and deleting subscriptions.", "methods": ["GET", "POST", "DELETE"], "paths": ["/notifications", "/notifications/<notification_id>", "/follows", "/follows/<follow_id>"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/cases/urls.py", "endpoints": {"api_summary": "The cases API provides endpoints for managing image uploads, searching for images, and selecting images for use in a widget. It also provides a list of raw image upload sessions.", "methods": ["GET", "POST"], "paths": ["/cases/uploads/", "/cases/uploads/<uuid:pk>/", "/cases/select-image-widget/", "/cases/images/search/"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/cases/views.py", "endpoints": {"api_summary": "The API allows for the management of image upload sessions, image search, and image selection for use in other applications.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/rawimageuploadsession", "/image", "/image/search", "/image/select"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/cases/serializers.py", "endpoints": {"api_summary": "This API allows for the creation and management of image upload sessions for the purpose of adding images to an archive, archive item, answer, or display set. It also allows for the assignment of images to an answer for a reader study.", "methods": ["POST"], "paths": ["/api/v1/upload-session/"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/participants/admin.py", "endpoints": {"api_summary": "This API provides endpoints for managing registration requests and questions for a challenge. It allows users to submit registration requests and answer questions, and provides endpoints for admins to manage the questions and permissions for the registration process.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/registration-requests", "/registration-requests/<id>", "/registration-questions", "/registration-questions/<id>", "/registration-question-answers", "/registration-question-answers/<id>"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/participants/urls.py", "endpoints": {"api_summary": "This API provides endpoints for managing participants in a challenge, including registration, questions, and requests.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/participants/", "/participants/registration/", "/participants/registration/create/", "/participants/registration/<int:pk>/update/", "/participants/registration/questions/", "/participants/registration/questions/create/", "/participants/registration/questions/<uuid:pk>/update/", "/participants/registration/questions/<uuid:pk>/delete/"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/participants/views.py", "endpoints": {"api_summary": "This API allows users to create, update, and delete registration questions for a challenge. It also allows users to view and manage registration requests for a challenge.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/participants/registration-question-list", "/participants/registration-question-create", "/participants/registration-question-update", "/participants/registration-question-delete", "/participants/registration-request-list", "/participants/registration-request-create", "/participants/registration-request-update"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/components/urls.py", "endpoints": {"api_summary": "This API provides a list of component interfaces for algorithms, archives, reader studies, inputs, and outputs. It also provides endpoints for file upload, file search, and file widget selection.", "methods": ["GET", "POST"], "paths": ["/interfaces/algorithms/", "/interfaces/archives/", "/interfaces/reader-studies/", "/interfaces/inputs/", "/interfaces/outputs/", "/interfaces/autocomplete/", "/interfaces/<interface_slug>/file-upload/", "/select-file-widget/", "/files/search/"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/workstations/urls.py", "endpoints": {"api_summary": "This API provides endpoints for managing workstations, including creating, updating, and deleting workstations, as well as managing workstation images and sessions.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/workstations/", "/workstations/create/", "/workstations/<slug>/", "/workstations/<slug>/update/", "/workstations/<slug>/images/create/", "/workstations/<slug>/images/<uuid:pk>/", "/workstations/<slug>/images/<uuid:pk>/update/", "/workstations/<slug>/images/<uuid:pk>/move/", "/workstations/<slug>/sessions/create/", "/workstations/<slug>/sessions/create/<path:workstation_path>/", "/workstations/<slug>/sessions/debug/create/", "/workstations/<slug>/sessions/debug/create/<path:workstation_path>/", "/workstations/<slug>/editors/update/", "/workstations/<slug>/users/update/"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/workstations/serializers.py", "endpoints": {"api_summary": "The API provides endpoints for managing workstation sessions, feedback, and workstations. It allows users to create, read, update, and delete sessions, feedback, and workstations, and provides endpoints for retrieving information about sessions and workstations.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/workstations/sessions", "/api/workstations/sessions/<built-in function id>", "/api/workstations/feedback", "/api/workstations/feedback/<built-in function id>", "/api/workstations/workstations", "/api/workstations/workstations/<built-in function id>"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/profiles/urls.py", "endpoints": {"api_summary": "This API provides endpoints for managing user profiles, email preferences, and newsletter subscriptions. It also includes an autocomplete feature for user names.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/user-autocomplete/", "/email-preferences/", "/email-preferences/newsletter/unsubscribe/", "/email-preferences/notifications/unsubscribe/", "/profile/", "/profile/edit/", "/<username>/", "/<username>/newsletter-sign-up/"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/invoices/urls.py", "endpoints": {"api_summary": "The invoices API allows users to retrieve a list of invoices and view details about each invoice. The API also supports creating and updating invoices.", "methods": ["GET", "POST"], "paths": ["/invoices", "/invoices/<built-in function id>"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/api/urls.py", "endpoints": {"api_summary": "This API defines endpoints for managing algorithms, archives, cases, challenges, component interfaces, evaluations, notifications, profiles, reader studies, follows, uploads, workstations, and timezone.", "methods": ["GET", "POST", "PUT", "PATCH", "DELETE"], "paths": ["/api/v1/algorithms/images", "/api/v1/algorithms/jobs", "/api/v1/algorithms", "/api/v1/archives/items", "/api/v1/archives", "/api/v1/cases/images", "/api/v1/cases/upload-sessions", "/api/v1/challenges", "/api/v1/components/interfaces", "/api/v1/evaluations", "/api/v1/notifications", "/api/v1/profiles/users", "/api/v1/reader-studies/answers", "/api/v1/reader-studies/questions", "/api/v1/reader-studies/display-sets", "/api/v1/reader-studies", "/api/v1/subscriptions", "/api/v1/uploads", "/api/v1/workstations/configs", "/api/v1/workstations/feedback", "/api/v1/workstations/sessions", "/api/v1/workstations", "/api/v1/timezone"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/api/views.py", "endpoints": {"api_summary": "The Grand Challenge API provides information about the latest and lowest supported versions of the API.", "methods": ["GET"], "paths": ["/grandchallenge/api/version"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/serving/urls.py", "endpoints": {"api_summary": "This API serves images, submissions, and other files for a challenge evaluation system. It includes endpoints for serving images, submissions, and supplementary files, as well as endpoints for serving algorithm images and models.", "methods": ["GET", "POST"], "paths": ["/images/<uuid:pk>/<path:path>", "/images/<prefix:pa>/<prefix:pb>/<uuid:pk>/<path:path>", "/evaluation/<int:challenge_pk>/submissions/<int:creator_pk>/<uuid:submission_pk>/<path:path>", "/evaluation/<int:challenge_pk>/<uuid:submission_pk>/<path:path>", "/components/<prefix:pa>/<prefix:pb>/<int:component_interface_value_pk>/<path:path>", "/challenges/challengerequest/<uuid:challenge_request_pk>/<path:path>", "/docker/images/algorithms/algorithmimage/<uuid:algorithmimage_pk>/<path:path>", "/models/algorithms/algorithmmodel/<uuid:algorithmmodel_pk>/<path:path>", "/session-feedback/<uuid:feedback_pk>/<path:path>"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/serving/views.py", "endpoints": {"api_summary": "This API provides endpoints for serving images, submissions, and other files related to the Grand Challenge platform.", "methods": ["GET"], "paths": ["/images/<pk>/<path>", "/submissions/<submission_pk>", "/submission-supplementary-file/<submission_pk>", "/component-interface-value/<component_interface_value_pk>", "/structured-challenge-submission-form/<challenge_request_pk>", "/session-feedback-screenshot/<feedback_pk>", "/algorithm-images/<algorithmimage_pk>", "/algorithm-models/<algorithmmodel_pk>"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/github/urls.py", "endpoints": {"api_summary": "The GitHub API allows developers to access and manipulate GitHub repositories and their contents. It provides endpoints for creating, updating, and deleting repositories, as well as for managing repository settings and collaborators. Additionally, it provides endpoints for accessing and manipulating repository contents, such as files and commits.", "methods": ["GET", "POST"], "paths": ["/github/install-complete/", "/github/repositories/"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/github/views.py", "endpoints": {"api_summary": "This API allows users to interact with GitHub repositories and installations, and provides a list of repositories accessible to the user's access token.", "methods": ["GET", "POST"], "paths": ["/github/webhook", "/github/installation/repositories"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/documentation/urls.py", "endpoints": {"api_summary": "The documentation API provides endpoints for managing and accessing documentation pages for the grandchallenge project. It allows users to create, read, update, and delete documentation pages, as well as retrieve a list of all documentation pages.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/documentation/", "/documentation/overview/", "/documentation/create/", "/documentation/<slug:slug>/", "/documentation/<slug:slug>/content-update/", "/documentation/<slug:slug>/metadata-update/"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/documentation/views.py", "endpoints": {"api_summary": "This API provides endpoints for managing documentation pages. It allows for creating, updating, and retrieving documentation pages, as well as searching for pages based on keywords.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/documentation/", "/documentation/<slug>", "/documentation/search"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/uploads/views.py", "endpoints": {"api_summary": "The UserUpload API allows for the creation, retrieval, and management of user uploads. It provides endpoints for listing parts, generating presigned URLs, completing multipart uploads, and aborting multipart uploads.", "methods": ["GET", "POST", "PATCH"], "paths": ["/users/<built-in function id>/list-parts", "/users/<built-in function id>/generate-presigned-urls", "/users/<built-in function id>/complete-multipart-upload", "/users/<built-in function id>/abort-multipart-upload"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/uploads/serializers.py", "endpoints": {"api_summary": "This API allows users to upload files to the system using a multipart upload process. The API provides endpoints for creating a new upload, listing parts of an upload, generating presigned URLs for uploading parts, and completing a multipart upload.", "methods": ["POST", "GET", "PUT"], "paths": ["/uploads/", "/uploads/<upload_id>/parts/", "/uploads/<upload_id>/presigned_urls/", "/uploads/<upload_id>/complete/"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/admins/urls.py", "endpoints": {"api_summary": "The Grand Challenge Admins API provides endpoints for managing admins and users in the Grand Challenge system. It includes endpoints for listing admins, updating admin information, and autocompleting user names.", "methods": ["GET", "POST"], "paths": ["/admins/", "/admins/update/", "/admins/users-autocomplete/"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/verifications/urls.py", "endpoints": {"api_summary": "The verifications API allows users to create and manage email verifications for their accounts. It also provides a way to confirm email verifications and retrieve information about the verification status of a user.", "methods": ["GET", "POST"], "paths": ["/verifications/create/", "/verifications/confirm/<token>/", "/verifications/", "/verifications/user-sets/<int:pk>/"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/evaluation/urls.py", "endpoints": {"api_summary": "This API provides endpoints for managing and interacting with evaluation and submission data in a Grand Challenge system.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/evaluation/<uuid:pk>/", "/evaluation/<uuid:pk>/status/", "/evaluation/<uuid:pk>/incomplete-jobs/", "/evaluation/<uuid:pk>/update/", "/phase/create/", "/configure-algorithm-phases/", "/submissions/", "/combined-leaderboards/create/", "/combined-leaderboards/<slug:slug>/", "/combined-leaderboards/<slug:slug>/update/", "/combined-leaderboards/<slug:slug>/delete/", "/<slug:slug>/", "/<slug:slug>/admin/", "/<slug:slug>/algorithms/create/", "/<slug:slug>/interfaces/", "/<slug:slug>/interfaces/create/", "/<slug:slug>/interfaces/<uuid:interface_pk>/delete/", "/<slug:slug>/interfaces/copy/", "/<slug:slug>/linked-archive/", "/<slug:slug>/ground-truths/", "/<slug:slug>/ground-truths/activate/", "/<slug:slug>/ground-truths/create/", "/<slug:slug>/ground-truths/deactivate/", "/<slug:slug>/ground-truths/<uuid:pk>/", "/<slug:slug>/ground-truths/<uuid:pk>/import-status/", "/<slug:slug>/ground-truths/<uuid:pk>/update/", "/<slug:slug>/leaderboard/", "/<slug:slug>/methods/", "/<slug:slug>/methods/create/", "/<slug:slug>/methods/<uuid:pk>/", "/<slug:slug>/methods/<uuid:pk>/import-status/", "/<slug:slug>/methods/<uuid:pk>/update/", "/<slug:slug>/submissions/create/", "/<slug:slug>/submissions/<uuid:pk>/", "/<slug:slug>/submissions/<uuid:pk>/evaluations/create/", "/<slug:slug>/update/", "/<slug:slug>/starter-kit/", "/<slug:slug>/starter-kit/download/", "/results/", "/leaderboard/"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/evaluation/serializers.py", "endpoints": {"api_summary": "This API defines endpoints for managing evaluations, including creating, updating, and retrieving evaluations, as well as filtering and sorting evaluations based on various criteria.", "methods": ["GET", "POST", "PUT", "PATCH", "DELETE"], "paths": ["/evaluations", "/evaluations/<evaluation_id>", "/evaluations/<evaluation_id>/update"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/evaluation/views/api.py", "endpoints": {"api_summary": "This API allows for the management of evaluations, including claiming and updating evaluations.", "methods": ["GET", "PATCH"], "paths": ["/evaluations", "/evaluations/<evaluation_id>", "/evaluations/claimable"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/pages/urls.py", "endpoints": {"api_summary": "This API provides endpoints for managing and interacting with pages in a challenge. It includes endpoints for creating, updating, and deleting pages, as well as endpoints for retrieving page content and metadata.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/pages/", "/pages/create/", "/statistics/", "/", "/<slug>/", "/<slug>/content-update/", "/<slug>/metadata-update/", "/<slug>/delete/"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/workstation_configs/urls.py", "endpoints": {"api_summary": "The workstation-configs API allows users to create, read, update, and delete workstation configurations. It provides endpoints for listing, creating, retrieving, updating, and deleting workstation configurations, as well as endpoints for retrieving the details of a specific workstation configuration.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/workstation-configs/", "/workstation-configs/create/", "/workstation-configs/<slug>/", "/workstation-configs/<slug>/delete/", "/workstation-configs/<slug>/update/"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/workstation_configs/views.py", "endpoints": {"api_summary": "The Workstation Config API allows users to create, read, update, and delete workstation configurations. It also provides a list of all workstation configurations and a detail view for each configuration.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/workstation-configs/", "/workstation-configs/<id>", "/workstation-configs/<id>/detail"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/publications/urls.py", "endpoints": {"api_summary": "The publications API allows for the creation and listing of publications. It provides a list of all publications and allows for the creation of new publications.", "methods": ["GET", "POST"], "paths": ["/publications/", "/publications/create/"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/api_tokens/urls.py", "endpoints": {"api_summary": "The API Tokens API allows users to create, list, and delete API tokens for authentication and authorization purposes. The API endpoints are designed to be RESTful and follow best practices for API design.", "methods": ["GET", "POST", "DELETE"], "paths": ["/api-tokens/", "/api-tokens/create/", "/api-tokens/<token_key>/delete/"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/api_tokens/views.py", "endpoints": {"api_summary": "This API provides endpoints for managing API tokens for the Grand Challenge application. It allows users to create, view, and delete API tokens, and provides a list of all tokens associated with their account.", "methods": ["GET", "POST", "DELETE"], "paths": ["/api-tokens/", "/api-tokens/<token_key>"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/emails/urls.py", "endpoints": {"api_summary": "The emails API provides endpoints for managing email templates and sending emails. It includes endpoints for creating, updating, and retrieving email templates, as well as endpoints for sending emails using the templates.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/emails/", "/emails/create/", "/emails/<int:pk>/", "/emails/<int:pk>/rendered/", "/emails/<int:pk>/metadata-update/", "/emails/<int:pk>/body-update/"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/emails/views.py", "endpoints": {"api_summary": "This API allows for the creation, update, and retrieval of emails. It also provides a rendered preview of the email content.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/emails", "/emails/<id>", "/emails/<id>/rendered"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/organizations/urls.py", "endpoints": {"api_summary": "The Organizations API allows for the management of organizations, including creating, reading, updating, and deleting organizations, as well as managing the members and editors of an organization.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/organizations/", "/organizations/<slug>/", "/organizations/<slug>/update/", "/organizations/<slug>/editors/update/", "/organizations/<slug>/members/update/"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/algorithms/urls.py", "endpoints": {"api_summary": "This API provides endpoints for managing algorithms, including creating, updating, and deleting algorithms, as well as managing algorithm images and models, and creating and managing jobs.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/algorithms/", "/algorithms/create/", "/algorithms/custom-create/", "/algorithms/import/", "/algorithms/<slug>/", "/algorithms/<slug>/statistics/", "/algorithms/<slug>/update/", "/algorithms/<slug>/publish/", "/algorithms/<slug>/description-update/", "/algorithms/<slug>/interfaces/", "/algorithms/<slug>/interfaces/create/", "/algorithms/<slug>/interfaces/<uuid:interface_pk>/delete/", "/algorithms/<slug>/repository/", "/algorithms/<slug>/images/create/", "/algorithms/<slug>/images/<uuid:pk>/", "/algorithms/<slug>/images/<uuid:pk>/import-status/", "/algorithms/<slug>/images/<uuid:pk>/build-status/", "/algorithms/<slug>/images/activate/", "/algorithms/<slug>/images/template/", "/algorithms/<slug>/images/<uuid:pk>/update/", "/algorithms/<slug>/models/<uuid:pk>/", "/algorithms/<slug>/models/<uuid:pk>/import-status/", "/algorithms/<slug>/models/create/", "/algorithms/<slug>/models/activate/", "/algorithms/<slug>/models/deactivate/", "/algorithms/<slug>/models/<uuid:pk>/update/", "/algorithms/<slug>/jobs/", "/algorithms/<slug:slug>/jobs/interface-select/", "/algorithms/<slug:slug>/<uuid:interface_pk>/jobs/create/", "/algorithms/<slug>/jobs/<uuid:pk>/", "/algorithms/<slug>/jobs/<uuid:pk>/status/", "/algorithms/<slug>/jobs/<uuid:pk>/update/", "/algorithms/<slug>/jobs/<uuid:pk>/display-set/create/", "/algorithms/<slug>/jobs/<uuid:pk>/progress/", "/algorithms/<slug>/jobs/<uuid:pk>/viewers/update/", "/algorithms/<slug>/editors/update/", "/algorithms/<slug>/users/update/", "/algorithms/<slug>/permission-requests/", "/algorithms/<slug>/permission-requests/create/", "/algorithms/<slug>/permission-requests/<int:pk>/update/"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/algorithms/views.py", "endpoints": {"api_summary": "This API allows users to create, read, update, and delete algorithms, as well as to perform CRUD operations on related data such as algorithm images and job results.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/algorithms/", "/algorithms/<slug>/", "/algorithms/<slug>/images/", "/algorithms/<slug>/images/<image_id>/", "/algorithms/<slug>/jobs/", "/algorithms/<slug>/jobs/<job_id>/"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/hanging_protocols/urls.py", "endpoints": {"api_summary": "The hanging protocols API allows for the creation, retrieval, and modification of hanging protocols for medical imaging. It provides endpoints for listing, creating, retrieving, and updating hanging protocols, as well as endpoints for retrieving the details of a specific hanging protocol.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/hanging-protocols/", "/hanging-protocols/create/", "/hanging-protocols/<slug>/", "/hanging-protocols/<slug>/update/"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/hanging_protocols/views.py", "endpoints": {"api_summary": "The Hanging Protocol API allows users to create, read, update, and delete hanging protocols. It also provides a list of all hanging protocols and their details.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/hanging-protocols/", "/hanging-protocols/<id>", "/hanging-protocols/<id>/update"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/archives/urls.py", "endpoints": {"api_summary": "The API provides endpoints for managing archives, including creating, updating, and deleting archives, as well as managing items within archives.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/archives/", "/archives/create/", "/archives/<slug>/", "/archives/<slug>/update/", "/archives/<slug>/editors/update/", "/archives/<slug>/uploaders/update/", "/archives/<slug>/users/update/", "/archives/<slug>/permission-requests/", "/archives/<slug>/permission-requests/create/", "/archives/<slug>/permission-requests/<int:pk>/update/", "/archives/<slug>/items/", "/archives/<slug>/items/<uuid:pk>/", "/archives/<slug>/items/create/", "/archives/<slug>/items/delete/", "/archives/<slug>/items/<uuid:pk>/edit/", "/archives/<slug>/items/<uuid:pk>/interface/create/", "/archives/<slug>/cases/add/", "/archives/<slug>/items/reader-study/update/"]}}
{"file": "cloned/grand-challenge.org/app/grandchallenge/archives/views.py", "endpoints": {"api_summary": "This API allows for the management of archives, including creating, updating, and deleting archives, as well as adding and removing cases and images from archives.", "methods": ["GET", "POST", "PUT", "PATCH", "DELETE"], "paths": ["/archives/", "/archives/<archive_id>/", "/archives/<archive_id>/cases/", "/archives/<archive_id>/cases/<case_id>/", "/archives/<archive_id>/images/", "/archives/<archive_id>/images/<image_id>/"]}}
{"file": "cloned/grand-challenge.org/app/config/urls/rendering_subdomain.py", "endpoints": {"api_summary": "This API provides endpoints for serving images, checking the health of the server, and managing workstation sessions. It also includes a custom converter for handling prefixes in URLs.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/healthcheck/", "/workstations/<slug>/sessions/<uuid:pk>/", "/workstations/<slug>/sessions/<uuid:pk>/<path:path>", "/media/<settings.IMAGE_FILES_SUBDIRECTORY>/<prefix:pa>/<prefix:pb>/<uuid:pk>/<path:path>"]}}
{"file": "cloned/grand-challenge.org/app/config/urls/challenge_subdomain.py", "endpoints": {"api_summary": "This API provides endpoints for managing challenges, including creating, updating, and deleting challenges, as well as endpoints for managing onboarding tasks and invoices.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/challenges/", "/challenges/<challenge_id>/", "/onboarding-tasks/", "/onboarding-tasks/<task_id>/complete/", "/invoices/"]}}
{"file": "cloned/coolstore-microservices/src/bak/web/src/services/CartService.ts", "endpoints": {"api_summary": "This API provides endpoints for managing a user's cart, including getting, creating, updating, and deleting cart items, as well as checking out the cart.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/cart/api/carts", "/cart/api/carts/checkout"]}}
{"file": "cloned/coolstore-microservices/src/bak/web/src/services/SaleService.ts", "endpoints": {"api_summary": "The API allows for the retrieval of orders from the sale/api/orders endpoint. The API uses the GET method and requires a valid access token for authentication.", "methods": ["GET"], "paths": ["/sale/api/orders"]}}
{"file": "cloned/coolstore-microservices/src/bak/web/src/services/ProductService.ts", "endpoints": {"api_summary": "This API provides endpoints for retrieving and searching products, as well as retrieving a single product by ID. The endpoints are protected by an authentication service that requires a valid access token to be included in the request headers.", "methods": ["GET", "POST"], "paths": ["/api-gw/product-catalog/api/products", "/api-gw/product-catalog/api/products/search", "/api-gw/product-catalog/api/products/<id>"]}}
{"file": "cloned/coolstore-microservices/src/web/app/lib/auth.ts", "endpoints": {"api_summary": "The API provides endpoints for searching products, retrieving product details, creating and managing user sessions, and checking out carts.", "methods": ["GET", "POST", "PUT"], "paths": ["/api-gw/product-catalog/api/products", "/api-gw/product-catalog/api/products/search", "/api-gw/shopping-cart/api/carts"]}}
{"file": "cloned/eShopOnContainersDDD/src/Frontend/ClientApp/src/AppRoutes.js", "endpoints": {"api_summary": "This API provides a simple counter and fetch data functionality. The counter endpoint allows users to increment and decrement a counter, while the fetch data endpoint retrieves data from an external API and displays it in a list.", "methods": ["GET", "POST"], "paths": ["/counter", "/fetch-data"]}}
{"file": "cloned/eShopOnContainersDDD/src/Frontend/ClientApp/src/setupProxy.js", "endpoints": {"api_summary": "This API provides a proxy for the ASP.NET Core application running on the local machine. It forwards HTTP requests to the target URL, which is defined by the ASPNETCORE_HTTPS_PORT or ASPNETCORE_URLS environment variables. The API supports GET and POST methods and has a single endpoint for weather forecast data.", "methods": ["GET", "POST"], "paths": ["/weatherforecast"]}}
{"file": "cloned/acropolis/docker/remote.py", "endpoints": {"api_summary": "This API is a simple remote control for Twine, allowing users to update and ingest data. It defines two endpoints: /update and /ingest.", "methods": ["GET", "POST"], "paths": ["/update", "/ingest"]}}
{"file": "cloned/porta/public/javascripts/vendor/colorbox/jquery.colorbox-patched.js", "endpoints": {"api_summary": "This file defines a REST API endpoint for a Colorbox modal.", "methods": ["GET"], "paths": ["/colorbox"]}}
{"file": "cloned/porta/spec/javascripts/Policies/actions/PolicyRegistry.spec.ts", "endpoints": {"api_summary": "The PolicyRegistry API provides endpoints for managing policies in a registry. It includes endpoints for loading the registry, fetching policies, and creating, updating, and deleting policies.", "methods": ["GET", "POST"], "paths": ["/admin/api/policies.json"]}}
{"file": "cloned/porta/spec/javascripts/ActiveDocs/OAS3Autocomplete.spec.ts", "endpoints": {"api_summary": "This API defines a single endpoint for fetching OpenAPI specs and autocompleting fields with x-data-threescale-name property.", "methods": ["GET"], "paths": ["/"]}}
{"file": "cloned/porta/lib/developer_portal/app/assets/javascripts/essential_assets/highlight-7.5.js", "endpoints": {"api_summary": "This file defines a REST API endpoint for retrieving a list of users.", "methods": ["GET"], "paths": ["/users"]}}
{"file": "cloned/porta/app/javascript/src/Stats/provider/stats_response_codes.js", "endpoints": {"api_summary": "This API provides a chart to display the response codes for a given service. It allows users to select different response codes and view the data for each one. The API also includes a menu to select different time periods for the data.", "methods": ["GET"], "paths": ["/stats/api/services/<service_id>/usage_response_code.json"]}}
{"file": "cloned/porta/app/javascript/src/Stats/lib/usage_backend_api_metrics_source.js", "endpoints": {"api_summary": "The StatsUsageBackendApiMetricsSource class defines a REST API endpoint for retrieving usage statistics for a specific backend API. The endpoint is accessed using the GET method and returns a JSON object containing usage data for the specified API.", "methods": ["GET"], "paths": ["/stats/api/backend_apis/<id>/usage.json"]}}
{"file": "cloned/porta/app/javascript/src/Policies/actions/PolicyRegistry.ts", "endpoints": {"api_summary": "The API defined in this file retrieves a list of registry policies from the server and allows for loading the policies into the application. The API endpoints are used to fetch the policies and load them into the application.", "methods": ["GET"], "paths": ["/admin/api/policies.json"]}}
{"file": "cloned/porta/app/javascript/src/utilities/ajax.ts", "endpoints": {"api_summary": "This API provides a paginated list of items, with the ability to search and filter the results. It also supports JSON and form-encoded request bodies.", "methods": ["GET"], "paths": ["/items"]}}
{"file": "cloned/hypertrace/.github/graphql-e2e-tests/src/main/java/org/hypertrace/e2etest/ApiTest.java", "endpoints": {"api_summary": "This API provides a GraphQL interface for querying data from the Hypertrace e2e test environment.", "methods": ["GET", "POST"], "paths": ["/graphql"]}}
{"file": "cloned/lando-ui/landoui/pages.py", "endpoints": {"api_summary": "This API defines endpoints for user authentication and management, as well as a settings endpoint for managing user preferences.", "methods": ["GET", "POST"], "paths": ["/", "/signin", "/signout", "/logout", "/settings"]}}
{"file": "cloned/lando-ui/landoui/dockerflow.py", "endpoints": {"api_summary": "The API defined in this file provides health check endpoints for a load balancer and a service called lando-ui. It also provides a version endpoint that returns version information as defined in the app config.", "methods": ["GET"], "paths": ["/__heartbeat__", "/__lbheartbeat__", "/__version__"]}}
{"file": "cloned/tilegarden/src/tiler/src/api.js", "endpoints": {"api_summary": "This API provides tile-based data access for a variety of map configurations. It supports raster, vector, and UTF grid tiles, as well as filtering and layer selection.", "methods": ["GET"], "paths": ["/tile/{config}/{z}/{x}/{y}", "/grid/{config}/{z}/{x}/{y}", "/vector/{config}/{z}/{x}/{y}", "/"]}}
{"file": "cloned/web-languageforge/next-app/src/routes/projects/[project_code]/activities/+server.ts", "endpoints": {"api_summary": "This API provides a list of activities for a given project, along with information about the user who performed the activity, the date and time of the activity, and any changes made during the activity.", "methods": ["GET"], "paths": ["/activities"]}}
{"file": "cloned/web-languageforge/next-app/src/routes/password/+server.ts", "endpoints": {"api_summary": "This API endpoint allows users to change their password. It takes a JSON object with the new password and password confirmation as input, and returns an empty JSON object if successful.", "methods": ["PUT"], "paths": ["/users/<built-in function id>/change_password"]}}
{"file": "cloned/web-languageforge/next-app/src/routes/password/change/+page.server.ts", "endpoints": {"api_summary": "This API endpoint allows users to change their password. It takes a new password as input and updates the user's password in the database.", "methods": ["POST"], "paths": ["/password/change"]}}
{"file": "cloned/web-languageforge/test/e2e/tests/user-profile.spec.ts", "endpoints": {"api_summary": "This API provides endpoints for managing user profiles, including creating, updating, and deleting user accounts, as well as updating user about me information.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users", "/users/<built-in function id>", "/users/about-me"]}}
{"file": "cloned/web-languageforge/test/e2e/tests/reset-forgotten-password.spec.ts", "endpoints": {"api_summary": "This API allows users to reset their forgotten passwords by requesting a password reset email and then resetting their password using a reset password link sent to their email.", "methods": ["GET", "POST"], "paths": ["/forgot-password", "/reset-password"]}}
{"file": "cloned/web-languageforge/src/angular-app/languageforge/lexicon/core/lexicon-send-receive-api.service.ts", "endpoints": {"api_summary": "The LexiconSendReceiveApiService provides endpoints for managing and interacting with lexicon projects. It allows users to retrieve their projects, receive new projects, and get the status of their projects.", "methods": ["GET", "POST"], "paths": ["/lexiconSendReceive/getUserProjects", "/lexiconSendReceive/receiveProject", "/lexiconSendReceive/getProjectStatus"]}}
{"file": "cloned/web-languageforge/src/angular-app/bellows/core/api/project.service.ts", "endpoints": {"api_summary": "The ProjectService API provides endpoints for managing projects, including creating, joining, and deleting projects, as well as retrieving project information and updating user roles.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/projects", "/projects/<project_id>", "/projects/<project_id>/users", "/projects/<project_id>/users/<user_id>", "/projects/<project_id>/invite_link"]}}
{"file": "cloned/csw/csw-database/src/test/java/csw/database/JDatabaseServiceFactoryTest.java", "endpoints": {"api_summary": "This API provides methods for creating and accessing a database connection, as well as creating a DSL context for querying the database.", "methods": ["GET", "POST"], "paths": ["/database/connection", "/database/dsl"]}}
{"file": "cloned/csw/csw-database/src/test/java/csw/database/JDatabaseServiceTest.java", "endpoints": {"api_summary": "This API provides a database service for storing and retrieving data. It includes endpoints for creating, reading, updating, and deleting records, as well as querying and grouping records using foreign keys.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/films", "/budget"]}}
{"file": "cloned/csw/csw-time/csw-time-scheduler/src/test/java/csw/time/scheduler/api/JTimeServiceSchedulerTest.java", "endpoints": {"api_summary": "This API provides methods for scheduling tasks and messages to be executed at a specific time or periodically. It also provides methods for cancelling scheduled tasks.", "methods": ["GET", "POST"], "paths": ["/schedule/task", "/schedule/message", "/cancel/task"]}}
{"file": "cloned/csw/examples/src/main/java/org/tmt/csw/sample/JSampleHandlersAlarm.java", "endpoints": {"api_summary": "This API is a sample implementation of a component that interacts with a hardware device. It provides a command service to send commands to the device and an event service to receive events from the device.", "methods": ["GET", "POST"], "paths": ["/sample/command", "/sample/event"]}}
{"file": "cloned/csw/examples/src/main/java/org/tmt/csw/sample/JSampleHandlers.java", "endpoints": {"api_summary": "This API is a sample implementation of a component in the TMT Observatory Control System. It demonstrates how to use the Java API to interact with the HCD and send commands to it.", "methods": ["GET", "POST"], "paths": ["/samplehcd/sleep"]}}
{"file": "cloned/csw/examples/src/main/java/org/tmt/csw/samplehcd/JSampleHcdHandlers.java", "endpoints": {"api_summary": "This API provides a simple HCD (Hardware Control Daemon) that can be used to control a hypothetical telescope. It accepts commands to move the telescope to a specific position, and can also be used to query the current position of the telescope.", "methods": ["GET", "POST"], "paths": ["/tmt/csw/samplehcd/move", "/tmt/csw/samplehcd/position"]}}
{"file": "cloned/csw/examples/src/main/java/example/framework/components/hcd/JHcdComponentHandlers.java", "endpoints": {"api_summary": "This API is a HCD component that handles commands and updates the current state of the component.", "methods": ["GET", "POST"], "paths": ["/hcd/command", "/hcd/state"]}}
{"file": "cloned/csw/examples/src/main/java/example/event/JEventSubscribeExamples.java", "endpoints": {"api_summary": "This file defines a Java class that provides examples of how to use the Event Service to subscribe to events from a HCD. It includes methods for subscribing with a callback, async callback, actor ref, and source, as well as an example of how to subscribe to events from a specific subsystem.", "methods": ["GET", "POST"], "paths": ["/subscribe", "/subscribeAsync", "/subscribeActorRef", "/subscribeSource", "/psubscribe"]}}
{"file": "cloned/csw/examples/src/main/java/example/database/JAssemblyComponentHandlers.java", "endpoints": {"api_summary": "This API provides a database service for CSW component developers. It allows for creating, reading, updating, and deleting data in a PostgreSQL database.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/database/create", "/database/read", "/database/update", "/database/delete"]}}
{"file": "cloned/csw/examples/src/main/java/example/tutorial/basic/sampleassembly/JSampleAssemblyHandlersAlarm.java", "endpoints": {"api_summary": "This API is a sample assembly that demonstrates how to use the CSW framework to build a component that interacts with other components and publishes events. It also demonstrates how to use the alarm service to set an alarm severity based on a counter value.", "methods": ["GET", "POST"], "paths": ["/sample_assembly"]}}
{"file": "cloned/csw/examples/src/main/java/example/tutorial/basic/samplehcd/JSampleHcdHandlers.java", "endpoints": {"api_summary": "This API provides a simple HCD (Hardware Control Daemon) that can be used to control a hypothetical hardware device. It supports two commands: `hcdSleep` and `hcdImmediate`, which can be used to put the device to sleep or perform an immediate action, respectively.", "methods": ["GET", "POST"], "paths": ["/hcd/sleep", "/hcd/immediate"]}}
{"file": "cloned/csw/examples/src/test/java/org/tmt/csw/samplehcd/JSampleHcdTest.java", "endpoints": {"api_summary": "This API provides a sample HCD that demonstrates how to use the CSW framework to implement a hardware control device. It includes endpoints for subscribing to events, sending commands, and querying the current state of the HCD.", "methods": ["GET", "POST"], "paths": ["/subscribe", "/command", "/state"]}}
{"file": "cloned/csw/examples/src/test/java/example/config/JConfigClientExample.java", "endpoints": {"api_summary": "This file defines a REST API for managing configuration files in the TMT Observatory. It includes endpoints for creating, updating, deleting, and retrieving configuration files, as well as endpoints for managing the active version of a configuration file.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/config/create", "/config/update", "/config/delete", "/config/get", "/config/active"]}}
{"file": "cloned/csw/examples/src/test/java/example/command/JCommandServiceExample.java", "endpoints": {"api_summary": "This file defines a REST API for a command service example in Java. It includes endpoints for submitting and querying commands, as well as subscribing to current state.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/submit", "/query", "/subscribe"]}}
{"file": "cloned/Phraseanet/Phraseanet-production-client/dist/lightbox.js", "endpoints": {"api_summary": "This code defines a lightbox application for displaying and managing a basket of items.", "methods": ["GET", "POST"], "paths": ["/lightbox/ajax/LOAD_REPORT/", "/lightbox/ajax/SET_ELEMENT_AGREEMENT/", "/lightbox/ajax/SET_RELEASE/", "/lightbox/ajax/GET_ELEMENTS/", "/lightbox/ajax/SET_NOTE/", "/lightbox/ajax/LOAD_BASKET_ELEMENT/"]}}
{"file": "cloned/Phraseanet/Phraseanet-production-client/dist/lightbox.min.js", "endpoints": {"api_summary": "This code defines a lightbox application for displaying and managing a basket of items.", "methods": ["GET", "POST"], "paths": ["/lightbox/ajax/LOAD_REPORT/", "/lightbox/ajax/SET_ELEMENT_AGREEMENT/", "/lightbox/ajax/SET_RELEASE/", "/lightbox/ajax/GET_ELEMENTS/", "/lightbox/ajax/SET_NOTE/", "/lightbox/ajax/LOAD_BASKET_ELEMENT/"]}}
{"file": "cloned/Phraseanet/Phraseanet-production-client/src/components/list/listShare.js", "endpoints": {"api_summary": "This API allows for sharing lists with other users and managing the permissions of those users.", "methods": ["GET", "POST"], "paths": ["/prod/lists/list/<listId>/share/", "/prod/lists/list/<listId>/unshare/<userId>/", "/prod/push/search-user/"]}}
{"file": "cloned/Phraseanet/Phraseanet-production-client/src/components/basket/delete.js", "endpoints": {"api_summary": "This API defines endpoints for deleting baskets and records in a Phraseanet application.", "methods": ["POST"], "paths": ["/prod/baskets/<basketId>/delete/", "/prod/records/delete/what/"]}}
{"file": "cloned/Phraseanet/Phraseanet-production-client/src/components/order/index.js", "endpoints": {"api_summary": "This API is responsible for managing orders and order items. It provides endpoints for creating, reading, updating, and deleting orders and order items, as well as for retrieving order information and performing actions on orders.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/orders", "/orders/<order_id>", "/orders/<order_id>/items", "/orders/<order_id>/items/<item_id>"]}}
{"file": "cloned/Phraseanet/Phraseanet-production-client/src/components/record/recordEditor/presets.js", "endpoints": {"api_summary": "This API defines endpoints for managing presets in a record editor.", "methods": ["GET", "POST", "DELETE"], "paths": ["/prod/records/edit/presets", "/prod/records/edit/presets/<presetId>"]}}
{"file": "cloned/Phraseanet/Phraseanet-production-client/src/components/record/recordEditor/index.js", "endpoints": {"api_summary": "This code defines a REST API for editing records in a database.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/records", "/records/<record_id>", "/records/<record_id>/status"]}}
{"file": "cloned/Phraseanet/Phraseanet-production-client/src/components/story/reorderContent.js", "endpoints": {"api_summary": "This API allows users to reorder the elements in a story.", "methods": ["GET", "POST"], "paths": ["/prod/story/1/62/reorder/"]}}
{"file": "cloned/Phraseanet/www/scripts/apps/admin/tasks-manager/collections/tasks.js", "endpoints": {"api_summary": "The TaskCollection API allows for the management of tasks in the Phraseanet system. It provides endpoints for retrieving, creating, updating, and deleting tasks, as well as endpoints for querying and filtering tasks based on various criteria.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/admin/task-manager/tasks", "/admin/task-manager/tasks/<task_id>"]}}
{"file": "cloned/Phraseanet/resources/www/common/js/components/user.js", "endpoints": {"api_summary": "The API allows for setting user preferences by making a POST request to the /user/preferences/ endpoint with the property name and value in the request body.", "methods": ["POST"], "paths": ["/user/preferences/"]}}
{"file": "cloned/Phraseanet/resources/www/prod/js/jquery.main-prod.js", "endpoints": {"api_summary": "This code defines a REST API with the following endpoints:", "methods": ["GET", "POST"], "paths": ["/prod/query/", "/prod/query/<query>/"]}}
{"file": "cloned/flagr/browser/flagr-ui/src/router/index.js", "endpoints": {"api_summary": "This API provides a simple interface for retrieving and manipulating flag data. It includes endpoints for retrieving a list of all flags, retrieving a single flag by ID, and creating a new flag.", "methods": ["GET", "POST"], "paths": ["/flags", "/flags/:flagId"]}}
{"file": "cloned/flagr/swagger_gen/restapi/embedded_spec.go", "endpoints": {"api_summary": "Flagr is a feature flagging, A/B testing and dynamic configuration microservice. The base path for all the APIs is \"/api/v1\".", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/evaluation", "/evaluation/batch", "/export/eval_cache/json", "/export/sqlite", "/flags", "/flags/entity_types", "/flags/{flagID}", "/flags/{flagID}/enabled", "/flags/{flagID}/restore", "/flags/{flagID}/segments", "/flags/{flagID}/segments/reorder", "/flags/{flagID}/segments/{segmentID}", "/flags/{flagID}/segments/{segmentID}/constraints", "/flags/{flagID}/segments/{segmentID}/constraints/{constraintID}", "/flags/{flagID}/segments/{segmentID}/distributions", "/flags/{flagID}/snapshots", "/flags/{flagID}/tags", "/flags/{flagID}/tags/{tagID}", "/flags/{flagID}/variants", "/flags/{flagID}/variants/{variantID}", "/health", "/tags"]}}
{"file": "cloned/flagr/swagger_gen/restapi/doc.go", "endpoints": {"api_summary": "Flagr is a feature flagging, A/B testing, and dynamic configuration microservice. The base path for all the APIs is '/api/v1'.", "methods": ["GET", "POST"], "paths": ["/api/v1/users", "/api/v1/users/<built-in function id>"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/segment/create_segment_parameters.go", "endpoints": {"api_summary": "This API defines a segment for a flag in Flagr, a feature flag management system.", "methods": ["POST"], "paths": ["/flags/{flagID}/segments"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/segment/put_segment.go", "endpoints": {"api_summary": "The putSegment API is used to update a segment for a feature flag. It takes a flagID and a segmentID as parameters and returns the updated segment.", "methods": ["PUT"], "paths": ["/flags/{flagID}/segments/{segmentID}"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/segment/put_segments_reorder.go", "endpoints": {"api_summary": "The putSegmentsReorder API allows users to reorder the segments of a feature flag. This API is used to change the order in which the segments are evaluated, which can affect the behavior of the feature flag.", "methods": ["PUT"], "paths": ["/flags/{flagID}/segments/reorder"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/segment/put_segment_parameters.go", "endpoints": {"api_summary": "This API allows you to update a segment for a flag in Flagr.", "methods": ["PUT"], "paths": ["/flags/{flagID}/segments/{segmentID}"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/segment/find_segments.go", "endpoints": {"api_summary": "The FindSegments API allows users to retrieve a list of segments for a given flag. The API takes a flag ID as input and returns a list of segments for that flag.", "methods": ["GET"], "paths": ["/flags/{flagID}/segments"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/segment/put_segments_reorder_parameters.go", "endpoints": {"api_summary": "This API allows you to reorder segments for a flag.", "methods": ["PUT"], "paths": ["/flags/{flagID}/segments/reorder"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/segment/create_segment_urlbuilder.go", "endpoints": {"api_summary": "The API allows for the creation of segments for a given flag, and retrieval of information about those segments.", "methods": ["GET", "POST"], "paths": ["/flags/{flagID}/segments"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/segment/put_segments_reorder_urlbuilder.go", "endpoints": {"api_summary": "This API allows for the reordering of segments within a flag in the Feature Flag system.", "methods": ["PUT"], "paths": ["/flags/{flagID}/segments/reorder"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/segment/create_segment.go", "endpoints": {"api_summary": "The API allows for the creation of segments for feature flags. It provides a way to group users based on specific criteria and apply different variations of a feature to each segment.", "methods": ["POST"], "paths": ["/flags/{flagID}/segments"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/segment/delete_segment.go", "endpoints": {"api_summary": "The DeleteSegment API allows you to delete a segment from a feature flag. It takes the flag ID and segment ID as input and returns a response indicating whether the deletion was successful.", "methods": ["DELETE"], "paths": ["/flags/{flagID}/segments/{segmentID}"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/flag/put_flag.go", "endpoints": {"api_summary": "The put flag API allows users to update the status of a flag in the system. The API accepts a flag ID and a status update, and returns the updated flag object.", "methods": ["PUT"], "paths": ["/flags/{flagID}"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/flag/find_flags.go", "endpoints": {"api_summary": "The FindFlags API allows users to search for flags in the system. It takes a query parameter and returns a list of flags that match the query.", "methods": ["GET"], "paths": ["/flags/findFlags"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/flag/set_flag_enabled_parameters.go", "endpoints": {"api_summary": "This API allows you to set the enabled state of a flag in Flagr.", "methods": ["POST"], "paths": ["/flags/{flagID}/enabled"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/flag/get_flag_snapshots_urlbuilder.go", "endpoints": {"api_summary": "This API provides a way to retrieve flag snapshots for a given flag ID. It supports pagination and sorting.", "methods": ["GET"], "paths": ["/flags/{flagID}/snapshots"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/flag/restore_flag.go", "endpoints": {"api_summary": "The RestoreFlag API allows users to restore a flag that has been deleted. The API takes a flag ID as input and restores the flag if it exists and has been deleted.", "methods": ["PUT"], "paths": ["/flags/{flagID}/restore"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/flag/get_flag_entity_types_urlbuilder.go", "endpoints": {"api_summary": "This API provides a list of entity types that can be used to filter flags.", "methods": ["GET"], "paths": ["/flags/entity_types"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/flag/set_flag_enabled.go", "endpoints": {"api_summary": "This API allows for the management of feature flags, including setting the enabled status of a flag.", "methods": ["PUT"], "paths": ["/flags/{flagID}/enabled"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/flag/create_flag.go", "endpoints": {"api_summary": "The CreateFlag API allows users to create new flags in the system. It takes in a flag name, description, and a list of possible values, and returns the created flag object.", "methods": ["POST"], "paths": ["/flags"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/flag/restore_flag_urlbuilder.go", "endpoints": {"api_summary": "The API allows for the restoration of a flag by its ID. The API endpoint is /flags/{flagID}/restore, where {flagID} is the ID of the flag to be restored. The API accepts a GET request and returns a JSON object with the restored flag.", "methods": ["GET"], "paths": ["/flags/{flagID}/restore"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/flag/get_flag_snapshots.go", "endpoints": {"api_summary": "The GetFlagSnapshots API allows users to retrieve a list of snapshots for a given flag. The API takes a flag ID as input and returns a list of snapshots for that flag.", "methods": ["GET"], "paths": ["/flags/{flagID}/snapshots"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/flag/delete_flag.go", "endpoints": {"api_summary": "The DeleteFlag API allows users to delete a flag by its ID. The API takes a single parameter, the flag ID, and returns a 204 No Content response if the flag is successfully deleted.", "methods": ["DELETE"], "paths": ["/flags/{flagID}"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/flag/get_flag_snapshots_responses.go", "endpoints": {"api_summary": "This API provides a list of flag snapshots.", "methods": ["GET"], "paths": ["/flag/snapshots"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/flag/get_flag_entity_types_responses.go", "endpoints": {"api_summary": "This API provides a list of all the FlagEntityTypes in the system.", "methods": ["GET"], "paths": ["/flag/entity_types"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/flag/get_flag_entity_types.go", "endpoints": {"api_summary": "The getFlagEntityTypes API retrieves a list of entity types that can be used to filter flags. The API returns a list of entity types, each with a unique ID and a description of the entity type.", "methods": ["GET"], "paths": ["/flags/entity_types"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/flag/get_flag_snapshots_parameters.go", "endpoints": {"api_summary": "This API allows users to retrieve flag snapshots for a given flag ID. The API returns a list of flag snapshots, each containing information about the flag at a specific point in time.", "methods": ["GET"], "paths": ["/flags/{flagID}/snapshots"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/flag/get_flag.go", "endpoints": {"api_summary": "The GetFlag API allows users to retrieve a flag by its ID. The API takes a single parameter, the flag ID, and returns the flag object if it exists.", "methods": ["GET"], "paths": ["/flags/{flagID}"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/flag/find_flags_urlbuilder.go", "endpoints": {"api_summary": "This API allows users to search for flags based on various criteria, such as description, enabled status, and tags. It also allows users to retrieve a list of all flags, or to retrieve a specific flag by its ID.", "methods": ["GET"], "paths": ["/flags", "/flags/<built-in function id>"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/health/get_health_urlbuilder.go", "endpoints": {"api_summary": "The health API provides a simple endpoint to check the health of the service.", "methods": ["GET"], "paths": ["/health"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/health/get_health.go", "endpoints": {"api_summary": "The Flagr health check API allows you to check if the service is running and responding to requests. It returns a simple JSON object with a status code and a message indicating whether the service is healthy or not.", "methods": ["GET"], "paths": ["/health"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/constraint/create_constraint.go", "endpoints": {"api_summary": "The API allows for the creation of constraints for a given flag and segment in a feature flag system.", "methods": ["POST"], "paths": ["/flags/{flagID}/segments/{segmentID}/constraints"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/constraint/find_constraints.go", "endpoints": {"api_summary": "The FindConstraints API allows users to retrieve a list of constraints for a given flag and segment.", "methods": ["GET"], "paths": ["/flags/{flagID}/segments/{segmentID}/constraints"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/constraint/put_constraint.go", "endpoints": {"api_summary": "The put constraint API allows you to update a constraint for a specific flag and segment in the feature flag system.", "methods": ["PUT"], "paths": ["/flags/{flagID}/segments/{segmentID}/constraints/{constraintID}"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/constraint/find_constraints_urlbuilder.go", "endpoints": {"api_summary": "The API defines a way to retrieve constraints for a given flag and segment in a feature flag system.", "methods": ["GET"], "paths": ["/flags/{flagID}/segments/{segmentID}/constraints"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/constraint/delete_constraint.go", "endpoints": {"api_summary": "The DeleteConstraint API allows you to delete a constraint from a segment in a feature flag. It takes the flag ID, segment ID, and constraint ID as parameters and returns a 204 No Content response if the deletion is successful.", "methods": ["DELETE"], "paths": ["/flags/{flagID}/segments/{segmentID}/constraints/{constraintID}"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/distribution/put_distributions_parameters.go", "endpoints": {"api_summary": "This API allows you to manage distributions for a flag in a segment. It allows you to create, update, and delete distributions, as well as retrieve a list of all distributions for a segment.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/distributions", "/distributions/<distribution_id>"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/distribution/put_distributions.go", "endpoints": {"api_summary": "This API allows for the management of distributions for a given flag and segment. It provides endpoints for creating, updating, and deleting distributions, as well as for retrieving a list of all distributions for a given flag and segment.", "methods": ["PUT"], "paths": ["/flags/{flagID}/segments/{segmentID}/distributions"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/distribution/find_distributions.go", "endpoints": {"api_summary": "The API allows for the retrieval of distributions for a given flag and segment.", "methods": ["GET"], "paths": ["/flags/{flagID}/segments/{segmentID}/distributions"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/evaluation/post_evaluation.go", "endpoints": {"api_summary": "The evaluation API allows users to post evaluations for a given repository. The API returns a list of evaluations for a given repository.", "methods": ["POST"], "paths": ["/evaluation"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/evaluation/post_evaluation_batch.go", "endpoints": {"api_summary": "The evaluation API allows for batch evaluation of multiple models on a single input. It takes a JSON payload containing the input data and the models to evaluate, and returns a JSON object with the evaluation results.", "methods": ["POST"], "paths": ["/evaluation/batch"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/evaluation/post_evaluation_batch_urlbuilder.go", "endpoints": {"api_summary": "The evaluation API allows for batch evaluation of multiple requests in a single call.", "methods": ["POST"], "paths": ["/evaluation/batch"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/tag/delete_tag.go", "endpoints": {"api_summary": "The DeleteTag API allows users to delete a tag from a flag in the system.", "methods": ["DELETE"], "paths": ["/flags/{flagID}/tags/{tagID}"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/tag/find_all_tags.go", "endpoints": {"api_summary": "The FindAllTags API allows users to retrieve a list of all tags in the system.", "methods": ["GET"], "paths": ["/tags"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/tag/find_tags.go", "endpoints": {"api_summary": "The FindTags API allows users to retrieve a list of tags associated with a given flag ID.", "methods": ["GET"], "paths": ["/flags/{flagID}/tags"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/tag/find_all_tags_responses.go", "endpoints": {"api_summary": "This API allows users to retrieve a list of all tags in the system.", "methods": ["GET"], "paths": ["/tags"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/tag/create_tag.go", "endpoints": {"api_summary": "The CreateTag API allows users to create a new tag for a specific flag in the system. The API takes in a flag ID and a tag name as input, and returns the created tag object.", "methods": ["POST"], "paths": ["/flags/{flagID}/tags"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/export/get_export_sqlite.go", "endpoints": {"api_summary": "This API provides a way to export the database in SQLite format, which can be used for backup or transfer to another system.", "methods": ["GET"], "paths": ["/export/sqlite"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/export/get_export_eval_cache_json.go", "endpoints": {"api_summary": "This API provides a way to export the evaluation cache in JSON format.", "methods": ["GET"], "paths": ["/export/eval_cache/json"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/export/get_export_sqlite_urlbuilder.go", "endpoints": {"api_summary": "This API provides a way to export data from the system in SQLite format.", "methods": ["GET"], "paths": ["/export/sqlite"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/export/get_export_eval_cache_json_urlbuilder.go", "endpoints": {"api_summary": "The API provides a single endpoint for retrieving the evaluation cache in JSON format.", "methods": ["GET"], "paths": ["/export/eval_cache/json"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/export/get_export_eval_cache_json_parameters.go", "endpoints": {"api_summary": "This API provides a way to retrieve the evaluation cache for a given export in JSON format.", "methods": ["GET"], "paths": ["/export/eval_cache/<export_id>.json"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/export/get_export_sqlite_responses.go", "endpoints": {"api_summary": "This API allows for the export of data from the system in SQLite format.", "methods": ["GET"], "paths": ["/export/sqlite"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/export/get_export_eval_cache_json_responses.go", "endpoints": {"api_summary": "This API provides a way to export the evaluation cache of a Flagr instance in JSON format.", "methods": ["GET"], "paths": ["/export/eval_cache.json"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/variant/put_variant.go", "endpoints": {"api_summary": "The put variant API allows you to update a variant for a given flag. The API takes in a flag ID and a variant ID, and returns the updated variant.", "methods": ["PUT"], "paths": ["/flags/{flagID}/variants/{variantID}"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/variant/find_variants_responses.go", "endpoints": {"api_summary": "This API defines a set of endpoints for managing variants in a system. It includes endpoints for creating, retrieving, updating, and deleting variants, as well as endpoints for searching and filtering variants.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/variants", "/variants/<variant_id>", "/variants/search", "/variants/filter"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/variant/delete_variant.go", "endpoints": {"api_summary": "The DeleteVariant API allows you to delete a variant from a feature flag. The API takes the flag ID and variant ID as input and returns a response indicating whether the deletion was successful.", "methods": ["DELETE"], "paths": ["/flags/{flagID}/variants/{variantID}"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/variant/find_variants.go", "endpoints": {"api_summary": "The FindVariants API allows users to retrieve a list of variants for a given flag ID. The API takes a flag ID as input and returns a list of variants for that flag.", "methods": ["GET"], "paths": ["/flags/{flagID}/variants"]}}
{"file": "cloned/flagr/swagger_gen/restapi/operations/variant/create_variant.go", "endpoints": {"api_summary": "The CreateVariant API allows you to create a new variant for a feature flag. The API takes in a flag ID and a variant object, and returns the created variant.", "methods": ["POST"], "paths": ["/flags/{flagID}/variants"]}}
{"file": "cloned/flagr/pkg/handler/handler.go", "endpoints": {"api_summary": "This API defines endpoints for managing and evaluating feature flags. It includes endpoints for creating, retrieving, updating, and deleting flags, as well as endpoints for evaluating the value of a flag for a given entity.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/flags", "/flags/<flag_id>", "/evaluation", "/evaluation/batch"]}}
{"file": "cloned/flagr/pkg/handler/crud_flag_creation.go", "endpoints": {"api_summary": "This API defines a single endpoint for creating a new flag, which is a feature flag that can be used to control the behavior of a system. The endpoint accepts a JSON payload with the flag details and creates a new flag in the system.", "methods": ["POST"], "paths": ["/flags"]}}
{"file": "cloned/flagr/pkg/handler/crud_test.go", "endpoints": {"api_summary": "This API provides CRUD operations for various entities, including flags, segments, constraints, variants, and tags.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/flags", "/flags/{flagID}", "/flags/{flagID}/segments", "/flags/{flagID}/segments/{segmentID}", "/flags/{flagID}/constraints", "/flags/{flagID}/constraints/{constraintID}", "/flags/{flagID}/variants", "/flags/{flagID}/variants/{variantID}", "/flags/{flagID}/tags", "/flags/{flagID}/tags/{tagID}"]}}
{"file": "cloned/ashirt-server/backend/server/shared_routes.go", "endpoints": {"api_summary": "The API provides endpoints for managing operations, tags, and evidence in an Ashirt system. It allows for creating, reading, updating, and deleting operations, as well as creating, reading, and deleting tags and evidence associated with operations.", "methods": ["GET", "POST"], "paths": ["/operations", "/operations/{operation_slug}/tags", "/operations/{operation_slug}/evidence"]}}
{"file": "cloned/ashirt-server/backend/server/api.go", "endpoints": {"api_summary": "The API provides endpoints for managing evidence in an operation, including creating, reading, updating, and deleting evidence, as well as retrieving metadata about the evidence.", "methods": ["GET", "POST", "PUT"], "paths": ["/checkconnection", "/operations/{operation_slug}/evidence/{evidence_uuid}/{type:media|preview}", "/operations/{operation_slug}/evidence", "/operations/{operation_slug}/evidence/{evidence_uuid}/metadata"]}}
{"file": "cloned/ashirt-server/backend/server/web.go", "endpoints": {"api_summary": "This API allows users to perform CRUD operations on users, user groups, and operations.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users", "/usergroups", "/operations"]}}
{"file": "cloned/ashirt-server/backend/bin/api/api.go", "endpoints": {"api_summary": "This API provides a RESTful interface for interacting with a database and a content store. It supports various HTTP methods such as GET, POST, PUT, and DELETE to perform CRUD operations on the data stored in the database and the content store.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/<resource>", "/api/<resource>/<id>", "/api/<resource>/<id>/<subresource>", "/api/<resource>/<id>/<subresource>/<subid>"]}}
{"file": "cloned/ashirt-server/backend/integration/querying_evidence_test.go", "endpoints": {"api_summary": "This API allows users to perform CRUD operations on operations, tags, and evidence in an Ashirt system.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/web/operations", "/web/operations/op/queries", "/web/operations/op/tags", "/web/operations/op/evidence"]}}
{"file": "cloned/ashirt-server/backend/integration/api_test.go", "endpoints": {"api_summary": "This API provides endpoints for managing operations and evidence in an Ashirt system. It allows users to create, read, update, and delete operations and evidence, as well as retrieve information about operations and evidence.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/api/operations", "/api/operations/<operation_id>", "/api/operations/<operation_id>/evidence", "/api/operations/<operation_id>/evidence/<evidence_id>"]}}
{"file": "cloned/ashirt-server/backend/authschemes/recoveryauth/recovery_auth.go", "endpoints": {"api_summary": "The RecoveryAuthScheme API provides endpoints for generating and managing recovery codes for user authentication. It also includes endpoints for registering new users and logging in with a recovery code.", "methods": ["POST", "GET", "DELETE"], "paths": ["/generate", "/generateemail", "/admin/register", "/login", "/expired", "/metrics"]}}
{"file": "cloned/ashirt-server/backend/authschemes/localauth/local_auth.go", "endpoints": {"api_summary": "This API defines endpoints for user authentication and password management using local authentication.", "methods": ["POST", "GET", "PUT", "DELETE"], "paths": ["/register", "/login", "/login/resetpassword", "/password", "/admin/password", "/admin/register", "/link", "/totp", "/totp/generate", "/totp/totp", "/totp/delete"]}}
{"file": "cloned/ashirt-server/backend/services/api_key.go", "endpoints": {"api_summary": "This API defines endpoints for creating, deleting, and listing API keys for a user.", "methods": ["POST", "DELETE", "GET"], "paths": ["/api/keys", "/api/keys/<access_key>", "/api/keys/<user_slug>"]}}
{"file": "cloned/ashirt-server/frontend/src/authschemes/webauthn/services.ts", "endpoints": {"api_summary": "This API provides endpoints for managing WebAuthN credentials for authentication and authorization. It allows users to register, login, link, and manage their credentials, as well as list and delete existing credentials.", "methods": ["POST", "GET", "PUT", "DELETE"], "paths": ["/auth/webauthn/register/begin", "/auth/webauthn/register/finish", "/auth/webauthn/login/begin", "/auth/webauthn/login/finish", "/auth/webauthn/link/begin", "/auth/webauthn/link/finish", "/auth/webauthn/credential/add/begin", "/auth/webauthn/credential/add/finish", "/auth/webauthn/credentials", "/auth/webauthn/credential/<credentialId>", "/auth/webauthn/credential"]}}
{"file": "cloned/ashirt-server/frontend/src/authschemes/recovery/services.ts", "endpoints": {"api_summary": "The API allows for the generation of recovery emails for users who have forgotten their passwords. It takes in a user's email address as a parameter and sends a recovery email to that address.", "methods": ["POST"], "paths": ["/auth/recovery/generateemail"]}}
{"file": "cloned/ashirt-server/frontend/src/authschemes/local/services.ts", "endpoints": {"api_summary": "This API provides endpoints for user authentication and management, including login, registration, password reset, and two-factor authentication.", "methods": ["POST", "GET", "PUT", "DELETE"], "paths": ["/auth/local/login", "/auth/local/register", "/auth/local/login/resetpassword", "/auth/local/password", "/auth/local/link", "/auth/local/totp", "/auth/local/totp/generate", "/auth/local/totp/set", "/auth/local/totp/delete", "/auth/local/login/totp"]}}
{"file": "cloned/ashirt-server/frontend/src/services/users.ts", "endpoints": {"api_summary": "The API provides endpoints for listing users, listing users for admin view, and listing evidence creators. The endpoints allow for filtering and pagination of results.", "methods": ["GET", "POST"], "paths": ["/users", "/users/<built-in function id>", "/evidence_creators"]}}
{"file": "cloned/ashirt-server/frontend/src/services/api_keys.ts", "endpoints": {"api_summary": "The API allows for the creation, retrieval, and deletion of API keys for users. It also provides a way to list all API keys for a given user.", "methods": ["GET", "POST", "DELETE"], "paths": ["/users/<userSlug>/api-keys", "/users/<userSlug>/api-keys/<accessKey>"]}}
{"file": "cloned/ashirt-server/frontend/src/services/evidence.ts", "endpoints": {"api_summary": "This API provides endpoints for managing evidence in a security operation. It allows for creating, reading, updating, and deleting evidence, as well as running service workers for evidence and managing findings associated with evidence.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/evidence", "/evidence/<evidenceUuid>", "/evidence/<evidenceUuid>/metadata", "/evidence/<evidenceUuid>/service-workers", "/evidence/<evidenceUuid>/findings"]}}
{"file": "cloned/ashirt-server/frontend/src/services/queries.ts", "endpoints": {"api_summary": "This API provides endpoints for managing saved queries for a specific operation. It allows for listing, creating, updating, and deleting saved queries, as well as retrieving a specific saved query by ID.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/saved_queries", "/saved_queries/<operationSlug>", "/saved_queries/<operationSlug>/<queryId>"]}}
{"file": "cloned/ashirt-server/frontend/src/services/findings.ts", "endpoints": {"api_summary": "This API provides endpoints for managing findings and evidence in a security assessment operation. It allows for creating, reading, updating, and deleting findings and evidence, as well as listing and searching for findings.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/findings", "/findings/<findingUuid>", "/findings/<findingUuid>/evidence", "/findings/<findingUuid>/evidence/<evidenceUuid>", "/findingCategories", "/findingCategories/<findingCategoryId>"]}}
{"file": "cloned/ashirt-server/frontend/src/services/user_groups.ts", "endpoints": {"api_summary": "This API provides endpoints for managing user groups, including creating, deleting, and modifying user groups, as well as listing user groups and their associated users.", "methods": ["GET", "POST", "DELETE", "PUT"], "paths": ["/user-groups", "/user-groups/<user-group-slug>", "/user-groups/<user-group-slug>/users"]}}
{"file": "cloned/ashirt-server/frontend/src/services/user.ts", "endpoints": {"api_summary": "This API provides endpoints for managing user profiles, authentication schemes, and recovery codes. It also includes endpoints for creating headless users and retrieving TOTP for users.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users", "/users/<built-in function id>", "/users/<built-in function id>/auth-schemes", "/users/<built-in function id>/recovery-codes", "/users/<built-in function id>/totp"]}}
{"file": "cloned/machine-learning/interface/views_web.py", "endpoints": {"api_summary": "This API provides endpoints for data loading, login, logout, registration, and retrieving collections, models, features, and predictions.", "methods": ["POST", "GET"], "paths": ["/", "/load-data", "/login", "/logout", "/register", "/retrieve-collections", "/retrieve-sv-model", "/retrieve-sv-features", "/retrieve-prediction-titles", "/retrieve-prediction", "/save-prediction"]}}
{"file": "cloned/machine-learning/test/live_server/3_programmatic_interface/dataset_url/pytest_svm_dataset_url.py", "endpoints": {"api_summary": "This API provides a programmatic interface for loading data into a SQL database and generating models using the Support Vector Machine (SVM) algorithm. It also provides a method for making predictions using a trained SVM model.", "methods": ["POST"], "paths": ["/load-data"]}}
{"file": "cloned/machine-learning/test/live_server/3_programmatic_interface/file_upload/pytest_svm_file_upload.py", "endpoints": {"api_summary": "This API provides endpoints for data manipulation and model generation for a machine learning model. It includes endpoints for data upload, data append, model generation, and model prediction.", "methods": ["POST"], "paths": ["/load-data"]}}
{"file": "cloned/machine-learning/test/live_server/3_programmatic_interface/results/pytest_2_svr_prediction.py", "endpoints": {"api_summary": "This API provides endpoints for saving, retrieving, and retrieving titles of SVR predictions. It also includes a method for retrieving a sample JSON dataset.", "methods": ["POST"], "paths": ["/save-prediction", "/retrieve-prediction", "/retrieve-prediction-titles"]}}
{"file": "cloned/machine-learning/test/live_server/3_programmatic_interface/results/pytest_1_svm_prediction.py", "endpoints": {"api_summary": "This API provides endpoints for saving, retrieving, and retrieving titles of SVM predictions.", "methods": ["POST"], "paths": ["/save-prediction", "/retrieve-prediction", "/retrieve-prediction-titles"]}}
{"file": "cloned/Hotmaps-toolbox-service/pytest_suit/routes/uploads/test_exportCsvHectare.py", "endpoints": {"api_summary": "This API allows users to upload and export data in CSV format for specific layers and years. The API also supports the retrieval of information about the industrial database, including emissions, subsector, and excess heat.", "methods": ["POST"], "paths": ["/upload/export/csv/hectare"]}}
{"file": "cloned/Hotmaps-toolbox-service/api/app/api_v1/stats.py", "endpoints": {"api_summary": "This API provides information on statistics for specific layers, area, and year. It also provides information on the energy mix for specific NUTS and LAU.", "methods": ["GET", "POST"], "paths": ["/stats/layers/nuts-lau", "/stats/layers/hectares", "/stats/energy-mix/nuts-lau", "/stats/personal-layers"]}}
{"file": "cloned/Hotmaps-toolbox-service/api/app/api_v1/heat_load_profile.py", "endpoints": {"api_summary": "This API provides information on heat load profiles for different areas and years.", "methods": ["POST"], "paths": ["/heat-load-profile/duration-curve/nuts-lau", "/heat-load-profile/duration-curve/hectares", "/heat-load-profile/hectares", "/heat-load-profile/nuts-lau"]}}
{"file": "cloned/Hotmaps-toolbox-service/api/app/api_v1/snapshot.py", "endpoints": {"api_summary": "This API provides endpoints for managing snapshots for a connected user. It allows for adding, loading, deleting, and updating snapshots, as well as listing all snapshots for a user.", "methods": ["POST", "GET", "DELETE"], "paths": ["/snapshot/add", "/snapshot/load", "/snapshot/delete", "/snapshot/update", "/snapshot/list"]}}
{"file": "cloned/Hotmaps-toolbox-service/api/app/decorators/restplus.py", "endpoints": {"api_summary": "The HotMaps Main API serves data and computations to the app. It handles various types of errors, including RequestException, ParameterException, HugeRequestException, IntersectionException, NotEnoughPointsException, UserExistingException, ActivationException, SnapshotNotExistingException, WrongCredentialException, UserUnidentifiedException, UserDoesntOwnUploadsException, UploadFileNotExistingException, NotEnoughSpaceException, UploadNotExistingException, UserNotActivatedException, and TimeOutException.", "methods": ["GET", "POST"], "paths": ["/users", "/users/<built-in function id>"]}}
{"file": "cloned/kapua/commons-rest/filters/src/main/java/org/eclipse/kapua/commons/rest/filters/CORSResponseFilter.java", "endpoints": {"api_summary": "This API is a CORS (Cross-Origin Resource Sharing) filter implementation that handles CORS requests per-scope basis. It allows GET, POST, DELETE, and PUT methods and allows specific headers. The filter also checks the origin of the request and allows it if it matches at least one defined endpoint.", "methods": ["GET", "POST", "DELETE", "PUT"], "paths": ["/", "/{path}"]}}
{"file": "cloned/kapua/commons-rest/errors/src/main/java/org/eclipse/kapua/commons/rest/errors/KapuaExceptionMapper.java", "endpoints": {"api_summary": "The KapuaExceptionMapper class provides a way to map KapuaExceptions to HTTP responses. It is used to handle exceptions that occur during the execution of REST API endpoints.", "methods": ["GET", "POST", "PUT", "DELETE", "HEAD", "OPTIONS", "TRACE", "CONNECT"], "paths": ["/users", "/users/<built-in function id>", "/users/<built-in function id>/<built-in function id>"]}}
{"file": "cloned/kapua/commons-rest/errors/src/main/java/org/eclipse/kapua/commons/rest/errors/KapuaDuplicatePasswordCredentialExceptionMapper.java", "endpoints": {"api_summary": "The KapuaDuplicatePasswordCredentialExceptionMapper class is an exception mapper that maps DuplicatedPasswordCredentialException to a HTTP response with status code 409 (Conflict) and a JSON body containing information about the exception.", "methods": ["POST"], "paths": ["/users/<built-in function id>"]}}
{"file": "cloned/kapua/plug-ins/sso/openid-connect/provider/src/main/java/org/eclipse/kapua/plugin/sso/openid/provider/OpenIDUtils.java", "endpoints": {"api_summary": "The OpenIDUtils class provides utility methods for retrieving URIs from the Well-Known OpenID Configuration and for retrieving the OpenID Connect discovery endpoint (the provider's Well-Known Configuration Endpoint).", "methods": ["GET"], "paths": ["/openid-configuration"]}}
{"file": "cloned/kapua/plug-ins/sso/openid-connect/api/src/main/java/org/eclipse/kapua/plugin/sso/openid/OpenIDService.java", "endpoints": {"api_summary": "The OpenID Connect Single Sign On service interface provides endpoints for login, logout, and token retrieval. It also provides a method to get the user's information using the access token.", "methods": ["GET", "POST"], "paths": ["/login", "/logout", "/tokens", "/userinfo"]}}
{"file": "cloned/kapua/job-engine/api/src/main/java/org/eclipse/kapua/job/engine/queue/QueuedJobExecutionService.java", "endpoints": {"api_summary": "The QueuedJobExecutionService API provides methods to manage QueuedJobExecution objects, including creating, updating, finding, listing, and deleting them.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/queuedJobExecutions", "/queuedJobExecutions/<id>", "/queuedJobExecutions/query"]}}
{"file": "cloned/kapua/job-engine/jbatch/src/main/java/org/eclipse/kapua/job/engine/queue/jbatch/QueuedJobExecutionServiceImpl.java", "endpoints": {"api_summary": "The QueuedJobExecutionServiceImpl class provides an implementation of the QueuedJobExecutionService interface, which allows for the creation, update, and retrieval of queued job executions. It also provides methods for querying and counting queued job executions, as well as deleting them.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/queuedJobExecutions", "/queuedJobExecutions/<queuedJobExecutionId>", "/queuedJobExecutions/query", "/queuedJobExecutions/count"]}}
{"file": "cloned/kapua/job-engine/app/resources/src/main/java/org/eclipse/kapua/job/engine/app/resources/JobEngineResource.java", "endpoints": {"api_summary": "The JobEngineResource API provides endpoints for managing and executing jobs in the Kapua system.", "methods": ["GET", "POST"], "paths": ["/", "/clean-data/{scopeId}/{jobId}", "/is-running/{scopeId}/{jobId}", "/is-running/{scopeId}", "/resume-execution/{scopeId}/{jobId}/{executionId}", "/start/{scopeId}/{jobId}", "/start-with-options/{scopeId}/{jobId}", "/stop/{scopeId}/{jobId}", "/stop-execution/{scopeId}/{jobId}/{executionId}"]}}
{"file": "cloned/kapua/client/security/src/main/java/org/eclipse/kapua/client/security/ServiceClient.java", "endpoints": {"api_summary": "The Security service provides endpoints for broker connect and disconnect logic, as well as retrieving entity information.", "methods": ["GET", "POST"], "paths": ["/brokerConnect", "/brokerDisconnect", "/getEntity"]}}
{"file": "cloned/kapua/client/security/src/main/java/org/eclipse/kapua/client/security/amqp/ClientAMQP.java", "endpoints": {"api_summary": "The AMQP client implementation provides a way to send and receive messages using the AMQP protocol. It can be used to connect to a message broker and send or receive messages from a queue or topic.", "methods": ["POST", "GET"], "paths": ["/amqp/send", "/amqp/receive"]}}
{"file": "cloned/kapua/transport/mqtt/src/main/java/org/eclipse/kapua/transport/mqtt/MqttResponseCallback.java", "endpoints": {"api_summary": "The MqttResponseCallback class implements the MqttCallback interface and is used in the transport layer of Kapua to receive responses from devices when a request is sent to the device. It offers the capability of receiving one or more responses.", "methods": ["messageArrived", "deliveryComplete", "connectionLost"], "paths": ["/org.eclipse.kapua.transport.mqtt.MqttResponseCallback"]}}
{"file": "cloned/kapua/transport/mqtt/src/main/java/org/eclipse/kapua/transport/mqtt/pooling/PooledMqttClientFactory.java", "endpoints": {"api_summary": "The PooledMqttClientFactory class creates and manages a pool of MQTT clients for the MqttClientPool. It creates new clients and connects them to the MQTT broker, and it also validates and destroys clients in the pool.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/pooledMqttClientFactory", "/pooledMqttClientFactory/create", "/pooledMqttClientFactory/wrap", "/pooledMqttClientFactory/validateObject", "/pooledMqttClientFactory/destroyObject"]}}
{"file": "cloned/kapua/transport/mqtt/src/main/java/org/eclipse/kapua/transport/message/mqtt/MqttMessage.java", "endpoints": {"api_summary": "This API is a message implementation for the MQTT transport protocol. It defines a message object that can be used to send and receive messages over an MQTT connection.", "methods": ["GET", "POST"], "paths": ["/org/eclipse/kapua/transport/message/mqtt/MqttMessage"]}}
{"file": "cloned/kapua/simulator-kura/src/main/java/org/eclipse/kapua/kura/simulator/app/deploy/AbstractDeployApplication.java", "endpoints": {"api_summary": "This API provides endpoints for managing and deploying bundles and packages in a Kura-based system.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/bundles", "/bundles/<bundleId>", "/packages", "/packages/<packageId>"]}}
{"file": "cloned/kapua/translator/kapua/kura/src/main/java/org/eclipse/kapua/translator/kapua/kura/AbstractTranslatorKapuaKura.java", "endpoints": {"api_summary": "This API translates Kapua messages to Kura requests and vice versa.", "methods": ["GET", "POST"], "paths": ["/kapua/kura/translate"]}}
{"file": "cloned/kapua/translator/kapua/kura/src/main/java/org/eclipse/kapua/translator/kapua/kura/TranslatorAppCommandKapuaKura.java", "endpoints": {"api_summary": "This API allows for the management of device commands, including the ability to execute commands, retrieve command status, and manage command settings.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/commands", "/commands/<command_id>", "/commands/<command_id>/status", "/commands/<command_id>/settings"]}}
{"file": "cloned/kapua/translator/kapua/kura/src/main/java/org/eclipse/kapua/translator/kapua/kura/TranslatorAppConfigurationKapuaKura.java", "endpoints": {"api_summary": "This API is responsible for translating device configurations from the Kapua format to the Kura format. It provides endpoints for retrieving and updating device configurations, as well as for retrieving device definitions.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/configurations", "/configurations/<configuration_id>", "/snapshots", "/snapshots/<snapshot_id>"]}}
{"file": "cloned/kapua/translator/kapua/kura/src/main/java/org/eclipse/kapua/translator/kapua/kura/TranslatorAppAssetKapuaKura.java", "endpoints": {"api_summary": "The TranslatorAppAssetKapuaKura class is a translator implementation that converts AssetRequestMessage to KuraRequestMessage. It translates the channel and payload of the AssetRequestMessage to the corresponding KuraRequestChannel and KuraRequestPayload.", "methods": ["GET", "POST"], "paths": ["/assets", "/assets/<asset_id>", "/assets/<asset_id>/channels", "/assets/<asset_id>/channels/<channel_id>"]}}
{"file": "cloned/kapua/translator/kapua/kura/src/main/java/org/eclipse/kapua/translator/kapua/kura/TranslatorAppSnapshotKapuaKura.java", "endpoints": {"api_summary": "This API provides a translator implementation from SnapshotRequestMessage to KuraRequestMessage, which is used to manage snapshots of the application.", "methods": ["GET", "POST", "PUT", "DELETE", "OPTIONS"], "paths": ["/snapshots", "/snapshots/<snapshotId>", "/snapshots/rollback"]}}
{"file": "cloned/kapua/translator/kapua/kura/src/main/java/org/eclipse/kapua/translator/kapua/kura/inventory/TranslatorAppInventoryBundleExecKapuaKura.java", "endpoints": {"api_summary": "This API is responsible for managing device inventory bundles in the Kura application. It allows for starting and stopping inventory bundles, as well as retrieving information about the bundles.", "methods": ["GET", "POST"], "paths": ["/inventory/bundles", "/inventory/bundles/<bundle_id>", "/inventory/bundles/<bundle_id>/start", "/inventory/bundles/<bundle_id>/stop"]}}
{"file": "cloned/kapua/translator/kapua/kura/src/main/java/org/eclipse/kapua/translator/kapua/kura/inventory/TranslatorAppInventoryContainerExecKapuaKura.java", "endpoints": {"api_summary": "This API is responsible for managing the inventory of devices in the system. It allows for the creation, retrieval, update, and deletion of device inventory containers, as well as the execution of inventory container actions.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/inventory/containers", "/inventory/containers/<container_id>", "/inventory/containers/<container_id>/actions/<action_id>"]}}
{"file": "cloned/kapua/translator/kapua/kura/src/main/java/org/eclipse/kapua/translator/kapua/kura/inventory/TranslatorAppInventoryEmptyKapuaKura.java", "endpoints": {"api_summary": "The TranslatorAppInventoryEmptyKapuaKura class is a translator implementation that converts an InventoryEmptyRequestMessage to a KuraRequestMessage. It defines a REST API endpoint for retrieving inventory information for a specific application.", "methods": ["GET"], "paths": ["/inventory/app/<app_id>/<app_version>"]}}
{"file": "cloned/kapua/translator/kapua/kura/src/main/java/org/eclipse/kapua/translator/kapua/kura/keystore/AbstractTranslatorAppKeystoreKapuaKura.java", "endpoints": {"api_summary": "This API provides endpoints for managing keystores and their entries in a Kura application.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/keystores", "/keystores/entries", "/keystores/entries/entry", "/keystores/entries/certificate", "/keystores/entries/keypair", "/keystores/entries/csr"]}}
{"file": "cloned/kapua/translator/kapua/kura/src/main/java/org/eclipse/kapua/translator/kura/kapua/TranslatorAppBundleKuraKapua.java", "endpoints": {"api_summary": "This API translates Kura response messages to Kapua bundle response messages.", "methods": ["GET", "POST"], "paths": ["/bundles"]}}
{"file": "cloned/kapua/translator/kapua/kura/src/main/java/org/eclipse/kapua/translator/kura/kapua/TranslatorAppNotifyKuraKapua.java", "endpoints": {"api_summary": "This API translates Kura notification messages to Kapua notification messages.", "methods": ["GET", "POST"], "paths": ["/kura/kapua"]}}
{"file": "cloned/kapua/translator/kapua/kura/src/main/java/org/eclipse/kapua/translator/kura/kapua/TranslatorAppPackageKuraKapua.java", "endpoints": {"api_summary": "This API is responsible for translating Kura response messages to Kapua package response messages.", "methods": ["GET", "POST"], "paths": ["/kura/kapua/packages"]}}
{"file": "cloned/kapua/translator/kapua/kura/src/main/java/org/eclipse/kapua/translator/kura/kapua/TranslatorLifeBirthKuraKapua.java", "endpoints": {"api_summary": "This API translates Kura birth messages to Kapua birth messages.", "methods": ["POST"], "paths": ["/translator/kura/kapua/birth"]}}
{"file": "cloned/kapua/translator/kapua/kura/src/main/java/org/eclipse/kapua/translator/kura/kapua/TranslatorAppSnapshotKuraKapua.java", "endpoints": {"api_summary": "This API translates Kura snapshot IDs to device snapshots.", "methods": ["GET", "POST"], "paths": ["/snapshots"]}}
{"file": "cloned/kapua/translator/kapua/kura/src/main/java/org/eclipse/kapua/translator/kura/kapua/TranslatorLifeDisconnectKuraKapua.java", "endpoints": {"api_summary": "This API translates Kura disconnect messages to Kapua disconnect messages.", "methods": ["POST"], "paths": ["/kura/disconnect"]}}
{"file": "cloned/kapua/translator/kapua/kura/src/main/java/org/eclipse/kapua/translator/kura/kapua/inventory/TranslatorAppInventoryNoContentKuraKapua.java", "endpoints": {"api_summary": "The TranslatorAppInventoryNoContentKuraKapua API is a RESTful API that allows clients to manage the inventory of devices in a Kura-based system. It provides endpoints for creating, reading, updating, and deleting device inventory records, as well as endpoints for querying and searching the inventory.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/inventory", "/inventory/<device_id>", "/inventory/query", "/inventory/search"]}}
{"file": "cloned/kapua/translator/kapua/kura/src/main/java/org/eclipse/kapua/translator/kura/kapua/keystore/AbstractTranslatorAppKeystoreKuraKapua.java", "endpoints": {"api_summary": "This API provides a way to manage keystores and keystore items for devices in a Kura network.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/keystores", "/keystores/<keystore_id>", "/keystores/<keystore_id>/items", "/keystores/<keystore_id>/items/<item_id>"]}}
{"file": "cloned/kapua/translator/kapua/kura/src/main/java/org/eclipse/kapua/translator/kura/kapua/keystore/TranslatorAppKeystoreCsrKuraKapua.java", "endpoints": {"api_summary": "This API is responsible for managing the keystore of a device. It allows for the creation, retrieval, and deletion of keystore entries, as well as the generation of CSRs (Certificate Signing Requests).", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/keystore/entries", "/keystore/entries/<entry_id>", "/keystore/entries/csr"]}}
{"file": "cloned/kapua/translator/kura/jms/src/main/java/org/eclipse/kapua/translator/jms/kura/event/AbstractTranslatorEventJmsKura.java", "endpoints": {"api_summary": "This API defines a translator for JMS messages to Device Management Event messages.", "methods": ["GET", "POST"], "paths": ["/device-management/events"]}}
{"file": "cloned/kapua/translator/kura/mqtt/src/main/java/org/eclipse/kapua/translator/kura/mqtt/TranslatorRequestKuraMqtt.java", "endpoints": {"api_summary": "This API is a translator implementation from KuraRequestMessage to MqttMessage. It translates KuraRequestMessage to MqttMessage and generates a response MqttTopic for the given KuraRequestChannel.", "methods": ["GET", "POST"], "paths": ["/kura/translator/request/kura/mqtt"]}}
{"file": "cloned/kapua/rest-api/core/src/main/java/org/eclipse/kapua/app/api/core/auth/KapuaTokenAuthenticationFilter.java", "endpoints": {"api_summary": "The KapuaTokenAuthenticationFilter is a Shiro filter that authenticates requests using an access token provided in the Authorization header. It supports OPTIONS requests and returns a 401 Unauthorized response if the token is invalid or expired.", "methods": ["OPTIONS", "GET", "POST", "PUT", "DELETE", "HEAD", "PATCH"], "paths": ["/users", "/users/<built-in function id>"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/Domains.java", "endpoints": {"api_summary": "The Domains API provides endpoints for querying and retrieving information about domains in a scope.", "methods": ["GET", "POST"], "paths": ["/{scopeId}/domains", "/{scopeId}/domains/_query", "/{scopeId}/domains/_count", "/{scopeId}/domains/{domainId}"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/Internal.java", "endpoints": {"api_summary": "The Internal API provides a way to visualize the wiring of the Guice injector in the form of a Graphviz graph.", "methods": ["GET"], "paths": ["/_internal/_wiring"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/Streams.java", "endpoints": {"api_summary": "The Streams API allows clients to publish fire-and-forget messages to a topic composed of the account name, client ID, and semantic parts.", "methods": ["POST"], "paths": ["/{scopeId}/streams/messages"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/JobExecutions.java", "endpoints": {"api_summary": "This API provides endpoints for managing job executions and targets in a Kapua system.", "methods": ["GET", "POST"], "paths": ["/{scopeId}/jobs/{jobId}/executions", "/{scopeId}/jobs/{jobId}/executions/_query", "/{scopeId}/jobs/{jobId}/executions/_count", "/{scopeId}/jobs/{jobId}/executions/{executionId}", "/{scopeId}/jobs/{jobId}/executions/{executionId}/targets"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/JobEngine.java", "endpoints": {"api_summary": "The JobEngine API provides endpoints for starting, stopping, and querying the status of jobs in the Kapua job engine.", "methods": ["POST", "GET"], "paths": ["/{scopeId}/jobs/{jobId}/_start", "/{scopeId}/jobs/{jobId}/_stop", "/{scopeId}/jobs/{jobId}/_isRunning", "/{scopeId}/jobs/_isRunning", "/{scopeId}/jobs/{jobId}/executions/{executionId}/_resume", "/{scopeId}/jobs/{jobId}/executions/{executionId}/_stop"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/DataChannels.java", "endpoints": {"api_summary": "The DataChannels API provides endpoints for querying and retrieving information about channels in a given scope.", "methods": ["GET", "POST"], "paths": ["/{scopeId}/data/channels", "/{scopeId}/data/channels/_query", "/{scopeId}/data/channels/_count", "/{scopeId}/data/channels/{channelInfoId}"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/DataMessages.java", "endpoints": {"api_summary": "This API provides endpoints for querying and storing data messages in a scope.", "methods": ["GET", "POST"], "paths": ["/{scopeId}/data/messages", "/{scopeId}/data/messages/_query", "/{scopeId}/data/messages/_count", "/{scopeId}/data/messages/{datastoreMessageId}"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/DataMetrics.java", "endpoints": {"api_summary": "The DataMetrics API provides endpoints for querying and retrieving metric information in a specific scope.", "methods": ["GET", "POST"], "paths": ["/{scopeId}/data/metrics", "/{scopeId}/data/metrics/_query", "/{scopeId}/data/metrics/_count", "/{scopeId}/data/metrics/{metricInfoId}"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/Accounts.java", "endpoints": {"api_summary": "The Accounts API provides endpoints for managing accounts in the scope. It allows for querying, counting, creating, and deleting accounts.", "methods": ["GET", "POST"], "paths": ["/{scopeId}/accounts", "/{scopeId}/accounts/_query", "/{scopeId}/accounts/_count", "/{scopeId}/accounts/_create"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/UsersCredentials.java", "endpoints": {"api_summary": "The UsersCredentials API provides endpoints for managing user credentials in a scope. It allows for querying, counting, creating, and resetting user credentials.", "methods": ["GET", "POST"], "paths": ["/{scopeId}/user{plural:|s}/{userId}/credentials", "/{scopeId}/user{plural:|s}/{userId}/credentials/_count", "/{scopeId}/user{plural:|s}/{userId}/credentials/_reset"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/DeviceManagementPackages.java", "endpoints": {"api_summary": "The DeviceManagementPackages API provides endpoints for managing device packages, including downloading and uninstalling packages.", "methods": ["GET", "POST"], "paths": ["/{scopeId}/devices/{deviceId}/packages", "/{scopeId}/devices/{deviceId}/packages/_download", "/{scopeId}/devices/{deviceId}/packages/_uninstall"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/Devices.java", "endpoints": {"api_summary": "The Devices API allows you to manage devices in a scope. You can create, read, update, and delete devices, as well as query and count devices.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/{scopeId}/devices", "/{scopeId}/devices/_query", "/{scopeId}/devices/_count", "/{scopeId}/devices/{deviceId}"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/DeviceManagementConfigurations.java", "endpoints": {"api_summary": "The DeviceManagementConfigurations API allows you to manage the configurations of devices in a Kapua system. It provides endpoints for getting and updating device configurations, as well as for getting and updating the settings of the device configuration store.", "methods": ["GET", "PUT"], "paths": ["/{scopeId}/devices/{deviceId}/configurations", "/{scopeId}/devices/{deviceId}/configurations/{componentId}", "/{scopeId}/devices/{deviceId}/configurations/_settings"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/SystemInformation.java", "endpoints": {"api_summary": "The SystemInformation API provides information about the system, including the operating system, hardware, and software versions.", "methods": ["GET"], "paths": ["/sys-info"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/DeviceConnections.java", "endpoints": {"api_summary": "The DeviceConnections API allows you to manage device connections in the scope. You can query, count, and retrieve individual device connections, as well as get a list of available authentication adapters.", "methods": ["GET", "POST"], "paths": ["/{scopeId}/deviceconnections", "/{scopeId}/deviceconnections/_query", "/{scopeId}/deviceconnections/_count", "/{scopeId}/deviceconnections/{deviceConnectionId}", "/{scopeId}/deviceconnections/{deviceConnectionId}/_disconnect", "/{scopeId}/deviceconnections/_availableAuth"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/AccessRoles.java", "endpoints": {"api_summary": "The AccessRoles API provides access to the AccessRole entities in the system, allowing users to create, read, update, and delete them.", "methods": ["GET", "POST", "DELETE"], "paths": ["/{scopeId}/accessinfos/{accessInfoId}/roles", "/{scopeId}/accessinfos/{accessInfoId}/roles/_query", "/{scopeId}/accessinfos/{accessInfoId}/roles/_count", "/{scopeId}/accessinfos/{accessInfoId}/roles/{accessRoleId}"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/Authentication.java", "endpoints": {"api_summary": "The Authentication API provides endpoints for authenticating users and obtaining access tokens, as well as endpoints for refreshing and invalidating access tokens.", "methods": ["POST", "GET"], "paths": ["/authentication/user", "/authentication/mfa", "/authentication/apikey", "/authentication/jwt", "/authentication/logout", "/authentication/refresh", "/authentication/info"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/DeviceManagementRequestsJson.java", "endpoints": {"api_summary": "The DeviceManagementRequestsJson API allows for sending requests to a device, which can be used for remote management of resources attached to the device such as sensors and registries.", "methods": ["POST"], "paths": ["/{scopeId}/devices/{deviceId}/requests"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/RolesPermissions.java", "endpoints": {"api_summary": "This API provides access to role permissions in a scope for a specific role.", "methods": ["GET", "POST", "DELETE"], "paths": ["/{scopeId}/roles/{roleId}/permissions", "/{scopeId}/roles/{roleId}/permissions/_query", "/{scopeId}/roles/{roleId}/permissions/_count", "/{scopeId}/roles/{roleId}/permissions/{rolePermissionId}"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/DeviceManagementCommands.java", "endpoints": {"api_summary": "The DeviceManagementCommands API allows you to execute remote commands on a device and retrieve the command output.", "methods": ["POST"], "paths": ["/{scopeId}/devices/{deviceId}/commands/_execute"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/Authorizations.java", "endpoints": {"api_summary": "The Authorizations API provides a list of user claims in a given scope.", "methods": ["GET"], "paths": ["/authorization/claims"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/DeviceManagementInventory.java", "endpoints": {"api_summary": "The DeviceManagementInventory API provides endpoints for managing the inventory of a device, including bundles, containers, packages, and system packages.", "methods": ["GET", "POST"], "paths": ["/{scopeId}/devices/{deviceId}/inventory", "/{scopeId}/devices/{deviceId}/inventory/bundles", "/{scopeId}/devices/{deviceId}/inventory/bundles/_start", "/{scopeId}/devices/{deviceId}/inventory/bundles/_stop", "/{scopeId}/devices/{deviceId}/inventory/containers", "/{scopeId}/devices/{deviceId}/inventory/containers/_start", "/{scopeId}/devices/{deviceId}/inventory/containers/_stop", "/{scopeId}/devices/{deviceId}/inventory/packages", "/{scopeId}/devices/{deviceId}/inventory/system"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/UserMfa.java", "endpoints": {"api_summary": "The UserMfa API provides endpoints for managing multi-factor authentication (MFA) options for users. It allows for creating, retrieving, and deleting MFA options, as well as disabling trusted machines for a given MFA option.", "methods": ["POST", "GET", "DELETE"], "paths": ["/user/mfa", "/user/mfa/disableTrust"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/DataMessagesJson.java", "endpoints": {"api_summary": "This API provides endpoints for querying and storing data messages in a scope.", "methods": ["GET", "POST"], "paths": ["/{scopeId}/data/messages", "/{scopeId}/data/messages/_query", "/{scopeId}/data/messages/{datastoreMessageId}"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/Jobs.java", "endpoints": {"api_summary": "The Jobs API provides endpoints for managing jobs in the scope. It allows for querying, creating, updating, and deleting jobs, as well as getting a count of the number of jobs that match a given query.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/{scopeId}/jobs", "/{scopeId}/jobs/_query", "/{scopeId}/jobs/_count", "/{scopeId}/jobs/{jobId}"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/Users.java", "endpoints": {"api_summary": "The Users API provides endpoints for managing users in a scope. It allows for querying, creating, updating, and deleting users, as well as retrieving a count of users.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/{scopeId}/users", "/{scopeId}/users/_query", "/{scopeId}/users/_count", "/{scopeId}/users/{userId}"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/UserProfiles.java", "endpoints": {"api_summary": "The UserProfiles API allows for the management of user profiles, including creating, updating, and retrieving user profile information.", "methods": ["GET", "PUT"], "paths": ["/{scopeId}/user/profile"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/DeviceManagementAssets.java", "endpoints": {"api_summary": "The DeviceManagementAssets API provides endpoints for managing assets on a device. It allows for retrieving, reading, writing, and configuring assets, as well as getting and setting application settings.", "methods": ["GET", "POST", "PUT"], "paths": ["/{scopeId}/devices/{deviceId}/assets", "/{scopeId}/devices/{deviceId}/assets/_read", "/{scopeId}/devices/{deviceId}/assets/_write", "/{scopeId}/devices/{deviceId}/assets/_settings"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/EndpointInfos.java", "endpoints": {"api_summary": "The EndpointInfos API provides endpoints for querying, creating, updating, and deleting EndpointInfo objects in the scope.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/{scopeId}/endpointInfos", "/{scopeId}/endpointInfos/_query", "/{scopeId}/endpointInfos/_count", "/{scopeId}/endpointInfos/{endpointInfoId}"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/AccessPermissions.java", "endpoints": {"api_summary": "The AccessPermissions API provides endpoints for managing access permissions for a given scope and access information.", "methods": ["GET", "POST", "DELETE"], "paths": ["/{scopeId}/accessinfos/{accessInfoId}/permissions", "/{scopeId}/accessinfos/{accessInfoId}/permissions/_query", "/{scopeId}/accessinfos/{accessInfoId}/permissions/_count", "/{scopeId}/accessinfos/{accessInfoId}/permissions/{accessPermissionId}"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/DeviceManagementSnapshots.java", "endpoints": {"api_summary": "The DeviceManagementSnapshots API provides endpoints for managing device snapshots and configurations. It allows users to retrieve a list of all snapshots available on a device, update the configuration of a device by rolling back to a specific snapshot, and download the configuration of a device given a snapshot ID.", "methods": ["GET", "POST"], "paths": ["/{scopeId}/devices/{deviceId}/snapshots", "/{scopeId}/devices/{deviceId}/snapshots/{snapshotId}", "/{scopeId}/devices/{deviceId}/snapshots/{snapshotId}/_rollback"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/UserCredentials.java", "endpoints": {"api_summary": "The UserCredentials API provides endpoints for changing and resetting the password of a user credential.", "methods": ["POST"], "paths": ["/{scopeId}/user/credentials/password", "/{scopeId}/user/credentials/{credentialId}/_reset"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/Groups.java", "endpoints": {"api_summary": "The Groups API allows you to manage groups in the scope. You can create, read, update, and delete groups, as well as query and count the groups in the scope.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/{scopeId}/groups", "/{scopeId}/groups/_query", "/{scopeId}/groups/_count", "/{scopeId}/groups/{groupId}"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/DataClients.java", "endpoints": {"api_summary": "The DataClients API provides endpoints for querying and retrieving client information in a specific scope.", "methods": ["GET", "POST"], "paths": ["/{scopeId}/data/clients", "/{scopeId}/data/clients/_query", "/{scopeId}/data/clients/_count", "/{scopeId}/data/clients/{clientInfoId}"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/DeviceConnectionOptions.java", "endpoints": {"api_summary": "The DeviceConnectionOptions API provides endpoints for managing device connection options in the Kapua system.", "methods": ["GET", "PUT"], "paths": ["/{scopeId}/deviceconnections/{connectionId}/options"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/JobSteps.java", "endpoints": {"api_summary": "The JobSteps API allows you to manage job steps in a Kapua system. It provides endpoints for creating, updating, and deleting job steps, as well as querying and counting job steps.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/{scopeId}/jobs/{jobId}/steps", "/{scopeId}/jobs/{jobId}/steps/_query", "/{scopeId}/jobs/{jobId}/steps/_count", "/{scopeId}/jobs/{jobId}/steps/{stepId}"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/UsersMfa.java", "endpoints": {"api_summary": "The UsersMfa API provides endpoints for managing multi-factor authentication (MFA) options for users in a given scope.", "methods": ["POST", "GET", "DELETE"], "paths": ["/{scopeId}/users/{userId}/mfa", "/{scopeId}/users/{userId}/mfa/disableTrust"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/Tags.java", "endpoints": {"api_summary": "The Tags API allows you to create, read, update, and delete tags in a given scope. It also allows you to query and count the tags in a scope.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/{scopeId}/tags", "/{scopeId}/tags/_query", "/{scopeId}/tags/_count", "/{scopeId}/tags/{tagId}"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/DeviceManagementOperationNotifications.java", "endpoints": {"api_summary": "The DeviceManagementOperationNotifications API provides endpoints for managing notifications related to device management operations.", "methods": ["GET", "POST", "DELETE"], "paths": ["/{scopeId}/devices/{deviceId}/operations/{operationId}/notifications", "/{scopeId}/devices/{deviceId}/operations/{operationId}/notifications/_query", "/{scopeId}/devices/{deviceId}/operations/{operationId}/notifications/_count", "/{scopeId}/devices/{deviceId}/operations/{operationId}/notifications/{managementOperationNotificationId}"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/JobTargets.java", "endpoints": {"api_summary": "This API provides endpoints for managing job targets and their executions in a Kapua system.", "methods": ["GET", "POST", "DELETE"], "paths": ["/{scopeId}/jobs/{jobId}/targets", "/{scopeId}/jobs/{jobId}/targets/_query", "/{scopeId}/jobs/{jobId}/targets/_count", "/{scopeId}/jobs/{jobId}/targets/{targetId}", "/{scopeId}/jobs/{jobId}/targets/{targetId}/executions"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/JobTriggersFired.java", "endpoints": {"api_summary": "The JobTriggersFired API provides endpoints for querying and counting fired triggers for a given job and trigger.", "methods": ["GET", "POST"], "paths": ["/{scopeId}/jobs/{jobId}/triggers/{triggerId}/fired", "/{scopeId}/jobs/{jobId}/triggers/{triggerId}/fired/_query", "/{scopeId}/jobs/{jobId}/triggers/{triggerId}/fired/_count"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/Credentials.java", "endpoints": {"api_summary": "The Credentials API provides endpoints for managing credentials in the scope. It allows for querying, creating, updating, and deleting credentials, as well as unlocking credentials that have been locked due to a lockout policy.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/credentials", "/credentials/_query", "/credentials/_count", "/credentials/{credentialId}", "/credentials/{credentialId}/_unlock", "/credentials/_availableCredentials"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/StreamsJson.java", "endpoints": {"api_summary": "The StreamsJson API allows for publishing fire-and-forget messages to a topic composed of the account name, client ID, and semantic parts.", "methods": ["POST"], "paths": ["/{scopeId}/streams/messages"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/ServiceConfigurations.java", "endpoints": {"api_summary": "The ServiceConfigurations API allows for the management of service configurations for a given scope. It provides endpoints for fetching all configurations, updating configurations, and fetching a specific configuration for a given service.", "methods": ["GET", "PUT"], "paths": ["/{scopeId}/serviceConfigurations", "/{scopeId}/serviceConfigurations/{serviceId}"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/DeviceManagementRequests.java", "endpoints": {"api_summary": "The DeviceManagementRequests API allows for the management of requests to devices, such as remote management of resources attached to the device, such as sensors and registries.", "methods": ["POST"], "paths": ["/{scopeId}/devices/{deviceId}/requests"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/AccessInfos.java", "endpoints": {"api_summary": "The AccessInfos API provides endpoints for managing access information in the scope.", "methods": ["GET", "POST", "DELETE"], "paths": ["/{scopeId}/accessinfos", "/{scopeId}/accessinfos/_query", "/{scopeId}/accessinfos/_count", "/{scopeId}/accessinfos/{accessInfoId}"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/Roles.java", "endpoints": {"api_summary": "The Roles API provides endpoints for managing roles in the system, including creating, updating, and deleting roles, as well as querying and counting roles.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/roles", "/roles/_query", "/roles/_count", "/roles/{roleId}", "/roles/{roleId}/users"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/CurrentAccount.java", "endpoints": {"api_summary": "The CurrentAccount API provides endpoints for retrieving and updating the current account information. It uses the AccountService to perform the actual operations.", "methods": ["GET", "PUT"], "paths": ["/account"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/Account.java", "endpoints": {"api_summary": "The Account API provides endpoints for managing accounts in the system. It allows for creating, updating, and deleting accounts, as well as retrieving information about specific accounts.", "methods": ["GET", "PUT", "DELETE"], "paths": ["/{scopeId}/accounts/{accountId}"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/DeviceManagementBundles.java", "endpoints": {"api_summary": "The DeviceManagementBundles API provides endpoints for managing device bundles, including getting a list of all bundles installed on a device, starting a bundle, and stopping a bundle.", "methods": ["GET", "POST"], "paths": ["/{scopeId}/devices/{deviceId}/bundles", "/{scopeId}/devices/{deviceId}/bundles/{bundleId}/_start", "/{scopeId}/devices/{deviceId}/bundles/{bundleId}/_stop"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/DeviceEvents.java", "endpoints": {"api_summary": "This API allows users to perform CRUD operations on device events in a given scope and device.", "methods": ["GET", "POST", "DELETE"], "paths": ["/{scopeId}/devices/{deviceId}/events", "/{scopeId}/devices/{deviceId}/events/_query", "/{scopeId}/devices/{deviceId}/events/_count", "/{scopeId}/devices/{deviceId}/events/{deviceEventId}"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/JobStepDefinitions.java", "endpoints": {"api_summary": "The JobStepDefinitions API provides endpoints for querying and retrieving job step definitions in a Kapua system.", "methods": ["GET", "POST"], "paths": ["/{scopeId}/jobStepDefinitions", "/{scopeId}/jobStepDefinitions/_query", "/{scopeId}/jobStepDefinitions/_count", "/{scopeId}/jobStepDefinitions/{stepDefinitionId}"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/JobTriggerDefinitions.java", "endpoints": {"api_summary": "The JobTriggerDefinitions API provides endpoints for querying and retrieving trigger definitions for a given job.", "methods": ["GET", "POST"], "paths": ["/{scopeId}/triggerDefinitions", "/{scopeId}/triggerDefinitions/_query", "/{scopeId}/triggerDefinitions/_count", "/{scopeId}/triggerDefinitions/{triggerDefinitionId}"]}}
{"file": "cloned/kapua/rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/DeviceManagementOperations.java", "endpoints": {"api_summary": "The DeviceManagementOperations API allows you to manage device management operations in the scope of a specific device.", "methods": ["GET", "POST", "DELETE"], "paths": ["/{scopeId}/devices/{deviceId}/operations", "/{scopeId}/devices/{deviceId}/operations/_query", "/{scopeId}/devices/{deviceId}/operations/_count", "/{scopeId}/devices/{deviceId}/operations/{deviceManagementOperationId}"]}}
{"file": "cloned/kapua/console/core/src/main/java/org/eclipse/kapua/app/console/core/client/ChangePasswordDialog.java", "endpoints": {"api_summary": "The ChangePasswordDialog class is a simple dialog that allows the user to change their password. It has a form with fields for the old password, new password, and confirmation password, as well as a field for the MFA code if MFA is enabled. The submit method calls the changePassword method of the GwtCredentialServiceAsync service to change the password.", "methods": ["POST"], "paths": ["/changePassword"]}}
{"file": "cloned/kapua/console/core/src/main/java/org/eclipse/kapua/app/console/core/client/MfaLoginDialog.java", "endpoints": {"api_summary": "This API is a multi-factor authentication login second step that requires a MFA code and trust this machine request.", "methods": ["POST"], "paths": ["/mfa-login"]}}
{"file": "cloned/kapua/console/core/src/main/java/org/eclipse/kapua/app/console/core/servlet/KapuaErrorHandlerServlet.java", "endpoints": {"api_summary": "The KapuaErrorHandlerServlet provides a centralized error handling mechanism for the Kapua application. It handles HTTP errors and exceptions, and provides a consistent error message format for the user.", "methods": ["GET", "POST"], "paths": ["/httpError", "/throwable"]}}
{"file": "cloned/kapua/console/core/src/main/java/org/eclipse/kapua/app/console/core/servlet/SsoCallbackServlet.java", "endpoints": {"api_summary": "This API is used for single sign-on (SSO) authentication using OpenID Connect. It receives an authorization code from the OpenID Connect provider and exchanges it for an access token and ID token. The API also handles errors and redirects the user to the home page with the tokens as query parameters.", "methods": ["GET"], "paths": ["/sso/callback"]}}
{"file": "cloned/kapua/console/core/src/main/java/org/eclipse/kapua/app/console/core/shared/service/GwtSettingsService.java", "endpoints": {"api_summary": "The GwtSettingsService API provides a subset of configuration values for front-end usage. It includes endpoints for retrieving product information, OpenID login and logout URIs, and the home URI. The API also provides a boolean flag to indicate whether OpenID is enabled.", "methods": ["GET", "POST"], "paths": ["/settings", "/settings/productInformation", "/settings/openIDLoginUri", "/settings/openIDLogoutUri", "/settings/homeUri", "/settings/openIDEnabled"]}}
{"file": "cloned/kapua/console/core/src/main/java/org/eclipse/kapua/app/console/core/shared/service/GwtAuthorizationService.java", "endpoints": {"api_summary": "The GwtAuthorizationService API provides endpoints for authenticating and managing user sessions. It allows clients to login, logout, and retrieve information about the current active session.", "methods": ["POST", "GET", "DELETE"], "paths": ["/auth/login", "/auth/logout", "/auth/session"]}}
{"file": "cloned/kapua/console/module/api/src/main/java/org/eclipse/kapua/app/console/module/api/server/GwtConsoleServiceImpl.java", "endpoints": {"api_summary": "The GwtConsoleServiceImpl class provides a REST API for retrieving and updating configuration values for a given scope and parent scope. It also provides a way to retrieve custom views and tabs for a given view.", "methods": ["GET", "POST"], "paths": ["/org/eclipse/kapua/app/console/module/api/server/GwtConsoleServiceImpl", "/org/eclipse/kapua/app/console/module/api/server/GwtConsoleServiceImpl/getCustomEntityViews", "/org/eclipse/kapua/app/console/module/api/server/GwtConsoleServiceImpl/getCustomTabsForView", "/org/eclipse/kapua/app/console/module/api/server/GwtConsoleServiceImpl/updateComponentConfiguration"]}}
{"file": "cloned/kapua/console/module/api/src/main/java/org/eclipse/kapua/app/console/module/api/client/ui/tab/EntityDescriptionTabItem.java", "endpoints": {"api_summary": "This API provides a description of the entity, including its name and value.", "methods": ["GET"], "paths": ["/entity/description"]}}
{"file": "cloned/kapua/console/module/api/src/main/java/org/eclipse/kapua/app/console/module/api/shared/service/GwtSecurityTokenService.java", "endpoints": {"api_summary": "The GwtSecurityTokenService API provides a method to generate a valid security token for the application.", "methods": ["POST"], "paths": ["/xsrf"]}}
{"file": "cloned/kapua/console/module/api/src/main/java/org/eclipse/kapua/app/console/module/api/shared/service/GwtConsoleService.java", "endpoints": {"api_summary": "The GwtConsoleService API provides methods for retrieving custom entity views, custom tabs for a given view, and updating component configurations. It is used by the Eclipse Kapua Console module to provide a user interface for managing and configuring the console.", "methods": ["GET", "POST"], "paths": ["/console/customEntityViews", "/console/customTabs", "/console/updateComponentConfiguration"]}}
{"file": "cloned/kapua/console/module/job/src/main/java/org/eclipse/kapua/app/console/module/job/server/GwtTriggerDefinitionServiceImpl.java", "endpoints": {"api_summary": "The GwtTriggerDefinitionServiceImpl class provides a REST API for managing trigger definitions in the Kapua scheduler. It allows clients to retrieve a list of all trigger definitions, retrieve a specific trigger definition by ID, and create a new trigger definition.", "methods": ["GET", "POST"], "paths": ["/job/server/GwtTriggerDefinitionServiceImpl/findAll", "/job/server/GwtTriggerDefinitionServiceImpl/find/<gwtTriggerDefinitionId>", "/job/server/GwtTriggerDefinitionServiceImpl/trickGwt"]}}
{"file": "cloned/kapua/console/module/job/src/main/java/org/eclipse/kapua/app/console/module/job/server/GwtJobStepDefinitionServiceImpl.java", "endpoints": {"api_summary": "The GwtJobStepDefinitionServiceImpl class provides a REST API for managing job step definitions in the Kapua system. It allows clients to retrieve a list of all job step definitions, retrieve a specific job step definition by ID, and create, update, or delete job step definitions.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/job/step/definition", "/job/step/definition/<id>"]}}
{"file": "cloned/kapua/console/module/job/src/main/java/org/eclipse/kapua/app/console/module/job/server/GwtJobExecutionServiceImpl.java", "endpoints": {"api_summary": "The GwtJobExecutionServiceImpl provides a REST API for querying job executions in the Kapua system. It allows clients to retrieve job executions by job ID and scope ID, and provides pagination support for large result sets.", "methods": ["GET"], "paths": ["/job/execution/findByJobId"]}}
{"file": "cloned/kapua/console/module/job/src/main/java/org/eclipse/kapua/app/console/module/job/server/GwtJobEngineServiceImpl.java", "endpoints": {"api_summary": "The GwtJobEngineServiceImpl class provides a REST API for starting, stopping, and restarting jobs in the Kapua job engine. It also provides a method for querying job executions.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/job/start", "/job/stop", "/job/restart", "/job/execution"]}}
{"file": "cloned/kapua/console/module/job/src/main/java/org/eclipse/kapua/app/console/module/job/client/JobGrid.java", "endpoints": {"api_summary": "The JobGrid API allows users to view and manage jobs in the console. It includes endpoints for querying, creating, updating, and deleting jobs, as well as endpoints for starting, stopping, and restarting jobs.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/jobs", "/jobs/<job_id>", "/jobs/<job_id>/start", "/jobs/<job_id>/stop", "/jobs/<job_id>/restart"]}}
{"file": "cloned/kapua/console/module/job/src/main/java/org/eclipse/kapua/app/console/module/job/client/JobAddDialog.java", "endpoints": {"api_summary": "The JobAddDialog class is a part of the Eclipse Kapua application and provides a dialog for adding a new job to the system. It includes fields for the job name and description, and provides validation and error handling for these fields.", "methods": ["GET", "POST"], "paths": ["/jobs", "/jobs/<job_id>"]}}
{"file": "cloned/kapua/console/module/job/src/main/java/org/eclipse/kapua/app/console/module/job/client/steps/JobTabStepsGrid.java", "endpoints": {"api_summary": "This API provides a grid for displaying and managing job steps in the console.", "methods": ["GET", "POST"], "paths": ["/jobs/<jobId>/steps"]}}
{"file": "cloned/kapua/console/module/job/src/main/java/org/eclipse/kapua/app/console/module/job/client/schedule/JobTabSchedulesGrid.java", "endpoints": {"api_summary": "This API defines a grid for displaying job schedules in the console.", "methods": ["GET"], "paths": ["/jobs/<jobId>/schedules"]}}
{"file": "cloned/kapua/console/module/job/src/main/java/org/eclipse/kapua/app/console/module/job/client/targets/JobTabTargetsToolbar.java", "endpoints": {"api_summary": "The JobTabTargetsToolbar class is a part of the Eclipse Kapua application and provides a toolbar for managing job targets. It allows users to add, delete, and start job targets, as well as export job targets to CSV.", "methods": ["GET", "POST"], "paths": ["/exporter_job_target"]}}
{"file": "cloned/kapua/console/module/job/src/main/java/org/eclipse/kapua/app/console/module/job/client/targets/JobTargetAddDeviceGrid.java", "endpoints": {"api_summary": "This API allows users to add devices to a job.", "methods": ["GET", "POST"], "paths": ["/jobs/<job_id>/devices"]}}
{"file": "cloned/kapua/console/module/job/src/main/java/org/eclipse/kapua/app/console/module/job/client/targets/JobTargetAddTagGrid.java", "endpoints": {"api_summary": "This API allows users to add tags to a job in the Kapua console.", "methods": ["GET", "POST"], "paths": ["/jobs/<job_id>/tags"]}}
{"file": "cloned/kapua/console/module/job/src/main/java/org/eclipse/kapua/app/console/module/job/client/execution/JobTabExecutionsGrid.java", "endpoints": {"api_summary": "This API provides a grid for displaying job executions for a specific job.", "methods": ["GET"], "paths": ["/jobs/<jobId>/executions"]}}
{"file": "cloned/kapua/console/module/job/src/main/java/org/eclipse/kapua/app/console/module/job/servlet/JobTargetExporterServlet.java", "endpoints": {"api_summary": "The JobTargetExporterServlet provides a REST API for exporting job targets in CSV format. It takes in a scope ID and a job ID as parameters and returns a CSV file containing the job targets that match the given criteria.", "methods": ["GET"], "paths": ["/jobTargetExporter"]}}
{"file": "cloned/kapua/console/module/job/src/main/java/org/eclipse/kapua/app/console/module/job/shared/service/GwtJobEngineService.java", "endpoints": {"api_summary": "The GwtJobEngineService API provides methods for starting, stopping, and restarting jobs in the Kapua application. It also provides methods for stopping job executions and restarting specific job targets.", "methods": ["start", "stop", "stopExecution", "restart"], "paths": ["/jobEngine"]}}
{"file": "cloned/kapua/console/module/job/src/main/java/org/eclipse/kapua/app/console/module/job/shared/service/GwtJobStepService.java", "endpoints": {"api_summary": "The GwtJobStepService API provides methods for querying, creating, updating, and deleting job steps in the Kapua application.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/jobStep", "/jobStep/query", "/jobStep/count", "/jobStep/findByJobId", "/jobStep/create", "/jobStep/find", "/jobStep/delete", "/jobStep/update", "/jobStep/getJobStepPropertyLengthMax"]}}
{"file": "cloned/kapua/console/module/job/src/main/java/org/eclipse/kapua/app/console/module/job/shared/service/GwtJobService.java", "endpoints": {"api_summary": "The GwtJobService API provides endpoints for managing jobs in the Kapua application. It allows for querying, creating, updating, and deleting jobs, as well as retrieving job descriptions.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/job", "/job/<jobId>", "/job/<jobId>/description"]}}
{"file": "cloned/kapua/console/module/job/src/main/java/org/eclipse/kapua/app/console/module/job/shared/service/GwtJobStepDefinitionService.java", "endpoints": {"api_summary": "The GwtJobStepDefinitionService API provides methods for managing job step definitions in the Kapua application. It allows for finding all job step definitions for a given scope, finding a specific job step definition by ID, and retrieving a list of job step properties.", "methods": ["GET", "POST"], "paths": ["/jobStepDefinition", "/jobStepDefinition/<scopeIdString>", "/jobStepDefinition/<scopeIdString>/<jobStepDefinitionId>"]}}
{"file": "cloned/kapua/console/module/job/src/main/java/org/eclipse/kapua/app/console/module/job/shared/service/GwtJobExecutionService.java", "endpoints": {"api_summary": "The GwtJobExecutionService API provides a way to retrieve the list of job executions by their jobId.", "methods": ["GET"], "paths": ["/jobExecution"]}}
{"file": "cloned/kapua/console/module/job/src/main/java/org/eclipse/kapua/app/console/module/job/shared/service/GwtJobTargetService.java", "endpoints": {"api_summary": "The GwtJobTargetService API provides methods for querying, creating, and deleting job targets in the Kapua application.", "methods": ["GET", "POST", "DELETE"], "paths": ["/jobTarget", "/jobTarget/findByJobId", "/jobTarget/create", "/jobTarget/delete"]}}
{"file": "cloned/kapua/console/module/job/src/main/java/org/eclipse/kapua/app/console/module/job/shared/service/GwtTriggerDefinitionService.java", "endpoints": {"api_summary": "The GwtTriggerDefinitionService API provides methods for managing trigger definitions in the Kapua application. It allows for finding all trigger definitions, finding a specific trigger definition by ID, and retrieving a list of all trigger definitions.", "methods": ["GET", "POST"], "paths": ["/triggerDefinition", "/triggerDefinition/<triggerDefinitionId>"]}}
{"file": "cloned/kapua/console/module/job/src/main/java/org/eclipse/kapua/app/console/module/job/shared/service/GwtTriggerService.java", "endpoints": {"api_summary": "The GwtTriggerService API provides methods for managing triggers in the Kapua application. It allows users to create, delete, and validate triggers, as well as retrieve information about triggers.", "methods": ["POST", "GET", "DELETE"], "paths": ["/trigger", "/trigger/create", "/trigger/delete", "/trigger/validate"]}}
{"file": "cloned/kapua/console/module/account/src/main/java/org/eclipse/kapua/app/console/module/account/server/GwtAccountServiceImpl.java", "endpoints": {"api_summary": "This API provides endpoints for managing accounts and their related information.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/accounts", "/accounts/<account_id>", "/accounts/<account_id>/info", "/accounts/<account_id>/children", "/accounts/<account_id>/name", "/accounts/<account_id>/properties"]}}
{"file": "cloned/kapua/console/module/account/src/main/java/org/eclipse/kapua/app/console/module/account/client/AccountDetailsTabDescription.java", "endpoints": {"api_summary": "This API provides information about accounts and allows for editing account details.", "methods": ["GET", "POST"], "paths": ["/accounts", "/accounts/<account_id>"]}}
{"file": "cloned/kapua/console/module/account/src/main/java/org/eclipse/kapua/app/console/module/account/client/cors/CorsGrid.java", "endpoints": {"api_summary": "The CorsGrid API allows users to view and manage CORS (Cross-Origin Resource Sharing) endpoints for a specific account.", "methods": ["GET", "POST"], "paths": ["/account/<account_id>/cors"]}}
{"file": "cloned/kapua/console/module/account/src/main/java/org/eclipse/kapua/app/console/module/account/client/cors/CorsAddDialog.java", "endpoints": {"api_summary": "This API allows for the creation and management of CORS (Cross-Origin Resource Sharing) endpoints for a given account.", "methods": ["POST"], "paths": ["/accounts/<account_id>/cors"]}}
{"file": "cloned/kapua/console/module/account/src/main/java/org/eclipse/kapua/app/console/module/account/client/toolbar/AccountAddDialog.java", "endpoints": {"api_summary": "This API allows users to create a new account and retrieve information about existing accounts.", "methods": ["POST", "GET"], "paths": ["/accounts", "/accounts/<account_id>"]}}
{"file": "cloned/kapua/console/module/account/src/main/java/org/eclipse/kapua/app/console/module/account/shared/service/GwtAccountService.java", "endpoints": {"api_summary": "The GwtAccountService API provides methods for managing accounts, including creating, finding, updating, and deleting accounts. It also provides methods for listing accounts and their children, and for retrieving the configuration of an account.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/account", "/account/<accountId>", "/account/<accountId>/children", "/account/<accountId>/config"]}}
{"file": "cloned/kapua/console/module/authentication/src/main/java/org/eclipse/kapua/app/console/module/authentication/server/GwtMfaCredentialOptionsServiceImpl.java", "endpoints": {"api_summary": "The GwtMfaCredentialOptionsServiceImpl class provides methods for managing MFA credential options in the console application.", "methods": ["GET", "POST", "DELETE"], "paths": ["/users", "/users/<built-in function id>"]}}
{"file": "cloned/kapua/console/module/authentication/src/main/java/org/eclipse/kapua/app/console/module/authentication/client/tabs/credentials/CredentialResetDialog.java", "endpoints": {"api_summary": "This API allows users to reset their passwords for the console application.", "methods": ["POST"], "paths": ["/api/console/resetPassword"]}}
{"file": "cloned/kapua/console/module/authentication/src/main/java/org/eclipse/kapua/app/console/module/authentication/client/tabs/credentials/CredentialEditDialog.java", "endpoints": {"api_summary": "This API allows users to edit their credentials, including their expiration date and status.", "methods": ["GET", "POST"], "paths": ["/users/<built-in function id>/credentials/edit"]}}
{"file": "cloned/kapua/console/module/authentication/src/main/java/org/eclipse/kapua/app/console/module/authentication/shared/service/GwtMfaCredentialOptionsService.java", "endpoints": {"api_summary": "The GwtMfaCredentialOptionsService API provides endpoints for managing multi-factor authentication (MFA) credential options. It allows for creating, finding, deleting, and disabling MFA credential options for a given scope and user.", "methods": ["POST", "GET", "DELETE"], "paths": ["/mfaOptions", "/mfaOptions/<gwtMfaCredentialOptionsId>", "/mfaOptions/<scopeIdStr>/<userIdStr>", "/mfaOptions/<scopeIdStr>/<mfaCredentialOptionsIdStr>/disableTrust"]}}
{"file": "cloned/kapua/console/module/authentication/src/main/java/org/eclipse/kapua/app/console/module/authentication/shared/service/GwtCredentialService.java", "endpoints": {"api_summary": "The GwtCredentialService API provides endpoints for managing credentials in the Kapua application. It allows for querying, creating, updating, deleting, and resetting credentials, as well as changing passwords and unlocking accounts.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/credential", "/credential/query", "/credential/delete", "/credential/create", "/credential/update", "/credential/changePassword", "/credential/resetPassword", "/credential/unlock", "/credential/getMinPasswordLength", "/credential/getAvailableCredentialTypes"]}}
{"file": "cloned/kapua/console/module/user/src/main/java/org/eclipse/kapua/app/console/module/user/server/GwtUserServiceImpl.java", "endpoints": {"api_summary": "This API provides endpoints for managing users and their associated devices and connections in the Kapua system.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users", "/users/<built-in function id>", "/devices", "/devices/<built-in function id>", "/connections", "/connections/<built-in function id>"]}}
{"file": "cloned/kapua/console/module/user/src/main/java/org/eclipse/kapua/app/console/module/user/client/tabs/roles/RoleSubjectGrid.java", "endpoints": {"api_summary": "This API provides a grid for displaying users who have been granted a particular role in the system.", "methods": ["GET"], "paths": ["/users/roles/<role_id>/granted_users"]}}
{"file": "cloned/kapua/console/module/user/src/main/java/org/eclipse/kapua/app/console/module/user/client/dialog/UserAddDialog.java", "endpoints": {"api_summary": "This API defines a user creation dialog for the Eclipse Kapua application. It allows users to create new users with various attributes such as username, password, email, phone number, and status.", "methods": ["POST"], "paths": ["/users"]}}
{"file": "cloned/kapua/console/module/user/src/main/java/org/eclipse/kapua/app/console/module/user/shared/service/GwtUserService.java", "endpoints": {"api_summary": "The GwtUserService API provides endpoints for managing users in the system, including creating, updating, deleting, and querying users.", "methods": ["POST", "PUT", "DELETE", "GET"], "paths": ["/user/create", "/user/update", "/user/delete", "/user/find", "/user/findAll", "/user/query", "/user/getUserDescription", "/user/getUsersForRole", "/user/getUsersForAccount"]}}
{"file": "cloned/kapua/console/module/device/src/main/java/org/eclipse/kapua/app/console/module/device/server/GwtDeviceManagementOperationServiceImpl.java", "endpoints": {"api_summary": "The GwtDeviceManagementOperationServiceImpl class provides a server-side implementation of the GwtDeviceManagementOperationService interface, which is used to manage device management operations in the Kapua application. It defines a REST API for querying and retrieving device management operations, as well as for creating and updating them.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/device/management/operation", "/device/management/operation/<operation_id>", "/device/management/operation/<operation_id>/notification"]}}
{"file": "cloned/kapua/console/module/device/src/main/java/org/eclipse/kapua/app/console/module/device/server/GwtDeviceAssetServiceImpl.java", "endpoints": {"api_summary": "The GwtDeviceAssetServiceImpl class provides a REST API for managing device assets in the Kapua system. It allows for reading, writing, and retrieving device assets, as well as managing asset store settings.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/device/assets", "/device/assets/<assetId>", "/device/assets/store/settings"]}}
{"file": "cloned/kapua/console/module/device/src/main/java/org/eclipse/kapua/app/console/module/device/client/device/DeviceEditDialog.java", "endpoints": {"api_summary": "This API allows users to create, read, update, and delete devices in the system.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/devices", "/devices/<device_id>"]}}
{"file": "cloned/kapua/console/module/device/src/main/java/org/eclipse/kapua/app/console/module/device/client/device/DeviceGridToolbar.java", "endpoints": {"api_summary": "The DeviceGridToolbar class provides a toolbar for the Device Grid, which allows users to add, edit, delete, and export devices.", "methods": ["GET", "POST"], "paths": ["/exporter_device"]}}
{"file": "cloned/kapua/console/module/device/src/main/java/org/eclipse/kapua/app/console/module/device/client/device/DeviceAddDialog.java", "endpoints": {"api_summary": "This API allows users to create a new device and retrieve information about existing devices.", "methods": ["POST", "GET"], "paths": ["/devices", "/devices/<device_id>"]}}
{"file": "cloned/kapua/console/module/device/src/main/java/org/eclipse/kapua/app/console/module/device/client/device/configuration/DeviceTabConfiguration.java", "endpoints": {"api_summary": "The DeviceTabConfiguration class is a part of the Eclipse Kapua application and is responsible for managing the configuration of devices. It provides a tabbed interface for configuring device components and snapshots.", "methods": ["GET", "POST"], "paths": ["/device/configuration", "/device/configuration/components", "/device/configuration/snapshots"]}}
{"file": "cloned/kapua/console/module/device/src/main/java/org/eclipse/kapua/app/console/module/device/client/device/inventory/DeviceTabInventoryTabDeploymentPackages.java", "endpoints": {"api_summary": "This API provides a list of deployment packages for a device, along with the bundles included in each package.", "methods": ["GET"], "paths": ["/devices/{deviceId}/deploymentPackages"]}}
{"file": "cloned/kapua/console/module/device/src/main/java/org/eclipse/kapua/app/console/module/device/client/device/inventory/DeviceTabInventoryTabSystemPackages.java", "endpoints": {"api_summary": "This API provides a list of system packages for a device in the inventory.", "methods": ["GET"], "paths": ["/devices/{deviceId}/system-packages"]}}
{"file": "cloned/kapua/console/module/device/src/main/java/org/eclipse/kapua/app/console/module/device/client/device/inventory/DeviceTabInventoryTabInventory.java", "endpoints": {"api_summary": "This API provides a list of inventory items for a given device, along with information about the device and its inventory.", "methods": ["GET"], "paths": ["/devices/{deviceId}/inventory"]}}
{"file": "cloned/kapua/console/module/device/src/main/java/org/eclipse/kapua/app/console/module/device/client/device/inventory/DeviceTabInventory.java", "endpoints": {"api_summary": "The DeviceTabInventory class is a part of the Eclipse Kapua application and provides a tab panel for displaying information about a device's inventory. It includes several sub-tabs for displaying different types of inventory information, such as installed packages, system packages, and deployment packages.", "methods": ["GET", "POST"], "paths": ["/devices/<device_id>/inventory", "/devices/<device_id>/inventory/bundles", "/devices/<device_id>/inventory/container", "/devices/<device_id>/inventory/system_packages", "/devices/<device_id>/inventory/deployment_packages"]}}
{"file": "cloned/kapua/console/module/device/src/main/java/org/eclipse/kapua/app/console/module/device/client/device/tag/TagSubjectGrid.java", "endpoints": {"api_summary": "This API provides a grid for displaying devices that are assigned to a specific tag.", "methods": ["GET"], "paths": ["/tags/<tag_id>/devices"]}}
{"file": "cloned/kapua/console/module/device/src/main/java/org/eclipse/kapua/app/console/module/device/client/device/tag/DeviceTagAddDialog.java", "endpoints": {"api_summary": "This API allows users to add tags to devices in the system.", "methods": ["POST"], "paths": ["/devices/<device_id>/tags"]}}
{"file": "cloned/kapua/console/module/device/src/main/java/org/eclipse/kapua/app/console/module/device/client/device/group/GroupSubjectGrid.java", "endpoints": {"api_summary": "The GroupSubjectGrid API allows for querying and retrieving information about devices assigned to a specific group.", "methods": ["GET"], "paths": ["/groups/<group_id>/devices"]}}
{"file": "cloned/kapua/console/module/device/src/main/java/org/eclipse/kapua/app/console/module/device/client/device/keystore/dialog/KeystoreItemAddCsrDialog.java", "endpoints": {"api_summary": "This API allows users to create a certificate signing request (CSR) for a specific keystore item on a device.", "methods": ["POST"], "paths": ["/device/keystore/item/addCsr"]}}
{"file": "cloned/kapua/console/module/device/src/main/java/org/eclipse/kapua/app/console/module/device/client/device/keystore/dialog/KeystoreItemAddCertificateRawDialog.java", "endpoints": {"api_summary": "This API allows users to add a new certificate to a device's keystore. The API takes the device ID, keystore ID, alias, and certificate as input and returns a success message if the certificate is added successfully.", "methods": ["POST"], "paths": ["/device/<device_id>/keystore/<keystore_id>/certificate"]}}
{"file": "cloned/kapua/console/module/device/src/main/java/org/eclipse/kapua/app/console/module/device/client/device/keystore/dialog/KeystoreItemAddKeypairDialog.java", "endpoints": {"api_summary": "This API allows you to add a new keypair to a device's keystore.", "methods": ["POST"], "paths": ["/device/keystore/addKeypair"]}}
{"file": "cloned/kapua/console/module/device/src/main/java/org/eclipse/kapua/app/console/module/device/client/device/packages/DeviceTabPackagesInstalled.java", "endpoints": {"api_summary": "This API is a package management system for a device. It allows users to install, uninstall, and manage packages on a device.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/device/packages", "/device/packages/<package_id>", "/device/packages/<package_id>/bundles", "/device/packages/<package_id>/bundles/<bundle_id>"]}}
{"file": "cloned/kapua/console/module/device/src/main/java/org/eclipse/kapua/app/console/module/device/client/device/packages/DeviceTabPackagesInProgress.java", "endpoints": {"api_summary": "This API provides a list of in-progress package download operations for a specific device.", "methods": ["GET"], "paths": ["/devices/{deviceId}/packages/in-progress"]}}
{"file": "cloned/kapua/console/module/device/src/main/java/org/eclipse/kapua/app/console/module/device/client/device/packages/dialog/PackageUninstallDialog.java", "endpoints": {"api_summary": "This API is used to uninstall a package on a device. It allows the user to specify the package name, version, and whether to reboot the device after uninstallation. The API also provides a delay option for the reboot.", "methods": ["POST"], "paths": ["/device/uninstall"]}}
{"file": "cloned/kapua/console/module/device/src/main/java/org/eclipse/kapua/app/console/module/device/client/connection/ConnectionGrid.java", "endpoints": {"api_summary": "The API provides a list of connections and their statuses, along with the ability to filter and sort the connections by various criteria.", "methods": ["GET", "POST"], "paths": ["/connections", "/connections/<connection_id>"]}}
{"file": "cloned/kapua/console/module/device/src/main/java/org/eclipse/kapua/app/console/module/device/servlet/DeviceExporterServlet.java", "endpoints": {"api_summary": "The DeviceExporterServlet provides a REST API for exporting device information in a specific format. It supports querying devices based on various parameters and allows for pagination and sorting of the results.", "methods": ["GET"], "paths": ["/deviceExporter"]}}
{"file": "cloned/kapua/console/module/device/src/main/java/org/eclipse/kapua/app/console/module/device/servlet/DeviceSnapshotsServlet.java", "endpoints": {"api_summary": "The DeviceSnapshotsServlet API allows for the retrieval of device configuration snapshots in XML format.", "methods": ["GET"], "paths": ["/deviceSnapshots"]}}
{"file": "cloned/kapua/console/module/device/src/main/java/org/eclipse/kapua/app/console/module/device/servlet/DeviceEventExporterServlet.java", "endpoints": {"api_summary": "The DeviceEventExporterServlet provides a REST API for exporting device events in CSV format. It allows users to specify the format, scopeId, deviceId, startDate, and endDate as query parameters. The API returns a CSV file containing the device events that match the specified criteria.", "methods": ["GET"], "paths": ["/deviceEventExporter"]}}
{"file": "cloned/kapua/console/module/device/src/main/java/org/eclipse/kapua/app/console/module/device/shared/service/GwtDeviceManagementOperationService.java", "endpoints": {"api_summary": "The GwtDeviceManagementOperationService API provides a way to query and retrieve information about device management operations.", "methods": ["GET"], "paths": ["/deviceManagementOperation"]}}
{"file": "cloned/kapua/console/module/device/src/main/java/org/eclipse/kapua/app/console/module/device/shared/service/GwtDeviceManagementService.java", "endpoints": {"api_summary": "The GwtDeviceManagementService API provides endpoints for managing devices, configurations, snapshots, and bundles. It also allows for executing commands on devices.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/deviceManagement/findDevicePackages", "/deviceManagement/installPackage", "/deviceManagement/getDownloadOperations", "/deviceManagement/uninstallPackage", "/deviceManagement/findDeviceConfigurations", "/deviceManagement/updateComponentConfiguration", "/deviceManagement/isStoreServiceEnabled", "/deviceManagement/getApplicationSettings", "/deviceManagement/setApplicationSettings", "/deviceManagement/findDeviceSnapshots", "/deviceManagement/rollbackDeviceSnapshot", "/deviceManagement/findBundles", "/deviceManagement/startBundle", "/deviceManagement/stopBundle", "/deviceManagement/executeCommand"]}}
{"file": "cloned/kapua/console/module/device/src/main/java/org/eclipse/kapua/app/console/module/device/shared/service/GwtDeviceConnectionService.java", "endpoints": {"api_summary": "The GwtDeviceConnectionService API provides methods for managing device connections in the Kapua application. It allows for querying, retrieving, and disconnecting device connections.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/deviceConnection", "/deviceConnection/<connectionId>", "/deviceConnection/<connectionId>/info"]}}
{"file": "cloned/kapua/console/module/device/src/main/java/org/eclipse/kapua/app/console/module/device/shared/service/GwtDeviceService.java", "endpoints": {"api_summary": "The GwtDeviceService API provides methods for managing devices in an account, including creating, updating, and deleting devices, as well as querying and retrieving device events and profiles.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/device", "/device/<deviceId>", "/device/<deviceId>/events", "/device/<deviceId>/profile"]}}
{"file": "cloned/kapua/console/module/device/src/main/java/org/eclipse/kapua/app/console/module/device/shared/service/GwtDeviceAssetService.java", "endpoints": {"api_summary": "The GwtDeviceAssetService API provides methods for managing device assets in the Kapua application. It allows for reading, writing, and retrieving device assets, as well as checking if the store service is enabled and getting or setting application settings.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/asset", "/asset/read", "/asset/write", "/asset/get", "/asset/isStoreServiceEnabled", "/asset/getApplicationSettings", "/asset/setApplicationSettings"]}}
{"file": "cloned/kapua/console/module/endpoint/src/main/java/org/eclipse/kapua/app/console/module/endpoint/client/EndpointAddDialog.java", "endpoints": {"api_summary": "This API allows users to create and manage endpoints for accessing resources in the system.", "methods": ["POST"], "paths": ["/endpoints"]}}
{"file": "cloned/kapua/console/module/endpoint/src/main/java/org/eclipse/kapua/app/console/module/endpoint/client/EndpointDeleteDialog.java", "endpoints": {"api_summary": "The EndpointDeleteDialog API allows users to delete endpoints from the console. It provides a simple and intuitive interface for users to select the endpoint they want to delete and confirm the deletion. The API also includes error handling and messaging to inform users of the outcome of their actions.", "methods": ["DELETE"], "paths": ["/console/endpoint/delete"]}}
{"file": "cloned/kapua/console/module/endpoint/src/main/java/org/eclipse/kapua/app/console/module/endpoint/client/EndpointFilterPanel.java", "endpoints": {"api_summary": "The EndpointFilterPanel is a filter panel for the EndpointGrid. It allows users to filter endpoints by schema, DNS, port, and security status.", "methods": ["GET", "POST"], "paths": ["/endpoints"]}}
{"file": "cloned/kapua/console/module/endpoint/src/main/java/org/eclipse/kapua/app/console/module/endpoint/client/EndpointGrid.java", "endpoints": {"api_summary": "The EndpointGrid class is a widget that displays a list of endpoints in a grid. It allows users to filter and sort the endpoints based on various criteria, and provides a toolbar with options to create, edit, and delete endpoints.", "methods": ["GET", "POST"], "paths": ["/endpoints", "/endpoints/<endpoint_id>"]}}
{"file": "cloned/kapua/console/module/endpoint/src/main/java/org/eclipse/kapua/app/console/module/endpoint/shared/service/GwtEndpointService.java", "endpoints": {"api_summary": "The GwtEndpointService API provides endpoints for creating, updating, finding, querying, deleting, and parsing endpoint models. It also provides a method for getting a list of grouped NVPairs for a given endpoint.", "methods": ["POST", "PUT", "GET", "DELETE"], "paths": ["/endpoint/create", "/endpoint/update", "/endpoint/find", "/endpoint/query", "/endpoint/delete", "/endpoint/parse"]}}
{"file": "cloned/kapua/console/module/tag/src/main/java/org/eclipse/kapua/app/console/module/tag/client/TagGrid.java", "endpoints": {"api_summary": "The TagGrid API allows users to view and manage tags in the console. It provides a grid interface for displaying and editing tags, as well as a toolbar for creating and deleting tags.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/tags", "/tags/<tag_id>"]}}
{"file": "cloned/kapua/console/module/tag/src/main/java/org/eclipse/kapua/app/console/module/tag/client/TagAddDialog.java", "endpoints": {"api_summary": "The TagAddDialog class is a part of the Eclipse Kapua application and provides a dialog for adding a new tag. It includes fields for the tag name and description, and a method for creating a new tag using the GwtTagService.", "methods": ["POST"], "paths": ["/tags"]}}
{"file": "cloned/kapua/console/module/tag/src/main/java/org/eclipse/kapua/app/console/module/tag/shared/service/GwtTagService.java", "endpoints": {"api_summary": "The GwtTagService API provides endpoints for creating, updating, finding, querying, deleting, and retrieving tag descriptions in the Kapua application.", "methods": ["POST", "PUT", "GET", "DELETE"], "paths": ["/tag", "/tag/<scopeShortId>/<roleShortId>", "/tag/query", "/tag/<scopeId>/<tagId>", "/tag/<scopeShortId>/<tagShortId>/description", "/tag/<scopeId>"]}}
{"file": "cloned/kapua/console/module/data/src/main/java/org/eclipse/kapua/app/console/module/data/client/ChannelTable.java", "endpoints": {"api_summary": "The ChannelTable class provides a table to display and manage channels for a selected device and asset in the console application.", "methods": ["GET", "POST"], "paths": ["/channelTable"]}}
{"file": "cloned/kapua/console/module/data/src/main/java/org/eclipse/kapua/app/console/module/data/client/AssetTable.java", "endpoints": {"api_summary": "The AssetTable class provides a table for displaying and selecting assets in the console application. It uses a GWT DataService to retrieve the assets and displays them in a grid. The class also provides methods for refreshing the table and adding selection changed listeners.", "methods": ["GET"], "paths": ["/assets"]}}
{"file": "cloned/kapua/console/module/data/src/main/java/org/eclipse/kapua/app/console/module/data/servlet/DataExporterServlet.java", "endpoints": {"api_summary": "The DataExporterServlet provides a REST API for exporting data from the Kapua data store. It supports CSV format and allows for filtering by topic, device, asset, and date range. The API also supports sorting and pagination.", "methods": ["GET"], "paths": ["/dataExporter"]}}
{"file": "cloned/kapua/console/module/data/src/main/java/org/eclipse/kapua/app/console/module/data/shared/service/GwtDataService.java", "endpoints": {"api_summary": "The GwtDataService API provides access to data stored in the Kapua system, including topics, devices, assets, and messages. It allows clients to retrieve and manipulate data, as well as to perform queries and searches.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/data/topics", "/data/devices", "/data/assets", "/data/messages"]}}
{"file": "cloned/kapua/console/module/about/src/main/java/org/eclipse/kapua/app/console/module/about/shared/service/GwtAboutService.java", "endpoints": {"api_summary": "The GwtAboutService API provides information about the application and its dependencies for front-end usage.", "methods": ["GET", "POST"], "paths": ["/about"]}}
{"file": "cloned/kapua/console/module/certificate/src/main/java/org/eclipse/kapua/app/console/module/certificate/shared/service/GwtCertificateInfoService.java", "endpoints": {"api_summary": "The GwtCertificateInfoService API provides a way to retrieve a subset of configuration values for front-end usage.", "methods": ["findAll", "isFindSupported"], "paths": ["/certificateInfo"]}}
{"file": "cloned/kapua/console/module/authorization/src/main/java/org/eclipse/kapua/app/console/module/authorization/server/GwtDomainRegistryServiceImpl.java", "endpoints": {"api_summary": "The GwtDomainRegistryServiceImpl provides a REST API for managing domains and their associated actions in the Kapua authorization system.", "methods": ["GET", "POST"], "paths": ["/domains", "/domains/<domain_name>/actions"]}}
{"file": "cloned/kapua/console/module/authorization/src/main/java/org/eclipse/kapua/app/console/module/authorization/server/GwtAccessRoleServiceImpl.java", "endpoints": {"api_summary": "The GwtAccessRoleServiceImpl class provides a REST API for managing access roles in the Kapua system. It allows for creating, deleting, and querying access roles, as well as retrieving information about the roles.", "methods": ["GET", "POST", "DELETE"], "paths": ["/authorization/access/create", "/authorization/access/delete", "/authorization/access/findByUserId"]}}
{"file": "cloned/kapua/console/module/authorization/src/main/java/org/eclipse/kapua/app/console/module/authorization/server/GwtAccessInfoServiceImpl.java", "endpoints": {"api_summary": "The GwtAccessInfoServiceImpl class provides a REST API for managing access information in the Kapua system. It allows for creating, deleting, and finding access information by user ID.", "methods": ["POST", "DELETE", "GET"], "paths": ["/authorization/access/create", "/authorization/access/delete", "/authorization/access/findByUserId"]}}
{"file": "cloned/kapua/console/module/authorization/src/main/java/org/eclipse/kapua/app/console/module/authorization/server/GwtAccessPermissionServiceImpl.java", "endpoints": {"api_summary": "The GwtAccessPermissionServiceImpl class provides a REST API for managing access permissions in the Kapua system. It allows users to create, delete, and query access permissions, as well as retrieve information about existing access permissions.", "methods": ["GET", "POST", "DELETE"], "paths": ["/access-permissions", "/access-permissions/<access-permission-id>"]}}
{"file": "cloned/kapua/console/module/authorization/src/main/java/org/eclipse/kapua/app/console/module/authorization/client/role/RoleGrid.java", "endpoints": {"api_summary": "The RoleGrid API allows users to view and manage roles in the system. It provides a grid interface for listing and editing roles, as well as a toolbar for creating and deleting roles.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/roles", "/roles/<role_id>"]}}
{"file": "cloned/kapua/console/module/authorization/src/main/java/org/eclipse/kapua/app/console/module/authorization/client/role/RolePermissionGrid.java", "endpoints": {"api_summary": "This API defines a grid for displaying and managing role permissions in the console.", "methods": ["GET", "POST"], "paths": ["/roles/<role_id>/permissions"]}}
{"file": "cloned/kapua/console/module/authorization/src/main/java/org/eclipse/kapua/app/console/module/authorization/client/role/dialog/RoleAddDialog.java", "endpoints": {"api_summary": "The RoleAddDialog class is a part of the authorization module in the Eclipse Kapua application. It allows users to create new roles and assign them to users. The class defines a form with fields for the role name and description, and it validates the input before submitting the form to the server.", "methods": ["POST"], "paths": ["/roles"]}}
{"file": "cloned/kapua/console/module/authorization/src/main/java/org/eclipse/kapua/app/console/module/authorization/client/role/dialog/RoleEditDialog.java", "endpoints": {"api_summary": "The RoleEditDialog class is a part of the authorization module in the Eclipse Kapua application. It allows users to edit the name and description of a role in the system.", "methods": ["GET", "POST"], "paths": ["/roles/<role_id>", "/roles/<role_id>/edit"]}}
{"file": "cloned/kapua/console/module/authorization/src/main/java/org/eclipse/kapua/app/console/module/authorization/client/tabs/permission/UserTabPermissionGrid.java", "endpoints": {"api_summary": "This API defines a grid for displaying permissions for a specific user. It allows users to view and manage permissions for a given user.", "methods": ["GET", "POST"], "paths": ["/users/<userId>/permissions"]}}
{"file": "cloned/kapua/console/module/authorization/src/main/java/org/eclipse/kapua/app/console/module/authorization/client/tabs/role/UserTabAccessRoleGrid.java", "endpoints": {"api_summary": "This API provides a grid for displaying and managing access roles for a user in the console.", "methods": ["GET", "POST"], "paths": ["/users/<userId>/roles"]}}
{"file": "cloned/kapua/console/module/authorization/src/main/java/org/eclipse/kapua/app/console/module/authorization/client/tabs/role/AccessRoleAddDialog.java", "endpoints": {"api_summary": "This API defines a dialog for adding a new role to a user in the system.", "methods": ["GET", "POST"], "paths": ["/users/<built-in function id>/roles"]}}
{"file": "cloned/kapua/console/module/authorization/src/main/java/org/eclipse/kapua/app/console/module/authorization/client/group/GroupGrid.java", "endpoints": {"api_summary": "The GroupGrid API allows users to view and manage groups in the system. It provides a grid interface for listing and editing groups, as well as a toolbar for creating and deleting groups.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/groups", "/groups/<group_id>"]}}
{"file": "cloned/kapua/console/module/authorization/src/main/java/org/eclipse/kapua/app/console/module/authorization/client/group/GroupAddDialog.java", "endpoints": {"api_summary": "The GroupAddDialog class is a part of the authorization module in the Eclipse Kapua application. It allows users to create new groups and add them to the system.", "methods": ["POST"], "paths": ["/groups"]}}
{"file": "cloned/kapua/console/module/authorization/src/main/java/org/eclipse/kapua/app/console/module/authorization/shared/service/GwtDomainRegistryService.java", "endpoints": {"api_summary": "The GwtDomainRegistryService API provides methods for retrieving information about domains and their associated actions.", "methods": ["GET", "POST"], "paths": ["/domain", "/domain/actions"]}}
{"file": "cloned/kapua/console/module/authorization/src/main/java/org/eclipse/kapua/app/console/module/authorization/shared/service/GwtAccessInfoService.java", "endpoints": {"api_summary": "The GwtAccessInfoService API provides methods for creating, deleting, and finding access information for users in a specific scope.", "methods": ["POST", "DELETE", "GET"], "paths": ["/accessinfo/create", "/accessinfo/delete", "/accessinfo/findByUserIdOrCreate"]}}
{"file": "cloned/kapua/console/module/authorization/src/main/java/org/eclipse/kapua/app/console/module/authorization/shared/service/GwtAccessRoleService.java", "endpoints": {"api_summary": "The GwtAccessRoleService API provides methods for managing access roles in the Kapua application. It allows for the creation, deletion, and retrieval of access roles, as well as finding access roles by user ID.", "methods": ["POST", "DELETE", "GET"], "paths": ["/accessrole", "/accessrole/<scopeShortId>/<accessRoleShortId>", "/accessrole/<scopeShortId>/<userShortId>"]}}
{"file": "cloned/kapua/console/module/authorization/src/main/java/org/eclipse/kapua/app/console/module/authorization/shared/service/GwtAccessPermissionService.java", "endpoints": {"api_summary": "The GwtAccessPermissionService API provides methods for creating, finding, and deleting access permissions in the Kapua application.", "methods": ["POST", "GET", "DELETE"], "paths": ["/accesspermission", "/accesspermission/findByUserId", "/accesspermission/delete"]}}
{"file": "cloned/kapua/console/module/authorization/src/main/java/org/eclipse/kapua/app/console/module/authorization/shared/service/GwtGroupService.java", "endpoints": {"api_summary": "The GwtGroupService API provides endpoints for creating, updating, querying, and deleting groups, as well as retrieving group descriptions and finding all groups for a given scope.", "methods": ["POST", "PUT", "GET", "DELETE"], "paths": ["/group", "/group/<scopeShortId>/<roleShortId>", "/group/query", "/group/<scopeId>/<groupId>", "/group/<scopeShortId>/<groupShortId>"]}}
{"file": "cloned/kapua/console/module/authorization/src/main/java/org/eclipse/kapua/app/console/module/authorization/shared/service/GwtRoleService.java", "endpoints": {"api_summary": "The GwtRoleService API provides endpoints for managing roles and permissions in the Kapua application. It allows for creating, updating, finding, and deleting roles, as well as querying and retrieving permissions for a given role.", "methods": ["POST", "PUT", "GET", "DELETE"], "paths": ["/role", "/role/<roleShortId>", "/role/<scopeShortId>/<roleShortId>/permissions"]}}
{"file": "cloned/kapua/service/security/test-steps/src/main/java/org/eclipse/kapua/service/authorization/steps/AuthorizationServiceSteps.java", "endpoints": {"api_summary": "This code defines a REST API for managing authorization in a system.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/authorization/roles", "/authorization/roles/{roleId}", "/authorization/roles/{roleId}/permissions", "/authorization/roles/{roleId}/permissions/{permissionId}", "/authorization/groups", "/authorization/groups/{groupId}", "/authorization/groups/{groupId}/roles", "/authorization/groups/{groupId}/roles/{roleId}", "/authorization/users", "/authorization/users/{userId}", "/authorization/users/{userId}/roles", "/authorization/users/{userId}/roles/{roleId}", "/authorization/permissions", "/authorization/permissions/{permissionId}", "/authorization/access", "/authorization/access/{accessId}", "/authorization/access/{accessId}/roles", "/authorization/access/{accessId}/roles/{roleId}", "/authorization/access/{accessId}/permissions", "/authorization/access/{accessId}/permissions/{permissionId}"]}}
{"file": "cloned/kapua/service/security/authentication/api/src/main/java/org/eclipse/kapua/service/authentication/AuthenticationService.java", "endpoints": {"api_summary": "The AuthenticationService API provides endpoints for managing user authentication and access tokens. It allows users to login, logout, and refresh their access tokens.", "methods": ["POST", "GET", "PUT", "DELETE"], "paths": ["/login", "/authenticate", "/verifyCredentials", "/isAuthenticated", "/getLoginInfo", "/logout", "/findAccessToken", "/refreshAccessToken", "/findRefreshableAccessToken"]}}
{"file": "cloned/kapua/service/security/authentication/api/src/main/java/org/eclipse/kapua/service/authentication/user/UserCredentialsService.java", "endpoints": {"api_summary": "The UserCredentialsService API provides endpoints for changing and resetting passwords for authenticated users.", "methods": ["POST"], "paths": ["/users/<built-in function id>/changePassword", "/users/<built-in function id>/resetPassword"]}}
{"file": "cloned/kapua/service/security/authentication/api/src/main/java/org/eclipse/kapua/service/authentication/credential/CredentialService.java", "endpoints": {"api_summary": "The CredentialService API provides endpoints for managing credentials, including creating, updating, and retrieving credentials, as well as resetting passwords and getting available credential types.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/credentials", "/credentials/<credential_id>", "/credentials/reset_password", "/credentials/available_types"]}}
{"file": "cloned/kapua/service/security/authentication/api/src/main/java/org/eclipse/kapua/service/authentication/credential/CredentialRepository.java", "endpoints": {"api_summary": "The CredentialRepository API provides a way to manage credentials for users in the system. It allows for creating, reading, updating, and deleting credentials, as well as retrieving credentials for a specific user.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/credentials", "/credentials/<credential_id>", "/credentials/user/<user_id>"]}}
{"file": "cloned/kapua/service/security/authentication/api/src/main/java/org/eclipse/kapua/service/authentication/credential/mfa/ScratchCodeService.java", "endpoints": {"api_summary": "The ScratchCodeService API provides endpoints for managing scratch codes for multi-factor authentication (MFA) options. It allows for finding scratch codes by MFA option ID and deleting scratch codes by scratch code ID.", "methods": ["GET", "DELETE"], "paths": ["/scratch-codes/find-by-mfa-option-id", "/scratch-codes/delete"]}}
{"file": "cloned/kapua/service/security/authentication/api/src/main/java/org/eclipse/kapua/service/authentication/token/AccessTokenService.java", "endpoints": {"api_summary": "The AccessTokenService API provides endpoints for managing access tokens, allowing users to authenticate and access protected resources.", "methods": ["GET", "POST", "DELETE"], "paths": ["/access-tokens", "/access-tokens/<tokenId>", "/access-tokens/<scopeId>/<userId>"]}}
{"file": "cloned/kapua/service/security/certificate/internal/src/main/java/org/eclipse/kapua/service/certificate/internal/CertificateServiceImpl.java", "endpoints": {"api_summary": "This API provides a single endpoint for creating a JWT certificate for authentication purposes.", "methods": ["POST"], "paths": ["/certificate/create"]}}
{"file": "cloned/kapua/service/security/shiro/src/main/java/org/eclipse/kapua/service/authentication/user/shiro/UserCredentialsServiceImpl.java", "endpoints": {"api_summary": "The UserCredentialsServiceImpl class provides an implementation of the UserCredentialsService interface, which allows for changing and resetting passwords for users in the system.", "methods": ["GET", "POST"], "paths": ["/users/<built-in function id>", "/users/<built-in function id>/password"]}}
{"file": "cloned/kapua/service/security/shiro/src/main/java/org/eclipse/kapua/service/authorization/domain/shiro/DomainRegistryServiceImpl.java", "endpoints": {"api_summary": "The DomainRegistryServiceImpl class provides an implementation of the DomainRegistryService interface, which allows for the creation, deletion, and retrieval of domains. It also provides a method for querying domains and counting the number of domains that match a given query.", "methods": ["GET", "POST", "DELETE"], "paths": ["/domains", "/domains/<domainId>", "/domains/query"]}}
{"file": "cloned/kapua/service/security/shiro/src/main/java/org/eclipse/kapua/service/authorization/group/shiro/GroupServiceImpl.java", "endpoints": {"api_summary": "The GroupServiceImpl class provides a REST API for managing groups in the system. It allows for creating, updating, deleting, and querying groups, as well as handling events from the account service.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/groups", "/groups/<group_id>", "/groups/query", "/groups/count"]}}
{"file": "cloned/kapua/service/security/shiro/src/main/java/org/eclipse/kapua/service/authorization/shiro/KapuaAuthorizingRealm.java", "endpoints": {"api_summary": "This API is responsible for managing user access and permissions for the Kapua application.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users", "/users/<built-in function id>", "/access", "/access/<built-in function id>", "/roles", "/roles/<built-in function id>", "/permissions", "/permissions/<built-in function id>"]}}
{"file": "cloned/kapua/service/security/authorization/api/src/main/java/org/eclipse/kapua/service/authorization/role/RoleService.java", "endpoints": {"api_summary": "The RoleService API provides endpoints for managing roles in a system. It allows for creating, updating, finding, and deleting roles, as well as retrieving the IDs of users who are assigned to a given role.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/roles", "/roles/<roleId>", "/roles/<roleId>/users"]}}
{"file": "cloned/kapua/service/scheduler/api/src/main/java/org/eclipse/kapua/service/scheduler/trigger/fired/FiredTriggerService.java", "endpoints": {"api_summary": "The FiredTriggerService API allows clients to query and retrieve fired triggers from the Kapua scheduler.", "methods": ["GET"], "paths": ["/fired-triggers"]}}
{"file": "cloned/kapua/service/datastore/api/src/main/java/org/eclipse/kapua/service/datastore/MetricInfoFactory.java", "endpoints": {"api_summary": "The MetricInfoFactory API provides a way to create and manage MetricInfo objects, which represent metrics in the system. It allows for querying and retrieving MetricInfo objects based on various criteria, as well as creating and updating them.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/metricinfo", "/metricinfo/<metric_id>", "/metricinfo/query"]}}
{"file": "cloned/kapua/service/datastore/api/src/main/java/org/eclipse/kapua/service/datastore/ChannelInfoFactory.java", "endpoints": {"api_summary": "The ChannelInfoFactory API provides a way to create and manage ChannelInfo objects, which represent a channel of communication between two or more devices. It allows for querying and retrieving ChannelInfo objects based on various criteria, such as the channel's name, ID, or other attributes.", "methods": ["GET", "POST"], "paths": ["/org/eclipse/kapua/service/datastore/ChannelInfoFactory"]}}
{"file": "cloned/kapua/service/datastore/api/src/main/java/org/eclipse/kapua/service/datastore/ChannelInfoRegistryService.java", "endpoints": {"api_summary": "The ChannelInfoRegistryService API provides a way to manage and retrieve information about channels in the Kapua system. It allows for the creation, retrieval, update, and deletion of ChannelInfo objects, as well as querying for specific channels based on criteria.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/channelInfo", "/channelInfo/<id>", "/channelInfo/query"]}}
{"file": "cloned/kapua/service/datastore/api/src/main/java/org/eclipse/kapua/service/datastore/ClientInfoRegistryService.java", "endpoints": {"api_summary": "The ClientInfoRegistryService API provides a way to manage ClientInfo objects, which represent information about clients in the system. It allows for creating, reading, updating, and deleting ClientInfo objects, as well as querying for specific ClientInfo objects based on criteria.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/client-info", "/client-info/<client-info-id>"]}}
{"file": "cloned/kapua/service/datastore/api/src/main/java/org/eclipse/kapua/service/datastore/MetricInfoRegistryService.java", "endpoints": {"api_summary": "The MetricInfoRegistryService API provides a way to manage metric information in the Kapua system. It allows for the creation, retrieval, update, and deletion of metric information, as well as querying for specific metric information.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/metric-info", "/metric-info/<metric-id>", "/metric-info/query"]}}
{"file": "cloned/kapua/service/job/internal/src/main/java/org/eclipse/kapua/service/job/targets/internal/JobTargetServiceImpl.java", "endpoints": {"api_summary": "The JobTargetServiceImpl class provides an implementation of the JobTargetService interface, which defines methods for creating, finding, querying, counting, updating, and deleting job targets. The class uses the JobTargetRepository to interact with the database and the AuthorizationService to check permissions.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/jobTargets", "/jobTargets/<jobTargetId>"]}}
{"file": "cloned/kapua/service/job/internal/src/main/java/org/eclipse/kapua/service/job/execution/internal/JobExecutionQueryImpl.java", "endpoints": {"api_summary": "The JobExecutionQueryImpl class provides an implementation of the JobExecutionQuery interface, which is used to query job executions in the Kapua system. It allows sorting by the startedOn field in descending order by default.", "methods": ["GET"], "paths": ["/jobs/executions"]}}
{"file": "cloned/kapua/service/job/internal/src/main/java/org/eclipse/kapua/service/job/execution/internal/JobExecutionServiceImpl.java", "endpoints": {"api_summary": "The JobExecutionServiceImpl class provides an implementation of the JobExecutionService interface, which allows for the creation, update, and retrieval of job executions. It also provides methods for querying and counting job executions, as well as deleting them.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/jobs/executions", "/jobs/executions/<job_execution_id>", "/jobs/executions/query", "/jobs/executions/count"]}}
{"file": "cloned/kapua/service/job/api/src/main/java/org/eclipse/kapua/service/job/JobService.java", "endpoints": {"api_summary": "The JobService API provides methods to manage Job objects, including creating, updating, finding, listing, and deleting Jobs.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/jobs", "/jobs/<jobId>", "/jobs/<jobId>/forced"]}}
{"file": "cloned/kapua/service/job/api/src/main/java/org/eclipse/kapua/service/job/step/JobStepService.java", "endpoints": {"api_summary": "The JobStepService API provides methods to manage JobStep objects, including creating, updating, finding, listing, and deleting Jobs.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/jobsteps", "/jobsteps/<jobstep_id>", "/jobsteps/<jobstep_id>/properties"]}}
{"file": "cloned/kapua/service/job/api/src/main/java/org/eclipse/kapua/service/job/step/definition/JobStepDefinitionService.java", "endpoints": {"api_summary": "The JobStepDefinitionService API provides methods to manage JobStepDefinition objects, including creating, updating, finding, listing, and deleting Jobs.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/jobs", "/jobs/<job_id>", "/jobs/<job_id>/steps", "/jobs/<job_id>/steps/<step_id>"]}}
{"file": "cloned/kapua/service/job/api/src/main/java/org/eclipse/kapua/service/job/targets/JobTargetService.java", "endpoints": {"api_summary": "The JobTargetService API provides methods to manage JobTarget objects, including creating, updating, finding, listing, and deleting Jobs.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/jobtargets", "/jobtargets/<id>", "/jobtargets/query"]}}
{"file": "cloned/kapua/service/job/api/src/main/java/org/eclipse/kapua/service/job/execution/JobExecutionService.java", "endpoints": {"api_summary": "The JobExecutionService API provides methods to manage JobExecution objects, including creating, updating, finding, listing, and deleting Jobs.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/jobs", "/jobs/<jobId>", "/jobs/<jobId>/executions", "/jobs/<jobId>/executions/<executionId>"]}}
{"file": "cloned/kapua/service/account/api/src/main/java/org/eclipse/kapua/service/account/AccountService.java", "endpoints": {"api_summary": "The AccountService API provides endpoints for managing accounts, including creating, updating, and querying accounts. It also provides endpoints for finding direct children accounts of a given account.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/accounts", "/accounts/<accountId>", "/accounts/<accountId>/children"]}}
{"file": "cloned/kapua/service/user/internal/src/main/java/org/eclipse/kapua/service/user/internal/UserServiceImpl.java", "endpoints": {"api_summary": "This API provides methods for managing users in the system.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users", "/users/{id}", "/users/query"]}}
{"file": "cloned/kapua/service/user/api/src/main/java/org/eclipse/kapua/service/user/UserService.java", "endpoints": {"api_summary": "The UserService API provides endpoints for managing users under an account. It includes endpoints for creating, updating, finding, listing, and deleting users.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/users", "/users/<built-in function id>", "/users/<username>", "/users/externalId", "/users/externalUsername"]}}
{"file": "cloned/kapua/service/device/registry/internal/src/main/java/org/eclipse/kapua/service/device/registry/event/internal/DeviceEventServiceImpl.java", "endpoints": {"api_summary": "The DeviceEventServiceImpl class provides a REST API for managing device events in the Kapua system. It allows for creating, retrieving, updating, and deleting device events, as well as querying and counting device events.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/device-events", "/device-events/<device-event-id>"]}}
{"file": "cloned/kapua/service/device/registry/internal/src/main/java/org/eclipse/kapua/service/device/registry/event/internal/DeviceEventImpl.java", "endpoints": {"api_summary": "The DeviceEventImpl class provides a way to represent a device event in the Kapua system. It includes information such as the device ID, the event message, and the response code.", "methods": ["GET", "POST"], "paths": ["/device/event"]}}
{"file": "cloned/kapua/service/device/registry/api/src/main/java/org/eclipse/kapua/service/device/registry/DeviceRegistryService.java", "endpoints": {"api_summary": "The DeviceRegistryService API provides a way to manage devices in a registry. It allows for querying, creating, updating, and deleting devices, as well as finding devices by their client ID.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/devices", "/devices/<device_id>", "/devices/clientId/<client_id>"]}}
{"file": "cloned/kapua/service/device/call/kura/src/main/java/org/eclipse/kapua/service/device/call/kura/model/deploy/PackageMetrics.java", "endpoints": {"api_summary": "The DEPLOY API provides endpoints for managing packages on a device, including downloading, installing, and uninstalling packages.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/deploy/download", "/deploy/install", "/deploy/uninstall"]}}
{"file": "cloned/kapua/service/device/call/kura/src/main/java/org/eclipse/kapua/service/device/call/message/kura/event/configuration/KuraConfigurationEventMessage.java", "endpoints": {"api_summary": "The KuraConfigurationEventMessage is a message sent by a device to notify the platform about a KuraDeviceConfiguration update.", "methods": ["POST"], "paths": ["/kura/device/configuration"]}}
{"file": "cloned/kapua/service/device/call/kura/src/main/java/org/eclipse/kapua/service/device/call/message/kura/lifecycle/KuraAppsChannel.java", "endpoints": {"api_summary": "The KuraAppsChannel API provides a way to manage the lifecycle of Kura apps, including installation, deployment, and removal. It allows for the creation, update, and deletion of app instances, as well as the retrieval of app metadata and the execution of app commands.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/kura/apps", "/kura/apps/<app_id>", "/kura/apps/<app_id>/commands/<command_id>"]}}
{"file": "cloned/kapua/service/device/call/kura/src/main/java/org/eclipse/kapua/service/device/call/message/kura/app/notification/KuraNotifyMessage.java", "endpoints": {"api_summary": "The KuraNotifyMessage API allows devices to notify the platform about the progress of DeviceManagementOperations. It provides a way for devices to send notifications to the platform, which can be used to track the status of operations and provide real-time updates to the user.", "methods": ["POST"], "paths": ["/kura/notify"]}}
{"file": "cloned/kapua/service/device/call/api/src/main/java/org/eclipse/kapua/service/device/call/DeviceCall.java", "endpoints": {"api_summary": "The DeviceCall interface defines a way to send a request message and wait for a response message. It provides methods for performing different types of requests, such as read, create, write, delete, execute, options, submit, and cancel. The interface also provides a method to get the base message class.", "methods": ["GET", "POST", "PUT", "DELETE", "OPTIONS", "SUBMIT", "CANCEL"], "paths": ["/device/call/read", "/device/call/create", "/device/call/write", "/device/call/delete", "/device/call/execute", "/device/call/options", "/device/call/submit", "/device/call/cancel"]}}
{"file": "cloned/kapua/service/device/management/configuration/internal/src/main/java/org/eclipse/kapua/service/device/management/configuration/message/internal/ConfigurationResponsePayload.java", "endpoints": {"api_summary": "The ConfigurationResponsePayload class provides a response payload for the Device Configuration service. It allows reading and writing the Device Configuration from and to the payload body.", "methods": ["GET", "POST"], "paths": ["/device/configuration"]}}
{"file": "cloned/kapua/service/device/management/configuration/internal/src/main/java/org/eclipse/kapua/service/device/management/snapshot/internal/DeviceSnapshotManagementServiceImpl.java", "endpoints": {"api_summary": "The DeviceSnapshotManagementServiceImpl class provides methods for managing device snapshots, including getting and rolling back to a specific snapshot.", "methods": ["GET", "POST"], "paths": ["/snapshots", "/snapshots/<snapshotId>"]}}
{"file": "cloned/kapua/service/device/management/request/internal/src/main/java/org/eclipse/kapua/service/device/management/request/internal/DeviceRequestManagementServiceImpl.java", "endpoints": {"api_summary": "The DeviceRequestManagementServiceImpl class provides a REST API for managing device requests. It allows for the execution of generic requests, which can be used to perform various actions on devices, such as reading or writing device data.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/device/request", "/device/request/<request_id>"]}}
{"file": "cloned/kapua/service/device/management/inventory/internal/src/main/java/org/eclipse/kapua/service/device/management/inventory/internal/message/InventoryResponsePayload.java", "endpoints": {"api_summary": "This API provides endpoints for managing device inventory, including retrieving and updating device information, managing device bundles, and managing device packages.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/device-inventory", "/device-inventory/<device-id>", "/device-inventory/bundles", "/device-inventory/bundles/<bundle-id>", "/device-inventory/packages", "/device-inventory/packages/<package-id>"]}}
{"file": "cloned/kapua/service/device/management/inventory/api/src/main/java/org/eclipse/kapua/service/device/management/inventory/DeviceInventoryManagementService.java", "endpoints": {"api_summary": "The DeviceInventoryManagementService API provides endpoints for managing device inventory, including retrieving inventory information, bundles, containers, and packages.", "methods": ["GET", "POST"], "paths": ["/inventory", "/bundles", "/containers", "/system-packages", "/deployment-packages"]}}
{"file": "cloned/kapua/service/device/management/registry/internal/src/main/java/org/eclipse/kapua/service/device/management/registry/manager/internal/DeviceManagementRegistryManagerServiceImpl.java", "endpoints": {"api_summary": "The DeviceManagementRegistryManagerServiceImpl class provides methods for managing device management operations and notifications. It includes methods for processing operation notifications, storing management notifications, and closing device management operations.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/device-management/registry/manager/operation", "/device-management/registry/manager/notification"]}}
{"file": "cloned/kapua/service/device/management/registry/internal/src/main/java/org/eclipse/kapua/service/device/management/registry/operation/notification/internal/ManagementOperationNotificationImpl.java", "endpoints": {"api_summary": "The Device Management Operation Notification API allows clients to receive notifications about the status of device management operations.", "methods": ["GET", "POST"], "paths": ["/device-management/operation-notification"]}}
{"file": "cloned/kapua/service/device/management/job/api/src/main/java/org/eclipse/kapua/service/device/management/job/JobDeviceManagementOperationService.java", "endpoints": {"api_summary": "The JobDeviceManagementOperationService API exposes endpoints to manage JobDeviceManagementOperation objects. It allows querying for JobDeviceManagementOperation objects using a KapuaQuery object.", "methods": ["GET"], "paths": ["/jobDeviceManagementOperation"]}}
{"file": "cloned/kapua/service/device/management/command/internal/src/main/java/org/eclipse/kapua/service/device/management/command/internal/DeviceCommandManagementServiceImpl.java", "endpoints": {"api_summary": "The DeviceCommandManagementServiceImpl class provides a way to execute commands on a device. It allows you to send a command request to a device and receive a response with the output of the command.", "methods": ["POST"], "paths": ["/device/command"]}}
{"file": "cloned/kapua/service/device/management/keystore/internal/src/main/java/org/eclipse/kapua/service/device/management/keystore/internal/message/request/KeystoreRequestPayload.java", "endpoints": {"api_summary": "The KeystoreRequestPayload class provides a payload implementation for the DeviceKeystore API. It allows for querying, creating, updating, and deleting DeviceKeystore items, as well as retrieving DeviceKeystore certificates and keypairs.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/device/management/keystore/items", "/device/management/keystore/certificates", "/device/management/keystore/keypairs"]}}
{"file": "cloned/kapua/service/device/management/keystore/internal/src/main/java/org/eclipse/kapua/service/device/management/keystore/internal/message/response/KeystoreResponseChannel.java", "endpoints": {"api_summary": "The KeystoreResponseChannel API allows clients to retrieve information about the device keystore, such as the keystore's name and version.", "methods": ["GET"], "paths": ["/device/management/keystore"]}}
{"file": "cloned/kapua/service/device/management/keystore/internal/src/main/java/org/eclipse/kapua/service/device/management/keystore/internal/message/response/KeystoreResponsePayload.java", "endpoints": {"api_summary": "The KeystoreResponsePayload class provides a response payload for the Device Management Service, specifically for keystore-related operations. It allows for reading and writing keystore data, as well as retrieving CSRs (Certificate Signing Requests).", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/keystores", "/keystores/<keystore_id>", "/keystores/<keystore_id>/items", "/keystores/<keystore_id>/items/<item_id>", "/keystores/<keystore_id>/csr"]}}
{"file": "cloned/kapua/service/device/management/packages/internal/src/main/java/org/eclipse/kapua/service/device/management/packages/message/internal/PackageResponsePayload.java", "endpoints": {"api_summary": "This API is responsible for managing device packages, including installing, uninstalling, and downloading packages.", "methods": ["GET", "POST", "PUT", "DELETE"], "paths": ["/device/management/packages", "/device/management/packages/<package_id>", "/device/management/packages/download"]}}
